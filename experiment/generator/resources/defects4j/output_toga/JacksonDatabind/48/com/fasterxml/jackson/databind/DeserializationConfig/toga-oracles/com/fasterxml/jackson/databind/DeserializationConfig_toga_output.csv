project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    // Undeclared exception!
    try {
        deserializationConfig0.introspectForCreation((JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with((HandlerInstantiator) null);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ArrayNode arrayNode0 = objectMapper0.createArrayNode();
    assertFalse(arrayNode0.isFloat());
}",0,assertFalse(arrayNode0.isFloat())
project,0,test033,"public void test033() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    Locale locale0 = Locale.KOREA;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(locale0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,
project,0,test034,"public void test034() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    Locale locale0 = Locale.KOREA;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(locale0);
    assertNotSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test045,"public void test045() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    assertNotSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test046,"public void test046() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test079,"public void test079() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<ObjectReader> class0 = ObjectReader.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    ObjectReader objectReader1 = objectReader0.with((JsonNodeFactory) null);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test0810,"public void test0810() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    HashMap<ObjectIdResolver, SettableBeanProperty> hashMap0 = new HashMap<ObjectIdResolver, SettableBeanProperty>();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withAttributes(hashMap0);
    assertNotSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test0811,"public void test0811() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    HashMap<ObjectIdResolver, SettableBeanProperty> hashMap0 = new HashMap<ObjectIdResolver, SettableBeanProperty>();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withAttributes(hashMap0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test0912,"public void test0912() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    // Undeclared exception!
    try {
        deserializationConfig0.introspectForBuilder((JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}",0,
project,0,test1114,"public void test1114() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withAppendedAnnotationIntrospector(annotationIntrospector0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,
project,0,test1115,"public void test1115() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withAppendedAnnotationIntrospector(annotationIntrospector0);
    assertNotSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test1216,"public void test1216() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withInsertedAnnotationIntrospector((AnnotationIntrospector) null);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test1317,"public void test1317() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test1519,"public void test1519() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with((ClassIntrospector) basicClassIntrospector0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test1520,"public void test1520() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with((ClassIntrospector) basicClassIntrospector0);
    assertNotSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test1621,"public void test1621() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    LinkedNode<DeserializationProblemHandler> linkedNode0 = deserializationConfig0.getProblemHandlers();
    assertNull(linkedNode0);
}",0,assertNotNull(linkedNode0)
project,0,test1722,"public void test1722() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with((PropertyNamingStrategy) null);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test1823,"public void test1823() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    VisibilityChecker<?> visibilityChecker0 = deserializationConfig0.getDefaultVisibilityChecker();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(visibilityChecker0);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test1924,"public void test1924() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, (SimpleMixInResolver) null);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test2025,"public void test2025() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.copy();
    assertNotSame(objectMapper0, objectMapper1);
}",0,
project,0,test2126,"public void test2126() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with((Base64Variant) null);
    assertNotSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test2127,"public void test2127() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with((Base64Variant) null);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test2228,"public void test2228() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(dateFormat0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test2229,"public void test2229() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(dateFormat0);
    assertNotSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test2330,"public void test2330() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(typeFactory0);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test2431,"public void test2431() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    BaseSettings baseSettings1 = deserializationConfig0.getBaseSettings();
    assertSame(baseSettings1, baseSettings0);
}",0,
project,0,test2532,"public void test2532() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with((AnnotationIntrospector) null);
    assertNotSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test2533,"public void test2533() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with((AnnotationIntrospector) null);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test2634,"public void test2634() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    TimeZone timeZone0 = TimeZone.getDefault();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(timeZone0);
    assertNotSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test2635,"public void test2635() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    TimeZone timeZone0 = TimeZone.getDefault();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(timeZone0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test2838,"public void test2838() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
    MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
    mapperFeatureArray0[0] = mapperFeature0;
    MapperFeature mapperFeature1 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
    mapperFeatureArray0[1] = mapperFeature1;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test2839,"public void test2839() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
    MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
    mapperFeatureArray0[0] = mapperFeature0;
    MapperFeature mapperFeature1 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
    mapperFeatureArray0[1] = mapperFeature1;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test2840,"public void test2840() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
    MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
    mapperFeatureArray0[0] = mapperFeature0;
    MapperFeature mapperFeature1 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
    mapperFeatureArray0[1] = mapperFeature1;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
    assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
}",0,assertTrue(deserializationConfig1.shouldSortPropertiesAlphabetically())
project,0,test3143,"public void test3143() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
    assertEquals(0, objectMapper1.mixInCount());
}",0,
project,0,test3244,"public void test3244() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with((SubtypeResolver) stdSubtypeResolver0);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test3345,"public void test3345() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    PropertyName propertyName0 = PropertyName.construct(""JSON"", ""JSON"");
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName((PropertyName) null);
    assertFalse(deserializationConfig2.useRootWrapping());
}",0,assertFalse(deserializationConfig2.useRootWrapping())
project,0,test3346,"public void test3346() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    PropertyName propertyName0 = PropertyName.construct(""JSON"", ""JSON"");
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName((PropertyName) null);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test3347,"public void test3347() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    PropertyName propertyName0 = PropertyName.construct(""JSON"", ""JSON"");
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName((PropertyName) null);
    assertTrue(deserializationConfig1.useRootWrapping());
}",0,assertFalse(deserializationConfig1.useRootWrapping())
project,0,test3448,"public void test3448() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName((PropertyName) null);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test3549,"public void test3549() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    PropertyName propertyName0 = PropertyName.construct(""JSON"", ""JSON"");
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName(propertyName0);
    assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig2.getDeserializationFeatures())"
project,0,test3550,"public void test3550() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    PropertyName propertyName0 = PropertyName.construct(""JSON"", ""JSON"");
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName(propertyName0);
    assertTrue(deserializationConfig2.useRootWrapping());
}",0,assertFalse(deserializationConfig2.useRootWrapping())
project,0,test3651,"public void test3651() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    Class<Object> class0 = Object.class;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withView(class0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withView(class0);
    assertNotSame(deserializationConfig2, deserializationConfig0);
}",0,
project,0,test3652,"public void test3652() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    Class<Object> class0 = Object.class;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withView(class0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withView(class0);
    assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig2.getDeserializationFeatures())"
project,0,test3753,"public void test3753() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutAttribute((Object) null);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test3854,"public void test3854() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
    assertEquals(15477024, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(1, deserializationConfig1.getDeserializationFeatures())"
project,0,test3855,"public void test3855() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test3856,"public void test3856() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
    assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
}",0,assertTrue(deserializationConfig1.shouldSortPropertiesAlphabetically())
project,0,test3957,"public void test3957() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test4058,"public void test4058() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test4059,"public void test4059() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
    assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
}",0,assertTrue(deserializationConfig1.shouldSortPropertiesAlphabetically())
project,0,test4060,"public void test4060() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
    assertEquals(15215392, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(1, deserializationConfig1.getDeserializationFeatures())"
project,0,test4161,"public void test4161() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
    deserializationFeatureArray0[0] = deserializationFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test4262,"public void test4262() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
    deserializationFeatureArray0[0] = deserializationFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
    assertEquals(15231264, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test4263,"public void test4263() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
    deserializationFeatureArray0[0] = deserializationFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
    assertTrue(deserializationConfig1.canOverrideAccessModifiers());
}",0,assertTrue(deserializationConfig1.canOverrideAccessModifiers())
project,0,test4264,"public void test4264() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
    deserializationFeatureArray0[0] = deserializationFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test4466,"public void test4466() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test4467,"public void test4467() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
    assertEquals(6826272, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test4568,"public void test4568() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test4669,"public void test4669() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
    DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0, deserializationFeatureArray0);
    assertEquals(14690592, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test4670,"public void test4670() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
    DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0, deserializationFeatureArray0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test4771,"public void test4771() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
    // Undeclared exception!
    try {
        deserializationConfig0.without(deserializationFeature0, deserializationFeatureArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}",0,
project,0,test4872,"public void test4872() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
    DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0, deserializationFeatureArray0);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test4973,"public void test4973() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
    deserializationFeatureArray0[0] = deserializationFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(deserializationFeatureArray0);
    assertEquals(15214848, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test4974,"public void test4974() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
    deserializationFeatureArray0[0] = deserializationFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(deserializationFeatureArray0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test5176,"public void test5176() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
    assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig2.getDeserializationFeatures())"
project,0,test5177,"public void test5177() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
    assertSame(deserializationConfig2, deserializationConfig1);
}",1,
project,0,test5178,"public void test5178() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
    assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
}",0,assertFalse(deserializationConfig2.isAnnotationProcessingEnabled())
project,0,test5381,"public void test5381() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
    jsonParser_FeatureArray0[0] = jsonParser_Feature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
    assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
}",0,assertTrue(deserializationConfig1.shouldSortPropertiesAlphabetically())
project,0,test5382,"public void test5382() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
    jsonParser_FeatureArray0[0] = jsonParser_Feature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test5383,"public void test5383() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
    jsonParser_FeatureArray0[0] = jsonParser_Feature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test5484,"public void test5484() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
    assertNotSame(deserializationConfig2, deserializationConfig1);
}",0,
project,0,test5485,"public void test5485() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
    assertTrue(deserializationConfig2.canOverrideAccessModifiers());
}",0,assertTrue(deserializationConfig2.canOverrideAccessModifiers())
project,0,test5486,"public void test5486() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
    assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig2.getDeserializationFeatures())"
project,0,test5587,"public void test5587() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
    assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig2.getDeserializationFeatures())"
project,0,test5588,"public void test5588() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
    assertNotSame(deserializationConfig2, deserializationConfig0);
}",0,
project,0,test5590,"public void test5590() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
    assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig2.isAnnotationProcessingEnabled())
project,0,test5691,"public void test5691() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
    JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
    jsonParser_FeatureArray0[0] = jsonParser_Feature0;
    jsonParser_FeatureArray0[1] = jsonParser_Feature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
    JsonFactory jsonFactory0 = new JsonFactory();
    boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
    assertNotSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test5693,"public void test5693() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
    JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
    jsonParser_FeatureArray0[0] = jsonParser_Feature0;
    jsonParser_FeatureArray0[1] = jsonParser_Feature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
    JsonFactory jsonFactory0 = new JsonFactory();
    boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test5694,"public void test5694() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
    JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
    jsonParser_FeatureArray0[0] = jsonParser_Feature0;
    jsonParser_FeatureArray0[1] = jsonParser_Feature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
    JsonFactory jsonFactory0 = new JsonFactory();
    boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test5795,"public void test5795() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
    JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
    jsonParser_FeatureArray0[0] = jsonParser_Feature0;
    jsonParser_FeatureArray0[1] = jsonParser_Feature0;
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(jsonParser_FeatureArray0);
    assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
}",0,"assertEquals(1, deserializationConfig2.getDeserializationFeatures())"
project,0,test5797,"public void test5797() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
    JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
    jsonParser_FeatureArray0[0] = jsonParser_Feature0;
    jsonParser_FeatureArray0[1] = jsonParser_Feature0;
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(jsonParser_FeatureArray0);
    assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig2.isAnnotationProcessingEnabled())
project,0,test5999,"public void test5999() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(3, 3).when(formatFeature0).getMask();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test59100,"public void test59100() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(3, 3).when(formatFeature0).getMask();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(1, deserializationConfig1.getDeserializationFeatures())"
project,0,test59101,"public void test59101() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(3, 3).when(formatFeature0).getMask();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
    assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
}",0,assertTrue(deserializationConfig1.shouldSortPropertiesAlphabetically())
project,0,test60102,"public void test60102() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(formatFeature0).getMask();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test61103,"public void test61103() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 322).when(formatFeature0).getMask();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
    assertNotSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test61104,"public void test61104() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 322).when(formatFeature0).getMask();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test61105,"public void test61105() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 322).when(formatFeature0).getMask();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,
project,0,test62108,"public void test62108() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(2403, 2403, 579, 1024, 579).when(formatFeature0).getMask();
    formatFeatureArray0[0] = formatFeature0;
    formatFeatureArray0[1] = formatFeature0;
    formatFeatureArray0[2] = formatFeature0;
    formatFeatureArray0[3] = formatFeature0;
    formatFeatureArray0[4] = formatFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(formatFeatureArray0);
    assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig2.getDeserializationFeatures())"
project,0,test62109,"public void test62109() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(2403, 2403, 579, 1024, 579).when(formatFeature0).getMask();
    formatFeatureArray0[0] = formatFeature0;
    formatFeatureArray0[1] = formatFeature0;
    formatFeatureArray0[2] = formatFeature0;
    formatFeatureArray0[3] = formatFeature0;
    formatFeatureArray0[4] = formatFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(formatFeatureArray0);
    assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
}",0,assertFalse(deserializationConfig2.isAnnotationProcessingEnabled())
project,0,test64111,"public void test64111() throws Throwable {
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(123, 123, 192, 123).when(formatFeature0).getMask();
    formatFeatureArray0[0] = formatFeature0;
    formatFeatureArray0[1] = formatFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.without(formatFeature0);
    assertNotSame(deserializationConfig2, deserializationConfig1);
}",0,
project,0,test64112,"public void test64112() throws Throwable {
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(123, 123, 192, 123).when(formatFeature0).getMask();
    formatFeatureArray0[0] = formatFeature0;
    formatFeatureArray0[1] = formatFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.without(formatFeature0);
    assertTrue(deserializationConfig2.canOverrideAccessModifiers());
}",0,assertTrue(deserializationConfig2.canOverrideAccessModifiers())
project,0,test64113,"public void test64113() throws Throwable {
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(123, 123, 192, 123).when(formatFeature0).getMask();
    formatFeatureArray0[0] = formatFeature0;
    formatFeatureArray0[1] = formatFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.without(formatFeature0);
    assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig2.getDeserializationFeatures())"
project,0,test65115,"public void test65115() throws Throwable {
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(formatFeature0).getMask();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.without(formatFeature0);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test66117,"public void test66117() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(2403, 2403, 579, 1024, 579).when(formatFeature0).getMask();
    formatFeatureArray0[0] = formatFeature0;
    formatFeatureArray0[1] = formatFeature0;
    formatFeatureArray0[2] = formatFeature0;
    formatFeatureArray0[3] = formatFeature0;
    formatFeatureArray0[4] = formatFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(formatFeatureArray0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test66118,"public void test66118() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(2403, 2403, 579, 1024, 579).when(formatFeature0).getMask();
    formatFeatureArray0[0] = formatFeature0;
    formatFeatureArray0[1] = formatFeature0;
    formatFeatureArray0[2] = formatFeature0;
    formatFeatureArray0[3] = formatFeature0;
    formatFeatureArray0[4] = formatFeature0;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(formatFeatureArray0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertFalse(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test68120,"public void test68120() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonNodeFactory0);
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test69121,"public void test69121() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler((DeserializationProblemHandler) null);
    assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
}",0,"assertEquals(1, deserializationConfig2.getDeserializationFeatures())"
project,0,test69122,"public void test69122() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler((DeserializationProblemHandler) null);
    assertSame(deserializationConfig2, deserializationConfig1);
}",0,
project,0,test70124,"public void test70124() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withNoProblemHandlers();
    assertNotSame(deserializationConfig2, deserializationConfig1);
}",0,
project,0,test70125,"public void test70125() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
    DeserializationConfig deserializationConfig2 = deserializationConfig1.withNoProblemHandlers();
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test71126,"public void test71126() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withNoProblemHandlers();
    assertSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test73128,"public void test73128() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
    // Undeclared exception!
    try {
        deserializationConfig1.initialize((JsonParser) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}",0,
project,0,test74129,"public void test74129() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn((-1), (-1)).when(formatFeature0).getMask();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.without(formatFeature0);
    // Undeclared exception!
    try {
        deserializationConfig1.initialize((JsonParser) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}",0,
project,0,test75130,"public void test75130() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
    deserializationConfig1.getAnnotationIntrospector();
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test75131,"public void test75131() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
    deserializationConfig1.getAnnotationIntrospector();
    assertTrue(deserializationConfig1.canOverrideAccessModifiers());
}",0,assertTrue(deserializationConfig1.canOverrideAccessModifiers())
project,0,test75132,"public void test75132() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
    deserializationConfig1.getAnnotationIntrospector();
    assertFalse(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertTrue(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test79136,"public void test79136() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    PropertyName propertyName0 = PropertyName.construct("""", (String) null);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
    boolean boolean0 = deserializationConfig1.useRootWrapping();
    assertNotSame(deserializationConfig1, deserializationConfig0);
}",0,
project,0,test79137,"public void test79137() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    PropertyName propertyName0 = PropertyName.construct("""", (String) null);
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
    boolean boolean0 = deserializationConfig1.useRootWrapping();
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test80139,"public void test80139() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    PropertyName propertyName0 = PropertyName.construct("""", """");
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
    boolean boolean0 = deserializationConfig1.useRootWrapping();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test80140,"public void test80140() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    PropertyName propertyName0 = PropertyName.construct("""", """");
    DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
    boolean boolean0 = deserializationConfig1.useRootWrapping();
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test81141,"public void test81141() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    JsonFactory jsonFactory0 = new JsonFactory();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
    boolean boolean0 = deserializationConfig0.isEnabled(jsonParser_Feature0, jsonFactory0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test82142,"public void test82142() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
    JsonFactory jsonFactory0 = new JsonFactory();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
    boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
    assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
}",0,assertFalse(deserializationConfig1.isAnnotationProcessingEnabled())
project,0,test82143,"public void test82143() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
    JsonFactory jsonFactory0 = new JsonFactory();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
    boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
    assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationConfig1.getDeserializationFeatures())"
project,0,test82144,"public void test82144() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
    JsonFactory jsonFactory0 = new JsonFactory();
    DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
    boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test83145,"public void test83145() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
    boolean boolean0 = deserializationConfig0.hasDeserializationFeatures(1187);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test84146,"public void test84146() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
    boolean boolean0 = deserializationConfig0.hasDeserializationFeatures(10496);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test85147,"public void test85147() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    boolean boolean0 = deserializationConfig0.hasSomeOfFeatures(1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test86148,"public void test86148() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
    boolean boolean0 = deserializationConfig0.hasSomeOfFeatures(741);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test87149,"public void test87149() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BaseSettings baseSettings1 = baseSettings0.withClassIntrospector(basicClassIntrospector0);
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    BaseSettings baseSettings2 = baseSettings1.withTypeResolverBuilder(stdTypeResolverBuilder0);
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings2, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    JavaType javaType0 = TypeFactory.unknownType();
    TypeDeserializer typeDeserializer0 = deserializationConfig0.findTypeDeserializer(javaType0);
    assertNull(typeDeserializer0);
}",0,
project,0,test88150,"public void test88150() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BaseSettings baseSettings1 = baseSettings0.withClassIntrospector(basicClassIntrospector0);
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    JavaType javaType0 = TypeFactory.unknownType();
    TypeDeserializer typeDeserializer0 = deserializationConfig0.findTypeDeserializer(javaType0);
    assertNull(typeDeserializer0);
}",0,
