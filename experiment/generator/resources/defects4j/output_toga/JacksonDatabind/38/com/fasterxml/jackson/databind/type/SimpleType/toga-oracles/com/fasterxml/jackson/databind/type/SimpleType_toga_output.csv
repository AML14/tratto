project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    Object object0 = new Object();
    // Undeclared exception!
    try {
        simpleType0.withContentValueHandler(object0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Simple types have no content types; can not call withContenValueHandler()
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",1,
project,0,test011,"public void test011() throws Throwable {
    StringBuilder stringBuilder0 = new StringBuilder();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    // Undeclared exception!
    try {
        simpleType0.withContentTypeHandler(stringBuilder0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Simple types have no content types; can not call withContenTypeHandler()
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",1,
project,0,test022,"public void test022() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    String string0 = simpleType0.toString();
    assertEquals(""[simple type, class java.lang.Comparable]"", string0);
}",0,
project,0,test033,"public void test033() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
    boolean boolean0 = simpleType0.isContainerType();
    assertFalse(boolean0);
}",0,
project,0,test044,"public void test044() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    // Undeclared exception!
    try {
        simpleType0.withContentType(simpleType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Simple types have no content types; can not call withContentType()
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",1,
project,0,test055,"public void test055() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
    ReferenceType referenceType1 = referenceType0.withStaticTyping();
    assertFalse(referenceType1.isPrimitive());
}",0,assertTrue(referenceType1.isPrimitive())
project,0,test066,"public void test066() throws Throwable {
    Class<SimpleType> class0 = SimpleType.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    assertFalse(simpleType0.useStaticType());
}",0,assertFalse(simpleType0.useStaticType())
project,0,test077,"public void test077() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    String string0 = simpleType0.getErasedSignature();
    assertEquals(""Z"", string0);
}",0,assertNotNull(string0)
project,0,test088,"public void test088() throws Throwable {
    Class<Object> class0 = Object.class;
    SimpleType simpleType0 = new SimpleType(class0);
    assertFalse(simpleType0.isPrimitive());
}",0,
project,0,test099,"public void test099() throws Throwable {
    Class<LinkedList> class0 = LinkedList.class;
    // Undeclared exception!
    try {
        SimpleType.construct(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not construct SimpleType for a Collection (class: java.util.LinkedList)
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Class<HashMap> class0 = HashMap.class;
    // Undeclared exception!
    try {
        SimpleType.construct(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not construct SimpleType for a Map (class: java.util.HashMap)
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",1,
project,0,test1111,"public void test1111() throws Throwable {
    Class<IsoEra> class0 = IsoEra.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    SimpleType simpleType1 = simpleType0.withValueHandler((Object) null);
    assertSame(simpleType1, simpleType0);
}",0,
project,0,test1112,"public void test1112() throws Throwable {
    Class<IsoEra> class0 = IsoEra.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    SimpleType simpleType1 = simpleType0.withValueHandler((Object) null);
    assertFalse(simpleType1.useStaticType());
}",0,assertFalse(simpleType1.useStaticType())
project,0,test1213,"public void test1213() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    Class<Object> class0 = Object.class;
    JavaType javaType0 = simpleType0._narrow(class0);
    assertTrue(javaType0.isJavaLangObject());
}",0,assertTrue(javaType0.isJavaLangObject())
project,0,test1314,"public void test1314() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    Class<Object> class0 = Object.class;
    JavaType javaType0 = simpleType0._narrow(class0);
    assertSame(javaType0, simpleType0);
}",0,
project,0,test1415,"public void test1415() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    SimpleType simpleType1 = simpleType0.withTypeHandler(""=yoZ2ZQ_+a2{S9\""LC{|"");
    assertNotSame(simpleType1, simpleType0);
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    SimpleType simpleType1 = simpleType0.withTypeHandler((Object) null);
    assertSame(simpleType1, simpleType0);
}",0,
project,0,test1617,"public void test1617() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    SimpleType simpleType1 = simpleType0.withValueHandler(simpleType0);
    assertTrue(simpleType1.hasValueHandler());
}",0,assertTrue(simpleType1.hasValueHandler())
project,0,test1718,"public void test1718() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    SimpleType simpleType1 = simpleType0.withStaticTyping();
    SimpleType simpleType2 = simpleType1.withStaticTyping();
    assertTrue(simpleType2.useStaticType());
}",0,assertTrue(simpleType2.useStaticType())
project,0,test1819,"public void test1819() throws Throwable {
    Class<Object> class0 = Object.class;
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class1 = HashMap.class;
    Class<TypeNameIdResolver> class2 = TypeNameIdResolver.class;
    MapType mapType0 = typeFactory0.constructMapType(class1, class2, class0);
    SimpleType simpleType0 = new SimpleType(mapType0);
    String string0 = simpleType0.toCanonical();
    assertEquals(""java.util.HashMap<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver,java.lang.Object>"", string0);
}",0,
project,0,test2021,"public void test2021() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    SimpleType simpleType1 = new SimpleType(simpleType0);
    boolean boolean0 = simpleType1.equals(simpleType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2122,"public void test2122() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    boolean boolean0 = simpleType0.equals(simpleType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2223,"public void test2223() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    boolean boolean0 = simpleType0.equals((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2324,"public void test2324() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    boolean boolean0 = simpleType0.equals(""Ljava/lang/Comparable;"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2425,"public void test2425() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    SimpleType simpleType1 = TypeFactory.CORE_TYPE_CLASS;
    boolean boolean0 = simpleType1.equals(simpleType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
