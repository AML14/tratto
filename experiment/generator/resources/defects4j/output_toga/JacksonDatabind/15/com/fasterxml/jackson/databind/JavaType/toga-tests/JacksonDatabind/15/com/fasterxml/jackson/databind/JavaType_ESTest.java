/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:36:12 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.lang.annotation.Annotation;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JavaType_ESTest extends JavaType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Throwable> class0 = Throwable.class;
        ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) class0);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Throwable> class0 = Throwable.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        javaType0.isArrayType();
        assertFalse(javaType0.isArrayType());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        javaType0.isMapLikeType();
        assertTrue(javaType0.isMapLikeType());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.reader(javaType0);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.reader(javaType0);
        javaType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.reader(javaType0);
        javaType0.useStaticType();
        assertTrue(javaType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        String string0 = simpleType0.getGenericSignature();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        javaType0.getErasedSignature();
        javaType0.useStaticType();
        assertTrue(javaType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<String> class0 = String.class;
        JavaType javaType1 = javaType0.widenBy(class0);
        javaType0.useStaticType();
        assertTrue(javaType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<String> class0 = String.class;
        JavaType javaType1 = javaType0.widenBy(class0);
        javaType1.isFinal();
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        javaType0.getContentType();
        javaType0.useStaticType();
        assertTrue(javaType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        JavaType javaType1 = javaType0.narrowBy(class0);
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        JavaType javaType1 = javaType0.narrowBy(class0);
        javaType1.useStaticType();
        assertTrue(javaType1.useStaticType());
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        CollectionType collectionType1 = collectionType0.withValueHandler(javaType0);
        Class<Annotation> class1 = Annotation.class;
        JavaType javaType1 = collectionType1.narrowBy(class1);
        collectionType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test0815() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        CollectionType collectionType1 = collectionType0.withValueHandler(javaType0);
        Class<Annotation> class1 = Annotation.class;
        JavaType javaType1 = collectionType1.narrowBy(class1);
        javaType1.isAbstract();
        assertFalse(javaType1.isAbstract());
    }

    @Test(timeout = 4000)
    public void test0916() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
        SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
        CollectionType collectionType1 = collectionType0.withTypeHandler(sQLClientInfoException0);
        MapType mapType0 = MapType.construct(class0, collectionType0, collectionType1);
        Class<Throwable> class1 = Throwable.class;
        JavaType javaType1 = mapType0.narrowContentsBy(class1);
        mapType0.useStaticType();
        assertTrue(mapType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test0917() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
        SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
        CollectionType collectionType1 = collectionType0.withTypeHandler(sQLClientInfoException0);
        MapType mapType0 = MapType.construct(class0, collectionType0, collectionType1);
        Class<Throwable> class1 = Throwable.class;
        JavaType javaType1 = mapType0.narrowContentsBy(class1);
        javaType1.equals((Object) mapType0);
    }

    @Test(timeout = 4000)
    public void test1018() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        JavaType javaType1 = javaType0.forcedNarrowBy(class0);
        javaType1.useStaticType();
        assertTrue(javaType1.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1019() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        JavaType javaType1 = javaType0.forcedNarrowBy(class0);
    }

    @Test(timeout = 4000)
    public void test1120() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TreeSet> class0 = TreeSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, javaType0);
        CollectionType collectionType1 = collectionType0.withValueHandler(typeFactory0);
        Class<ClassKey> class1 = ClassKey.class;
        JavaType javaType1 = collectionType1.forcedNarrowBy(class1);
        javaType1.isFinal();
        assertTrue(javaType1.isFinal());
    }

    @Test(timeout = 4000)
    public void test1121() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TreeSet> class0 = TreeSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, javaType0);
        CollectionType collectionType1 = collectionType0.withValueHandler(typeFactory0);
        Class<ClassKey> class1 = ClassKey.class;
        JavaType javaType1 = collectionType1.forcedNarrowBy(class1);
        collectionType0.useStaticType();
        assertTrue(collectionType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1222() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        MapType mapType0 = MapType.construct(class0, javaType0, javaType0);
        CollectionType collectionType0 = CollectionType.construct(class0, mapType0);
        CollectionType collectionType1 = collectionType0.withTypeHandler(class0);
        Class<Object> class1 = Object.class;
        JavaType javaType1 = collectionType1.forcedNarrowBy(class1);
        collectionType0.useStaticType();
        assertTrue(collectionType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1223() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        MapType mapType0 = MapType.construct(class0, javaType0, javaType0);
        CollectionType collectionType0 = CollectionType.construct(class0, mapType0);
        CollectionType collectionType1 = collectionType0.withTypeHandler(class0);
        Class<Object> class1 = Object.class;
        JavaType javaType1 = collectionType1.forcedNarrowBy(class1);
        javaType1.isFinal();
    }

    @Test(timeout = 4000)
    public void test1324() throws Throwable {
        Class<Throwable> class0 = Throwable.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JavaType javaType0 = simpleType0.widenBy(class0);
    }

    @Test(timeout = 4000)
    public void test1325() throws Throwable {
        Class<Throwable> class0 = Throwable.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JavaType javaType0 = simpleType0.widenBy(class0);
        javaType0.useStaticType();
        assertTrue(javaType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1426() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerFor(javaType0);
        javaType0.useStaticType();
        assertTrue(javaType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1427() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerFor(javaType0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test1528() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<InputStream> class0 = InputStream.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1629() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, javaType0, javaType0);
        boolean boolean0 = arrayType0.hasGenericTypes();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1630() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, javaType0, javaType0);
        boolean boolean0 = arrayType0.hasGenericTypes();
        arrayType0.useStaticType();
        assertTrue(arrayType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1731() throws Throwable {
        Class<Map> class0 = Map.class;
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        boolean boolean0 = collectionType0.hasGenericTypes();
        javaType0.hasGenericTypes();
        assertTrue(javaType0.hasGenericTypes());
    }

    @Test(timeout = 4000)
    public void test1732() throws Throwable {
        Class<Map> class0 = Map.class;
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        boolean boolean0 = collectionType0.hasGenericTypes();
        collectionType0.useStaticType();
        assertTrue(collectionType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1733() throws Throwable {
        Class<Map> class0 = Map.class;
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        boolean boolean0 = collectionType0.hasGenericTypes();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1834() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<PipedInputStream> class0 = PipedInputStream.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);
        JavaType javaType1 = mapLikeType0.containedTypeOrUnknown(0);
        javaType1.useStaticType();
        assertTrue(javaType1.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1835() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<PipedInputStream> class0 = PipedInputStream.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);
        JavaType javaType1 = mapLikeType0.containedTypeOrUnknown(0);
    }

    @Test(timeout = 4000)
    public void test1936() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType javaType1 = javaType0.containedTypeOrUnknown(0);
        javaType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1937() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType javaType1 = javaType0.containedTypeOrUnknown(0);
    }

    @Test(timeout = 4000)
    public void test2038() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.TYPE;
        javaType0.narrowBy(class0);
    }
}
