project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];
    BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
    NameTransformer nameTransformer0 = NameTransformer.NOP;
    NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
    JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer1);
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test011,"public void test011() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer((NameTransformer) null);
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test022,"public void test022() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];
    BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
    JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer((NameTransformer) null);
    assertTrue(jsonSerializer0.isUnwrappingSerializer());
}",0,assertFalse(jsonSerializer0.isUnwrappingSerializer())
project,0,test033,"public void test033() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];
    BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
    NameTransformer nameTransformer0 = NameTransformer.NOP;
    JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer0);
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test044,"public void test044() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[13];
    BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
    // Undeclared exception!
    try {
        beanSerializer0.resolve(defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.BeanSerializerBase"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<StdArraySerializers.BooleanArraySerializer> class0 = StdArraySerializers.BooleanArraySerializer.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionLikeType0);
    boolean boolean0 = beanSerializer0.usesObjectId();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test088,"public void test088() throws Throwable {
    Class<StdArraySerializers.LongArraySerializer> class0 = StdArraySerializers.LongArraySerializer.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    PropertyName propertyName0 = PropertyName.NO_NAME;
    ObjectIdGenerator<AsExistingPropertyTypeSerializer> objectIdGenerator0 = (ObjectIdGenerator<AsExistingPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator0, true);
    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
    boolean boolean0 = beanSerializerBase0.usesObjectId();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1010,"public void test1010() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getAnySetterMethod();
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
    doReturn((Map) null).when(pOJOPropertiesCollector0).getInjectables();
    doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, (PropertyName) null, (ObjectIdGenerator<?>) null, false);
    beanSerializerBuilder0.setObjectIdWriter(objectIdWriter0);
    BeanSerializer beanSerializer0 = new BeanSerializer(objectIdWriter0.idType, beanSerializerBuilder0, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        beanSerializer0.serializeWithType((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        ((BeanSerializerBase) beanSerializer0).serializeFieldsFiltered(beanSerializer0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    JsonFactory jsonFactory0 = new JsonFactory();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];
    BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
    // Undeclared exception!
    try {
        ((BeanSerializerBase) beanSerializer0).serializeFieldsFiltered(jsonFactory0, jsonGenerator0, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[13];
    BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
    // Undeclared exception!
    try {
        beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.BeanSerializerBase"", e);
    }
}",1,
project,0,test1616,"public void test1616() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);
    assertEquals(2, jsonNode0.size());
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    beanSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, simpleType0);
    assertFalse(simpleType0.isCollectionLikeType());
}",0,assertTrue(simpleType0.isCollectionLikeType())
project,0,test1818,"public void test1818() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    beanSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, simpleType0);
    assertFalse(beanSerializer0.isUnwrappingSerializer());
}",0,assertTrue(beanSerializer0.isUnwrappingSerializer())
