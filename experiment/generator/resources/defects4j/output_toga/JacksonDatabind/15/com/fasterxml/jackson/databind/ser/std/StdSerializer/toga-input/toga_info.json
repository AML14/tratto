{
  "test1212" : {
    "methodSignature" : "public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, String fieldName) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    JsonMappingException jsonMappingException0 = new JsonMappingException(\"h8PG?prI,Ejddxm&:\");\n    Class<InputStream> class0 = InputStream.class;\n    RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);\n    rawSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) jsonMappingException0, (Object) jsonMappingException0, \"h8PG?prI,Ejddxm&:\");\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, int index) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    MockIOException mockIOException0 = new MockIOException();\n    sqlDateSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) mockIOException0, (Object) null, (-3586));\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, String fieldName) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(\"'tK[3E7,e%~`20OS6\");\n    InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLTransactionRollbackException0);\n    Class<ClassKey> class0 = ClassKey.class;\n    RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);\n    rawSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) class0, \"'tK[3E7,e%~`20OS6\");\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, String fieldName) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    Class<IOException> class0 = IOException.class;\n    RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);\n    MockError mockError0 = new MockError();\n    rawSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) mockError0, (Object) \"Can not write a field name, eWpecting a value\", \"Can not write a field name, eWpecting a value\");\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "public boolean isLong()",
    "methodName" : "isLong",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    Class<RuntimeException> class0 = RuntimeException.class;\n    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<RuntimeException, ?>) null);\n    JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);\n    jsonNode0.isLong();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public final boolean isInterface()",
    "methodName" : "isInterface",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Class<Error> class0 = Error.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    StdKeySerializers.StringKeySerializer stdKeySerializers_StringKeySerializer0 = new StdKeySerializers.StringKeySerializer();\n    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();\n    stdKeySerializers_StringKeySerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, simpleType0);\n    simpleType0.isInterface();\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    Class<ObjectNode> class0 = ObjectNode.class;\n    RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);\n    JsonNode jsonNode0 = rawSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);\n    jsonNode0.size();\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Class<PropertyAccessor> class0 = PropertyAccessor.class;\n    RawSerializer<ObjectNode> rawSerializer0 = new RawSerializer<ObjectNode>(class0);\n    ObjectNode objectNode0 = rawSerializer0.createSchemaNode(\"FAIL_ON_UNRESOLVED_OBJECT_IDS\", false);\n    objectNode0.size();\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, String fieldName) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Class<InputStream> class0 = InputStream.class;\n    Class<String> class1 = String.class;\n    RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class1);\n    InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);\n    rawSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) invocationTargetException0, (Object) class0, \"t\");\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, int index) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    MockError mockError0 = new MockError();\n    sqlDateSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) mockError0, (Object) mockError0, 1);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, int index) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    sqlDateSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) sQLTimeoutException0, (Object) sQLTimeoutException0, 1167);\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, int index) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(\"DtC[3E7pe%~?7`2S6\");\n    InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLTransactionRollbackException0);\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    sqlDateSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) \"DtC[3E7pe%~?7`2S6\", (-327));\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, int index) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    sqlDateSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) defaultSerializerProvider_Impl0, 0);\n}",
    "testName" : "test1515"
  },
  "test000" : {
    "methodSignature" : "public boolean hasPrefetchedSerializer()",
    "methodName" : "hasPrefetchedSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Class<IOException> class0 = IOException.class;\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) class0);\n    objectWriter0.hasPrefetchedSerializer();\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "protected boolean isDefaultSerializer(JsonSerializer<?> serializer)",
    "methodName" : "isDefaultSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    Class<JsonMappingException> class0 = JsonMappingException.class;\n    RawSerializer<IOException> rawSerializer0 = new RawSerializer<IOException>(class0);\n    boolean boolean0 = rawSerializer0.isDefaultSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    Class<ObjectNode> class0 = ObjectNode.class;\n    RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);\n    JsonNode jsonNode0 = rawSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);\n    jsonNode0.size();\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, String fieldName) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    MockIOException mockIOException0 = new MockIOException();\n    Class<InputStream> class0 = InputStream.class;\n    RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);\n    rawSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) mockIOException0, (Object) class0, \"Can not write a field name, expecting a value\");\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, int index) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    JsonMappingException jsonMappingException0 = new JsonMappingException(\"B8XTC+A|Q1?0\");\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    sqlDateSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) jsonMappingException0, (Object) \"B8XTC+A|Q1?0\", 0);\n}",
    "testName" : "test1818"
  }
}