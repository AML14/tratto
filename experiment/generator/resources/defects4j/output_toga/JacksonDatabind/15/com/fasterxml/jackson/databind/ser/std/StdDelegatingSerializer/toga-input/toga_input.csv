focal_method,test_prefix,docstring
"/*
    /**********************************************************
    /* Accessors
    /**********************************************************
     */
protected Converter<Object, ?> getConverter() {
    return _converter;
}","public void test000() throws Throwable {
    Class<StdDelegatingSerializer> class0 = StdDelegatingSerializer.class;
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<StdDelegatingSerializer, ?>) null);
    Converter<Object, ?> converter0 = stdDelegatingSerializer0.getConverter();
    assertNull(converter0);
}",""
"public void serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer) throws IOException {
    Class<?> clz = handledType();
    if (clz == null) {
        clz = value.getClass();
    }
    throw serializers.mappingException(""Type id handling not implemented for type %s (by serializer of type %s)"", clz.getName(), getClass().getName());
}","public void test011() throws Throwable {
    Class<DOMSerializer> class0 = DOMSerializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
    JsonFactory jsonFactory0 = new JsonFactory();
    MockPrintStream mockPrintStream0 = new MockPrintStream(""JSON"");
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
    AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, """");
    // Undeclared exception!
    try {
        stdDelegatingSerializer0.serializeWithType(dataInputStream0, jsonGenerator0, defaultSerializerProvider_Impl0, asExternalTypeSerializer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer"", e);
    }
}","/**
 *  Method that can be called to ask implementation to serialize
 *  values of type this serializer handles, using specified type serializer
 *  for embedding necessary type information.
 * <p>
 *  Default implementation will throw {@link UnsupportedOperationException}
 *  to indicate that proper type handling needs to be implemented.
 * <p>
 *  For simple datatypes written as a single scalar value (JSON String, Number, Boolean),
 *  implementation would look like:
 * <pre>
 *   // note: method to call depends on whether this type is serialized as JSON scalar, object or Array!
 *   typeSer.writeTypePrefixForScalar(value, gen);
 *   serialize(value, gen, provider);
 *   typeSer.writeTypeSuffixForScalar(value, gen);
 * </pre>
 *  and implementations for type serialized as JSON Arrays or Objects would differ slightly,
 *  as <code>START-ARRAY>/<code>END-ARRAY</code> and
 *  <code>START-OBJECT>/<code>END-OBJECT</code> pairs
 *  need to be properly handled with respect to serializing of contents.
 *
 *  @param value Value to serialize; can <b>not</b> be null.
 *  @param gen Generator used to output resulting Json content
 *  @param serializers Provider that can be used to get serializers for
 *    serializing Objects value contains, if any.
 *  @param typeSer Type serializer to use for including type information
 */"
"@Override
public JsonSerializer<?> getDelegatee() {
    return _delegateSerializer;
}","public void test022() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    JsonSerializer<?> jsonSerializer0 = stdDelegatingSerializer0.getDelegatee();
    assertNull(jsonSerializer0);
}",""
"@Override
public boolean isEmpty(SerializerProvider prov, Object value) {
    Object delegateValue = convertValue(value);
    return _delegateSerializer.isEmpty(prov, delegateValue);
}","public void test033() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        stdDelegatingSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Object) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer"", e);
    }
}",""
"@Override
public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {
    JsonSerializer<?> delSer = _delegateSerializer;
    JavaType delegateType = _delegateType;
    if (delSer == null) {
        // Otherwise, need to locate serializer to delegate to. For that we need type information...
        if (delegateType == null) {
            delegateType = _converter.getOutputType(provider.getTypeFactory());
        }
        /* 02-Apr-2015, tatu: For ""dynamic case"", where type is only specified as
             *    java.lang.Object (or missing generic), [databind#731]
             */
        delSer = provider.findValueSerializer(delegateType);
    }
    if (delSer instanceof ContextualSerializer) {
        delSer = provider.handleSecondaryContextualization(delSer, property);
    }
    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);
}","public void test044() throws Throwable {
    Class<DOMSerializer> class0 = DOMSerializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    JsonSerializer<?> jsonSerializer0 = stdDelegatingSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
    assertSame(stdDelegatingSerializer0, jsonSerializer0);
}",""
"@Override
public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {
    /* 03-Sep-2012, tatu: Not sure if this can be made to really work
         *    properly... but for now, try this:
         */
    // 02-Apr-2015, tatu: For dynamic case, very little we can do
    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);
}","public void test055() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base((SerializerProvider) null);
    // Undeclared exception!
    try {
        stdDelegatingSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer"", e);
    }
}",""
"@Deprecated
public boolean isEmpty(T value) {
    return (value == null);
}","public void test066() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    // Undeclared exception!
    try {
        stdDelegatingSerializer0.isEmpty((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer"", e);
    }
}","/**
 *  Method called to check whether given serializable value is
 *  considered ""empty"" value (for purposes of suppressing serialization
 *  of empty values).
 * <p>
 *  Default implementation will consider only null values to be empty.
 *
 *  @since 2.0
 *
 *  @deprecated Since 2.5 Use {@link #isEmpty(SerializerProvider, Object)} instead
 */"
"@Override
public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException {
    if (_delegateSerializer instanceof SchemaAware) {
        return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional);
    }
    return super.getSchema(provider, typeHint);
}","public void test077() throws Throwable {
    Class<DOMSerializer> class0 = DOMSerializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    JsonNode jsonNode0 = stdDelegatingSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
    assertNull(jsonNode0);
}",""
"public boolean isUnwrappingSerializer() {
    return false;
}","public void test088() throws Throwable {
    Class<NamedType> class0 = NamedType.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    stdDelegatingSerializer0.resolve(defaultSerializerProvider_Impl0);
    assertFalse(stdDelegatingSerializer0.isUnwrappingSerializer());
}","/**
 * Accessor for checking whether this serializer is an
 * ""unwrapping"" serializer; this is necessary to know since
 * it may also require caller to suppress writing of the
 * leading property name.
 */"
"/*
    /**********************************************************
    /* Contextualization
    /**********************************************************
     */
@Override
public void resolve(SerializerProvider provider) throws JsonMappingException {
    if ((_delegateSerializer != null) && (_delegateSerializer instanceof ResolvableSerializer)) {
        ((ResolvableSerializer) _delegateSerializer).resolve(provider);
    }
}","public void test099() throws Throwable {
    Class<StdDelegatingSerializer> class0 = StdDelegatingSerializer.class;
    JavaType javaType0 = TypeFactory.unknownType();
    MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate((Converter<Object, ?>) null, mapLikeType0, stdDelegatingSerializer0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    stdDelegatingSerializer1.resolve(defaultSerializerProvider_Impl0);
    assertNotSame(stdDelegatingSerializer1, stdDelegatingSerializer0);
}",""
"@Override
public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {
    JsonSerializer<?> delSer = _delegateSerializer;
    JavaType delegateType = _delegateType;
    if (delSer == null) {
        // Otherwise, need to locate serializer to delegate to. For that we need type information...
        if (delegateType == null) {
            delegateType = _converter.getOutputType(provider.getTypeFactory());
        }
        /* 02-Apr-2015, tatu: For ""dynamic case"", where type is only specified as
             *    java.lang.Object (or missing generic), [databind#731]
             */
        delSer = provider.findValueSerializer(delegateType);
    }
    if (delSer instanceof ContextualSerializer) {
        delSer = provider.handleSecondaryContextualization(delSer, property);
    }
    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);
}","public void test1010() throws Throwable {
    Class<JsonDeserializer> class0 = JsonDeserializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, (JsonSerializer<?>) null);
    // Undeclared exception!
    try {
        stdDelegatingSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",""
"@Override
public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {
    JsonSerializer<?> delSer = _delegateSerializer;
    JavaType delegateType = _delegateType;
    if (delSer == null) {
        // Otherwise, need to locate serializer to delegate to. For that we need type information...
        if (delegateType == null) {
            delegateType = _converter.getOutputType(provider.getTypeFactory());
        }
        /* 02-Apr-2015, tatu: For ""dynamic case"", where type is only specified as
             *    java.lang.Object (or missing generic), [databind#731]
             */
        delSer = provider.findValueSerializer(delegateType);
    }
    if (delSer instanceof ContextualSerializer) {
        delSer = provider.handleSecondaryContextualization(delSer, property);
    }
    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);
}","public void test1111() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    JavaType javaType0 = TypeFactory.unknownType();
    StdDelegatingSerializer stdDelegatingSerializer1 = new StdDelegatingSerializer((Converter<Object, ?>) null, javaType0, stdDelegatingSerializer0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        stdDelegatingSerializer1.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",""
"/*
    /**********************************************************
    /* Serialization
    /**********************************************************
     */
@Override
public abstract void serialize(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException;","public void test1212() throws Throwable {
    Class<Annotation> class0 = Annotation.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    SimpleModule simpleModule0 = new SimpleModule();
    Converter<Object, Module> converter0 = (Converter<Object, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
    doReturn(simpleModule0).when(converter0).convert(any());
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    Class<Object> class1 = stdDelegatingSerializer0.handledType();
    try {
        stdDelegatingSerializer0.serialize(class1, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.impl.FailingSerializer"", e);
    }
}",""
"/*
    /**********************************************************
    /* Serialization
    /**********************************************************
     */
@Override
public abstract void serialize(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException;","public void test1313() throws Throwable {
    Class<Annotation> class0 = Annotation.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Converter<Object, Module> converter0 = (Converter<Object, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(converter0).convert(any());
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    Class<Object> class1 = stdDelegatingSerializer0.handledType();
    // Undeclared exception!
    try {
        stdDelegatingSerializer0.serialize(class1, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",""
"public boolean isBigDecimal() {
    return false;
}","public void test1414() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) null, (Type) null);
    assertFalse(jsonNode0.isBigDecimal());
}",""
"/*
    /**********************************************************
    /* Schema functionality
    /**********************************************************
     */
@Override
public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {
    if (_delegateSerializer instanceof SchemaAware) {
        return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint);
    }
    return super.getSchema(provider, typeHint);
}","public void test1515() throws Throwable {
    Class<Module> class0 = Module.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    JsonNode jsonNode0 = stdDelegatingSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
    assertNull(jsonNode0);
}",""
"public boolean isBigInteger() {
    return false;
}","public void test1616() throws Throwable {
    Class<DOMSerializer> class0 = DOMSerializer.class;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
    assertFalse(jsonNode0.isBigInteger());
}",""
