focal_method,test_prefix,docstring
"public boolean hasPrefetchedSerializer() {
    return _prefetch.hasSerializer();
}","public void test000() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<Throwable> class0 = Throwable.class;
    ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"@SuppressWarnings(""unchecked"")
public <T extends ObjectReader> T reader(Class<?> type) {
    return (T) _newReader(getDeserializationConfig(), _typeFactory.constructType(type), null, null, _injectableValues);
}","public void test011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<Throwable> class0 = Throwable.class;
    ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * read or update instances of specified type
 */"
"@Override
public boolean isArrayType() {
    return false;
}","public void test022() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    assertFalse(javaType0.isArrayType());
}",""
"@Override
public boolean isMapLikeType() {
    return false;
}","public void test023() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    assertFalse(javaType0.isMapLikeType());
}","/**
 * @return True if type is either true {@link java.util.Map} type,
 *    or something similar (meaning it has at least two type parameter;
 *    first one describing key type, second value type)
 */"
"@Override
public boolean isConcrete() {
    int mod = _class.getModifiers();
    if ((mod & (Modifier.INTERFACE | Modifier.ABSTRACT)) == 0) {
        return true;
    }
    /* 19-Feb-2010, tatus: Holy mackarel; primitive types
         *    have 'abstract' flag set...
         */
    return _class.isPrimitive();
}","public void test024() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.reader(javaType0);
    assertTrue(javaType0.isConcrete());
}","/**
 * Convenience method for checking whether underlying Java type
 * is a concrete class or not: abstract classes and interfaces
 * are not.
 */"
"@Override
public boolean isCollectionLikeType() {
    return false;
}","public void test025() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.reader(javaType0);
    assertFalse(javaType0.isCollectionLikeType());
}","/**
 * @return True if type is either true {@link java.util.Collection} type,
 *    or something similar (meaning it has at least one type parameter,
 *    which describes type of contents)
 */"
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test026() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.reader(javaType0);
    assertFalse(javaType0.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"/*
    /**********************************************************
    /* Support for producing signatures
    /**********************************************************
     */
//public abstract String toCanonical();
/**
 * Method for accessing signature that contains generic
 * type information, in form compatible with JVM 1.5
 * as per JLS. It is a superset of {@link #getErasedSignature},
 * in that generic information can be automatically removed
 * if necessary (just remove outermost
 * angle brackets along with content inside)
 */
public String getGenericSignature() {
    StringBuilder sb = new StringBuilder(40);
    getGenericSignature(sb);
    return sb.toString();
}","public void test037() throws Throwable {
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    String string0 = simpleType0.getGenericSignature();
    assertEquals(""Ljava/lang/Object;"", string0);
}",""
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test048() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    javaType0.getErasedSignature();
    assertFalse(javaType0.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test059() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<String> class0 = String.class;
    JavaType javaType1 = javaType0.widenBy(class0);
    assertFalse(javaType0.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"@Override
public final boolean isFinal() {
    return Modifier.isFinal(_class.getModifiers());
}","public void test0510() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<String> class0 = String.class;
    JavaType javaType1 = javaType0.widenBy(class0);
    assertTrue(javaType1.isFinal());
}",""
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test0611() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    javaType0.getContentType();
    assertFalse(javaType0.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"/*
    /**********************************************************
    /* Type coercion fluent factory methods
    /**********************************************************
     */
/**
 * Method that can be called to do a ""narrowing"" conversions; that is,
 * to return a type with a raw class that is assignable to the raw
 * class of this type. If this is not possible, an
 * {@link IllegalArgumentException} is thrown.
 * If class is same as the current raw class, instance itself is
 * returned.
 */
public JavaType narrowBy(Class<?> subclass) {
    // First: if same raw class, just return this instance
    if (subclass == _class) {
        return this;
    }
    // Otherwise, ensure compatibility
    _assertSubclass(subclass, _class);
    JavaType result = _narrow(subclass);
    // TODO: these checks should NOT actually be needed; above should suffice:
    if (_valueHandler != result.<Object>getValueHandler()) {
        result = result.withValueHandler(_valueHandler);
    }
    if (_typeHandler != result.<Object>getTypeHandler()) {
        result = result.withTypeHandler(_typeHandler);
    }
    return result;
}","public void test0712() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<Object> class0 = Object.class;
    JavaType javaType1 = javaType0.narrowBy(class0);
    assertSame(javaType1, javaType0);
}",""
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test0713() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<Object> class0 = Object.class;
    JavaType javaType1 = javaType0.narrowBy(class0);
    assertFalse(javaType1.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test0814() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<Object> class0 = Object.class;
    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
    CollectionType collectionType1 = collectionType0.withValueHandler(javaType0);
    Class<Annotation> class1 = Annotation.class;
    JavaType javaType1 = collectionType1.narrowBy(class1);
    assertFalse(collectionType0.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"@Override
public boolean isAbstract() {
    return Modifier.isAbstract(_class.getModifiers());
}","public void test0815() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<Object> class0 = Object.class;
    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
    CollectionType collectionType1 = collectionType0.withValueHandler(javaType0);
    Class<Annotation> class1 = Annotation.class;
    JavaType javaType1 = collectionType1.narrowBy(class1);
    assertTrue(javaType1.isAbstract());
}",""
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test0916() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<Object> class0 = Object.class;
    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
    HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
    SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
    CollectionType collectionType1 = collectionType0.withTypeHandler(sQLClientInfoException0);
    MapType mapType0 = MapType.construct(class0, collectionType0, collectionType1);
    Class<Throwable> class1 = Throwable.class;
    JavaType javaType1 = mapType0.narrowContentsBy(class1);
    assertFalse(mapType0.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"@Override
public abstract boolean equals(Object o);","public void test0917() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<Object> class0 = Object.class;
    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
    HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
    SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
    CollectionType collectionType1 = collectionType0.withTypeHandler(sQLClientInfoException0);
    MapType mapType0 = MapType.construct(class0, collectionType0, collectionType1);
    Class<Throwable> class1 = Throwable.class;
    JavaType javaType1 = mapType0.narrowContentsBy(class1);
    assertFalse(javaType1.equals((Object) mapType0));
}",""
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test1018() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<Object> class0 = Object.class;
    JavaType javaType1 = javaType0.forcedNarrowBy(class0);
    assertFalse(javaType1.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"public JavaType forcedNarrowBy(Class<?> subclass) {
    if (subclass == _class) {
        // can still optimize for simple case
        return this;
    }
    JavaType result = _narrow(subclass);
    // TODO: these checks should NOT actually be needed; above should suffice:
    if (_valueHandler != result.<Object>getValueHandler()) {
        result = result.withValueHandler(_valueHandler);
    }
    if (_typeHandler != result.<Object>getTypeHandler()) {
        result = result.withTypeHandler(_typeHandler);
    }
    return result;
}","public void test1019() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<Object> class0 = Object.class;
    JavaType javaType1 = javaType0.forcedNarrowBy(class0);
    assertSame(javaType1, javaType0);
}","/**
 * More efficient version of {@link #narrowBy}, called by
 * internal framework in cases where compatibility checks
 * are to be skipped.
 */"
"@Override
public final boolean isFinal() {
    return Modifier.isFinal(_class.getModifiers());
}","public void test1120() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<TreeSet> class0 = TreeSet.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, javaType0);
    CollectionType collectionType1 = collectionType0.withValueHandler(typeFactory0);
    Class<ClassKey> class1 = ClassKey.class;
    JavaType javaType1 = collectionType1.forcedNarrowBy(class1);
    assertTrue(javaType1.isFinal());
}",""
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test1121() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<TreeSet> class0 = TreeSet.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, javaType0);
    CollectionType collectionType1 = collectionType0.withValueHandler(typeFactory0);
    Class<ClassKey> class1 = ClassKey.class;
    JavaType javaType1 = collectionType1.forcedNarrowBy(class1);
    assertFalse(collectionType0.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test1222() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<Integer> class0 = Integer.class;
    MapType mapType0 = MapType.construct(class0, javaType0, javaType0);
    CollectionType collectionType0 = CollectionType.construct(class0, mapType0);
    CollectionType collectionType1 = collectionType0.withTypeHandler(class0);
    Class<Object> class1 = Object.class;
    JavaType javaType1 = collectionType1.forcedNarrowBy(class1);
    assertFalse(collectionType0.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"@Override
public final boolean isFinal() {
    return Modifier.isFinal(_class.getModifiers());
}","public void test1223() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<Integer> class0 = Integer.class;
    MapType mapType0 = MapType.construct(class0, javaType0, javaType0);
    CollectionType collectionType0 = CollectionType.construct(class0, mapType0);
    CollectionType collectionType1 = collectionType0.withTypeHandler(class0);
    Class<Object> class1 = Object.class;
    JavaType javaType1 = collectionType1.forcedNarrowBy(class1);
    assertFalse(javaType1.isFinal());
}",""
"public JavaType widenBy(Class<?> superclass) {
    // First: if same raw class, just return this instance
    if (superclass == _class) {
        return this;
    }
    // Otherwise, ensure compatibility
    _assertSubclass(_class, superclass);
    return _widen(superclass);
}","public void test1324() throws Throwable {
    Class<Throwable> class0 = Throwable.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    JavaType javaType0 = simpleType0.widenBy(class0);
    assertSame(javaType0, simpleType0);
}","/**
 * Method that can be called to do a ""widening"" conversions; that is,
 * to return a type with a raw class that could be assigned from this
 * type.
 * If such conversion is not possible, an
 * {@link IllegalArgumentException} is thrown.
 * If class is same as the current raw class, instance itself is
 * returned.
 */"
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test1325() throws Throwable {
    Class<Throwable> class0 = Throwable.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    JavaType javaType0 = simpleType0.widenBy(class0);
    assertFalse(javaType0.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test1426() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writerFor(javaType0);
    assertFalse(javaType0.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"public boolean hasPrefetchedSerializer() {
    return _prefetch.hasSerializer();
}","public void test1427() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writerFor(javaType0);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"@SuppressWarnings(""unchecked"")
public <T extends ObjectReader> T reader(Class<?> type) {
    return (T) _newReader(getDeserializationConfig(), _typeFactory.constructType(type), null, null, _injectableValues);
}","public void test1528() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<InputStream> class0 = InputStream.class;
    ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * read or update instances of specified type
 */"
"@Override
public boolean hasGenericTypes() {
    // arrays are not parameterized, but element type may be:
    return _componentType.hasGenericTypes();
}","public void test1629() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    ArrayType arrayType0 = ArrayType.construct(javaType0, javaType0, javaType0);
    boolean boolean0 = arrayType0.hasGenericTypes();
    assertFalse(boolean0);
}",""
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test1630() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    ArrayType arrayType0 = ArrayType.construct(javaType0, javaType0, javaType0);
    boolean boolean0 = arrayType0.hasGenericTypes();
    assertFalse(arrayType0.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"/*
    /**********************************************************
    /* Public API, type parameter access; pass-through
    /**********************************************************
     */
@Override
public boolean hasGenericTypes() {
    return containedTypeCount() > 0;
}","public void test1731() throws Throwable {
    Class<Map> class0 = Map.class;
    JavaType javaType0 = TypeFactory.unknownType();
    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
    boolean boolean0 = collectionType0.hasGenericTypes();
    assertFalse(javaType0.hasGenericTypes());
}",""
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test1732() throws Throwable {
    Class<Map> class0 = Map.class;
    JavaType javaType0 = TypeFactory.unknownType();
    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
    boolean boolean0 = collectionType0.hasGenericTypes();
    assertFalse(collectionType0.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"/*
    /**********************************************************
    /* Public API, type parameter access; pass-through
    /**********************************************************
     */
@Override
public boolean hasGenericTypes() {
    return containedTypeCount() > 0;
}","public void test1733() throws Throwable {
    Class<Map> class0 = Map.class;
    JavaType javaType0 = TypeFactory.unknownType();
    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
    boolean boolean0 = collectionType0.hasGenericTypes();
    assertTrue(boolean0);
}",""
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test1834() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<PipedInputStream> class0 = PipedInputStream.class;
    MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);
    JavaType javaType1 = mapLikeType0.containedTypeOrUnknown(0);
    assertFalse(javaType1.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"/*
    /**********************************************************
    /* Extended API beyond ResolvedType
    /**********************************************************
     */
// NOTE: not defined in Resolved type
/**
 *  Convenience method that is functionally same as:
 * <code>
 *  JavaType t = containedType(index);
 *  if (t == null) {
 *     t = TypeFactory.unknownType();
 *  }
 * </code>
 *  and typically used to eliminate need for null checks for common case
 *  where we just want to check if containedType is available first; and
 *  if not, use ""unknown type"" (which translates to <code>java.lang.Object</code>
 *  basically).
 *
 *  @since 2.5
 */
public JavaType containedTypeOrUnknown(int index) {
    JavaType t = containedType(index);
    return (t == null) ? TypeFactory.unknownType() : t;
}","public void test1835() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<PipedInputStream> class0 = PipedInputStream.class;
    MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);
    JavaType javaType1 = mapLikeType0.containedTypeOrUnknown(0);
    assertSame(javaType1, javaType0);
}",""
"/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */
public final boolean useStaticType() {
    return _asStatic;
}","public void test1936() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    JavaType javaType1 = javaType0.containedTypeOrUnknown(0);
    assertFalse(javaType1.useStaticType());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"/*
    /**********************************************************
    /* Extended API beyond ResolvedType
    /**********************************************************
     */
// NOTE: not defined in Resolved type
/**
 *  Convenience method that is functionally same as:
 * <code>
 *  JavaType t = containedType(index);
 *  if (t == null) {
 *     t = TypeFactory.unknownType();
 *  }
 * </code>
 *  and typically used to eliminate need for null checks for common case
 *  where we just want to check if containedType is available first; and
 *  if not, use ""unknown type"" (which translates to <code>java.lang.Object</code>
 *  basically).
 *
 *  @since 2.5
 */
public JavaType containedTypeOrUnknown(int index) {
    JavaType t = containedType(index);
    return (t == null) ? TypeFactory.unknownType() : t;
}","public void test1937() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    JavaType javaType1 = javaType0.containedTypeOrUnknown(0);
    assertNotNull(javaType1);
}",""
"/*
    /**********************************************************
    /* Type coercion fluent factory methods
    /**********************************************************
     */
/**
 * Method that can be called to do a ""narrowing"" conversions; that is,
 * to return a type with a raw class that is assignable to the raw
 * class of this type. If this is not possible, an
 * {@link IllegalArgumentException} is thrown.
 * If class is same as the current raw class, instance itself is
 * returned.
 */
public JavaType narrowBy(Class<?> subclass) {
    // First: if same raw class, just return this instance
    if (subclass == _class) {
        return this;
    }
    // Otherwise, ensure compatibility
    _assertSubclass(subclass, _class);
    JavaType result = _narrow(subclass);
    // TODO: these checks should NOT actually be needed; above should suffice:
    if (_valueHandler != result.<Object>getValueHandler()) {
        result = result.withValueHandler(_valueHandler);
    }
    if (_typeHandler != result.<Object>getTypeHandler()) {
        result = result.withTypeHandler(_typeHandler);
    }
    return result;
}","public void test2038() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    Class<Integer> class0 = Integer.TYPE;
    // Undeclared exception!
    try {
        javaType0.narrowBy(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class int is not assignable to java.lang.Object
        //
        verifyException(""com.fasterxml.jackson.databind.JavaType"", e);
    }
}",""
