/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:44:20 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdDelegatingSerializer_ESTest extends StdDelegatingSerializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<StdDelegatingSerializer> class0 = StdDelegatingSerializer.class;
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<StdDelegatingSerializer, ?>) null);
        Converter<Object, ?> converter0 = stdDelegatingSerializer0.getConverter();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<DOMSerializer> class0 = DOMSerializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
        JsonFactory jsonFactory0 = new JsonFactory();
        MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
        AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "");
        stdDelegatingSerializer0.serializeWithType(dataInputStream0, jsonGenerator0, defaultSerializerProvider_Impl0, asExternalTypeSerializer0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
        JsonSerializer<?> jsonSerializer0 = stdDelegatingSerializer0.getDelegatee();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        stdDelegatingSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Object) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<DOMSerializer> class0 = DOMSerializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        JsonSerializer<?> jsonSerializer0 = stdDelegatingSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base((SerializerProvider) null);
        stdDelegatingSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
        stdDelegatingSerializer0.isEmpty((Object) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<DOMSerializer> class0 = DOMSerializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
        StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        JsonNode jsonNode0 = stdDelegatingSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
        assertNotNull(jsonNode0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<NamedType> class0 = NamedType.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        stdDelegatingSerializer0.resolve(defaultSerializerProvider_Impl0);
        stdDelegatingSerializer0.isUnwrappingSerializer();
        assertTrue(stdDelegatingSerializer0.isUnwrappingSerializer());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<StdDelegatingSerializer> class0 = StdDelegatingSerializer.class;
        JavaType javaType0 = TypeFactory.unknownType();
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
        StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate((Converter<Object, ?>) null, mapLikeType0, stdDelegatingSerializer0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        stdDelegatingSerializer1.resolve(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, (JsonSerializer<?>) null);
        stdDelegatingSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
        JavaType javaType0 = TypeFactory.unknownType();
        StdDelegatingSerializer stdDelegatingSerializer1 = new StdDelegatingSerializer((Converter<Object, ?>) null, javaType0, stdDelegatingSerializer0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        stdDelegatingSerializer1.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<Annotation> class0 = Annotation.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        SimpleModule simpleModule0 = new SimpleModule();
        Converter<Object, Module> converter0 = (Converter<Object, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
        doReturn(simpleModule0).when(converter0).convert(any());
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        Class<Object> class1 = stdDelegatingSerializer0.handledType();
        stdDelegatingSerializer0.serialize(class1, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<Annotation> class0 = Annotation.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Converter<Object, Module> converter0 = (Converter<Object, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(converter0).convert(any());
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        Class<Object> class1 = stdDelegatingSerializer0.handledType();
        stdDelegatingSerializer0.serialize(class1, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
        JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) null, (Type) null);
        jsonNode0.isBigDecimal();
        assertTrue(jsonNode0.isBigDecimal());
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Class<Module> class0 = Module.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
        StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        JsonNode jsonNode0 = stdDelegatingSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Class<DOMSerializer> class0 = DOMSerializer.class;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
        JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
        jsonNode0.isBigInteger();
        assertTrue(jsonNode0.isBigInteger());
    }
}
