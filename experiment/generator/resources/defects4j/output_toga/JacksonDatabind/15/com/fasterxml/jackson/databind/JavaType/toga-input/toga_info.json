{
  "test1630" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1630() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    ArrayType arrayType0 = ArrayType.construct(javaType0, javaType0, javaType0);\n    boolean boolean0 = arrayType0.hasGenericTypes();\n    arrayType0.useStaticType();\n}",
    "testName" : "test1630"
  },
  "test1731" : {
    "methodSignature" : "public boolean hasGenericTypes()",
    "methodName" : "hasGenericTypes",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731() throws Throwable {\n    Class<Map> class0 = Map.class;\n    JavaType javaType0 = TypeFactory.unknownType();\n    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);\n    boolean boolean0 = collectionType0.hasGenericTypes();\n    javaType0.hasGenericTypes();\n}",
    "testName" : "test1731"
  },
  "test1732" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1732() throws Throwable {\n    Class<Map> class0 = Map.class;\n    JavaType javaType0 = TypeFactory.unknownType();\n    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);\n    boolean boolean0 = collectionType0.hasGenericTypes();\n    collectionType0.useStaticType();\n}",
    "testName" : "test1732"
  },
  "test011" : {
    "methodSignature" : "public <T extends ObjectReader> T reader(Class<?> type)",
    "methodName" : "reader",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<Throwable> class0 = Throwable.class;\n    ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);\n}",
    "testName" : "test011"
  },
  "test1936" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1936() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    JavaType javaType1 = javaType0.containedTypeOrUnknown(0);\n    javaType1.useStaticType();\n}",
    "testName" : "test1936"
  },
  "test1937" : {
    "methodSignature" : "public JavaType containedTypeOrUnknown(int index)",
    "methodName" : "containedTypeOrUnknown",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1937() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    JavaType javaType1 = javaType0.containedTypeOrUnknown(0);\n}",
    "testName" : "test1937"
  },
  "test1018" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1018() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<Object> class0 = Object.class;\n    JavaType javaType1 = javaType0.forcedNarrowBy(class0);\n    javaType1.useStaticType();\n}",
    "testName" : "test1018"
  },
  "test1733" : {
    "methodSignature" : "public boolean hasGenericTypes()",
    "methodName" : "hasGenericTypes",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1733() throws Throwable {\n    Class<Map> class0 = Map.class;\n    JavaType javaType0 = TypeFactory.unknownType();\n    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);\n    boolean boolean0 = collectionType0.hasGenericTypes();\n}",
    "testName" : "test1733"
  },
  "test1019" : {
    "methodSignature" : "public JavaType forcedNarrowBy(Class<?> subclass)",
    "methodName" : "forcedNarrowBy",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1019() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<Object> class0 = Object.class;\n    JavaType javaType1 = javaType0.forcedNarrowBy(class0);\n}",
    "testName" : "test1019"
  },
  "test1834" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1834() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<PipedInputStream> class0 = PipedInputStream.class;\n    MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);\n    JavaType javaType1 = mapLikeType0.containedTypeOrUnknown(0);\n    javaType1.useStaticType();\n}",
    "testName" : "test1834"
  },
  "test1835" : {
    "methodSignature" : "public JavaType containedTypeOrUnknown(int index)",
    "methodName" : "containedTypeOrUnknown",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1835() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<PipedInputStream> class0 = PipedInputStream.class;\n    MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);\n    JavaType javaType1 = mapLikeType0.containedTypeOrUnknown(0);\n}",
    "testName" : "test1835"
  },
  "test026" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    objectMapper0.reader(javaType0);\n    javaType0.useStaticType();\n}",
    "testName" : "test026"
  },
  "test048" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    javaType0.getErasedSignature();\n    javaType0.useStaticType();\n}",
    "testName" : "test048"
  },
  "test0916" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0916() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<Object> class0 = Object.class;\n    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);\n    HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();\n    SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);\n    CollectionType collectionType1 = collectionType0.withTypeHandler(sQLClientInfoException0);\n    MapType mapType0 = MapType.construct(class0, collectionType0, collectionType1);\n    Class<Throwable> class1 = Throwable.class;\n    JavaType javaType1 = mapType0.narrowContentsBy(class1);\n    mapType0.useStaticType();\n}",
    "testName" : "test0916"
  },
  "test0917" : {
    "methodSignature" : "public abstract boolean equals(Object o)",
    "methodName" : "equals",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0917() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<Object> class0 = Object.class;\n    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);\n    HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();\n    SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);\n    CollectionType collectionType1 = collectionType0.withTypeHandler(sQLClientInfoException0);\n    MapType mapType0 = MapType.construct(class0, collectionType0, collectionType1);\n    Class<Throwable> class1 = Throwable.class;\n    JavaType javaType1 = mapType0.narrowContentsBy(class1);\n    javaType1.equals((Object) mapType0);\n}",
    "testName" : "test0917"
  },
  "test024" : {
    "methodSignature" : "public boolean isConcrete()",
    "methodName" : "isConcrete",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    objectMapper0.reader(javaType0);\n    javaType0.isConcrete();\n}",
    "testName" : "test024"
  },
  "test025" : {
    "methodSignature" : "public boolean isCollectionLikeType()",
    "methodName" : "isCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    objectMapper0.reader(javaType0);\n    javaType0.isCollectionLikeType();\n}",
    "testName" : "test025"
  },
  "test1223" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1223() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<Integer> class0 = Integer.class;\n    MapType mapType0 = MapType.construct(class0, javaType0, javaType0);\n    CollectionType collectionType0 = CollectionType.construct(class0, mapType0);\n    CollectionType collectionType1 = collectionType0.withTypeHandler(class0);\n    Class<Object> class1 = Object.class;\n    JavaType javaType1 = collectionType1.forcedNarrowBy(class1);\n    javaType1.isFinal();\n}",
    "testName" : "test1223"
  },
  "test2038" : {
    "methodSignature" : "public JavaType narrowBy(Class<?> subclass)",
    "methodName" : "narrowBy",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2038() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<Integer> class0 = Integer.TYPE;\n    javaType0.narrowBy(class0);\n}",
    "testName" : "test2038"
  },
  "test0510" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0510() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<String> class0 = String.class;\n    JavaType javaType1 = javaType0.widenBy(class0);\n    javaType1.isFinal();\n}",
    "testName" : "test0510"
  },
  "test1324" : {
    "methodSignature" : "public JavaType widenBy(Class<?> superclass)",
    "methodName" : "widenBy",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1324() throws Throwable {\n    Class<Throwable> class0 = Throwable.class;\n    SimpleType simpleType0 = SimpleType.construct(class0);\n    JavaType javaType0 = simpleType0.widenBy(class0);\n}",
    "testName" : "test1324"
  },
  "test1325" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1325() throws Throwable {\n    Class<Throwable> class0 = Throwable.class;\n    SimpleType simpleType0 = SimpleType.construct(class0);\n    JavaType javaType0 = simpleType0.widenBy(class0);\n    javaType0.useStaticType();\n}",
    "testName" : "test1325"
  },
  "test1120" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1120() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<TreeSet> class0 = TreeSet.class;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, javaType0);\n    CollectionType collectionType1 = collectionType0.withValueHandler(typeFactory0);\n    Class<ClassKey> class1 = ClassKey.class;\n    JavaType javaType1 = collectionType1.forcedNarrowBy(class1);\n    javaType1.isFinal();\n}",
    "testName" : "test1120"
  },
  "test1121" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<TreeSet> class0 = TreeSet.class;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, javaType0);\n    CollectionType collectionType1 = collectionType0.withValueHandler(typeFactory0);\n    Class<ClassKey> class1 = ClassKey.class;\n    JavaType javaType1 = collectionType1.forcedNarrowBy(class1);\n    collectionType0.useStaticType();\n}",
    "testName" : "test1121"
  },
  "test1222" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1222() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<Integer> class0 = Integer.class;\n    MapType mapType0 = MapType.construct(class0, javaType0, javaType0);\n    CollectionType collectionType0 = CollectionType.construct(class0, mapType0);\n    CollectionType collectionType1 = collectionType0.withTypeHandler(class0);\n    Class<Object> class1 = Object.class;\n    JavaType javaType1 = collectionType1.forcedNarrowBy(class1);\n    collectionType0.useStaticType();\n}",
    "testName" : "test1222"
  },
  "test000" : {
    "methodSignature" : "public boolean hasPrefetchedSerializer()",
    "methodName" : "hasPrefetchedSerializer",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<Throwable> class0 = Throwable.class;\n    ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) class0);\n    objectWriter0.hasPrefetchedSerializer();\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public boolean isArrayType()",
    "methodName" : "isArrayType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    javaType0.isArrayType();\n}",
    "testName" : "test022"
  },
  "test1528" : {
    "methodSignature" : "public <T extends ObjectReader> T reader(Class<?> type)",
    "methodName" : "reader",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1528() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<InputStream> class0 = InputStream.class;\n    ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);\n}",
    "testName" : "test1528"
  },
  "test023" : {
    "methodSignature" : "public boolean isMapLikeType()",
    "methodName" : "isMapLikeType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    javaType0.isMapLikeType();\n}",
    "testName" : "test023"
  },
  "test0814" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0814() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<Object> class0 = Object.class;\n    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);\n    CollectionType collectionType1 = collectionType0.withValueHandler(javaType0);\n    Class<Annotation> class1 = Annotation.class;\n    JavaType javaType1 = collectionType1.narrowBy(class1);\n    collectionType0.useStaticType();\n}",
    "testName" : "test0814"
  },
  "test0815" : {
    "methodSignature" : "public boolean isAbstract()",
    "methodName" : "isAbstract",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0815() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<Object> class0 = Object.class;\n    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);\n    CollectionType collectionType1 = collectionType0.withValueHandler(javaType0);\n    Class<Annotation> class1 = Annotation.class;\n    JavaType javaType1 = collectionType1.narrowBy(class1);\n    javaType1.isAbstract();\n}",
    "testName" : "test0815"
  },
  "test1629" : {
    "methodSignature" : "public boolean hasGenericTypes()",
    "methodName" : "hasGenericTypes",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1629() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    ArrayType arrayType0 = ArrayType.construct(javaType0, javaType0, javaType0);\n    boolean boolean0 = arrayType0.hasGenericTypes();\n}",
    "testName" : "test1629"
  },
  "test0611" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0611() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    javaType0.getContentType();\n    javaType0.useStaticType();\n}",
    "testName" : "test0611"
  },
  "test1426" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1426() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    ObjectWriter objectWriter0 = objectMapper0.writerFor(javaType0);\n    javaType0.useStaticType();\n}",
    "testName" : "test1426"
  },
  "test0712" : {
    "methodSignature" : "public JavaType narrowBy(Class<?> subclass)",
    "methodName" : "narrowBy",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0712() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<Object> class0 = Object.class;\n    JavaType javaType1 = javaType0.narrowBy(class0);\n}",
    "testName" : "test0712"
  },
  "test1427" : {
    "methodSignature" : "public boolean hasPrefetchedSerializer()",
    "methodName" : "hasPrefetchedSerializer",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1427() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    ObjectWriter objectWriter0 = objectMapper0.writerFor(javaType0);\n    objectWriter0.hasPrefetchedSerializer();\n}",
    "testName" : "test1427"
  },
  "test0713" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0713() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<Object> class0 = Object.class;\n    JavaType javaType1 = javaType0.narrowBy(class0);\n    javaType1.useStaticType();\n}",
    "testName" : "test0713"
  },
  "test037" : {
    "methodSignature" : "public String getGenericSignature()",
    "methodName" : "getGenericSignature",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;\n    String string0 = simpleType0.getGenericSignature();\n}",
    "testName" : "test037"
  },
  "test059" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<String> class0 = String.class;\n    JavaType javaType1 = javaType0.widenBy(class0);\n    javaType0.useStaticType();\n}",
    "testName" : "test059"
  }
}