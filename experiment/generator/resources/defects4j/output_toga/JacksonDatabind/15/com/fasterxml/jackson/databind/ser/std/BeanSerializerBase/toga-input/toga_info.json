{
  "test1313" : {
    "methodSignature" : "protected void serializeFieldsFiltered(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException",
    "methodName" : "serializeFieldsFiltered",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    ((BeanSerializerBase) beanSerializer0).serializeFieldsFiltered(beanSerializer0, (JsonGenerator) null, defaultSerializerProvider_Impl0);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public void serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer) throws IOException",
    "methodName" : "serializeWithType",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());\n    doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getAnySetterMethod();\n    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();\n    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();\n    doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();\n    doReturn((Map) null).when(pOJOPropertiesCollector0).getInjectables();\n    doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();\n    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();\n    doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();\n    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();\n    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);\n    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);\n    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, (PropertyName) null, (ObjectIdGenerator<?>) null, false);\n    beanSerializerBuilder0.setObjectIdWriter(objectIdWriter0);\n    BeanSerializer beanSerializer0 = new BeanSerializer(objectIdWriter0.idType, beanSerializerBuilder0, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    beanSerializer0.serializeWithType((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl0, (TypeSerializer) null);\n}",
    "testName" : "test1010"
  },
  "test000" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];\n    BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);\n    NameTransformer nameTransformer0 = NameTransformer.NOP;\n    NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);\n    JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer1);\n    jsonSerializer0.usesObjectId();\n}",
    "testName" : "test000"
  },
  "test011" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer((NameTransformer) null);\n    jsonSerializer0.usesObjectId();\n}",
    "testName" : "test011"
  },
  "test022" : {
    "methodSignature" : "public boolean isUnwrappingSerializer()",
    "methodName" : "isUnwrappingSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];\n    BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);\n    JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer((NameTransformer) null);\n    jsonSerializer0.isUnwrappingSerializer();\n}",
    "testName" : "test022"
  },
  "test033" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];\n    BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);\n    NameTransformer nameTransformer0 = NameTransformer.NOP;\n    JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer0);\n    jsonSerializer0.usesObjectId();\n}",
    "testName" : "test033"
  },
  "test044" : {
    "methodSignature" : "public void resolve(SerializerProvider provider) throws JsonMappingException",
    "methodName" : "resolve",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[13];\n    BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);\n    beanSerializer0.resolve(defaultSerializerProvider_Impl0);\n}",
    "testName" : "test044"
  },
  "test077" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<StdArraySerializers.BooleanArraySerializer> class0 = StdArraySerializers.BooleanArraySerializer.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionLikeType0);\n    boolean boolean0 = beanSerializer0.usesObjectId();\n}",
    "testName" : "test077"
  },
  "test088" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Class<StdArraySerializers.LongArraySerializer> class0 = StdArraySerializers.LongArraySerializer.class;\n    SimpleType simpleType0 = SimpleType.construct(class0);\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    ObjectIdGenerator<AsExistingPropertyTypeSerializer> objectIdGenerator0 = (ObjectIdGenerator<AsExistingPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator0, true);\n    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);\n    boolean boolean0 = beanSerializerBase0.usesObjectId();\n}",
    "testName" : "test088"
  },
  "test1616" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);\n    jsonNode0.size();\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public boolean isCollectionLikeType()",
    "methodName" : "isCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();\n    beanSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, simpleType0);\n    simpleType0.isCollectionLikeType();\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "protected void serializeFieldsFiltered(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException",
    "methodName" : "serializeFieldsFiltered",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    JsonFactory jsonFactory0 = new JsonFactory();\n    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();\n    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;\n    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];\n    BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);\n    ((BeanSerializerBase) beanSerializer0).serializeFieldsFiltered(jsonFactory0, jsonGenerator0, defaultSerializerProvider_Impl0);\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException",
    "methodName" : "getSchema",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[13];\n    BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);\n    beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);\n}",
    "testName" : "test1515"
  },
  "test1818" : {
    "methodSignature" : "public boolean isUnwrappingSerializer()",
    "methodName" : "isUnwrappingSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    beanSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, simpleType0);\n    beanSerializer0.isUnwrappingSerializer();\n}",
    "testName" : "test1818"
  }
}