/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:47:00 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.RawSerializer;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
import com.fasterxml.jackson.databind.ser.std.StdKeySerializers;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdSerializer_ESTest extends StdSerializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<IOException> class0 = IOException.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) class0);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<RuntimeException> class0 = RuntimeException.class;
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<RuntimeException, ?>) null);
        JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);
        jsonNode0.isLong();
        assertFalse(jsonNode0.isLong());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Integer> class0 = Integer.class;
        RawSerializer<IOException> rawSerializer0 = new RawSerializer<IOException>(class0);
        Class<IOException> class1 = rawSerializer0.handledType();
        class1.isInterface();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<Error> class0 = Error.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        StdKeySerializers.StringKeySerializer stdKeySerializers_StringKeySerializer0 = new StdKeySerializers.StringKeySerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        stdKeySerializers_StringKeySerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, simpleType0);
        simpleType0.isInterface();
        assertTrue(simpleType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<JsonMappingException> class0 = JsonMappingException.class;
        RawSerializer<IOException> rawSerializer0 = new RawSerializer<IOException>(class0);
        boolean boolean0 = rawSerializer0.isDefaultSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<ObjectNode> class0 = ObjectNode.class;
        RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);
        JsonNode jsonNode0 = rawSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<ObjectNode> class0 = ObjectNode.class;
        RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);
        JsonNode jsonNode0 = rawSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<PropertyAccessor> class0 = PropertyAccessor.class;
        RawSerializer<ObjectNode> rawSerializer0 = new RawSerializer<ObjectNode>(class0);
        ObjectNode objectNode0 = rawSerializer0.createSchemaNode("FAIL_ON_UNRESOLVED_OBJECT_IDS", false);
        objectNode0.size();
        assertEquals(0, objectNode0.size());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MockIOException mockIOException0 = new MockIOException();
        Class<InputStream> class0 = InputStream.class;
        RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);
        rawSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) mockIOException0, (Object) class0, "Can not write a field name, expecting a value");
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<InputStream> class0 = InputStream.class;
        Class<String> class1 = String.class;
        RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class1);
        InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
        rawSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) invocationTargetException0, (Object) class0, "t");
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'tK[3E7,e%~`20OS6");
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLTransactionRollbackException0);
        Class<ClassKey> class0 = ClassKey.class;
        RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);
        rawSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) class0, "'tK[3E7,e%~`20OS6");
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<IOException> class0 = IOException.class;
        RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);
        MockError mockError0 = new MockError();
        rawSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) mockError0, (Object) "Can not write a field name, eWpecting a value", "Can not write a field name, eWpecting a value");
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException("h8PG?prI,Ejddxm&:");
        Class<InputStream> class0 = InputStream.class;
        RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);
        rawSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) jsonMappingException0, (Object) jsonMappingException0, "h8PG?prI,Ejddxm&:");
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        MockIOException mockIOException0 = new MockIOException();
        sqlDateSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) mockIOException0, (Object) null, (-3586));
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("DtC[3E7pe%~?7`2S6");
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLTransactionRollbackException0);
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        sqlDateSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) "DtC[3E7pe%~?7`2S6", (-327));
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        sqlDateSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) defaultSerializerProvider_Impl0, 0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        MockError mockError0 = new MockError();
        sqlDateSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) mockError0, (Object) mockError0, 1);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        sqlDateSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) sQLTimeoutException0, (Object) sQLTimeoutException0, 1167);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException("B8XTC+A|Q1?0");
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        sqlDateSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) jsonMappingException0, (Object) "B8XTC+A|Q1?0", 0);
    }
}
