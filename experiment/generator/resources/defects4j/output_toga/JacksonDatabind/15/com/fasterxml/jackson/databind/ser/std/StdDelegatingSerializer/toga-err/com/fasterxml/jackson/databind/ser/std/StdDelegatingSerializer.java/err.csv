com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer,@Test(timeout = 4000)
public void test011() throws Throwable {
    Class<DOMSerializer> class0 = DOMSerializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
    JsonFactory jsonFactory0 = new JsonFactory();
    MockPrintStream mockPrintStream0 = new MockPrintStream(""JSON"");
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
    AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, """");
    stdDelegatingSerializer0.serializeWithType(dataInputStream0, jsonGenerator0, defaultSerializerProvider_Impl0, asExternalTypeSerializer0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer,@Test(timeout = 4000)
public void test066() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    stdDelegatingSerializer0.isEmpty((Object) null);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer,@Test(timeout = 4000)
public void test088() throws Throwable {
    Class<NamedType> class0 = NamedType.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    stdDelegatingSerializer0.resolve(defaultSerializerProvider_Impl0);
    stdDelegatingSerializer0.isUnwrappingSerializer();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer,@Test(timeout = 4000)
public void test1212() throws Throwable {
    Class<Annotation> class0 = Annotation.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    SimpleModule simpleModule0 = new SimpleModule();
    Converter<Object, Module> converter0 = (Converter<Object, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
    doReturn(simpleModule0).when(converter0).convert(any());
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    Class<Object> class1 = stdDelegatingSerializer0.handledType();
    stdDelegatingSerializer0.serialize(class1, (JsonGenerator) null, defaultSerializerProvider_Impl0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer,@Test(timeout = 4000)
public void test1313() throws Throwable {
    Class<Annotation> class0 = Annotation.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Converter<Object, Module> converter0 = (Converter<Object, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(converter0).convert(any());
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    Class<Object> class1 = stdDelegatingSerializer0.handledType();
    stdDelegatingSerializer0.serialize(class1, (JsonGenerator) null, defaultSerializerProvider_Impl0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer,@Test(timeout = 4000)
public void test1414() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) null, (Type) null);
    jsonNode0.isBigDecimal();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer,@Test(timeout = 4000)
public void test1616() throws Throwable {
    Class<DOMSerializer> class0 = DOMSerializer.class;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
    jsonNode0.isBigInteger();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
