project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Class<StdDelegatingSerializer> class0 = StdDelegatingSerializer.class;
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<StdDelegatingSerializer, ?>) null);
    Converter<Object, ?> converter0 = stdDelegatingSerializer0.getConverter();
    assertNull(converter0);
}",0,
project,0,test011,"public void test011() throws Throwable {
    Class<DOMSerializer> class0 = DOMSerializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
    JsonFactory jsonFactory0 = new JsonFactory();
    MockPrintStream mockPrintStream0 = new MockPrintStream(""JSON"");
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
    AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, """");
    // Undeclared exception!
    try {
        stdDelegatingSerializer0.serializeWithType(dataInputStream0, jsonGenerator0, defaultSerializerProvider_Impl0, asExternalTypeSerializer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    JsonSerializer<?> jsonSerializer0 = stdDelegatingSerializer0.getDelegatee();
    assertNull(jsonSerializer0);
}",0,
project,0,test033,"public void test033() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        stdDelegatingSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Object) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    Class<DOMSerializer> class0 = DOMSerializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    JsonSerializer<?> jsonSerializer0 = stdDelegatingSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
    assertSame(stdDelegatingSerializer0, jsonSerializer0);
}",0,
project,0,test055,"public void test055() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base((SerializerProvider) null);
    // Undeclared exception!
    try {
        stdDelegatingSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer"", e);
    }
}",1,
project,0,test066,"public void test066() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    // Undeclared exception!
    try {
        stdDelegatingSerializer0.isEmpty((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    Class<DOMSerializer> class0 = DOMSerializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    JsonNode jsonNode0 = stdDelegatingSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
    assertNull(jsonNode0);
}",0,assertNotNull(jsonNode0)
project,0,test088,"public void test088() throws Throwable {
    Class<NamedType> class0 = NamedType.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    stdDelegatingSerializer0.resolve(defaultSerializerProvider_Impl0);
    assertFalse(stdDelegatingSerializer0.isUnwrappingSerializer());
}",0,assertTrue(stdDelegatingSerializer0.isUnwrappingSerializer())
project,0,test099,"public void test099() throws Throwable {
    Class<StdDelegatingSerializer> class0 = StdDelegatingSerializer.class;
    JavaType javaType0 = TypeFactory.unknownType();
    MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate((Converter<Object, ?>) null, mapLikeType0, stdDelegatingSerializer0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    stdDelegatingSerializer1.resolve(defaultSerializerProvider_Impl0);
    assertNotSame(stdDelegatingSerializer1, stdDelegatingSerializer0);
}",1,
project,0,test1010,"public void test1010() throws Throwable {
    Class<JsonDeserializer> class0 = JsonDeserializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, (JsonSerializer<?>) null);
    // Undeclared exception!
    try {
        stdDelegatingSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    JavaType javaType0 = TypeFactory.unknownType();
    StdDelegatingSerializer stdDelegatingSerializer1 = new StdDelegatingSerializer((Converter<Object, ?>) null, javaType0, stdDelegatingSerializer0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        stdDelegatingSerializer1.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    Class<Annotation> class0 = Annotation.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    SimpleModule simpleModule0 = new SimpleModule();
    Converter<Object, Module> converter0 = (Converter<Object, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
    doReturn(simpleModule0).when(converter0).convert(any());
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    Class<Object> class1 = stdDelegatingSerializer0.handledType();
    try {
        stdDelegatingSerializer0.serialize(class1, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.impl.FailingSerializer"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    Class<Annotation> class0 = Annotation.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Converter<Object, Module> converter0 = (Converter<Object, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(converter0).convert(any());
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    Class<Object> class1 = stdDelegatingSerializer0.handledType();
    // Undeclared exception!
    try {
        stdDelegatingSerializer0.serialize(class1, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) null, (Type) null);
    assertFalse(jsonNode0.isBigDecimal());
}",0,assertTrue(jsonNode0.isBigDecimal())
project,0,test1515,"public void test1515() throws Throwable {
    Class<Module> class0 = Module.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate((Converter<Object, ?>) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    JsonNode jsonNode0 = stdDelegatingSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
    assertNull(jsonNode0);
}",1,
project,0,test1616,"public void test1616() throws Throwable {
    Class<DOMSerializer> class0 = DOMSerializer.class;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
    JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
    assertFalse(jsonNode0.isBigInteger());
}",0,assertTrue(jsonNode0.isBigInteger())
