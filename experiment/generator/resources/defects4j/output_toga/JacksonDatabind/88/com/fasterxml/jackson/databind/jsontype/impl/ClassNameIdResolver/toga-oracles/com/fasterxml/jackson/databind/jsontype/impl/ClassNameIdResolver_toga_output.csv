project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
    Class<String> class0 = String.class;
    classNameIdResolver0.registerSubtype(class0, ""com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase"");
    assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
}",0,
project,0,test22,"public void test22() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    JavaType javaType0 = classNameIdResolver0.typeFromId(serializerProvider0, ""java.utilcom.fasterxml.jackson.databind.MapperFeature"");
    assertNull(javaType0);
}",0,assertNotNull(javaType0)
project,0,test33,"public void test33() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = TypeFactory.unknownType();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
    String string0 = classNameIdResolver0.getDescForKnownTypeIds();
    assertEquals(""class name used as type id"", string0);
}",0,
project,0,test44,"public void test44() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<EnumSet> class0 = EnumSet.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
    String string0 = classNameIdResolver0.idFromValue(typeFactory0);
    assertEquals(""com.fasterxml.jackson.databind.type.TypeFactory"", string0);
}",0,
project,0,test55,"public void test55() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = TypeFactory.unknownType();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    // Undeclared exception!
    try {
        classNameIdResolver0.typeFromId(serializerProvider0, ""g/}<F:L\""Mc"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Failed to parse type 'g/}<F:L\""Mc' (remaining: '<F:L\""Mc'): Can not locate class 'g/}', problem: g/}
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeParser"", e);
    }
}",0,
project,0,test66,"public void test66() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    String string0 = classNameIdResolver0._idFrom(class0, class0, typeFactory0);
    assertEquals(""com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type"", string0);
}",0,
project,0,test77,"public void test77() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<EnumSet> class0 = EnumSet.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
    String string0 = classNameIdResolver0.idFromBaseType();
    assertEquals(""java.util.EnumSet"", string0);
}",0,
project,0,test88,"public void test88() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayDeque> class0 = ArrayDeque.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(arrayType0, typeFactory0);
    Class<ObjectMapper.DefaultTyping> class1 = ObjectMapper.DefaultTyping.class;
    EnumMap<ObjectMapper.DefaultTyping, ObjectMapper.DefaultTyping> enumMap0 = new EnumMap<ObjectMapper.DefaultTyping, ObjectMapper.DefaultTyping>(class1);
    String string0 = minimalClassNameIdResolver0._idFrom(enumMap0, class0, typeFactory0);
    assertEquals(""java.util.EnumMap<com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping,java.lang.Object>"", string0);
}",0,
