{
  "test1212" : {
    "methodSignature" : "public boolean isThrowable()",
    "methodName" : "isThrowable",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Class<String> class0 = String.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    resolvedRecursiveType0.isThrowable();\n}",
    "testName" : "test1212"
  },
  "test2323" : {
    "methodSignature" : "public Class<?> getParameterSource()",
    "methodName" : "getParameterSource",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    Class<Object> class0 = Object.class;\n    Stack<JavaType> stack0 = new Stack<JavaType>();\n    TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);\n    typeBindings0.toString();\n    Class<String> class1 = String.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);\n    ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);\n    resolvedRecursiveType1.isContainerType();\n    resolvedRecursiveType0.getParameterSource();\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "public final boolean isTypeOrSubTypeOf(Class<?> clz)",
    "methodName" : "isTypeOrSubTypeOf",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    TypeBindings typeBindings0 = TypeBindings.emptyBindings();\n    Class<String> class0 = String.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    resolvedRecursiveType0.isTypeOrSubTypeOf(class0);\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "public JavaType getKeyType()",
    "methodName" : "getKeyType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    Class<Object> class0 = Object.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    FileSystemHandling.shouldAllThrowIOExceptions();\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);\n    Class<Integer> class1 = Integer.class;\n    referenceType0.forcedNarrowBy(class1);\n    referenceType0.withContentType(resolvedRecursiveType0);\n    referenceType0.getKeyType();\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Class<Object> class0 = Object.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    resolvedRecursiveType0.isPrimitive();\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "public JavaType forcedNarrowBy(Class<?> subclass)",
    "methodName" : "forcedNarrowBy",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    TypeBindings typeBindings0 = TypeBindings.emptyBindings();\n    Class<Object> class0 = Object.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    resolvedRecursiveType0.forcedNarrowBy(class0);\n}",
    "testName" : "test2121"
  },
  "test2222" : {
    "methodSignature" : "public boolean hasValueHandler()",
    "methodName" : "hasValueHandler",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    Class<JsonInclude.Include> class0 = JsonInclude.Include.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    resolvedRecursiveType0.getErasedSignature();\n    resolvedRecursiveType0.hasValueHandler();\n}",
    "testName" : "test2222"
  },
  "test011" : {
    "methodSignature" : "public Object getContentValueHandler()",
    "methodName" : "getContentValueHandler",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<JsonInclude.Include> class0 = JsonInclude.Include.class;\n    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);\n    arrayType0.getContentValueHandler();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public JavaType forcedNarrowBy(Class<?> subclass)",
    "methodName" : "forcedNarrowBy",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Class<Object> class0 = Object.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    Class<Integer> class1 = Integer.class;\n    resolvedRecursiveType0.forcedNarrowBy(class1);\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "public String getGenericSignature()",
    "methodName" : "getGenericSignature",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeBindings typeBindings0 = TypeBindings.emptyBindings();\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    resolvedRecursiveType0.getGenericSignature();\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public boolean isConcrete()",
    "methodName" : "isConcrete",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeBindings typeBindings0 = TypeBindings.emptyBindings();\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    resolvedRecursiveType0.isConcrete();\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public boolean isConcrete()",
    "methodName" : "isConcrete",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    TypeBindings typeBindings0 = TypeBindings.emptyBindings();\n    Class<Integer> class0 = Integer.TYPE;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    Class<String> class1 = String.class;\n    resolvedRecursiveType0.isTypeOrSubTypeOf(class1);\n    resolvedRecursiveType0.isConcrete();\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public boolean hasContentType()",
    "methodName" : "hasContentType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeBindings typeBindings0 = TypeBindings.emptyBindings();\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    resolvedRecursiveType0.hasContentType();\n}",
    "testName" : "test1717"
  },
  "test2828" : {
    "methodSignature" : "public static CollectionLikeType upgradeFrom(JavaType baseType, JavaType elementType)",
    "methodName" : "upgradeFrom",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    Class<Object> class0 = Object.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    resolvedRecursiveType0.getContentValueHandler();\n    CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public boolean equals(Object o)",
    "methodName" : "equals",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();\n    TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);\n    Class<String> class0 = String.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);\n    Class<LinkedList> class1 = LinkedList.class;\n    CollectionType collectionType0 = typeFactory1.constructCollectionType(class1, class1);\n    collectionType0.hasGenericTypes();\n    collectionType0.withContentTypeHandler(classLoader0);\n    TypeFactory typeFactory2 = TypeFactory.defaultInstance();\n    ArrayType arrayType0 = typeFactory2.constructArrayType((JavaType) collectionLikeType0);\n    Object object0 = new Object();\n    ArrayType arrayType1 = arrayType0.withContentTypeHandler(object0);\n    arrayType1.equals(\"\");\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "public final boolean isJavaLangObject()",
    "methodName" : "isJavaLangObject",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeBindings typeBindings0 = TypeBindings.emptyBindings();\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    resolvedRecursiveType0.isContainerType();\n    resolvedRecursiveType0.isJavaLangObject();\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public boolean hasHandlers()",
    "methodName" : "hasHandlers",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null);\n    ArrayType arrayType1 = arrayType0.withContentTypeHandler(resolvedRecursiveType0);\n    Object object0 = new Object();\n    ArrayType arrayType2 = arrayType1.withValueHandler(object0);\n    arrayType2.hasHandlers();\n}",
    "testName" : "test1515"
  },
  "test2626" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    JsonFactory jsonFactory0 = new JsonFactory();\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<Object> class0 = Object.class;\n    ObjectReader objectReader0 = objectMapper0.readerFor(class0);\n    objectReader0.getTypeFactory();\n    Stack<JavaType> stack0 = new Stack<JavaType>();\n    Class<Throwable> class1 = Throwable.class;\n    TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    resolvedRecursiveType0.isFinal();\n}",
    "testName" : "test2626"
  },
  "test3030" : {
    "methodSignature" : "public boolean hasValueHandler()",
    "methodName" : "hasValueHandler",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    Class<Object> class0 = Object.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    resolvedRecursiveType0.hasValueHandler();\n}",
    "testName" : "test3030"
  },
  "test2020" : {
    "methodSignature" : "public Object getContentTypeHandler()",
    "methodName" : "getContentTypeHandler",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Class<Object> class0 = Object.class;\n    Stack<JavaType> stack0 = new Stack<JavaType>();\n    TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);\n    Class<String> class1 = String.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);\n    JavaType[] javaTypeArray0 = new JavaType[2];\n    javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;\n    javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;\n    javaTypeArray0[0].containedTypeOrUnknown((-2831));\n    Object object0 = new Object();\n    Class<Object> class2 = Object.class;\n    javaTypeArray0[1].isTypeOrSubTypeOf(class2);\n    Integer integer0 = new Integer(1585);\n    Class<Integer> class3 = Integer.TYPE;\n    resolvedRecursiveType0.forcedNarrowBy(class3);\n    resolvedRecursiveType0.getContentTypeHandler();\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "public static MapLikeType upgradeFrom(JavaType baseType, JavaType keyT, JavaType valueT)",
    "methodName" : "upgradeFrom",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeBindings typeBindings0 = TypeBindings.emptyBindings();\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public boolean hasHandlers()",
    "methodName" : "hasHandlers",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<LinkedList> class0 = LinkedList.class;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);\n    collectionType0.hasHandlers();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public boolean hasHandlers()",
    "methodName" : "hasHandlers",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Class<String> class0 = String.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    TypeBindings typeBindings0 = resolvedRecursiveType0.getBindings();\n    resolvedRecursiveType0.containedTypeName(309);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0, (Object) null, (Object) class0);\n    arrayType0.withContentTypeHandler(class0);\n    ArrayType arrayType1 = arrayType0.withStaticTyping();\n    arrayType1.hasHandlers();\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public JavaType containedTypeOrUnknown(int index)",
    "methodName" : "containedTypeOrUnknown",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Class<Throwable> class0 = Throwable.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    resolvedRecursiveType0.containedTypeOrUnknown(183);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public boolean hasValueHandler()",
    "methodName" : "hasValueHandler",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Class<Throwable> class0 = Throwable.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    resolvedRecursiveType0.hasGenericTypes();\n    resolvedRecursiveType0.hasValueHandler();\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    resolvedRecursiveType0.useStaticType();\n}",
    "testName" : "test1818"
  },
  "test2929" : {
    "methodSignature" : "public boolean isConcrete()",
    "methodName" : "isConcrete",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    TypeBindings typeBindings0 = TypeBindings.emptyBindings();\n    Class<Integer> class0 = Integer.TYPE;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    resolvedRecursiveType0.isConcrete();\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public boolean hasValueHandler()",
    "methodName" : "hasValueHandler",
    "className" : "com.fasterxml.jackson.databind.JavaType",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Class<Throwable> class0 = Throwable.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    Class<Object> class1 = Object.class;\n    resolvedRecursiveType0.isTypeOrSubTypeOf(class1);\n    resolvedRecursiveType0.hasValueHandler();\n}",
    "testName" : "test1919"
  }
}