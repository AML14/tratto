project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
    String string0 = collectionLikeType0.getErasedSignature();
    assertEquals(""Ljava/lang/Object;"", string0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    Class<ReferenceType> class0 = ReferenceType.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(collectionLikeType0);
    assertTrue(collectionLikeType1.equals((Object) collectionLikeType0));
}",0,
project,0,test023,"public void test023() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    Class<ReferenceType> class0 = ReferenceType.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(collectionLikeType0);
    assertTrue(collectionLikeType1.hasHandlers());
}",0,assertTrue(collectionLikeType1.hasHandlers())
project,0,test024,"public void test024() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    Class<ReferenceType> class0 = ReferenceType.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(collectionLikeType0);
    assertFalse(collectionLikeType1.useStaticType());
}",0,assertTrue(collectionLikeType1.useStaticType())
project,0,test035,"public void test035() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<LinkedList> class0 = LinkedList.class;
    Class<CollectionType> class1 = CollectionType.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
    CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) resolvedRecursiveType0);
    collectionType0.getContentValueHandler();
    assertFalse(collectionType0.hasHandlers());
}",0,assertFalse(collectionType0.hasHandlers())
project,0,test046,"public void test046() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    MapType mapType0 = typeFactory0.constructRawMapType(class0);
    Class<Integer> class1 = Integer.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (JavaType) mapType0);
    collectionLikeType0.getContentTypeHandler();
    assertFalse(collectionLikeType0.useStaticType());
}",0,assertTrue(collectionLikeType0.useStaticType())
project,0,test057,"public void test057() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    Class<MapLikeType> class1 = MapLikeType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    JavaType javaType0 = collectionLikeType0.refine(class1, typeBindings0, simpleType0, (JavaType[]) null);
    assertFalse(javaType0.useStaticType());
}",0,assertFalse(javaType0.useStaticType())
project,0,test079,"public void test079() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
    String string0 = collectionLikeType0.getGenericSignature();
    assertEquals(""Ljava/lang/Object<Ljava/lang/Object;>;"", string0);
}",0,
project,0,test0810,"public void test0810() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    Class<String> class0 = String.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(simpleType0);
    assertTrue(collectionLikeType1.equals((Object) collectionLikeType0));
}",0,
project,0,test0811,"public void test0811() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    Class<String> class0 = String.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(simpleType0);
    assertFalse(collectionLikeType1.useStaticType());
}",0,assertTrue(collectionLikeType1.useStaticType())
project,0,test0912,"public void test0912() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    Class<String> class0 = String.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(simpleType0);
    assertTrue(collectionLikeType1.equals((Object) collectionLikeType0));
}",0,
project,0,test0913,"public void test0913() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    Class<String> class0 = String.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(simpleType0);
    assertFalse(collectionLikeType1.useStaticType());
}",0,assertTrue(collectionLikeType1.useStaticType())
project,0,test1014,"public void test1014() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    Class<MapLikeType> class0 = MapLikeType.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
    assertFalse(collectionLikeType0.useStaticType());
}",0,
project,0,test1115,"public void test1115() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
    CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentValueHandler(simpleType0);
    assertTrue(collectionLikeType1.equals((Object) collectionLikeType0));
}",0,
project,0,test1216,"public void test1216() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
    Class<Object> class0 = Object.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    JavaType javaType0 = collectionLikeType0._narrow(class0);
    assertFalse(javaType0.useStaticType());
}",0,assertTrue(javaType0.useStaticType())
project,0,test1317,"public void test1317() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    Class<JsonDeserializer> class0 = JsonDeserializer.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    assertEquals(1, collectionLikeType0.containedTypeCount());
}",0,"assertEquals(0, collectionLikeType0.containedTypeCount())"
project,0,test1318,"public void test1318() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    Class<JsonDeserializer> class0 = JsonDeserializer.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    assertFalse(collectionLikeType0.useStaticType());
}",0,assertTrue(collectionLikeType0.useStaticType())
project,0,test1419,"public void test1419() throws Throwable {
    // Undeclared exception!
    try {
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.CollectionLikeType"", e);
    }
}",0,
project,0,test1520,"public void test1520() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    JavaType javaType0 = collectionLikeType0.withContentType(collectionLikeType0);
    assertFalse(javaType0.useStaticType());
}",0,
project,0,test1521,"public void test1521() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    JavaType javaType0 = collectionLikeType0.withContentType(collectionLikeType0);
    assertNotSame(javaType0, collectionLikeType0);
}",0,
project,0,test1522,"public void test1522() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    JavaType javaType0 = collectionLikeType0.withContentType(collectionLikeType0);
    assertFalse(javaType0.equals((Object) collectionLikeType0));
}",0,
project,0,test1623,"public void test1623() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    Class<String> class0 = String.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    JavaType javaType0 = collectionLikeType0.withContentType(simpleType0);
    assertSame(javaType0, collectionLikeType0);
}",0,
project,0,test1624,"public void test1624() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    Class<String> class0 = String.class;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    JavaType javaType0 = collectionLikeType0.withContentType(simpleType0);
    assertFalse(javaType0.useStaticType());
}",0,assertTrue(javaType0.useStaticType())
project,0,test1725,"public void test1725() throws Throwable {
    Class<MapType> class0 = MapType.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    MapLikeType mapLikeType0 = new MapLikeType(resolvedRecursiveType0, simpleType0, resolvedRecursiveType0);
    CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType0 = new CollectionLikeType(class0, (TypeBindings) null, mapLikeType0, (JavaType[]) null, simpleType0, simpleType0, collectionType0, true);
    CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
    assertSame(collectionLikeType1, collectionLikeType0);
}",0,
project,0,test1826,"public void test1826() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    Class<String> class0 = String.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    JavaType[] javaTypeArray0 = new JavaType[0];
    TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
    Class<HashMap> class1 = HashMap.class;
    MapType mapType0 = typeFactory0.constructRawMapType(class1);
    CollectionLikeType collectionLikeType0 = new CollectionLikeType(class0, typeBindings0, simpleType0, javaTypeArray0, simpleType0, typeBindings0, mapType0, true);
    boolean boolean0 = collectionLikeType0.hasHandlers();
    assertTrue(boolean0);
}",1,
project,0,test1927,"public void test1927() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
    CollectionLikeType collectionLikeType0 = collectionType0.withContentValueHandler(class0);
    boolean boolean0 = collectionLikeType0.hasHandlers();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1928,"public void test1928() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
    CollectionLikeType collectionLikeType0 = collectionType0.withContentValueHandler(class0);
    boolean boolean0 = collectionLikeType0.hasHandlers();
    assertFalse(collectionType0.hasHandlers());
}",0,assertTrue(collectionType0.hasHandlers())
project,0,test2029,"public void test2029() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    JavaType[] javaTypeArray0 = new JavaType[8];
    CollectionType collectionType0 = new CollectionType(simpleType0, javaTypeArray0[1]);
    String string0 = collectionType0.buildCanonicalName();
    assertEquals(""java.lang.String"", string0);
}",0,
project,0,test2130,"public void test2130() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
    String string0 = collectionLikeType0.buildCanonicalName();
    assertEquals(""java.lang.Object<java.lang.Object>"", string0);
}",0,
project,0,test2231,"public void test2231() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
    boolean boolean0 = collectionLikeType0.equals((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2332,"public void test2332() throws Throwable {
    Class<ObjectReader> class0 = ObjectReader.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
    boolean boolean0 = collectionLikeType1.equals(collectionLikeType0);
    assertTrue(collectionLikeType1.useStaticType());
}",0,assertTrue(collectionLikeType1.useStaticType())
project,0,test2333,"public void test2333() throws Throwable {
    Class<ObjectReader> class0 = ObjectReader.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
    boolean boolean0 = collectionLikeType1.equals(collectionLikeType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2435,"public void test2435() throws Throwable {
    Class<ObjectReader> class0 = ObjectReader.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class0, (JavaType) collectionLikeType0);
    boolean boolean0 = collectionLikeType1.equals(collectionLikeType0);
    assertFalse(collectionLikeType0.equals((Object) collectionLikeType1));
}",0,
project,0,test2436,"public void test2436() throws Throwable {
    Class<ObjectReader> class0 = ObjectReader.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class0, (JavaType) collectionLikeType0);
    boolean boolean0 = collectionLikeType1.equals(collectionLikeType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2437,"public void test2437() throws Throwable {
    Class<ObjectReader> class0 = ObjectReader.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class0, (JavaType) collectionLikeType0);
    boolean boolean0 = collectionLikeType1.equals(collectionLikeType0);
    assertFalse(collectionLikeType1.useStaticType());
}",0,assertTrue(collectionLikeType1.useStaticType())
