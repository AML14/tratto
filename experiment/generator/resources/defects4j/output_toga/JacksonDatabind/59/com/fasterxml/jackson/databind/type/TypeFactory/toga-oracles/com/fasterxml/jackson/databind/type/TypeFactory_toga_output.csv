project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<DeserializationFeature> class0 = DeserializationFeature.class;
    typeFactory0.constructType((Type) class0, (Class<?>) class0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    TypeFactory.rawClass((Type) null);
}",0,
project,0,test033,"public void test033() throws Throwable {
    TypeFactory.unknownType();
}",0,
project,0,test044,"public void test044() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    typeFactory0.constructRawCollectionLikeType(class0);
}",0,
project,0,test077,"public void test077() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.withCache((LRUMap<Object, JavaType>) null);
}",0,
project,0,test088,"public void test088() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.constructFromCanonical("">&En7*n.]1-wrU,"");
}",0,
project,0,test099,"public void test099() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Properties> class0 = Properties.class;
    typeFactory0.constructType((Type) class0, (Class<?>) class0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Class<MapperFeature> class0 = MapperFeature.class;
    typeFactory0.findTypeParameters((JavaType) simpleType0, (Class<?>) class0);
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
    typeFactory1.findClass(""5&7$IuY"");
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
    arrayType0.withStaticTyping();
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    typeFactory0.uncheckedSimpleType(class0);
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Object> class0 = Object.class;
    typeFactory0.uncheckedSimpleType(class0);
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    TypeFactory.rawClass(simpleType0);
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType javaType0 = TypeFactory.unknownType();
    typeFactory0.constructType((Type) javaType0, javaType0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
    typeFactory0.constructType((Type) collectionType0, (Class<?>) class0);
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Properties> class0 = Properties.class;
    // Undeclared exception!
    try {
        typeFactory0.constructRawMapType(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not create TypeBindings for class java.util.Properties with 2 type parameters: class expects 0
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeBindings"", e);
    }
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.constructFromCanonical(""char"");
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0._findPrimitive(""HmG"");
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
    doReturn((String) null).when(typeModifier0).toString();
    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
    TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    typeFactory1.withModifier(typeModifier1);
    Class<Integer> class0 = Integer.TYPE;
    // Undeclared exception!
    try {
        typeFactory1.constructType((Type) class0, (Class<?>) class0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // TypeModifier Mock for TypeModifier, hashCode: 2021360630 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1846850338) return null for type [simple type, class int]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Integer> class0 = Integer.class;
    typeFactory0.constructRawMapLikeType(class0);
}",0,
project,0,test3030,"public void test3030() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.withModifier((TypeModifier) null);
}",0,
project,0,test3131,"public void test3131() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<CollectionType> class0 = CollectionType.class;
    typeFactory0.constructRawMapLikeType(class0);
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Object> class0 = Object.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Properties> class0 = Properties.class;
    typeFactory0.constructRawMapLikeType(class0);
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.constructFromCanonical(""com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer"");
}",0,
project,0,test3838,"public void test3838() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    Class<Object> class0 = Object.class;
    typeFactory0.constructReferenceType(class0, simpleType0);
}",0,
project,0,test3939,"public void test3939() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    Class<String> class0 = String.class;
    // Undeclared exception!
    try {
        typeFactory0.constructGeneralizedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.lang.String not a super-type of [simple type, class long]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test4141,"public void test4141() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ArrayList<MapperFeature> arrayList0 = new ArrayList<MapperFeature>();
    objectMapper0.readerForUpdating(arrayList0);
}",0,
project,0,test4242,"public void test4242() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.findClass(""float"");
}",0,
project,0,test4343,"public void test4343() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.constructType((TypeReference<?>) null);
}",0,
project,0,test4444,"public void test4444() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.clearCache();
}",0,
project,0,test4545,"public void test4545() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.findClass(""com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer"");
}",0,
project,0,test4646,"public void test4646() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<String> class0 = String.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.lang.String not subtype of [simple type, class long]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test4747,"public void test4747() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    typeFactory0.moreSpecificType(simpleType0, simpleType0);
}",0,
project,0,test4949,"public void test4949() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    SimpleType simpleType1 = TypeFactory.CORE_TYPE_LONG;
    typeFactory0.moreSpecificType(simpleType1, simpleType0);
}",0,
project,0,test5050,"public void test5050() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<String> class0 = String.class;
    typeFactory0.constructRawMapLikeType(class0);
}",0,
project,0,test5151,"public void test5151() throws Throwable {
    Class<Properties> class0 = Properties.class;
    TypeFactory.rawClass(class0);
}",0,
project,0,test5252,"public void test5252() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    typeFactory0.constructSpecializedType(javaType0, class0);
}",0,
project,0,test5353,"public void test5353() throws Throwable {
    Class<Properties> class0 = Properties.class;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.constructType((Type) class0, (JavaType) null);
}",0,
project,0,test5454,"public void test5454() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Integer> class0 = Integer.TYPE;
    typeFactory0.constructRawMapLikeType(class0);
}",0,
project,0,test5555,"public void test5555() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.constructFromCanonical(""boolean"");
}",0,
project,0,test5656,"public void test5656() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<POJONode> class0 = POJONode.class;
    typeFactory0.constructRawMapLikeType(class0);
}",0,
project,0,test5757,"public void test5757() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""short"");
}",0,
project,0,test5858,"public void test5858() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<LinkedList> class0 = LinkedList.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionLikeType0);
    Class<Properties> class1 = Properties.class;
    typeFactory0.constructType((Type) class1, (Class<?>) class1);
}",0,
project,0,test5959,"public void test5959() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<DeserializationFeature> class0 = DeserializationFeature.class;
    TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    typeFactory0.constructGeneralizedType(resolvedRecursiveType0, class0);
}",0,
project,0,test6060,"public void test6060() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
    Class<LinkedList> class1 = LinkedList.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) simpleType0);
    CollectionLikeType collectionLikeType0 = collectionType0.withStaticTyping();
    collectionLikeType0.findTypeParameters(class1);
    MapLikeType mapLikeType0 = new MapLikeType(collectionLikeType0, simpleType0, collectionType0);
    CollectionLikeType collectionLikeType1 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) mapLikeType0);
    SimpleType simpleType1 = TypeFactory.CORE_TYPE_ENUM;
    Properties properties0 = new Properties();
    properties0.put(typeFactory0, simpleType1);
    Class<Object> class2 = Object.class;
    typeFactory0.constructArrayType(class2);
    typeFactory0.constructRawMapLikeType(class2);
    Class<Object> class3 = Object.class;
    // Undeclared exception!
    try {
        typeFactory0.constructGeneralizedType(collectionLikeType1, class3);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Internal error: class java.lang.Object not included as super-type for [collection-like type; class com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping, contains [map-like type; class java.util.LinkedList, [simple type, class java.lang.Enum] -> [collection type; class java.util.LinkedList, contains [simple type, class java.lang.Enum]]]]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test6161,"public void test6161() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""int"");
}",0,
project,0,test6262,"public void test6262() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    Class<MapType> class0 = MapType.class;
    typeFactory0.constructSpecializedType(simpleType0, class0);
}",0,
project,0,test6363,"public void test6363() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""long"");
}",0,
project,0,test6464,"public void test6464() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Properties> class0 = Properties.class;
    LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(3, 5247);
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    TypeModifier[] typeModifierArray0 = new TypeModifier[0];
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    ClassLoader classLoader1 = classLoader0.getParent();
    TypeFactory typeFactory1 = new TypeFactory(lRUMap0, typeParser0, typeModifierArray0, classLoader1);
    typeFactory1.constructType((Type) class0, (Class<?>) class0);
}",0,
project,0,test6565,"public void test6565() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    TypeParser typeParser1 = typeParser0.withFactory(typeFactory0);
    TypeModifier[] typeModifierArray0 = new TypeModifier[7];
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    ClassLoader classLoader1 = classLoader0.getParent();
    TypeFactory typeFactory1 = new TypeFactory((LRUMap<Object, JavaType>) null, typeParser1, typeModifierArray0, classLoader1);
    Class<LinkedList> class0 = LinkedList.class;
    typeFactory1.constructRawCollectionType(class0);
    typeFactory1.withModifier(typeModifierArray0[2]);
}",0,
project,0,test6666,"public void test6666() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
    doReturn((String) null).when(typeModifier0).toString();
    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
    Class<RuntimeException> class0 = RuntimeException.class;
    // Undeclared exception!
    try {
        typeFactory1.constructRawMapLikeType(class0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // TypeModifier Mock for TypeModifier, hashCode: 1765330408 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1846850338) return null for type [simple type, class java.lang.Object]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test6868,"public void test6868() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
}",0,
project,0,test6969,"public void test6969() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.findClass(""void"");
}",0,
project,0,test7070,"public void test7070() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    SimpleType simpleType1 = TypeFactory.CORE_TYPE_LONG;
    typeFactory0.moreSpecificType(simpleType0, (JavaType) null);
}",0,
project,0,test7171,"public void test7171() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    doReturn(simpleType0).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    typeFactory1.constructRawMapLikeType(class0);
}",0,
project,0,test7272,"public void test7272() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayList> class0 = ArrayList.class;
    CollectionType collectionType0 = (CollectionType) typeFactory0.constructCollectionLikeType(class0, class0);
    CollectionType collectionType1 = (CollectionType) collectionType0.withTypeHandler(class0);
    typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionType1);
    Class<Properties> class1 = Properties.class;
    typeFactory0.constructType((Type) class1, (Class<?>) class1);
    typeFactory0.findClass(""p"");
}",0,
project,0,test7373,"public void test7373() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.findClass(""byte"");
}",0,
project,0,test7474,"public void test7474() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""double"");
}",0,
project,0,test7676,"public void test7676() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    Class<SerializationFeature> class1 = SerializationFeature.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
    CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) simpleType0);
    CollectionType collectionType1 = collectionType0.withTypeHandler((Object) null);
    ReferenceType referenceType0 = new ReferenceType(collectionType1, collectionLikeType0);
    SimpleType simpleType1 = referenceType0.withValueHandler(collectionType1);
    typeFactory0.constructGeneralizedType(simpleType1, class1);
    typeFactory0.constructFromCanonical(""com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer"");
}",0,
project,0,test7878,"public void test7878() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.constructFromCanonical(""long"");
}",0,
project,0,test7979,"public void test7979() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Properties> class0 = Properties.class;
    typeFactory0.constructType((Type) class0, (Class<?>) null);
}",0,
project,0,test8080,"public void test8080() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
    typeFactory0.moreSpecificType(simpleType0, arrayType0);
}",0,
project,0,test8181,"public void test8181() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""boolean"");
}",0,
project,0,test8282,"public void test8282() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<EnumSet> class0 = EnumSet.class;
    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) collectionType0);
    JavaType[] javaTypeArray0 = new JavaType[7];
    javaTypeArray0[0] = (JavaType) collectionType0;
    javaTypeArray0[2] = (JavaType) collectionType0;
    javaTypeArray0[6] = (JavaType) collectionType0;
    typeFactory0._constructSimple(class0, typeBindings0, collectionType0, javaTypeArray0);
}",0,
project,0,test8383,"public void test8383() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    typeFactory0.constructSpecializedType(simpleType0, class0);
    typeFactory0.findClass("""");
}",0,
