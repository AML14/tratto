{
  "test1212" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();\n    TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);\n    typeFactory1.findClass(\"5&7$IuY\");\n}",
    "testName" : "test1212"
  },
  "test4646" : {
    "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
    "methodName" : "constructSpecializedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4646() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<String> class0 = String.class;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;\n    typeFactory0.constructSpecializedType(simpleType0, class0);\n}",
    "testName" : "test4646"
  },
  "test3434" : {
    "methodSignature" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
    "methodName" : "constructRawMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<Properties> class0 = Properties.class;\n    typeFactory0.constructRawMapLikeType(class0);\n}",
    "testName" : "test3434"
  },
  "test6868" : {
    "methodSignature" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
    "methodName" : "moreSpecificType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6868() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);\n}",
    "testName" : "test6868"
  },
  "test5656" : {
    "methodSignature" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
    "methodName" : "constructRawMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5656() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<POJONode> class0 = POJONode.class;\n    typeFactory0.constructRawMapLikeType(class0);\n}",
    "testName" : "test5656"
  },
  "test7878" : {
    "methodSignature" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
    "methodName" : "constructFromCanonical",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7878() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.constructFromCanonical(\"long\");\n}",
    "testName" : "test7878"
  },
  "test4444" : {
    "methodSignature" : "public void clearCache()",
    "methodName" : "clearCache",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4444() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.clearCache();\n}",
    "testName" : "test4444"
  },
  "test3232" : {
    "methodSignature" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget, JavaType[] parameterTypes)",
    "methodName" : "constructSimpleType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Object> class0 = Object.class;\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);\n}",
    "testName" : "test3232"
  },
  "test6666" : {
    "methodSignature" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
    "methodName" : "constructRawMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6666() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());\n    doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));\n    doReturn((String) null).when(typeModifier0).toString();\n    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);\n    Class<RuntimeException> class0 = RuntimeException.class;\n    typeFactory1.constructRawMapLikeType(class0);\n}",
    "testName" : "test6666"
  },
  "test5454" : {
    "methodSignature" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
    "methodName" : "constructRawMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5454() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<Integer> class0 = Integer.TYPE;\n    typeFactory0.constructRawMapLikeType(class0);\n}",
    "testName" : "test5454"
  },
  "test7676" : {
    "methodSignature" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
    "methodName" : "constructFromCanonical",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7676() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;\n    Class<SerializationFeature> class1 = SerializationFeature.class;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);\n    CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) simpleType0);\n    CollectionType collectionType1 = collectionType0.withTypeHandler((Object) null);\n    ReferenceType referenceType0 = new ReferenceType(collectionType1, collectionLikeType0);\n    SimpleType simpleType1 = referenceType0.withValueHandler(collectionType1);\n    typeFactory0.constructGeneralizedType(simpleType1, class1);\n    typeFactory0.constructFromCanonical(\"com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer\");\n}",
    "testName" : "test7676"
  },
  "test033" : {
    "methodSignature" : "public static JavaType unknownType()",
    "methodName" : "unknownType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    TypeFactory.unknownType();\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "public TypeFactory withCache(LRUMap<Object, JavaType> cache)",
    "methodName" : "withCache",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.withCache((LRUMap<Object, JavaType>) null);\n}",
    "testName" : "test077"
  },
  "test3838" : {
    "methodSignature" : "public JavaType constructReferenceType(Class<?> rawType, JavaType referredType)",
    "methodName" : "constructReferenceType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;\n    Class<Object> class0 = Object.class;\n    typeFactory0.constructReferenceType(class0, simpleType0);\n}",
    "testName" : "test3838"
  },
  "test1414" : {
    "methodSignature" : "public JavaType uncheckedSimpleType(Class<?> cls)",
    "methodName" : "uncheckedSimpleType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;\n    typeFactory0.uncheckedSimpleType(class0);\n}",
    "testName" : "test1414"
  },
  "test5858" : {
    "methodSignature" : "public JavaType constructType(Type type, Class<?> contextClass)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5858() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<LinkedList> class0 = LinkedList.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionLikeType0);\n    Class<Properties> class1 = Properties.class;\n    typeFactory0.constructType((Type) class1, (Class<?>) class1);\n}",
    "testName" : "test5858"
  },
  "test2626" : {
    "methodSignature" : "protected Class<?> _findPrimitive(String className)",
    "methodName" : "_findPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0._findPrimitive(\"HmG\");\n}",
    "testName" : "test2626"
  },
  "test6060" : {
    "methodSignature" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
    "methodName" : "constructGeneralizedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6060() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;\n    Class<LinkedList> class1 = LinkedList.class;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) simpleType0);\n    CollectionLikeType collectionLikeType0 = collectionType0.withStaticTyping();\n    collectionLikeType0.findTypeParameters(class1);\n    MapLikeType mapLikeType0 = new MapLikeType(collectionLikeType0, simpleType0, collectionType0);\n    CollectionLikeType collectionLikeType1 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) mapLikeType0);\n    SimpleType simpleType1 = TypeFactory.CORE_TYPE_ENUM;\n    Properties properties0 = new Properties();\n    properties0.put(typeFactory0, simpleType1);\n    Class<Object> class2 = Object.class;\n    typeFactory0.constructArrayType(class2);\n    typeFactory0.constructRawMapLikeType(class2);\n    Class<Object> class3 = Object.class;\n    typeFactory0.constructGeneralizedType(collectionLikeType1, class3);\n}",
    "testName" : "test6060"
  },
  "test8282" : {
    "methodSignature" : "protected JavaType _constructSimple(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)",
    "methodName" : "_constructSimple",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8282() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<EnumSet> class0 = EnumSet.class;\n    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);\n    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) collectionType0);\n    JavaType[] javaTypeArray0 = new JavaType[7];\n    javaTypeArray0[0] = (JavaType) collectionType0;\n    javaTypeArray0[2] = (JavaType) collectionType0;\n    javaTypeArray0[6] = (JavaType) collectionType0;\n    typeFactory0._constructSimple(class0, typeBindings0, collectionType0, javaTypeArray0);\n}",
    "testName" : "test8282"
  },
  "test7070" : {
    "methodSignature" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
    "methodName" : "moreSpecificType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7070() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;\n    SimpleType simpleType1 = TypeFactory.CORE_TYPE_LONG;\n    typeFactory0.moreSpecificType(simpleType0, (JavaType) null);\n}",
    "testName" : "test7070"
  },
  "test8080" : {
    "methodSignature" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
    "methodName" : "moreSpecificType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8080() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;\n    ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);\n    typeFactory0.moreSpecificType(simpleType0, arrayType0);\n}",
    "testName" : "test8080"
  },
  "test4242" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4242() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.findClass(\"float\");\n}",
    "testName" : "test4242"
  },
  "test3030" : {
    "methodSignature" : "public TypeFactory withModifier(TypeModifier mod)",
    "methodName" : "withModifier",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.withModifier((TypeModifier) null);\n}",
    "testName" : "test3030"
  },
  "test6464" : {
    "methodSignature" : "public JavaType constructType(Type type, Class<?> contextClass)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6464() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Properties> class0 = Properties.class;\n    LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(3, 5247);\n    TypeParser typeParser0 = new TypeParser(typeFactory0);\n    TypeModifier[] typeModifierArray0 = new TypeModifier[0];\n    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();\n    ClassLoader classLoader1 = classLoader0.getParent();\n    TypeFactory typeFactory1 = new TypeFactory(lRUMap0, typeParser0, typeModifierArray0, classLoader1);\n    typeFactory1.constructType((Type) class0, (Class<?>) class0);\n}",
    "testName" : "test6464"
  },
  "test5252" : {
    "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
    "methodName" : "constructSpecializedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5252() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n    typeFactory0.constructSpecializedType(javaType0, class0);\n}",
    "testName" : "test5252"
  },
  "test2020" : {
    "methodSignature" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
    "methodName" : "constructRawMapType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Properties> class0 = Properties.class;\n    typeFactory0.constructRawMapType(class0);\n}",
    "testName" : "test2020"
  },
  "test7474" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7474() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.findClass(\"double\");\n}",
    "testName" : "test7474"
  },
  "test6262" : {
    "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
    "methodName" : "constructSpecializedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6262() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;\n    Class<MapType> class0 = MapType.class;\n    typeFactory0.constructSpecializedType(simpleType0, class0);\n}",
    "testName" : "test6262"
  },
  "test5050" : {
    "methodSignature" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
    "methodName" : "constructRawMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5050() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<String> class0 = String.class;\n    typeFactory0.constructRawMapLikeType(class0);\n}",
    "testName" : "test5050"
  },
  "test7272" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7272() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ArrayList> class0 = ArrayList.class;\n    CollectionType collectionType0 = (CollectionType) typeFactory0.constructCollectionLikeType(class0, class0);\n    CollectionType collectionType1 = (CollectionType) collectionType0.withTypeHandler(class0);\n    typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionType1);\n    Class<Properties> class1 = Properties.class;\n    typeFactory0.constructType((Type) class1, (Class<?>) class1);\n    typeFactory0.findClass(\"p\");\n}",
    "testName" : "test7272"
  },
  "test022" : {
    "methodSignature" : "public static Class<?> rawClass(Type t)",
    "methodName" : "rawClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    TypeFactory.rawClass((Type) null);\n}",
    "testName" : "test022"
  },
  "test1818" : {
    "methodSignature" : "public JavaType constructType(Type type, JavaType contextType)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    JavaType javaType0 = TypeFactory.unknownType();\n    typeFactory0.constructType((Type) javaType0, javaType0);\n}",
    "testName" : "test1818"
  },
  "test5757" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5757() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.findClass(\"short\");\n}",
    "testName" : "test5757"
  },
  "test7979" : {
    "methodSignature" : "public JavaType constructType(Type type, Class<?> contextClass)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7979() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Properties> class0 = Properties.class;\n    typeFactory0.constructType((Type) class0, (Class<?>) null);\n}",
    "testName" : "test7979"
  },
  "test1313" : {
    "methodSignature" : "public ArrayType withStaticTyping()",
    "methodName" : "withStaticTyping",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;\n    ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);\n    arrayType0.withStaticTyping();\n}",
    "testName" : "test1313"
  },
  "test4545" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4545() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.findClass(\"com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer\");\n}",
    "testName" : "test4545"
  },
  "test3535" : {
    "methodSignature" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
    "methodName" : "constructFromCanonical",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.constructFromCanonical(\"com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer\");\n}",
    "testName" : "test3535"
  },
  "test5555" : {
    "methodSignature" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
    "methodName" : "constructFromCanonical",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5555() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.constructFromCanonical(\"boolean\");\n}",
    "testName" : "test5555"
  },
  "test2121" : {
    "methodSignature" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
    "methodName" : "constructFromCanonical",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.constructFromCanonical(\"char\");\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
    "methodName" : "findTypeParameters",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;\n    Class<MapperFeature> class0 = MapperFeature.class;\n    typeFactory0.findTypeParameters((JavaType) simpleType0, (Class<?>) class0);\n}",
    "testName" : "test1111"
  },
  "test4343" : {
    "methodSignature" : "public JavaType constructType(TypeReference<?> typeRef)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4343() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.constructType((TypeReference<?>) null);\n}",
    "testName" : "test4343"
  },
  "test6565" : {
    "methodSignature" : "public TypeFactory withModifier(TypeModifier mod)",
    "methodName" : "withModifier",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6565() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);\n    TypeParser typeParser0 = new TypeParser(typeFactory0);\n    TypeParser typeParser1 = typeParser0.withFactory(typeFactory0);\n    TypeModifier[] typeModifierArray0 = new TypeModifier[7];\n    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();\n    ClassLoader classLoader1 = classLoader0.getParent();\n    TypeFactory typeFactory1 = new TypeFactory((LRUMap<Object, JavaType>) null, typeParser1, typeModifierArray0, classLoader1);\n    Class<LinkedList> class0 = LinkedList.class;\n    typeFactory1.constructRawCollectionType(class0);\n    typeFactory1.withModifier(typeModifierArray0[2]);\n}",
    "testName" : "test6565"
  },
  "test011" : {
    "methodSignature" : "public JavaType constructType(Type type, Class<?> contextClass)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<DeserializationFeature> class0 = DeserializationFeature.class;\n    typeFactory0.constructType((Type) class0, (Class<?>) class0);\n}",
    "testName" : "test011"
  },
  "test099" : {
    "methodSignature" : "public JavaType constructType(Type type, Class<?> contextClass)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Properties> class0 = Properties.class;\n    typeFactory0.constructType((Type) class0, (Class<?>) class0);\n}",
    "testName" : "test099"
  },
  "test2727" : {
    "methodSignature" : "public JavaType constructType(Type type, Class<?> contextClass)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());\n    doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));\n    doReturn((String) null).when(typeModifier0).toString();\n    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);\n    TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());\n    typeFactory1.withModifier(typeModifier1);\n    Class<Integer> class0 = Integer.TYPE;\n    typeFactory1.constructType((Type) class0, (Class<?>) class0);\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public static Class<?> rawClass(Type t)",
    "methodName" : "rawClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;\n    TypeFactory.rawClass(simpleType0);\n}",
    "testName" : "test1717"
  },
  "test4949" : {
    "methodSignature" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
    "methodName" : "moreSpecificType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4949() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;\n    SimpleType simpleType1 = TypeFactory.CORE_TYPE_LONG;\n    typeFactory0.moreSpecificType(simpleType1, simpleType0);\n}",
    "testName" : "test4949"
  },
  "test3939" : {
    "methodSignature" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
    "methodName" : "constructGeneralizedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3939() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;\n    Class<String> class0 = String.class;\n    typeFactory0.constructGeneralizedType(simpleType0, class0);\n}",
    "testName" : "test3939"
  },
  "test5959" : {
    "methodSignature" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
    "methodName" : "constructGeneralizedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5959() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<DeserializationFeature> class0 = DeserializationFeature.class;\n    TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    typeFactory0.constructGeneralizedType(resolvedRecursiveType0, class0);\n}",
    "testName" : "test5959"
  },
  "test1515" : {
    "methodSignature" : "public JavaType uncheckedSimpleType(Class<?> cls)",
    "methodName" : "uncheckedSimpleType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<Object> class0 = Object.class;\n    typeFactory0.uncheckedSimpleType(class0);\n}",
    "testName" : "test1515"
  },
  "test4747" : {
    "methodSignature" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
    "methodName" : "moreSpecificType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4747() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;\n    typeFactory0.moreSpecificType(simpleType0, simpleType0);\n}",
    "testName" : "test4747"
  },
  "test6969" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6969() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.findClass(\"void\");\n}",
    "testName" : "test6969"
  },
  "test7171" : {
    "methodSignature" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
    "methodName" : "constructRawMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7171() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;\n    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());\n    doReturn(simpleType0).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));\n    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);\n    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;\n    typeFactory1.constructRawMapLikeType(class0);\n}",
    "testName" : "test7171"
  },
  "test8181" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8181() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.findClass(\"boolean\");\n}",
    "testName" : "test8181"
  },
  "test5353" : {
    "methodSignature" : "public JavaType constructType(Type type, JavaType contextType)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5353() throws Throwable {\n    Class<Properties> class0 = Properties.class;\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.constructType((Type) class0, (JavaType) null);\n}",
    "testName" : "test5353"
  },
  "test4141" : {
    "methodSignature" : "public ObjectReader readerForUpdating(Object valueToUpdate)",
    "methodName" : "readerForUpdating",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4141() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    ArrayList<MapperFeature> arrayList0 = new ArrayList<MapperFeature>();\n    objectMapper0.readerForUpdating(arrayList0);\n}",
    "testName" : "test4141"
  },
  "test6363" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6363() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.findClass(\"long\");\n}",
    "testName" : "test6363"
  },
  "test3131" : {
    "methodSignature" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
    "methodName" : "constructRawMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<CollectionType> class0 = CollectionType.class;\n    typeFactory0.constructRawMapLikeType(class0);\n}",
    "testName" : "test3131"
  },
  "test5151" : {
    "methodSignature" : "public static Class<?> rawClass(Type t)",
    "methodName" : "rawClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5151() throws Throwable {\n    Class<Properties> class0 = Properties.class;\n    TypeFactory.rawClass(class0);\n}",
    "testName" : "test5151"
  },
  "test7373" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7373() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.findClass(\"byte\");\n}",
    "testName" : "test7373"
  },
  "test6161" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6161() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.findClass(\"int\");\n}",
    "testName" : "test6161"
  },
  "test8383" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8383() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;\n    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;\n    typeFactory0.constructSpecializedType(simpleType0, class0);\n    typeFactory0.findClass(\"\");\n}",
    "testName" : "test8383"
  },
  "test044" : {
    "methodSignature" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
    "methodName" : "constructRawCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;\n    typeFactory0.constructRawCollectionLikeType(class0);\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
    "methodName" : "constructFromCanonical",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.constructFromCanonical(\">&En7*n.]1-wrU,\");\n}",
    "testName" : "test088"
  },
  "test2929" : {
    "methodSignature" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
    "methodName" : "constructRawMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<Integer> class0 = Integer.class;\n    typeFactory0.constructRawMapLikeType(class0);\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public JavaType constructType(Type type, Class<?> contextClass)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<LinkedList> class0 = LinkedList.class;\n    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);\n    typeFactory0.constructType((Type) collectionType0, (Class<?>) class0);\n}",
    "testName" : "test1919"
  }
}