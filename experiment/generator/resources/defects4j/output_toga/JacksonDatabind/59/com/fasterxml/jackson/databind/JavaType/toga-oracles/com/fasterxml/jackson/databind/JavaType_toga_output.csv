project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Class<Object> class0 = Object.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
}",0,
project,0,test011,"public void test011() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    arrayType0.getContentValueHandler();
}",0,
project,0,test022,"public void test022() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    collectionType0.hasHandlers();
}",1,
project,0,test033,"public void test033() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    Class<Integer> class1 = Integer.class;
    resolvedRecursiveType0.forcedNarrowBy(class1);
}",0,
project,0,test044,"public void test044() throws Throwable {
    Class<String> class0 = String.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    TypeBindings typeBindings0 = resolvedRecursiveType0.getBindings();
    resolvedRecursiveType0.containedTypeName(309);
    ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0, (Object) null, (Object) class0);
    arrayType0.withContentTypeHandler(class0);
    ArrayType arrayType1 = arrayType0.withStaticTyping();
    arrayType1.hasHandlers();
}",0,
project,0,test066,"public void test066() throws Throwable {
    Class<Throwable> class0 = Throwable.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.containedTypeOrUnknown(183);
}",0,
project,0,test077,"public void test077() throws Throwable {
    Class<Object> class0 = Object.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    // Undeclared exception!
    try {
        resolvedRecursiveType0.getGenericSignature();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ResolvedRecursiveType"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    Class<Throwable> class0 = Throwable.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.hasGenericTypes();
    resolvedRecursiveType0.hasValueHandler();
}",0,
project,0,test099,"public void test099() throws Throwable {
    Class<Object> class0 = Object.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType0.isConcrete();
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.isPrimitive();
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    Class<String> class0 = String.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.isThrowable();
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    Class<String> class0 = String.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType0.isTypeOrSubTypeOf(class0);
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
    Class<String> class0 = String.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
    Class<LinkedList> class1 = LinkedList.class;
    CollectionType collectionType0 = typeFactory1.constructCollectionType(class1, class1);
    collectionType0.hasGenericTypes();
    collectionType0.withContentTypeHandler(classLoader0);
    TypeFactory typeFactory2 = TypeFactory.defaultInstance();
    ArrayType arrayType0 = typeFactory2.constructArrayType((JavaType) collectionLikeType0);
    Object object0 = new Object();
    ArrayType arrayType1 = arrayType0.withContentTypeHandler(object0);
    arrayType1.equals("""");
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    Class<Integer> class0 = Integer.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null);
    ArrayType arrayType1 = arrayType0.withContentTypeHandler(resolvedRecursiveType0);
    Object object0 = new Object();
    ArrayType arrayType2 = arrayType1.withValueHandler(object0);
    arrayType2.hasHandlers();
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    Class<Integer> class0 = Integer.TYPE;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    Class<String> class1 = String.class;
    resolvedRecursiveType0.isTypeOrSubTypeOf(class1);
    resolvedRecursiveType0.isConcrete();
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    Class<Object> class0 = Object.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType0.hasContentType();
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    Class<Integer> class0 = Integer.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.useStaticType();
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    Class<Throwable> class0 = Throwable.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    Class<Object> class1 = Object.class;
    resolvedRecursiveType0.isTypeOrSubTypeOf(class1);
    resolvedRecursiveType0.hasValueHandler();
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    Class<Object> class0 = Object.class;
    Stack<JavaType> stack0 = new Stack<JavaType>();
    TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
    Class<String> class1 = String.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
    JavaType[] javaTypeArray0 = new JavaType[2];
    javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
    javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
    javaTypeArray0[0].containedTypeOrUnknown((-2831));
    Object object0 = new Object();
    Class<Object> class2 = Object.class;
    javaTypeArray0[1].isTypeOrSubTypeOf(class2);
    Integer integer0 = new Integer(1585);
    Class<Integer> class3 = Integer.TYPE;
    resolvedRecursiveType0.forcedNarrowBy(class3);
    resolvedRecursiveType0.getContentTypeHandler();
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType0.forcedNarrowBy(class0);
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.getErasedSignature();
    // Undeclared exception!
    try {
        resolvedRecursiveType0.hasValueHandler();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ResolvedRecursiveType"", e);
    }
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    Class<Object> class0 = Object.class;
    Stack<JavaType> stack0 = new Stack<JavaType>();
    TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
    typeBindings0.toString();
    Class<String> class1 = String.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
    ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType1.isContainerType();
    resolvedRecursiveType0.getParameterSource();
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    FileSystemHandling.shouldAllThrowIOExceptions();
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
    Class<Integer> class1 = Integer.class;
    referenceType0.forcedNarrowBy(class1);
    referenceType0.withContentType(resolvedRecursiveType0);
    referenceType0.getKeyType();
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    Class<Object> class0 = Object.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType0.isContainerType();
    resolvedRecursiveType0.isJavaLangObject();
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<Object> class0 = Object.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    objectReader0.getTypeFactory();
    Stack<JavaType> stack0 = new Stack<JavaType>();
    Class<Throwable> class1 = Throwable.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType0.isFinal();
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.getContentValueHandler();
    CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    Class<Integer> class0 = Integer.TYPE;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType0.isConcrete();
}",0,
project,0,test3030,"public void test3030() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.hasValueHandler();
}",0,
