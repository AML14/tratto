focal_method,test_prefix,docstring
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test00() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
    JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base((SerializerProvider) null);
    JsonFormatVisitorWrapper jsonFormatVisitorWrapper0 = mock(JsonFormatVisitorWrapper.class, new ViolatedAssumptionAnswer());
    doReturn(jsonObjectFormatVisitor_Base0).when(jsonFormatVisitorWrapper0).expectObjectFormat(any(com.fasterxml.jackson.databind.JavaType.class));
    objectMapper0.acceptJsonFormatVisitor(class0, jsonFormatVisitorWrapper0);
    assertEquals(0, objectMapper0.mixInCount());
}",""
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test33() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<JsonDeserializer> class0 = JsonDeserializer.class;
    ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"/*
    /**********************************************************
    /* Extended Public API: serialization
    /* (mapping from Java types to JSON)
    /**********************************************************
     */
/**
 * Method that can be used to serialize any Java value as
 * JSON output, written to File provided.
 */
public void writeValue(File resultFile, Object value) throws IOException, JsonGenerationException, JsonMappingException {
    _configAndWriteValue(_jsonFactory.createGenerator(resultFile, JsonEncoding.UTF8), value);
}","public void test66() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
    objectMapper0.setSerializationInclusion(jsonInclude_Include0);
    MockFile mockFile0 = new MockFile("" out of "", "" out of "");
    DateFormat dateFormat0 = MockDateFormat.getInstance();
    try {
        objectMapper0.writeValue((File) mockFile0, (Object) dateFormat0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Loop has been executed more times than the allowed 10000 (through reference chain: java.text.SimpleDateFormat[\""dateFormatSymbols\""]->java.text.DateFormatSymbols[\""zoneStrings\""]->String[][102])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
