project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
    Class<AnnotatedMethod>[] classArray0 = (Class<AnnotatedMethod>[]) Array.newInstance(Class.class, 1);
    BeanPropertyWriter beanPropertyWriter1 = beanSerializerFactory0.constructFilteredBeanWriter(beanPropertyWriter0, classArray0);
    assertFalse(beanPropertyWriter1.willSuppressNulls());
}",0,assertTrue(beanPropertyWriter1.willSuppressNulls())
project,0,test011,"public void test011() throws Throwable {
    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
    SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
    assertSame(serializerFactory0, beanSerializerFactory0);
}",1,
project,0,test022,"public void test022() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test033,"public void test033() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, simpleType0, (AnnotatedClass) null);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class1 = HashMap.class;
    Class<BeanSerializer> class2 = BeanSerializer.class;
    MapType mapType0 = typeFactory0.constructMapType(class1, class1, class2);
    // Undeclared exception!
    try {
        beanSerializerFactory0._createSerializer2(defaultSerializerProvider_Impl0, mapType0, basicBeanDescription0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
    Class<Integer> class1 = Integer.class;
    SimpleType simpleType0 = SimpleType.construct(class1);
    MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
    ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) mapType0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test055,"public void test055() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    SimpleSerializers simpleSerializers0 = new SimpleSerializers();
    SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);
    objectMapper0.setSerializerFactory(serializerFactory0);
    assertNotSame(serializerFactory0, beanSerializerFactory0);
}",0,
project,0,test056,"public void test056() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    SimpleSerializers simpleSerializers0 = new SimpleSerializers();
    SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);
    objectMapper0.setSerializerFactory(serializerFactory0);
    Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
    ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test067,"public void test067() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<MapperFeature> class0 = MapperFeature.class;
    ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertTrue(objectWriter0.hasPrefetchedSerializer())
project,0,test078,"public void test078() throws Throwable {
    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
    ObjectMapper objectMapper0 = new ObjectMapper();
    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
    BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
    doReturn((List<BeanPropertyWriter>) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
    doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.JsonSerializer.class));
    doReturn((List<BeanPropertyWriter>) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
    doReturn(beanSerializerBuilder0).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
    SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
    objectMapper0.setSerializerFactory(serializerFactory0);
    assertNotSame(serializerFactory0, beanSerializerFactory0);
}",0,
project,0,test079,"public void test079() throws Throwable {
    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
    ObjectMapper objectMapper0 = new ObjectMapper();
    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
    BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
    doReturn((List<BeanPropertyWriter>) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
    doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.JsonSerializer.class));
    doReturn((List<BeanPropertyWriter>) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
    doReturn(beanSerializerBuilder0).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
    SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
    objectMapper0.setSerializerFactory(serializerFactory0);
    Class<BeanSerializer> class0 = BeanSerializer.class;
    ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test0810,"public void test0810() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<MapperFeature> class0 = MapperFeature.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, simpleType0, (AnnotatedClass) null);
    // Undeclared exception!
    try {
        beanSerializerFactory0.findBeanSerializer((SerializerProvider) null, simpleType0, basicBeanDescription0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BeanSerializerFactory"", e);
    }
}",0,
project,0,test0911,"public void test0911() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    JsonSerializer<Object> jsonSerializer0 = beanSerializerFactory0.findBeanSerializer(defaultSerializerProvider_Impl0, arrayType0, (BeanDescription) null);
    assertNull(jsonSerializer0);
}",0,assertNotNull(jsonSerializer0)
project,0,test1012,"public void test1012() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, simpleType0, (AnnotatedClass) null);
    // Undeclared exception!
    try {
        beanSerializerFactory0.constructBeanSerializer((SerializerProvider) null, basicBeanDescription0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BeanSerializerFactory"", e);
    }
}",0,
project,0,test1113,"public void test1113() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
    objectMapper0.configure(mapperFeature0, true);
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertTrue(objectWriter0.hasPrefetchedSerializer())
project,0,test1214,"public void test1214() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
    ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
    Class<TypeIdResolver> class0 = TypeIdResolver.class;
    ObjectWriter objectWriter0 = objectMapper1.writerFor((Class<?>) class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test1315,"public void test1315() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
    ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
    PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
    objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
    ObjectWriter objectWriter0 = objectMapper1.writerFor((Class<?>) class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,
project,0,test1416,"public void test1416() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
    objectMapper0.configure(mapperFeature0, false);
    Class<Module> class0 = Module.class;
    ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertTrue(objectWriter0.hasPrefetchedSerializer())
