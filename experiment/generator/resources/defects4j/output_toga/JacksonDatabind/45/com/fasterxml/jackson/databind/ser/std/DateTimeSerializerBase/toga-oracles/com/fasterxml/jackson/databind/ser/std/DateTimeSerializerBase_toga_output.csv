project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    Class<TextStyle> class1 = TextStyle.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
    // Undeclared exception!
    try {
        calendarSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, mapType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(calendarSerializer0, (BeanProperty) null);
    assertSame(calendarSerializer0, jsonSerializer0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    AnnotationMap annotationMap0 = new AnnotationMap();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
    // Undeclared exception!
    try {
        defaultSerializerProvider_Impl0.handleSecondaryContextualization(calendarSerializer0, beanProperty_Std0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",1,
project,0,test033,"public void test033() throws Throwable {
    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
    boolean boolean0 = calendarSerializer0.isEmpty((Calendar) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test044,"public void test044() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(252, 252, (-2147483646));
    boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test055,"public void test055() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test066,"public void test066() throws Throwable {
    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test077,"public void test077() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(55, 55, 55, 55, 1183, 55);
    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) mockGregorianCalendar0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test088,"public void test088() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) mockGregorianCalendar0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test099,"public void test099() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Class<TextStyle> class0 = TextStyle.class;
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
    CalendarSerializer calendarSerializer0 = new CalendarSerializer((Boolean) null, dateFormat0);
    JsonNode jsonNode0 = calendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);
    assertFalse(jsonNode0.booleanValue());
}",0,assertTrue(jsonNode0.booleanValue())
project,0,test1010,"public void test1010() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Class<TextStyle> class0 = TextStyle.class;
    Boolean boolean0 = Boolean.TRUE;
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
    CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, dateFormat0);
    JsonNode jsonNode0 = calendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);
    assertFalse(jsonNode0.isFloatingPointNumber());
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    // Undeclared exception!
    try {
        calendarSerializer0.serialize((Calendar) mockGregorianCalendar0, (JsonGenerator) null, (SerializerProvider) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null SerializerProvider passed for java.util.Calendar
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        calendarSerializer0._asTimestamp(defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(sqlDateSerializer0.isUnwrappingSerializer());
}",0,assertTrue(sqlDateSerializer0.isUnwrappingSerializer())
project,0,test1414,"public void test1414() throws Throwable {
    Boolean boolean0 = Boolean.TRUE;
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0);
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<DoubleNode> class0 = DoubleNode.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
    sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, collectionLikeType0);
    assertTrue(collectionLikeType0.isContainerType());
}",0,assertTrue(collectionLikeType0.isContainerType())
