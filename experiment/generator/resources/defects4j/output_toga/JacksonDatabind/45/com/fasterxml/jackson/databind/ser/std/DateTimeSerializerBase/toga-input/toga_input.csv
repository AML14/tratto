focal_method,test_prefix,docstring
"@Override
public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {
    _acceptJsonFormatVisitor(visitor, typeHint, _asTimestamp(visitor.getProvider()));
}","public void test000() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    Class<TextStyle> class1 = TextStyle.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
    // Undeclared exception!
    try {
        calendarSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, mapType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase"", e);
    }
}",""
"public JsonSerializer<?> handleSecondaryContextualization(JsonSerializer<?> ser, BeanProperty property) throws JsonMappingException {
    if (ser != null) {
        if (ser instanceof ContextualSerializer) {
            ser = ((ContextualSerializer) ser).createContextual(this, property);
        }
    }
    return ser;
}","public void test011() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(calendarSerializer0, (BeanProperty) null);
    assertSame(calendarSerializer0, jsonSerializer0);
}","/**
 * Method called for secondary property serializers (ones
 * NOT directly created to serialize values of a POJO property
 * but instead created as a dependant serializer -- such as value serializers
 * for structured types, or serializers for root values)
 * to handle details of resolving
 * {@link ContextualDeserializer} with given property context.
 * Given that these serializers are not directly related to given property
 * (or, in case of root value property, to any property), annotations
 * accessible may or may not be relevant.
 *
 * @param property Property for which serializer is used, if any; null
 *    when deserializing root values
 *
 * @since 2.3
 */"
"public JsonSerializer<?> handleSecondaryContextualization(JsonSerializer<?> ser, BeanProperty property) throws JsonMappingException {
    if (ser != null) {
        if (ser instanceof ContextualSerializer) {
            ser = ((ContextualSerializer) ser).createContextual(this, property);
        }
    }
    return ser;
}","public void test022() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    AnnotationMap annotationMap0 = new AnnotationMap();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
    // Undeclared exception!
    try {
        defaultSerializerProvider_Impl0.handleSecondaryContextualization(calendarSerializer0, beanProperty_Std0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}","/**
 * Method called for secondary property serializers (ones
 * NOT directly created to serialize values of a POJO property
 * but instead created as a dependant serializer -- such as value serializers
 * for structured types, or serializers for root values)
 * to handle details of resolving
 * {@link ContextualDeserializer} with given property context.
 * Given that these serializers are not directly related to given property
 * (or, in case of root value property, to any property), annotations
 * accessible may or may not be relevant.
 *
 * @param property Property for which serializer is used, if any; null
 *    when deserializing root values
 *
 * @since 2.3
 */"
"@Deprecated
public boolean isEmpty(T value) {
    return isEmpty(null, value);
}","public void test033() throws Throwable {
    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
    boolean boolean0 = calendarSerializer0.isEmpty((Calendar) null);
    assertTrue(boolean0);
}","/**
 *  Method called to check whether given serializable value is
 *  considered ""empty"" value (for purposes of suppressing serialization
 *  of empty values).
 * <p>
 *  Default implementation will consider only null values to be empty.
 *
 *  @since 2.0
 *
 *  @deprecated Since 2.5 Use {@link #isEmpty(SerializerProvider, Object)} instead;
 *    will be removed from 2.8
 */"
"@Deprecated
public boolean isEmpty(T value) {
    return isEmpty(null, value);
}","public void test044() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(252, 252, (-2147483646));
    boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
    assertTrue(boolean0);
}","/**
 *  Method called to check whether given serializable value is
 *  considered ""empty"" value (for purposes of suppressing serialization
 *  of empty values).
 * <p>
 *  Default implementation will consider only null values to be empty.
 *
 *  @since 2.0
 *
 *  @deprecated Since 2.5 Use {@link #isEmpty(SerializerProvider, Object)} instead;
 *    will be removed from 2.8
 */"
"@Deprecated
public boolean isEmpty(T value) {
    return isEmpty(null, value);
}","public void test055() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
    assertFalse(boolean0);
}","/**
 *  Method called to check whether given serializable value is
 *  considered ""empty"" value (for purposes of suppressing serialization
 *  of empty values).
 * <p>
 *  Default implementation will consider only null values to be empty.
 *
 *  @since 2.0
 *
 *  @deprecated Since 2.5 Use {@link #isEmpty(SerializerProvider, Object)} instead;
 *    will be removed from 2.8
 */"
"@Override
public boolean isEmpty(SerializerProvider serializers, T value) {
    // let's assume ""null date"" (timestamp 0) qualifies for empty
    return (value == null) || (_timestamp(value) == 0L);
}","public void test066() throws Throwable {
    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) null);
    assertTrue(boolean0);
}",""
"@Override
public boolean isEmpty(SerializerProvider serializers, T value) {
    // let's assume ""null date"" (timestamp 0) qualifies for empty
    return (value == null) || (_timestamp(value) == 0L);
}","public void test077() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(55, 55, 55, 55, 1183, 55);
    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) mockGregorianCalendar0);
    assertTrue(boolean0);
}",""
"@Override
public boolean isEmpty(SerializerProvider serializers, T value) {
    // let's assume ""null date"" (timestamp 0) qualifies for empty
    return (value == null) || (_timestamp(value) == 0L);
}","public void test088() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) mockGregorianCalendar0);
    assertFalse(boolean0);
}",""
"public boolean booleanValue() {
    return false;
}","public void test099() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Class<TextStyle> class0 = TextStyle.class;
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
    CalendarSerializer calendarSerializer0 = new CalendarSerializer((Boolean) null, dateFormat0);
    JsonNode jsonNode0 = calendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);
    assertFalse(jsonNode0.booleanValue());
}","/**
 * Method to use for accessing JSON boolean values (value
 * literals 'true' and 'false').
 * For other types, always returns false.
 *
 * @return Textual value this node contains, iff it is a textual
 *   json node (comes from JSON String value entry)
 */"
"public boolean isFloatingPointNumber() {
    return false;
}","public void test1010() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Class<TextStyle> class0 = TextStyle.class;
    Boolean boolean0 = Boolean.TRUE;
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
    CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, dateFormat0);
    JsonNode jsonNode0 = calendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);
    assertFalse(jsonNode0.isFloatingPointNumber());
}","/**
 * @return True if this node represents a non-integral
 *   numeric JSON value
 */"
"@Override
public void serialize(Calendar value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
    if (_asTimestamp(provider)) {
        jgen.writeNumber(_timestamp(value));
    } else if (_customFormat != null) {
        // 21-Feb-2011, tatu: not optimal, but better than alternatives:
        synchronized (_customFormat) {
            // _customformat cannot parse Calendar, so Date should be passed
            jgen.writeString(_customFormat.format(value.getTime()));
        }
    } else {
        provider.defaultSerializeDateValue(value.getTime(), jgen);
    }
}","public void test1111() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    // Undeclared exception!
    try {
        calendarSerializer0.serialize((Calendar) mockGregorianCalendar0, (JsonGenerator) null, (SerializerProvider) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null SerializerProvider passed for java.util.Calendar
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase"", e);
    }
}",""
"/*
    /**********************************************************
    /* Helper methods
    /**********************************************************
     */
protected boolean _asTimestamp(SerializerProvider serializers) {
    if (_useTimestamp != null) {
        return _useTimestamp.booleanValue();
    }
    if (_customFormat == null) {
        if (serializers != null) {
            return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        }
        // 12-Jun-2014, tatu: Is it legal not to have provider? Was NPE:ing earlier so leave a check
        throw new IllegalArgumentException(""Null SerializerProvider passed for "" + handledType().getName());
    }
    return false;
}","public void test1212() throws Throwable {
    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        calendarSerializer0._asTimestamp(defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",""
"public boolean isUnwrappingSerializer() {
    return false;
}","public void test1313() throws Throwable {
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(sqlDateSerializer0.isUnwrappingSerializer());
}","/**
 * Accessor for checking whether this serializer is an
 * ""unwrapping"" serializer; this is necessary to know since
 * it may also require caller to suppress writing of the
 * leading property name.
 */"
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
@Override
public boolean isContainerType() {
    return true;
}","public void test1414() throws Throwable {
    Boolean boolean0 = Boolean.TRUE;
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0);
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<DoubleNode> class0 = DoubleNode.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
    sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, collectionLikeType0);
    assertTrue(collectionLikeType0.isContainerType());
}",""
