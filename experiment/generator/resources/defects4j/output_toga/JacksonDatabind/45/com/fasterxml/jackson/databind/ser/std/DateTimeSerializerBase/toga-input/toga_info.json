{
  "test1212" : {
    "methodSignature" : "protected boolean _asTimestamp(SerializerProvider serializers)",
    "methodName" : "_asTimestamp",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    calendarSerializer0._asTimestamp(defaultSerializerProvider_Impl0);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "public boolean isUnwrappingSerializer()",
    "methodName" : "isUnwrappingSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();\n    sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);\n    sqlDateSerializer0.isUnwrappingSerializer();\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public boolean isFloatingPointNumber()",
    "methodName" : "isFloatingPointNumber",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    Class<TextStyle> class0 = TextStyle.class;\n    Boolean boolean0 = Boolean.TRUE;\n    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();\n    CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, dateFormat0);\n    JsonNode jsonNode0 = calendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);\n    jsonNode0.isFloatingPointNumber();\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public void serialize(Calendar value, JsonGenerator jgen, SerializerProvider provider) throws IOException",
    "methodName" : "serialize",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    CalendarSerializer calendarSerializer0 = new CalendarSerializer();\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();\n    calendarSerializer0.serialize((Calendar) mockGregorianCalendar0, (JsonGenerator) null, (SerializerProvider) null);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "public JsonSerializer<?> handleSecondaryContextualization(JsonSerializer<?> ser, BeanProperty property) throws JsonMappingException",
    "methodName" : "handleSecondaryContextualization",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    CalendarSerializer calendarSerializer0 = new CalendarSerializer();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(calendarSerializer0, (BeanProperty) null);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public boolean isEmpty(T value)",
    "methodName" : "isEmpty",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;\n    boolean boolean0 = calendarSerializer0.isEmpty((Calendar) null);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public boolean isEmpty(T value)",
    "methodName" : "isEmpty",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    CalendarSerializer calendarSerializer0 = new CalendarSerializer();\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();\n    boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public boolean isEmpty(SerializerProvider serializers, T value)",
    "methodName" : "isEmpty",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    CalendarSerializer calendarSerializer0 = new CalendarSerializer();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(55, 55, 55, 55, 1183, 55);\n    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) mockGregorianCalendar0);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public boolean booleanValue()",
    "methodName" : "booleanValue",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    Class<TextStyle> class0 = TextStyle.class;\n    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();\n    CalendarSerializer calendarSerializer0 = new CalendarSerializer((Boolean) null, dateFormat0);\n    JsonNode jsonNode0 = calendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);\n    jsonNode0.booleanValue();\n}",
    "testName" : "test099"
  },
  "test1414" : {
    "methodSignature" : "public boolean isContainerType()",
    "methodName" : "isContainerType",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Boolean boolean0 = Boolean.TRUE;\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0);\n    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<DoubleNode> class0 = DoubleNode.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);\n    sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, collectionLikeType0);\n    collectionLikeType0.isContainerType();\n}",
    "testName" : "test1414"
  },
  "test000" : {
    "methodSignature" : "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
    "methodName" : "acceptJsonFormatVisitor",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    CalendarSerializer calendarSerializer0 = new CalendarSerializer();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class0 = HashMap.class;\n    Class<TextStyle> class1 = TextStyle.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);\n    calendarSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, mapType0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public JsonSerializer<?> handleSecondaryContextualization(JsonSerializer<?> ser, BeanProperty property) throws JsonMappingException",
    "methodName" : "handleSecondaryContextualization",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    CalendarSerializer calendarSerializer0 = new CalendarSerializer();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    JavaType javaType0 = TypeFactory.unknownType();\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);\n    defaultSerializerProvider_Impl0.handleSecondaryContextualization(calendarSerializer0, beanProperty_Std0);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public boolean isEmpty(T value)",
    "methodName" : "isEmpty",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    CalendarSerializer calendarSerializer0 = new CalendarSerializer();\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(252, 252, (-2147483646));\n    boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public boolean isEmpty(SerializerProvider serializers, T value)",
    "methodName" : "isEmpty",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) null);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public boolean isEmpty(SerializerProvider serializers, T value)",
    "methodName" : "isEmpty",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();\n    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;\n    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) mockGregorianCalendar0);\n}",
    "testName" : "test088"
  }
}