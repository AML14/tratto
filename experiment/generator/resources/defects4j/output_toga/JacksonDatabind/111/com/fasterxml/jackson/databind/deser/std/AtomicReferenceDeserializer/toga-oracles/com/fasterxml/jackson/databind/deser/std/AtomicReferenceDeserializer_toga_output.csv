project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    Class<TypeIdResolver> class0 = TypeIdResolver.class;
    Class<MapperFeature> class1 = MapperFeature.class;
    TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    Class<CreatorProperty> class2 = CreatorProperty.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
    JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(resolvedRecursiveType0, valueInstantiator_Base0, (TypeDeserializer) null, jsonDeserializer0);
    Boolean boolean0 = atomicReferenceDeserializer0.supportsUpdate((DeserializationConfig) null);
    assertTrue(boolean0);
}",0,
project,0,test11,"public void test11() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Boolean> class0 = Boolean.TYPE;
    JavaType javaType0 = typeFactory0.constructType((Type) class0);
    CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, """", false, javaType0);
    JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(collectionLikeType0, (ValueInstantiator) null, asWrapperTypeDeserializer0, jsonDeserializer0);
    JsonDeserializer<Module> jsonDeserializer1 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    AtomicReferenceDeserializer atomicReferenceDeserializer1 = atomicReferenceDeserializer0.withResolved(asWrapperTypeDeserializer0, jsonDeserializer1);
    assertNotSame(atomicReferenceDeserializer0, atomicReferenceDeserializer1);
}",0,
project,0,test22,"public void test22() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Integer> class0 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
    TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
    JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, ""[creator property, name '"", false, javaType0);
    JsonDeserializer<List<PropertyName>> jsonDeserializer0 = (JsonDeserializer<List<PropertyName>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(javaType0, valueInstantiator_Base0, asExternalTypeDeserializer0, jsonDeserializer0);
    MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
    AtomicReference<Object> atomicReference0 = new AtomicReference<Object>(mapperFeature0);
    MapperFeature mapperFeature1 = (MapperFeature) atomicReferenceDeserializer0.getReferenced(atomicReference0);
    assertEquals(512, mapperFeature1.getMask());
}",0,
project,0,test44,"public void test44() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<List> class0 = List.class;
    Class<MapperFeature> class1 = MapperFeature.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(collectionType0, classNameIdResolver0, ""S;"", true, collectionType0);
    JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(collectionType0, valueInstantiator_Base0, asExternalTypeDeserializer0, jsonDeserializer0);
    AtomicReference<Object> atomicReference0 = atomicReferenceDeserializer0.referenceValue(asExternalTypeDeserializer0);
    AtomicReference<Object> atomicReference1 = atomicReferenceDeserializer0.updateReference(atomicReference0, (Object) collectionType0);
    assertSame(atomicReference1, atomicReference0);
}",0,
