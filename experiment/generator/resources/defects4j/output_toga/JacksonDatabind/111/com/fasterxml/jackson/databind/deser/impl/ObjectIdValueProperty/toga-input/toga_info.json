{
  "test00" : {
    "methodSignature" : "public AnnotatedMember getMember()",
    "methodName" : "getMember",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    AnnotatedMember annotatedMember0 = objectIdValueProperty0.getMember();\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public boolean hasValueDeserializer()",
    "methodName" : "hasValueDeserializer",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    PropertyName propertyName0 = PropertyName.USE_DEFAULT;\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withSimpleName(\"Numeric value (%s) out of range of %s\");\n    settableBeanProperty0.hasValueDeserializer();\n}",
    "testName" : "test11"
  },
  "test33" : {
    "methodSignature" : "public void set(Object instance, Object value) throws IOException",
    "methodName" : "set",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    objectIdValueProperty0.set(simpleObjectIdResolver0, (Object) null);\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "public <A extends Annotation> A getAnnotation(Class<A> acls)",
    "methodName" : "getAnnotation",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    PropertyName propertyName0 = PropertyName.USE_DEFAULT;\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = objectIdValueProperty0.getAnnotation(class0);\n}",
    "testName" : "test44"
  },
  "test55" : {
    "methodSignature" : "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
    "methodName" : "withValueDeserializer",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    Boolean boolean0 = Boolean.valueOf(\"\");\n    Integer integer0 = new Integer(3169);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, \"\", integer0, \"\");\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);\n    SettableBeanProperty settableBeanProperty0 = objectIdValueProperty1.withValueDeserializer((JsonDeserializer<?>) null);\n}",
    "testName" : "test55"
  },
  "test66" : {
    "methodSignature" : "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
    "methodName" : "withValueDeserializer",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withValueDeserializer((JsonDeserializer<?>) null);\n}",
    "testName" : "test66"
  },
  "test88" : {
    "methodSignature" : "public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
    "methodName" : "deserializeAndSet",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test88() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);\n    PropertyName propertyName0 = new PropertyName(\"]\");\n    Class<Integer> class0 = Integer.class;\n    ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, propertyName0);\n    ObjectIdGenerator<RoundingMode> objectIdGenerator0 = (ObjectIdGenerator<RoundingMode>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    doReturn(objectIdGenerator_IdKey0).when(objectIdGenerator0).key(any());\n    RoundingMode roundingMode0 = RoundingMode.FLOOR;\n    JsonDeserializer<RoundingMode> jsonDeserializer0 = (JsonDeserializer<RoundingMode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    doReturn(roundingMode0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    Class<BooleanNode> class1 = BooleanNode.class;\n    Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;\n    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) referenceType0);\n    JavaType[] javaTypeArray0 = new JavaType[2];\n    CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) referenceType0);\n    Class<String> class3 = String.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);\n    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(collectionType0, classNameIdResolver0, \"]\", false, javaTypeArray0[1]);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), annotationMap0, (PropertyMetadata) null);\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, objectIdGenerator0, jsonDeserializer0, creatorProperty0, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    JsonFactory jsonFactory0 = new JsonFactory();\n    JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    objectIdValueProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, typeFactory0);\n}",
    "testName" : "test88"
  },
  "test99" : {
    "methodSignature" : "public Object setAndReturn(Object instance, Object value) throws IOException",
    "methodName" : "setAndReturn",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test99() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);\n    PropertyName propertyName0 = new PropertyName(\"')]\", \"')]\");\n    ObjectIdGenerator<RoundingMode> objectIdGenerator0 = (ObjectIdGenerator<RoundingMode>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    JsonDeserializer<RoundingMode> jsonDeserializer0 = (JsonDeserializer<RoundingMode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(referenceType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    ObjectIdReader objectIdReader1 = ObjectIdReader.construct(referenceType0, propertyName0, objectIdReader0.generator, (JsonDeserializer<?>) null, objectIdValueProperty0, simpleObjectIdResolver0);\n    ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, propertyMetadata0);\n    objectIdValueProperty1.setAndReturn((Object) null, javaType0);\n}",
    "testName" : "test99"
  }
}