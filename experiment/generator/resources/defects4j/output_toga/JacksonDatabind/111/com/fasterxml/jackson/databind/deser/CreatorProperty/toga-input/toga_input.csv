focal_method,test_prefix,docstring
"public int getCreatorIndex() {
    // changed from 'return -1' in 2.7.9 / 2.8.7
    throw new IllegalStateException(String.format(""Internal error: no creator index for property '%s' (of type %s)"", this.getName(), getClass().getName()));
}","public void test000() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 23, propertyName0, propertyMetadata0);
    SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
    assertEquals(23, settableBeanProperty0.getCreatorIndex());
}","/**
 * Method for accessing index of the creator property: for other
 * types of properties will simply return -1.
 *
 * @since 2.1
 */"
"@Override
public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {
    if (_valueDeserializer == deser) {
        return this;
    }
    // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were
    return new CreatorProperty(this, deser, _nullProvider);
}","public void test001() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 23, propertyName0, propertyMetadata0);
    SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
    assertNotSame(settableBeanProperty0, creatorProperty0);
}",""
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test012() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2769, propertyMetadata0, propertyMetadata0);
    SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("": cannot determine type parameters"");
    assertEquals("": cannot determine type parameters"", settableBeanProperty0.getName());
}",""
"public int getCreatorIndex() {
    // changed from 'return -1' in 2.7.9 / 2.8.7
    throw new IllegalStateException(String.format(""Internal error: no creator index for property '%s' (of type %s)"", this.getName(), getClass().getName()));
}","public void test013() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2769, propertyMetadata0, propertyMetadata0);
    SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("": cannot determine type parameters"");
    assertEquals(2769, settableBeanProperty0.getCreatorIndex());
}","/**
 * Method for accessing index of the creator property: for other
 * types of properties will simply return -1.
 *
 * @since 2.1
 */"
"@Override
public void set(Object instance, Object value) throws IOException {
    _verifySetter();
    _fallbackSetter.set(instance, value);
}","public void test024() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2769, propertyMetadata0, propertyMetadata0);
    try {
        creatorProperty0.set((Object) null, (Object) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No fallback setter/field defined for creator property ''
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidDefinitionException"", e);
    }
}",""
"public int getCreatorIndex() {
    // changed from 'return -1' in 2.7.9 / 2.8.7
    throw new IllegalStateException(String.format(""Internal error: no creator index for property '%s' (of type %s)"", this.getName(), getClass().getName()));
}","public void test035() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3), javaType0, propertyMetadata0);
    DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
    SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(dOMDeserializer_NodeDeserializer0);
    assertEquals((-3), settableBeanProperty0.getCreatorIndex());
}","/**
 * Method for accessing index of the creator property: for other
 * types of properties will simply return -1.
 *
 * @since 2.1
 */"
"@Override
public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {
    _verifySetter();
    return _fallbackSetter.setAndReturn(instance, deserialize(p, ctxt));
}","public void test046() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2764, propertyMetadata0, propertyMetadata0);
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(2764);
    JsonParser jsonParser0 = arrayNode0.traverse();
    try {
        creatorProperty0.deserializeSetAndReturn(jsonParser0, (DeserializationContext) null, jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No fallback setter/field defined for creator property '#temporary-name'
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidDefinitionException"", e);
    }
}",""
"/*
    /**********************************************************
    /* Accessors
    /**********************************************************
     */
protected Class<?> getDeclaringClass() {
    return getMember().getDeclaringClass();
}","public void test057() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2764, propertyMetadata0, propertyMetadata0);
    // Undeclared exception!
    try {
        creatorProperty0.getDeclaringClass();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableBeanProperty"", e);
    }
}",""
"@Override
public boolean isIgnorable() {
    return _ignorable;
}","public void test068() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2764, propertyMetadata0, propertyMetadata0);
    creatorProperty0.markAsIgnorable();
    assertTrue(creatorProperty0.isIgnorable());
}",""
"@Override
public int getCreatorIndex() {
    return _creatorIndex;
}","public void test079() throws Throwable {
    PropertyName propertyName0 = PropertyName.construct(""LS"");
    JavaType javaType0 = TypeFactory.unknownType();
    Object object0 = new Object();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 400, object0, (PropertyMetadata) null);
    Object object1 = creatorProperty0.getInjectableValueId();
    assertEquals(400, creatorProperty0.getCreatorIndex());
}",""
"@Override
public Object getInjectableValueId() {
    return _injectableValueId;
}","public void test0710() throws Throwable {
    PropertyName propertyName0 = PropertyName.construct(""LS"");
    JavaType javaType0 = TypeFactory.unknownType();
    Object object0 = new Object();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 400, object0, (PropertyMetadata) null);
    Object object1 = creatorProperty0.getInjectableValueId();
    assertNotNull(object1);
}",""
"@Override
public int getCreatorIndex() {
    return _creatorIndex;
}","public void test0811() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2764, propertyMetadata0, propertyMetadata0);
    creatorProperty0.toString();
    assertEquals(2764, creatorProperty0.getCreatorIndex());
}",""
"public void inject(DeserializationContext context, Object beanInstance) throws IOException {
    set(beanInstance, findInjectableValue(context, beanInstance));
}","public void test0912() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2764, propertyMetadata0, propertyMetadata0);
    // Undeclared exception!
    try {
        creatorProperty0.inject((DeserializationContext) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.CreatorProperty"", e);
    }
}","/**
 * Method to find value to inject, and inject it to this property.
 */"
"@Override
public Object setAndReturn(Object instance, Object value) throws IOException {
    _verifySetter();
    return _fallbackSetter.setAndReturn(instance, value);
}","public void test1013() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
    creatorProperty0.setFallbackSetter(creatorProperty0);
    // Undeclared exception!
    creatorProperty0.setAndReturn(creatorProperty0, creatorProperty0);
}",""
"/*
    /**********************************************************
    /* Overridden methods
    /**********************************************************
     */
@Override
public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {
    _verifySetter();
    _fallbackSetter.set(instance, deserialize(p, ctxt));
}","public void test1114() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2764, propertyMetadata0, propertyMetadata0);
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    try {
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, propertyMetadata0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No fallback setter/field defined for creator property '#temporary-name'
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidDefinitionException"", e);
    }
}",""
"@Override
public int getCreatorIndex() {
    return _creatorIndex;
}","public void test1215() throws Throwable {
    PropertyName propertyName0 = PropertyName.construct(""'"");
    JavaType javaType0 = TypeFactory.unknownType();
    AnnotationMap annotationMap0 = new AnnotationMap();
    Boolean boolean0 = Boolean.FALSE;
    Integer integer0 = new Integer(0);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, ""'"", integer0, ""'"");
    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, simpleObjectIdResolver0, propertyMetadata0);
    int int0 = creatorProperty0.getCreatorIndex();
    assertEquals(0, int0);
}",""
"@Override
public int getCreatorIndex() {
    return _creatorIndex;
}","public void test1316() throws Throwable {
    PropertyName propertyName0 = new PropertyName("""");
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    Object object0 = new Object();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
    creatorProperty0.isIgnorable();
    assertEquals(0, creatorProperty0.getCreatorIndex());
}",""
"public int getCreatorIndex() {
    // changed from 'return -1' in 2.7.9 / 2.8.7
    throw new IllegalStateException(String.format(""Internal error: no creator index for property '%s' (of type %s)"", this.getName(), getClass().getName()));
}","public void test1417() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-181), (Object) null, propertyMetadata0);
    JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
    SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
    assertEquals((-181), settableBeanProperty0.getCreatorIndex());
}","/**
 * Method for accessing index of the creator property: for other
 * types of properties will simply return -1.
 *
 * @since 2.1
 */"
"@Override
public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {
    if (_valueDeserializer == deser) {
        return this;
    }
    // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were
    return new CreatorProperty(this, deser, _nullProvider);
}","public void test1418() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-181), (Object) null, propertyMetadata0);
    JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
    SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
    assertSame(settableBeanProperty0, creatorProperty0);
}",""
"@Override
public int getCreatorIndex() {
    return _creatorIndex;
}","public void test1519() throws Throwable {
    PropertyName propertyName0 = PropertyName.construct(""'"");
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), ""'"", propertyMetadata0);
    creatorProperty0.fixAccess((DeserializationConfig) null);
    assertEquals((-1), creatorProperty0.getCreatorIndex());
}",""
"@Override
public void fixAccess(DeserializationConfig config) {
    if (_fallbackSetter != null) {
        _fallbackSetter.fixAccess(config);
    }
}","public void test1620() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1, propertyName0, propertyMetadata0);
    creatorProperty0.setFallbackSetter(creatorProperty0);
    // Undeclared exception!
    creatorProperty0.fixAccess((DeserializationConfig) null);
}",""
"public void inject(DeserializationContext context, Object beanInstance) throws IOException {
    set(beanInstance, findInjectableValue(context, beanInstance));
}","public void test1721() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 350, (Object) null, propertyMetadata0);
    // Undeclared exception!
    try {
        creatorProperty0.inject((DeserializationContext) null, propertyMetadata0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.CreatorProperty"", e);
    }
}","/**
 * Method to find value to inject, and inject it to this property.
 */"
"@Override
public int getCreatorIndex() {
    return _creatorIndex;
}","public void test1822() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, ""KP"", true, (JavaType) null);
    Class<ObjectNode> class0 = ObjectNode.class;
    Class<Annotation> class1 = Annotation.class;
    AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
    AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 325);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asExternalTypeDeserializer0, annotationCollector_OneAnnotation0, annotatedParameter0, 325, typeResolutionContext_Basic0, propertyMetadata0);
    creatorProperty0.getAnnotation(class1);
    assertEquals(325, creatorProperty0.getCreatorIndex());
}",""
"@Override
public int getCreatorIndex() {
    return _creatorIndex;
}","public void test1923() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2435, (Object) null, propertyMetadata0);
    Class<Annotation> class0 = Annotation.class;
    creatorProperty0.getAnnotation(class0);
    assertEquals(2435, creatorProperty0.getCreatorIndex());
}",""
