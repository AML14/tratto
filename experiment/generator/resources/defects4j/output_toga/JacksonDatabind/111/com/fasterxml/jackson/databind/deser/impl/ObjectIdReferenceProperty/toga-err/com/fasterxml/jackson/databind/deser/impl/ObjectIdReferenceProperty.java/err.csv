com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty,@Test(timeout = 4000)
public void test000() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
    deserializationFeatureArray0[0] = deserializationFeature0;
    deserializationFeatureArray0[1] = deserializationFeature0;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
    BooleanNode booleanNode0 = BooleanNode.FALSE;
    JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, (TokenFilter) null, true, true);
    JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
    Class<Integer> class0 = Integer.class;
    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
    ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, simpleObjectIdResolver0);
    ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
    UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(filteringParserDelegate0, ""Cannot find a deserializer for non-concrete Collection type "", jsonLocation0, readableObjectId0);
    ObjectIdReferenceProperty.PropertyReferring objectIdReferenceProperty_PropertyReferring0 = new ObjectIdReferenceProperty.PropertyReferring((ObjectIdReferenceProperty) null, unresolvedForwardReference0, class0, class0);
    objectIdReferenceProperty_PropertyReferring0.handleResolvedForwardReference(simpleObjectIdResolver0, filteringParserDelegate0);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/JacksonDatabind_111b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty/PropertyReferring.java
com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty,@Test(timeout = 4000)
public void test033() throws Throwable {
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
    ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
    ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
    SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withSimpleName(""3h]"");
    settableBeanProperty0.hasViews();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty,@Test(timeout = 4000)
public void test055() throws Throwable {
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 1187, typeBindings0, propertyMetadata0);
    ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
    ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
    SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withNullProvider((NullValueProvider) null);
    settableBeanProperty0.isIgnorable();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty,@Test(timeout = 4000)
public void test099() throws Throwable {
    PropertyName propertyName0 = new PropertyName(""~qO'.0"");
    Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, resolvedRecursiveType0, propertyMetadata0);
    ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
    ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
    SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
    settableBeanProperty0.hasValueDeserializer();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty,@Test(timeout = 4000)
public void test1111() throws Throwable {
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 31, (Object) null, propertyMetadata0);
    ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
    ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
    objectIdReferenceProperty0.fixAccess((DeserializationConfig) null);
    objectIdReferenceProperty0.hasValueTypeDeserializer();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty,@Test(timeout = 4000)
public void test1212() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
    deserializationFeatureArray0[0] = deserializationFeature0;
    deserializationFeatureArray0[1] = deserializationFeature0;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
    BooleanNode booleanNode0 = BooleanNode.FALSE;
    JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, (TokenFilter) null, true, true);
    JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
    Class<Object> class0 = Object.class;
    Class<Integer> class1 = Integer.class;
    ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, class0);
    ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
    UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, ""3r]2U_!TDb?Y"", jsonLocation0, readableObjectId0);
    Class<ObjectIdGenerators.StringIdGenerator> class2 = ObjectIdGenerators.StringIdGenerator.class;
    ObjectIdReferenceProperty.PropertyReferring objectIdReferenceProperty_PropertyReferring0 = new ObjectIdReferenceProperty.PropertyReferring((ObjectIdReferenceProperty) null, unresolvedForwardReference0, class2, filteringParserDelegate0);
    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
    objectIdReferenceProperty_PropertyReferring0.handleResolvedForwardReference(simpleObjectIdResolver0, ""3r]2U_!TDb?Y"");
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/JacksonDatabind_111b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty/PropertyReferring.java
