{
  "test00" : {
    "methodSignature" : "public Boolean supportsUpdate(DeserializationConfig config)",
    "methodName" : "supportsUpdate",
    "className" : "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Class<TypeIdResolver> class0 = TypeIdResolver.class;\n    Class<MapperFeature> class1 = MapperFeature.class;\n    TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    Class<CreatorProperty> class2 = CreatorProperty.class;\n    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);\n    JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(resolvedRecursiveType0, valueInstantiator_Base0, (TypeDeserializer) null, jsonDeserializer0);\n    Boolean boolean0 = atomicReferenceDeserializer0.supportsUpdate((DeserializationConfig) null);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public AtomicReferenceDeserializer withResolved(TypeDeserializer typeDeser, JsonDeserializer<?> valueDeser)",
    "methodName" : "withResolved",
    "className" : "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Boolean> class0 = Boolean.TYPE;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0);\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);\n    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, \"\", false, javaType0);\n    JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(collectionLikeType0, (ValueInstantiator) null, asWrapperTypeDeserializer0, jsonDeserializer0);\n    JsonDeserializer<Module> jsonDeserializer1 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    AtomicReferenceDeserializer atomicReferenceDeserializer1 = atomicReferenceDeserializer0.withResolved(asWrapperTypeDeserializer0, jsonDeserializer1);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public int getMask()",
    "methodName" : "getMask",
    "className" : "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Integer> class0 = Integer.class;\n    TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);\n    TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);\n    JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);\n    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);\n    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, \"[creator property, name '\", false, javaType0);\n    JsonDeserializer<List<PropertyName>> jsonDeserializer0 = (JsonDeserializer<List<PropertyName>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(javaType0, valueInstantiator_Base0, asExternalTypeDeserializer0, jsonDeserializer0);\n    MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;\n    AtomicReference<Object> atomicReference0 = new AtomicReference<Object>(mapperFeature0);\n    MapperFeature mapperFeature1 = (MapperFeature) atomicReferenceDeserializer0.getReferenced(atomicReference0);\n    mapperFeature1.getMask();\n}",
    "testName" : "test22"
  },
  "test44" : {
    "methodSignature" : "public AtomicReference<Object> updateReference(AtomicReference<Object> reference, Object contents)",
    "methodName" : "updateReference",
    "className" : "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<List> class0 = List.class;\n    Class<MapperFeature> class1 = MapperFeature.class;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);\n    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);\n    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(collectionType0, classNameIdResolver0, \"S;\", true, collectionType0);\n    JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(collectionType0, valueInstantiator_Base0, asExternalTypeDeserializer0, jsonDeserializer0);\n    AtomicReference<Object> atomicReference0 = atomicReferenceDeserializer0.referenceValue(asExternalTypeDeserializer0);\n    AtomicReference<Object> atomicReference1 = atomicReferenceDeserializer0.updateReference(atomicReference0, (Object) collectionType0);\n}",
    "testName" : "test44"
  }
}