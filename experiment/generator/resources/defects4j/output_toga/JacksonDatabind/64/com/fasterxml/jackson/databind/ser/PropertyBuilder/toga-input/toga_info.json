{
  "test910" : {
    "methodSignature" : "protected Object _throwWrapped(Exception e, String propName, Object defaultBean)",
    "methodName" : "_throwWrapped",
    "className" : "com.fasterxml.jackson.databind.ser.PropertyBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test910() throws Throwable {\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    ConfigOverrides configOverrides0 = new ConfigOverrides();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);\n    Class<Integer> class0 = Integer.TYPE;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];\n    mapperFeatureArray0[0] = mapperFeature0;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, (ClassIntrospector.MixInResolver) null);\n    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);\n    MockError mockError0 = new MockError();\n    SQLTransientException sQLTransientException0 = new SQLTransientException(\"\", \"\", 1, mockError0);\n    SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(\"GuM$\\\"a(Ut:9\", \"GuM$\\\"a(Ut:9\", 1, sQLTransientException0);\n    propertyBuilder0._throwWrapped(sQLTransientConnectionException0, \"GuM$\\\"a(Ut:9\", (Object) null);\n}",
    "testName" : "test910"
  },
  "test45" : {
    "methodSignature" : "protected Object getDefaultValue(JavaType type)",
    "methodName" : "getDefaultValue",
    "className" : "com.fasterxml.jackson.databind.ser.PropertyBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    ConfigOverrides configOverrides0 = new ConfigOverrides();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);\n    Class<Integer> class0 = Integer.TYPE;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];\n    mapperFeatureArray0[0] = mapperFeature0;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);\n    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);\n    Object object0 = propertyBuilder0.getDefaultValue(simpleType0);\n}",
    "testName" : "test45"
  },
  "test56" : {
    "methodSignature" : "protected Object getDefaultValue(JavaType type)",
    "methodName" : "getDefaultValue",
    "className" : "com.fasterxml.jackson.databind.ser.PropertyBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    ConfigOverrides configOverrides0 = new ConfigOverrides();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);\n    Class<Integer> class0 = Integer.TYPE;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];\n    mapperFeatureArray0[0] = mapperFeature0;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, (ClassIntrospector.MixInResolver) null);\n    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class1 = HashMap.class;\n    MapType mapType0 = typeFactory0.constructMapType(class1, class1, class0);\n    Object object0 = propertyBuilder0.getDefaultValue(mapType0);\n}",
    "testName" : "test56"
  },
  "test67" : {
    "methodSignature" : "protected Object getDefaultValue(JavaType type)",
    "methodName" : "getDefaultValue",
    "className" : "com.fasterxml.jackson.databind.ser.PropertyBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    ConfigOverrides configOverrides0 = new ConfigOverrides();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);\n    Class<Integer> class0 = Integer.TYPE;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];\n    mapperFeatureArray0[0] = mapperFeature0;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, serializationConfig1);\n    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();\n    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);\n    PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig1, basicBeanDescription0);\n    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;\n    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);\n    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);\n    Object object0 = propertyBuilder0.getDefaultValue(referenceType0);\n}",
    "testName" : "test67"
  },
  "test78" : {
    "methodSignature" : "protected Object getDefaultValue(JavaType type)",
    "methodName" : "getDefaultValue",
    "className" : "com.fasterxml.jackson.databind.ser.PropertyBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test78() throws Throwable {\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    ConfigOverrides configOverrides0 = new ConfigOverrides();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);\n    Class<Integer> class0 = Integer.TYPE;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    Class<ClassNameIdResolver> class1 = ClassNameIdResolver.class;\n    SimpleType simpleType1 = SimpleType.constructUnsafe(class1);\n    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];\n    mapperFeatureArray0[0] = mapperFeature0;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, simpleMixInResolver0);\n    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);\n    Object object0 = propertyBuilder0.getDefaultValue(simpleType1);\n}",
    "testName" : "test78"
  },
  "test89" : {
    "methodSignature" : "protected Object _throwWrapped(Exception e, String propName, Object defaultBean)",
    "methodName" : "_throwWrapped",
    "className" : "com.fasterxml.jackson.databind.ser.PropertyBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test89() throws Throwable {\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    ConfigOverrides configOverrides0 = new ConfigOverrides();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);\n    Class<Integer> class0 = Integer.TYPE;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];\n    mapperFeatureArray0[0] = mapperFeature0;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, (ClassIntrospector.MixInResolver) null);\n    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);\n    SQLDataException sQLDataException0 = new SQLDataException(\"Unexpected JSON value(s); expected at most %d properties (in JSON Array)\", \"Unexpected JSON value(s); expected at most %d properties (in JSON Array)\");\n    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);\n    propertyBuilder0._throwWrapped(sQLFeatureNotSupportedException0, \"Unexpected JSON value(s); expected at most %d properties (in JSON Array)\", basicBeanDescription0);\n}",
    "testName" : "test89"
  },
  "test00" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.ser.PropertyBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    ConfigOverrides configOverrides0 = new ConfigOverrides();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);\n    Class<Integer> class0 = Integer.TYPE;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];\n    mapperFeatureArray0[0] = mapperFeature0;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);\n    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);\n    Annotations annotations0 = propertyBuilder0.getClassAnnotations();\n    annotations0.size();\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "protected Object getPropertyDefaultValue(String name, AnnotatedMember member, JavaType type)",
    "methodName" : "getPropertyDefaultValue",
    "className" : "com.fasterxml.jackson.databind.ser.PropertyBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    ConfigOverrides configOverrides0 = new ConfigOverrides();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);\n    Class<Integer> class0 = Integer.TYPE;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];\n    mapperFeatureArray0[0] = mapperFeature0;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, (ClassIntrospector.MixInResolver) null);\n    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);\n    propertyBuilder0._defaultBean = (Object) stdSubtypeResolver0;\n    propertyBuilder0.getPropertyDefaultValue(\"fRo,#t^\", (AnnotatedMember) null, simpleType0);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "protected Object getDefaultBean()",
    "methodName" : "getDefaultBean",
    "className" : "com.fasterxml.jackson.databind.ser.PropertyBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    ConfigOverrides configOverrides0 = new ConfigOverrides();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);\n    Class<Integer> class0 = Integer.TYPE;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];\n    mapperFeatureArray0[0] = mapperFeature0;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, (ClassIntrospector.MixInResolver) null);\n    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);\n    propertyBuilder0.getDefaultBean();\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "protected Object getDefaultValue(JavaType type)",
    "methodName" : "getDefaultValue",
    "className" : "com.fasterxml.jackson.databind.ser.PropertyBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    ConfigOverrides configOverrides0 = new ConfigOverrides();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);\n    Class<String> class0 = String.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];\n    mapperFeatureArray0[0] = mapperFeature0;\n    mapperFeatureArray0[1] = mapperFeature0;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, serializationConfig0);\n    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);\n    Object object0 = propertyBuilder0.getDefaultValue(simpleType0);\n}",
    "testName" : "test33"
  }
}