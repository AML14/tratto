project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
    Class<Integer> class0 = Integer.TYPE;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
    mapperFeatureArray0[0] = mapperFeature0;
    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
    Annotations annotations0 = propertyBuilder0.getClassAnnotations();
    assertEquals(0, annotations0.size());
}",0,"assertEquals(0, annotations0.size())"
project,0,test11,"public void test11() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
    Class<Integer> class0 = Integer.TYPE;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
    mapperFeatureArray0[0] = mapperFeature0;
    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, (ClassIntrospector.MixInResolver) null);
    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
    propertyBuilder0._defaultBean = (Object) stdSubtypeResolver0;
    // Undeclared exception!
    try {
        propertyBuilder0.getPropertyDefaultValue(""fRo,#t^"", (AnnotatedMember) null, simpleType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.PropertyBuilder"", e);
    }
}",0,
project,0,test22,"public void test22() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
    Class<Integer> class0 = Integer.TYPE;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
    mapperFeatureArray0[0] = mapperFeature0;
    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, (ClassIntrospector.MixInResolver) null);
    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
    // Undeclared exception!
    try {
        propertyBuilder0.getDefaultBean();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.AnnotatedClass"", e);
    }
}",1,
project,0,test33,"public void test33() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
    Class<String> class0 = String.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
    mapperFeatureArray0[0] = mapperFeature0;
    mapperFeatureArray0[1] = mapperFeature0;
    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, serializationConfig0);
    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
    Object object0 = propertyBuilder0.getDefaultValue(simpleType0);
    assertNotNull(object0);
}",0,
project,0,test45,"public void test45() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
    Class<Integer> class0 = Integer.TYPE;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
    mapperFeatureArray0[0] = mapperFeature0;
    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
    Object object0 = propertyBuilder0.getDefaultValue(simpleType0);
    assertEquals(0, object0);
}",0,
project,0,test56,"public void test56() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
    Class<Integer> class0 = Integer.TYPE;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
    mapperFeatureArray0[0] = mapperFeature0;
    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, (ClassIntrospector.MixInResolver) null);
    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class1 = HashMap.class;
    MapType mapType0 = typeFactory0.constructMapType(class1, class1, class0);
    Object object0 = propertyBuilder0.getDefaultValue(mapType0);
    assertEquals(JsonInclude.Include.NON_EMPTY, object0);
}",0,
project,0,test67,"public void test67() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
    Class<Integer> class0 = Integer.TYPE;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
    mapperFeatureArray0[0] = mapperFeature0;
    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, serializationConfig1);
    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
    PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig1, basicBeanDescription0);
    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
    Object object0 = propertyBuilder0.getDefaultValue(referenceType0);
    assertEquals(JsonInclude.Include.NON_EMPTY, object0);
}",0,
project,0,test78,"public void test78() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
    Class<Integer> class0 = Integer.TYPE;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    Class<ClassNameIdResolver> class1 = ClassNameIdResolver.class;
    SimpleType simpleType1 = SimpleType.constructUnsafe(class1);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
    mapperFeatureArray0[0] = mapperFeature0;
    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, simpleMixInResolver0);
    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
    Object object0 = propertyBuilder0.getDefaultValue(simpleType1);
    assertNull(object0);
}",0,
project,0,test89,"public void test89() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
    Class<Integer> class0 = Integer.TYPE;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
    mapperFeatureArray0[0] = mapperFeature0;
    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, (ClassIntrospector.MixInResolver) null);
    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
    SQLDataException sQLDataException0 = new SQLDataException(""Unexpected JSON value(s); expected at most %d properties (in JSON Array)"", ""Unexpected JSON value(s); expected at most %d properties (in JSON Array)"");
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
    // Undeclared exception!
    try {
        propertyBuilder0._throwWrapped(sQLFeatureNotSupportedException0, ""Unexpected JSON value(s); expected at most %d properties (in JSON Array)"", basicBeanDescription0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Failed to get property 'Unexpected JSON value(s); expected at most %d properties (in JSON Array)' of default com.fasterxml.jackson.databind.introspect.BasicBeanDescription instance
        //
        verifyException(""com.fasterxml.jackson.databind.ser.PropertyBuilder"", e);
    }
}",1,
project,0,test910,"public void test910() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
    Class<Integer> class0 = Integer.TYPE;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
    mapperFeatureArray0[0] = mapperFeature0;
    SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, (ClassIntrospector.MixInResolver) null);
    PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
    MockError mockError0 = new MockError();
    SQLTransientException sQLTransientException0 = new SQLTransientException("""", """", 1, mockError0);
    SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(""GuM$\""a(Ut:9"", ""GuM$\""a(Ut:9"", 1, sQLTransientException0);
    // Undeclared exception!
    try {
        propertyBuilder0._throwWrapped(sQLTransientConnectionException0, ""GuM$\""a(Ut:9"", (Object) null);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
    }
}",1,
