/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:52:38 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.net.URL;
import java.nio.charset.Charset;
import java.sql.DataTruncation;
import java.sql.SQLTimeoutException;
import java.text.DateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.TimeZone;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectMapper_ESTest extends ObjectMapper_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        objectMapper0.readTree("\"NON_CONCRETE_AND_ARRAYS\"");
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapType> class0 = MapType.class;
        ObjectReader objectReader0 = objectMapper0.reader(class0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockFileWriter> class0 = MockFileWriter.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);
        SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", "JSON", 2141);
        DataTruncation dataTruncation0 = new DataTruncation(58, false, false, 1263, 3702, sQLTimeoutException0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(dataTruncation0);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) mapLikeType0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<TextNode> class0 = TextNode.class;
        Class<CharArrayReader> class1 = CharArrayReader.class;
        ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
        objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BufferedReader> class0 = BufferedReader.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
        ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[0];
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        objectMapper0.readValue(byteArray0, (JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
        objectMapper1.mixInCount();
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DoubleNode> class0 = DoubleNode.class;
        objectMapper0.readValue("ox+", class0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
        objectMapper0.registerSubtypes(classArray0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        byte[] byteArray0 = new byte[2];
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Class<NullNode> class0 = NullNode.class;
        objectMapper0.readValue(byteArray0, 1, 3532, class0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 677);
        Charset charset0 = Charset.defaultCharset();
        InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0, charset0);
        Class<BufferedInputStream> class0 = BufferedInputStream.class;
        objectMapper0.readValue((Reader) inputStreamReader0, class0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
        objectMapper0.writer(serializationFeature0, (SerializationFeature[]) null);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[0];
        TypeReference<BooleanNode> typeReference0 = (TypeReference<BooleanNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue(byteArray0, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("", "");
        Class<Object> class0 = Object.class;
        objectMapper0.readValue((File) mockFile0, class0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TimeZone timeZone0 = TimeZone.getDefault();
        ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonGenerator_Feature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
        ObjectWriter objectWriter0 = objectMapper0.writer(dateFormat0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.acceptJsonFormatVisitor(class0, (JsonFormatVisitorWrapper) null);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        ObjectWriter objectWriter0 = objectMapper0.writer((FilterProvider) simpleFilterProvider0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        Class<MockFileWriter> class0 = MockFileWriter.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.readValue("<Qp:7?+sm-!WeSC", (JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        HashMap<String, ByteArrayInputStream> hashMap0 = new HashMap<String, ByteArrayInputStream>();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
        objectMapper0.setFilters(simpleFilterProvider0);
        objectMapper0.mixInCount();
        assertEquals(0, objectMapper0.mixInCount());
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.ser.std.StdScalarSerializer", "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer");
        objectMapper0.writeValue((File) mockFile0, (Object) mockFile0);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<FilterOutputStream> class0 = FilterOutputStream.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((JavaType) arrayType0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<StringReader> class0 = StringReader.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<BigIntegerNode> typeReference0 = (TypeReference<BigIntegerNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        objectMapper0.readValue((byte[]) null, 0, 717, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JavaType javaType0 = TypeFactory.unknownType();
        objectMapper0._convert(jsonFactory0, javaType0);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BufferedReader> class0 = BufferedReader.class;
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        NullNode nullNode0 = arrayNode0.nullNode();
        BufferedReader bufferedReader0 = objectMapper0.treeToValue((TreeNode) nullNode0, class0);
        assertNotNull(bufferedReader0);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StringReader stringReader0 = new StringReader("R8?F6CIrFs85?iO4n");
        objectMapper0.readValue((Reader) stringReader0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        objectMapper0.disable(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        objectMapper0.reader((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
        JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
        char[] charArray0 = new char[3];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 1293, 114);
        TypeReference<BeanDeserializer> typeReference0 = (TypeReference<BeanDeserializer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue(jsonParser0, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = objectMapper0.getJsonFactory();
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        Class<ArrayNode> class0 = ArrayNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        URL uRL0 = MockURL.getFtpExample();
        objectMapper0.readValue(uRL0, (JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile(") vs ", ") vs ");
        objectMapper0.readValue((File) mockFile0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory((SerializerFactory) null);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
        byte[] byteArray0 = objectMapper0.writeValueAsBytes(arrayType0);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 33, 33);
        objectMapper0.readValue((InputStream) byteArrayInputStream0, (JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        TypeReference<CollectionType> typeReference0 = (TypeReference<CollectionType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValues(jsonParser0, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<LongNode> class0 = LongNode.class;
        objectMapper0._checkInvalidCopy(class0);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 11);
        objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) null);
        objectMapper0.mixInCount();
        assertEquals(0, objectMapper0.mixInCount());
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        objectMapper0.writeValue((Writer) charArrayWriter0, (Object) charArrayWriter0);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        Class<MapType> class0 = MapType.class;
        objectMapper0.addMixInAnnotations(class0, class0);
        objectMapper0.mixInCount();
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        byte[] byteArray0 = new byte[8];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        objectMapper0.readValue(jsonParser0, (ResolvedType) null);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ArrayType> class0 = ArrayType.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = objectMapper0.getNodeFactory();
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
        ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver((SubtypeResolver) null);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        StringReader stringReader0 = new StringReader("JSON");
        JsonParser jsonParser0 = jsonFactory0.createParser((Reader) stringReader0);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
        Class<ArrayNode> class0 = ArrayNode.class;
        MappingIterator<ArrayNode> mappingIterator0 = objectMapper0.readValues((JsonParser) jsonParserDelegate0, class0);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
        assertNotNull(serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        PropertyNamingStrategy.LowerCaseStrategy propertyNamingStrategy_LowerCaseStrategy0 = (PropertyNamingStrategy.LowerCaseStrategy) PropertyNamingStrategy.LOWER_CASE;
        ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseStrategy0);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());
        ObjectMapper objectMapper1 = (ObjectMapper) objectMapper0.setHandlerInstantiator(handlerInstantiator0);
        objectMapper1.mixInCount();
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockFileReader> class0 = MockFileReader.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DecimalNode> class0 = DecimalNode.class;
        objectMapper0.readValue((InputStream) null, class0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectWriter objectWriter0 = objectMapper0.writer((CharacterEscapes) null);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        objectMapper0.readValue((JsonParser) null, (JavaType) mapType0);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        MappingIterator<MockFileReader> mappingIterator0 = objectMapper0.readValues((JsonParser) null, (ResolvedType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
        objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        String string0 = objectMapper0.writeValueAsString(objectMapper_DefaultTyping0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
        ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.asText();
        assertNotNull(objectNode0.asText());
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CollectionType> class0 = CollectionType.class;
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
        boolean boolean0 = objectMapper0.isEnabled(serializationFeature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializerFactory serializerFactory0 = objectMapper0.getSerializerFactory();
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<MockFileWriter> typeReference0 = (TypeReference<MockFileWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        objectMapper0.readValue((URL) null, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
        objectMapper1.mixInCount();
        assertEquals(1, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        Class<CollectionType> class0 = CollectionType.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        byte[] byteArray0 = new byte[8];
        objectMapper0.readValue(byteArray0, 2, (int) (-39), (JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
        objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile((String) null, "");
        URL uRL0 = mockFile0.toURL();
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.readValue(uRL0, class0);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[6];
        Class<MockPrintStream> class0 = MockPrintStream.class;
        objectMapper0.readValue(byteArray0, class0);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((FormatSchema) null);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
        objectMapper0.enable(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setConfig((SerializationConfig) null);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        arrayNode0.asToken();
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser jsonParser0 = jsonFactory0.createParser("0o");
        Version version0 = jsonParser0.version();
        SimpleModule simpleModule0 = new SimpleModule(") does not override copy(); it has to", version0);
        NamedType[] namedTypeArray0 = new NamedType[6];
        SimpleModule simpleModule1 = simpleModule0.registerSubtypes(namedTypeArray0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
        boolean boolean0 = objectMapper0.isEnabled(mapperFeature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("$RnOpz4ewP3':");
        objectMapper0.readValue((File) mockFile0, (TypeReference) null);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        Class<BufferedWriter> class0 = BufferedWriter.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = objectMapper0.constructType(simpleType0);
        javaType0.isConcrete();
        assertTrue(javaType0.isConcrete());
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
        ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((Base64Variant) null);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
        TypeReference<MockPrintWriter> typeReference0 = (TypeReference<MockPrintWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue((Reader) mockFileReader0, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.convertValue((Object) objectMapper_DefaultTyping0, (TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((ContextAttributes) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        TypeReference<MapType> typeReference0 = (TypeReference<MapType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue((InputStream) byteArrayInputStream0, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = objectMapper0.getTypeFactory();
        assertNotNull(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
        ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
        objectMapper1.mixInCount();
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        boolean boolean0 = objectMapper0.isEnabled(deserializationFeature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readValue((String) null, (TypeReference) null);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(jacksonAnnotationIntrospector0, jacksonAnnotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
        Version version0 = objectReader0.version();
        SimpleModule simpleModule0 = new SimpleModule("3X$MJi.gk|s3Qd{4", version0);
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        simpleModule0.setSerializerModifier(beanSerializerModifier0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<MockFileInputStream> class0 = MockFileInputStream.class;
        objectMapper0.convertValue((Object) "", class0);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[4];
        objectMapper0.setDefaultTyping(objectMapper_DefaultTypeResolverBuilder0);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-82), 0);
        objectMapper0.writeValueAsString(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        ObjectReader objectReader0 = objectMapper0.reader();
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<PriorityQueue> class0 = PriorityQueue.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(collectionType0);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        JavaType javaType0 = TypeFactory.unknownType();
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(javaType0);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        Class<ArrayNode> class0 = ArrayNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        Class<ArrayNode> class0 = ArrayNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        JavaType javaType0 = TypeFactory.unknownType();
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(javaType0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        objectMapper1.equals((Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule((String) null, (Version) null);
        objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        SimpleModule simpleModule0 = new SimpleModule("3X$MJi.gk|s3Qd{4", (Version) null);
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[1];
        SimpleModule simpleModule0 = new SimpleModule("");
        moduleArray0[0] = (Module) simpleModule0;
        ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        List<Module> list0 = ObjectMapper.findModules(classLoader0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        Class<?> class1 = objectMapper0.findMixInClassFor(class0);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        int int0 = objectMapper0.mixInCount();
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser jsonParser0 = jsonFactory0.createParser("\"yw;Dx");
        jsonParser0.nextBooleanValue();
        objectMapper0.readTree(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser jsonParser0 = jsonFactory0.createParser("\"yw;Dx");
        objectMapper0.readTree(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser jsonParser0 = jsonFactory0.createParser("");
        DoubleNode doubleNode0 = objectMapper0.readTree(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        File file0 = MockFile.createTempFile("JSON", "JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator(file0, jsonEncoding0);
        objectMapper0.writeValue(jsonGenerator0, (Object) jsonEncoding0);
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
        JsonNode jsonNode0 = objectMapper0.readTree((InputStream) mockFileInputStream0);
        objectMapper0.writeTree(jsonGenerator0, jsonNode0);
        file0.length();
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 51;
        JsonNode jsonNode0 = objectMapper0.readTree(byteArray0);
        jsonNode0.floatValue();
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("JSON");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0);
        IntNode intNode0 = new IntNode(23);
        objectMapper0.writeTree(jsonGenerator0, (TreeNode) intNode0);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test146147() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("JSON");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0);
        IntNode intNode0 = new IntNode(23);
        objectMapper0.writeTree(jsonGenerator0, (TreeNode) intNode0);
        JsonNode jsonNode0 = objectMapper0.readTree((File) mockFile0);
        MockFileReader mockFileReader0 = new MockFileReader("JSON");
        JsonNode jsonNode1 = objectMapper0.readTree((Reader) mockFileReader0);
    }

    @Test(timeout = 4000)
    public void test147148() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("JSON", "JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        objectMapper0.writeValue(jsonGenerator0, (Object) jsonEncoding0);
        URL uRL0 = mockFile0.toURL();
        JsonNode jsonNode0 = objectMapper0.readTree(uRL0);
        jsonNode0.asToken();
    }

    @Test(timeout = 4000)
    public void test148149() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        objectMapper0.valueToTree((Object) charsToNameCanonicalizer0);
    }

    @Test(timeout = 4000)
    public void test149150() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
        ArrayNode arrayNode0 = objectMapper0.valueToTree((Object) null);
    }

    @Test(timeout = 4000)
    public void test150151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapType> class0 = MapType.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test151152() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<ArrayNode> typeReference0 = (TypeReference<ArrayNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.writerWithType(typeReference0);
    }

    @Test(timeout = 4000)
    public void test152153() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((TypeReference<?>) null);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test153154() throws Throwable {
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) defaultPrettyPrinter0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test154155() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) null);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test155156() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Class<ObjectNode> class0 = ObjectNode.class;
        ObjectNode objectNode0 = objectMapper0.convertValue((Object) null, class0);
    }

    @Test(timeout = 4000)
    public void test156157() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        objectMapper0.convertValue((Object) bufferRecycler0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test157158() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayOutputStream byteArrayOutputStream0 = objectMapper0.convertValue((Object) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test158159() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        Object object0 = objectMapper0._convert((Object) null, mapType0);
    }

    @Test(timeout = 4000)
    public void test159160() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
        JsonFormatVisitorWrapper jsonFormatVisitorWrapper0 = mock(JsonFormatVisitorWrapper.class, new ViolatedAssumptionAnswer());
        objectMapper0.acceptJsonFormatVisitor((JavaType) null, jsonFormatVisitorWrapper0);
    }

    @Test(timeout = 4000)
    public void test160161() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) null);
        objectMapper0._configAndWriteValue(jsonGenerator0, (Object) null);
    }

    @Test(timeout = 4000)
    public void test161162() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding0);
        Class<InputStreamReader> class0 = InputStreamReader.class;
        objectMapper0._configAndWriteValue(jsonGenerator0, jsonEncoding0, class0);
        jsonGenerator0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test162163() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, objectMapper0, (Writer) null);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
        Class<NullNode> class0 = NullNode.class;
        objectMapper0._configAndWriteValue(jsonGeneratorDelegate0, (Object) null, class0);
    }

    @Test(timeout = 4000)
    public void test163164() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BufferedReader> class0 = BufferedReader.class;
        objectMapper0._configAndWriteValue((JsonGenerator) null, (Object) null, class0);
    }

    @Test(timeout = 4000)
    public void test164165() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNode jsonNode0 = objectMapper0.readTree("null");
        jsonNode0.isIntegralNumber();
        assertFalse(jsonNode0.isIntegralNumber());
    }
}
