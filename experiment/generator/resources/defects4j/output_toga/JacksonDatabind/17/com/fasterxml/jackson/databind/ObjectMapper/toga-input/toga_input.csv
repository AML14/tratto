focal_method,test_prefix,docstring
"public JsonNode readTree(String content) throws IOException, JsonProcessingException {
    JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(content), JSON_NODE_TYPE);
    return (n == null) ? NullNode.instance : n;
}","public void test0000() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
    objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
    try {
        objectMapper0.readTree(""\""NON_CONCRETE_AND_ARRAYS\"""");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected token (VALUE_STRING), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class com.fasterxml.jackson.databind.JsonNode
        //  at [Source: java.lang.String@0000000451; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}","/**
 * Method to deserialize JSON content as tree expressed using set of {@link JsonNode} instances.
 * Returns root of the resulting tree (where root can consist of just a single node if the current
 * event is a value event, not container).
 *
 * @param content JSON content to parse to build the JSON tree.
 */"
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test0011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
    ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public boolean canDeserialize(JavaType type, AtomicReference<Throwable> cause) {
    return createDeserializationContext(null, getDeserializationConfig()).hasValueDeserializerFor(type, cause);
}","public void test0033() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<MockFileWriter> class0 = MockFileWriter.class;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);
    SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""JSON"", ""JSON"", 2141);
    DataTruncation dataTruncation0 = new DataTruncation(58, false, false, 1263, 3702, sQLTimeoutException0);
    AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(dataTruncation0);
    boolean boolean0 = objectMapper0.canDeserialize((JavaType) mapLikeType0, atomicReference0);
    assertFalse(boolean0);
}","/**
 * Method similar to {@link #canDeserialize(JavaType)} but that can return
 * actual {@link Throwable} that was thrown when trying to construct
 * serializer: this may be useful in figuring out what the actual problem is.
 *
 * @since 2.3
 */"
"public final ObjectMapper addMixIn(Class<?> target, Class<?> mixinSource) {
    _mixInAnnotations.put(new ClassKey(target), mixinSource);
    return this;
}","public void test0044() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<TextNode> class0 = TextNode.class;
    Class<CharArrayReader> class1 = CharArrayReader.class;
    ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
    assertSame(objectMapper1, objectMapper0);
}","/**
 * Method to use for adding mix-in annotations to use for augmenting
 * specified class or interface. All annotations from
 * <code>mixinSource</code> are taken to override annotations
 * that <code>target</code> (or its supertypes) has.
 *
 * @param target Class (or interface) whose annotations to effectively override
 * @param mixinSource Class (or interface) whose annotations are to
 *   be ""added"" to target's annotations, overriding as necessary
 */"
"public ObjectMapper enable(SerializationFeature first, SerializationFeature... f) {
    _serializationConfig = _serializationConfig.with(first, f);
    return this;
}","public void test0055() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
    // Undeclared exception!
    try {
        objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializationConfig"", e);
    }
}","/**
 * Method for enabling specified {@link DeserializationConfig} features.
 * Modifies and returns this instance; no new object is created.
 */"
"public boolean canDeserialize(JavaType type) {
    return createDeserializationContext(null, getDeserializationConfig()).hasValueDeserializerFor(type, null);
}","public void test0066() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BufferedReader> class0 = BufferedReader.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    boolean boolean0 = objectMapper0.canDeserialize((JavaType) simpleType0);
    assertTrue(boolean0);
}","/**
 * Method that can be called to check whether mapper thinks
 * it could deserialize an Object of given type.
 * Check is done
 * by checking whether a deserializer can be found for the type.
 *
 * @return True if mapper can find a serializer for instances of
 *  given class (potentially serializable), false otherwise (not
 *  serializable)
 */"
"public ObjectMapper enable(DeserializationFeature feature) {
    _deserializationConfig = _deserializationConfig.with(feature);
    return this;
}","public void test0077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
    ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
    assertSame(objectMapper1, objectMapper0);
}","/**
 * Method for enabling specified {@link DeserializationConfig} features.
 * Modifies and returns this instance; no new object is created.
 */"
"@SuppressWarnings(""unchecked"")
public <T> T readValue(byte[] src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);
}","public void test0088() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    byte[] byteArray0 = new byte[0];
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    try {
        objectMapper0.readValue(byteArray0, (JavaType) simpleType0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No content to map due to end-of-input
        //  at [Source: [B@0000000452; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test0099() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
    ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public ObjectMapper setLocale(Locale l) {
    _deserializationConfig = _deserializationConfig.with(l);
    _serializationConfig = _serializationConfig.with(l);
    return this;
}","public void test01010() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
    assertSame(objectMapper1, objectMapper0);
}","/**
 * Method for overriding default locale to use for formatting.
 * Default value used is {@link Locale#getDefault()}.
 */"
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test01414() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.copy();
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public ObjectWriter writer(SerializationFeature first, SerializationFeature... other) {
    return new ObjectWriter(this, getSerializationConfig().with(first, other));
}","public void test01616() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
    // Undeclared exception!
    try {
        objectMapper0.writer(serializationFeature0, (SerializationFeature[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializationConfig"", e);
    }
}","/**
 * Factory method for constructing {@link ObjectWriter} with
 * specified features enabled (compared to settings that this
 * mapper instance has).
 */"
"public ObjectReader reader(JsonNodeFactory f) {
    return new ObjectReader(this, getDeserializationConfig()).with(f);
}","public void test01717() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
    ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * use specified {@link JsonNodeFactory} for constructing JSON trees.
 */"
"@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
public <T> T readValue(byte[] src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));
}","public void test01818() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    byte[] byteArray0 = new byte[0];
    TypeReference<BooleanNode> typeReference0 = (TypeReference<BooleanNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    // Undeclared exception!
    try {
        objectMapper0.readValue(byteArray0, (TypeReference) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test02020() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TimeZone timeZone0 = TimeZone.getDefault();
    ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public boolean isEnabled(JsonGenerator.Feature f) {
    return _jsonFactory.isEnabled(f);
}","public void test02121() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
    boolean boolean0 = objectMapper0.isEnabled(jsonGenerator_Feature0);
    assertTrue(boolean0);
}","/**
 *  Convenience method, equivalent to:
 * <pre>
 *   getJsonFactory().isEnabled(f);
 * </pre>
 */"
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test02222() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public ObjectReader reader(Base64Variant defaultBase64) {
    return new ObjectReader(this, getDeserializationConfig().with(defaultBase64));
}","public void test02323() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * use specified Base64 encoding variant for Base64-encoded binary data.
 *
 * @since 2.1
 */"
"public ObjectReader readerForUpdating(Object valueToUpdate) {
    JavaType t = _typeFactory.constructType(valueToUpdate.getClass());
    return new ObjectReader(this, getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);
}","public void test02424() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * update given Object (usually Bean, but can be a Collection or Map
 * as well, but NOT an array) with JSON data. Deserialization occurs
 * normally except that the root-level value in JSON is not used for
 * instantiating a new object; instead give updateable object is used
 * as root.
 * Runtime type of value object is used for locating deserializer,
 * unless overridden by other factory methods of {@link ObjectReader}
 */"
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test02525() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
    ObjectWriter objectWriter0 = objectMapper0.writer(dateFormat0);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test02727() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test02828() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
    ObjectWriter objectWriter0 = objectMapper0.writer((FilterProvider) simpleFilterProvider0);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"@SuppressWarnings(""unchecked"")
public <T> T readValue(String content, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(content), valueType);
}","public void test02929() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    Class<MockFileWriter> class0 = MockFileWriter.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    try {
        objectMapper0.readValue(""<Qp:7?+sm-!WeSC"", (JavaType) simpleType0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('<' (code 60)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
        //  at [Source: java.lang.String@0000000455; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test03030() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    HashMap<String, ByteArrayInputStream> hashMap0 = new HashMap<String, ByteArrayInputStream>();
    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
    objectMapper0.setFilters(simpleFilterProvider0);
    assertEquals(0, objectMapper0.mixInCount());
}",""
"public ObjectReader reader(DeserializationFeature feature) {
    return new ObjectReader(this, getDeserializationConfig().with(feature));
}","public void test03131() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} with
 * specified feature enabled (compared to settings that this
 * mapper instance has).
 * Note that the resulting instance is NOT usable as is,
 * without defining expected value type.
 */"
"/*
    /**********************************************************
    /* Extended Public API: serialization
    /* (mapping from Java types to JSON)
    /**********************************************************
     */
/**
 * Method that can be used to serialize any Java value as
 * JSON output, written to File provided.
 */
public void writeValue(File resultFile, Object value) throws IOException, JsonGenerationException, JsonMappingException {
    _configAndWriteValue(_jsonFactory.createGenerator(resultFile, JsonEncoding.UTF8), value);
}","public void test03232() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MockFile mockFile0 = new MockFile(""com.fasterxml.jackson.databind.ser.std.StdScalarSerializer"", ""com.fasterxml.jackson.databind.ser.std.StdScalarSerializer"");
    try {
        objectMapper0.writeValue((File) mockFile0, (Object) mockFile0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Loop has been executed more times than the allowed 10000 (through reference chain: org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""path\""])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test03333() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<FilterOutputStream> class0 = FilterOutputStream.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
    ObjectWriter objectWriter0 = objectMapper0.writerWithType((JavaType) arrayType0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test03434() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<StringReader> class0 = StringReader.class;
    ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
public <T> T readValue(byte[] src, int offset, int len, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), _typeFactory.constructType(valueTypeRef));
}","public void test03535() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeReference<BigIntegerNode> typeReference0 = (TypeReference<BigIntegerNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        objectMapper0.readValue((byte[]) null, 0, 717, (TypeReference) typeReference0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper"", e);
    }
}",""
"@SuppressWarnings(""resource"")
protected Object _convert(Object fromValue, JavaType toValueType) throws IllegalArgumentException {
    // also, as per [Issue-11], consider case for simple cast
    /* But with caveats: one is that while everything is Object.class, we don't
         * want to ""optimize"" that out; and the other is that we also do not want
         * to lose conversions of generic types.
         */
    Class<?> targetType = toValueType.getRawClass();
    if (targetType != Object.class && !toValueType.hasGenericTypes() && targetType.isAssignableFrom(fromValue.getClass())) {
        return fromValue;
    }
    /* Then use TokenBuffer, which is a JsonGenerator:
         * (see [JACKSON-175])
         */
    TokenBuffer buf = new TokenBuffer(this, false);
    try {
        // inlined 'writeValue' with minor changes:
        // first: disable wrapping when writing
        SerializationConfig config = getSerializationConfig().without(SerializationFeature.WRAP_ROOT_VALUE);
        // no need to check for closing of TokenBuffer
        _serializerProvider(config).serializeValue(buf, fromValue);
        // then matching read, inlined 'readValue' with minor mods:
        final JsonParser jp = buf.asParser();
        Object result;
        // ok to pass in existing feature flags; unwrapping handled by mapper
        final DeserializationConfig deserConfig = getDeserializationConfig();
        JsonToken t = _initForReading(jp);
        if (t == JsonToken.VALUE_NULL) {
            DeserializationContext ctxt = createDeserializationContext(jp, deserConfig);
            result = _findRootDeserializer(ctxt, toValueType).getNullValue();
        } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {
            result = null;
        } else {
            // pointing to event other than null
            DeserializationContext ctxt = createDeserializationContext(jp, deserConfig);
            JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, toValueType);
            // note: no handling of unwarpping
            result = deser.deserialize(jp, ctxt);
        }
        jp.close();
        return result;
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}","public void test03636() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    JavaType javaType0 = TypeFactory.unknownType();
    try {
        objectMapper0._convert(jsonFactory0, javaType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""]->com.fasterxml.jackson.core.JsonFactory[\""codec\""]->com.fasterxml.jackson.databind.ObjectMapper[\""factory\""])
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}","/**
 * Actual conversion implementation: instead of using existing read
 * and write methods, much of code is inlined. Reason for this is
 * that we must avoid root value wrapping/unwrapping both for efficiency and
 * for correctness. If root value wrapping/unwrapping is actually desired,
 * caller must use explicit <code>writeValue</code> and
 * <code>readValue</code> methods.
 */"
"@SuppressWarnings(""unchecked"")
@Override
public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException {
    try {
        // [Issue-11]: Simple cast when we just want to cast to, say, ObjectNode
        // ... one caveat; while everything is Object.class, let's not take shortcut
        if (valueType != Object.class && valueType.isAssignableFrom(n.getClass())) {
            return (T) n;
        }
        return readValue(treeAsTokens(n), valueType);
    } catch (JsonProcessingException e) {
        throw e;
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}","public void test03737() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BufferedReader> class0 = BufferedReader.class;
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
    NullNode nullNode0 = arrayNode0.nullNode();
    BufferedReader bufferedReader0 = objectMapper0.treeToValue((TreeNode) nullNode0, class0);
    assertNull(bufferedReader0);
}","/**
 *  Convenience conversion method that will bind data given JSON tree
 *  contains into specific value (usually bean) type.
 * <p>
 *  Functionally equivalent to:
 * <pre>
 *    objectMapper.convertValue(n, valueClass);
 * </pre>
 */"
"@SuppressWarnings(""unchecked"")
public <T> T readValue(Reader src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);
}","public void test03838() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    StringReader stringReader0 = new StringReader(""R8?F6CIrFs85?iO4n"");
    try {
        objectMapper0.readValue((Reader) stringReader0, (JavaType) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'R8': was expecting ('true', 'false' or 'null')
        //  at [Source: java.io.StringReader@0000000456; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"public ObjectReader reader(FormatSchema schema) {
    _verifySchemaType(schema);
    return new ObjectReader(this, getDeserializationConfig(), null, null, schema, _injectableValues);
}","public void test04040() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * pass specific schema object to {@link JsonParser} used for
 * reading content.
 *
 * @param schema Schema to pass to parser
 */"
"public ObjectReader reader(TypeReference<?> type) {
    return reader(_typeFactory.constructType(type));
}","public void test04141() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    // Undeclared exception!
    try {
        objectMapper0.reader((TypeReference<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * read or update instances of specified type
 */"
"@Override
@SuppressWarnings(""unchecked"")
public <T> T readValue(JsonParser jp, TypeReference<?> valueTypeRef) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readValue(getDeserializationConfig(), jp, _typeFactory.constructType(valueTypeRef));
}","public void test04242() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
    ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
    JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
    char[] charArray0 = new char[3];
    JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 1293, 114);
    TypeReference<BeanDeserializer> typeReference0 = (TypeReference<BeanDeserializer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    // Undeclared exception!
    try {
        objectMapper0.readValue(jsonParser0, (TypeReference<?>) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}","/**
 * Method to deserialize JSON content into a Java type, reference
 * to which is passed as argument. Type is passed using so-called
 * ""super type token"" (see )
 * and specifically needs to be used if the root type is a
 * parameterized (generic) container type.
 */"
"/*
    /**********************************************************
    /* Configuration, introspection
    /**********************************************************
     */
/**
 * Method for accessing currently configured visibility checker;
 * object used for determining whether given property element
 * (method, field, constructor) can be auto-detected or not.
 */
public VisibilityChecker<?> getVisibilityChecker() {
    return _serializationConfig.getDefaultVisibilityChecker();
}","public void test04444() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
    assertNotNull(visibilityChecker0);
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test04545() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
    ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public ObjectMapper enable(DeserializationFeature first, DeserializationFeature... f) {
    _deserializationConfig = _deserializationConfig.with(first, f);
    return this;
}","public void test04646() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
    // Undeclared exception!
    try {
        objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}","/**
 * Method for enabling specified {@link DeserializationConfig} features.
 * Modifies and returns this instance; no new object is created.
 */"
"@SuppressWarnings(""unchecked"")
public <T> T readValue(URL src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);
}","public void test04747() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    Class<ArrayNode> class0 = ArrayNode.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    URL uRL0 = MockURL.getFtpExample();
    // Undeclared exception!
    try {
        objectMapper0.readValue(uRL0, (JavaType) simpleType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.net.URL"", e);
    }
}",""
"@SuppressWarnings(""unchecked"")
public <T> T readValue(File src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);
}","public void test04848() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MockFile mockFile0 = new MockFile("") vs "", "") vs "");
    try {
        objectMapper0.readValue((File) mockFile0, (JavaType) null);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",""
"/*
    /**********************************************************
    /* Configuration: ser/deser factory, provider access
    /**********************************************************
     */
/**
 * Method for setting specific {@link SerializerFactory} to use
 * for constructing (bean) serializers.
 */
public ObjectMapper setSerializerFactory(SerializerFactory f) {
    _serializerFactory = f;
    return this;
}","public void test04949() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory((SerializerFactory) null);
    assertSame(objectMapper1, objectMapper0);
}",""
"@SuppressWarnings(""unchecked"")
public <T> T readValue(InputStream src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);
}","public void test05050() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
    byte[] byteArray0 = objectMapper0.writeValueAsBytes(arrayType0);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 33, 33);
    try {
        objectMapper0.readValue((InputStream) byteArrayInputStream0, (JavaType) simpleType0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No content to map due to end-of-input
        //  at [Source: java.io.ByteArrayInputStream@0000000457; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
"public boolean isEnabled(JsonParser.Feature f) {
    return _jsonFactory.isEnabled(f);
}","public void test05151() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
    boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
    assertFalse(boolean0);
}","/**
 *  Convenience method, equivalent to:
 * <pre>
 *   getJsonFactory().isEnabled(f);
 * </pre>
 */"
"@Override
public <T> MappingIterator<T> readValues(JsonParser jp, TypeReference<?> valueTypeRef) throws IOException, JsonProcessingException {
    return readValues(jp, _typeFactory.constructType(valueTypeRef));
}","public void test05252() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
    JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
    TypeReference<CollectionType> typeReference0 = (TypeReference<CollectionType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    // Undeclared exception!
    try {
        objectMapper0.readValues(jsonParser0, (TypeReference<?>) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}","/**
 * Method for reading sequence of Objects from parser stream.
 */"
"protected void _checkInvalidCopy(Class<?> exp) {
    if (getClass() != exp) {
        throw new IllegalStateException(""Failed copy(): "" + getClass().getName() + "" (version: "" + version() + "") does not override copy(); it has to"");
    }
}","public void test05353() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<LongNode> class0 = LongNode.class;
    // Undeclared exception!
    try {
        objectMapper0._checkInvalidCopy(class0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Failed copy(): com.fasterxml.jackson.databind.ObjectMapper (version: 2.4.7-SNAPSHOT) does not override copy(); it has to
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}","/**
 * @since 2.1
 * @param exp
 */"
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test05454() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper();
    BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 11);
    objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) null);
    assertEquals(0, objectMapper0.mixInCount());
}",""
"public void writeValue(Writer w, Object value) throws IOException, JsonGenerationException, JsonMappingException {
    _configAndWriteValue(_jsonFactory.createGenerator(w), value);
}","public void test05555() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    try {
        objectMapper0.writeValue((Writer) charArrayWriter0, (Object) charArrayWriter0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No serializer found for class java.io.CharArrayWriter and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
        //
        verifyException(""com.fasterxml.jackson.databind.ser.impl.UnknownSerializer"", e);
    }
}","/**
 *  Method that can be used to serialize any Java value as
 *  JSON output, using Writer provided.
 * <p>
 *  Note: method does not close the underlying stream explicitly
 *  here; however, {@link JsonFactory} this mapper uses may choose
 *  to close the stream depending on its settings (by default,
 *  it will try to close it when {@link JsonGenerator} we construct
 *  is closed).
 */"
"public ObjectMapper configure(JsonParser.Feature f, boolean state) {
    _jsonFactory.configure(f, state);
    return this;
}","public void test05656() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
    ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
    assertSame(objectMapper1, objectMapper0);
}","/**
 *  Method for changing state of an on/off {@link JsonParser} feature for
 *  {@link JsonFactory} instance this object mapper uses.
 * <p>
 *  This is method is basically a shortcut method for calling
 *  {@link JsonFactory#enable} on the shared
 *  {@link JsonFactory} this mapper uses (which is accessible
 *  using {@link #getJsonFactory}).
 */"
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test05757() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    Class<MapType> class0 = MapType.class;
    objectMapper0.addMixInAnnotations(class0, class0);
    assertEquals(1, objectMapper0.mixInCount());
}",""
"@Override
@SuppressWarnings(""unchecked"")
public final <T> T readValue(JsonParser jp, ResolvedType valueType) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readValue(getDeserializationConfig(), jp, (JavaType) valueType);
}","public void test05858() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    byte[] byteArray0 = new byte[8];
    JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
    try {
        objectMapper0.readValue(jsonParser0, (ResolvedType) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: [B@0000000458; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method to deserialize JSON content into a Java type, reference
 * to which is passed as argument. Type is passed using
 * Jackson specific type; instance of which can be constructed using
 * {@link TypeFactory}.
 */"
"public ObjectReader readerWithView(Class<?> view) {
    return new ObjectReader(this, getDeserializationConfig().withView(view));
}","public void test05959() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<ArrayType> class0 = ArrayType.class;
    ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * deserialize objects using specified JSON View (filter).
 */"
"public JsonNodeFactory getNodeFactory() {
    return _deserializationConfig.getNodeFactory();
}","public void test06060() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = objectMapper0.getNodeFactory();
    assertNotNull(jsonNodeFactory0);
}","/**
 *  Method that can be used to get hold of {@link JsonNodeFactory}
 *  that this mapper will use when directly constructing
 *  root {@link JsonNode} instances for Trees.
 * <p>
 *  Note: this is just a shortcut for calling
 * <pre>
 *    getDeserializationConfig().getNodeFactory()
 * </pre>
 */"
"public DeserializationContext getDeserializationContext() {
    return _deserializationContext;
}","public void test06161() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    assertNotNull(deserializationContext0);
}","/**
 *  Method for getting current {@link DeserializationContext}.
 * <p>
 *  Note that since instances are immutable, you can NOT change settings
 *  by accessing an instance and calling methods: this will simply create
 *  new instance of context object.
 */"
"public ObjectMapper setAnnotationIntrospector(AnnotationIntrospector ai) {
    _serializationConfig = _serializationConfig.with(ai);
    _deserializationConfig = _deserializationConfig.with(ai);
    return this;
}","public void test06262() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
    ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
    assertSame(objectMapper0, objectMapper1);
}","/**
 * Method for changing {@link AnnotationIntrospector} used by this
 * mapper instance for both serialization and deserialization
 */"
"public ObjectMapper setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {
    _deserializationConfig = _deserializationConfig.withVisibility(forMethod, visibility);
    _serializationConfig = _serializationConfig.withVisibility(forMethod, visibility);
    return this;
}","public void test06363() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
    ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    assertSame(objectMapper0, objectMapper1);
}","/**
 *  Convenience method that allows changing configuration for
 *  underlying {@link VisibilityChecker}s, to change details of what kinds of
 *  properties are auto-detected.
 *  Basically short cut for doing:
 * <pre>
 *   mapper.setVisibilityChecker(
 *      mapper.getVisibilityChecker().withVisibility(forMethod, visibility)
 *   );
 * </pre>
 *  one common use case would be to do:
 * <pre>
 *   mapper.setVisibility(JsonMethod.FIELD, Visibility.ANY);
 * </pre>
 *  which would make all member fields serializable without further annotations,
 *  instead of just public fields (default setting).
 *
 *  @param forMethod Type of property descriptor affected (field, getter/isGetter,
 *      setter, creator)
 *  @param visibility Minimum visibility to require for the property descriptors of type
 *
 *  @return Modified mapper instance (that is, ""this""), to allow chaining
 *     of configuration calls
 */"
"public ObjectMapper setSubtypeResolver(SubtypeResolver str) {
    _subtypeResolver = str;
    _deserializationConfig = _deserializationConfig.with(str);
    _serializationConfig = _serializationConfig.with(str);
    return this;
}","public void test06464() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver((SubtypeResolver) null);
    assertSame(objectMapper1, objectMapper0);
}","/**
 * Method for setting custom subtype resolver to use.
 */"
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test06666() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
    ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public SerializerProvider getSerializerProvider() {
    return _serializerProvider;
}","public void test06767() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
    assertNotNull(serializerProvider0);
}",""
"public ObjectMapper setPropertyNamingStrategy(PropertyNamingStrategy s) {
    _serializationConfig = _serializationConfig.with(s);
    _deserializationConfig = _deserializationConfig.with(s);
    return this;
}","public void test06868() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    PropertyNamingStrategy.LowerCaseStrategy propertyNamingStrategy_LowerCaseStrategy0 = (PropertyNamingStrategy.LowerCaseStrategy) PropertyNamingStrategy.LOWER_CASE;
    ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseStrategy0);
    assertSame(objectMapper0, objectMapper1);
}","/**
 * Method for setting custom property naming strategy to use.
 */"
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test06969() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());
    ObjectMapper objectMapper1 = (ObjectMapper) objectMapper0.setHandlerInstantiator(handlerInstantiator0);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"/*
    /**********************************************************
    /* Extended Public API, accessors
    /**********************************************************
     */
/**
 *  Method that can be called to check whether mapper thinks
 *  it could serialize an instance of given Class.
 *  Check is done
 *  by checking whether a serializer can be found for the type.
 * <p>
 *  NOTE: since this method does NOT throw exceptions, but internal
 *  processing may, caller usually has little information as to why
 *  serialization would fail.
 *
 *  @return True if mapper can find a serializer for instances of
 *   given class (potentially serializable), false otherwise (not
 *   serializable)
 */
public boolean canSerialize(Class<?> type) {
    return _serializerProvider(getSerializationConfig()).hasSerializerFor(type, null);
}","public void test07070() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<MockFileReader> class0 = MockFileReader.class;
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertTrue(boolean0);
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test07171() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
    ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, ""JSON"");
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test07373() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectWriter objectWriter0 = objectMapper0.writer((CharacterEscapes) null);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"@SuppressWarnings(""unchecked"")
public <T> T readValue(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readValue(getDeserializationConfig(), jp, valueType);
}","public void test07474() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Map> class0 = Map.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
    // Undeclared exception!
    try {
        objectMapper0.readValue((JsonParser) null, (JavaType) mapType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}","/**
 * Type-safe overloaded method, basically alias for {@link #readValue(JsonParser, ResolvedType)}.
 */"
"@Override
public <T> MappingIterator<T> readValues(JsonParser jp, ResolvedType valueType) throws IOException, JsonProcessingException {
    return readValues(jp, (JavaType) valueType);
}","public void test07575() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    MappingIterator<MockFileReader> mappingIterator0 = objectMapper0.readValues((JsonParser) null, (ResolvedType) simpleType0);
    assertNotNull(mappingIterator0);
}","/**
 *  Method for reading sequence of Objects from parser stream.
 *  Sequence can be either root-level ""unwrapped"" sequence (without surrounding
 *  JSON array), or a sequence contained in a JSON Array.
 *  In either case {@link JsonParser} must point to the first token of
 *  the first element, OR not point to any token (in which case it is advanced
 *  to the next token). This means, specifically, that for wrapped sequences,
 *  parser MUST NOT point to the surrounding <code>START_ARRAY</code> but rather
 *  to the token following it.
 * <p>
 *  Note that {@link ObjectReader} has more complete set of variants.
 */"
"public ObjectReader reader(DeserializationFeature first, DeserializationFeature... other) {
    return new ObjectReader(this, getDeserializationConfig().with(first, other));
}","public void test07676() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
    // Undeclared exception!
    try {
        objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}","/**
 * Factory method for constructing {@link ObjectReader} with
 * specified features enabled (compared to settings that this
 * mapper instance has).
 * Note that the resulting instance is NOT usable as is,
 * without defining expected value type.
 */"
"public boolean isEnabled(JsonFactory.Feature f) {
    return _jsonFactory.isEnabled(f);
}","public void test07777() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
    boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
    assertTrue(boolean0);
}","/**
 *  Convenience method, equivalent to:
 * <pre>
 *   getJsonFactory().isEnabled(f);
 * </pre>
 */"
"@SuppressWarnings(""resource"")
public String writeValueAsString(Object value) throws JsonProcessingException {
    // alas, we have to pull the recycler directly here...
    SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler());
    try {
        _configAndWriteValue(_jsonFactory.createGenerator(sw), value);
    } catch (JsonProcessingException e) {
        // to support [JACKSON-758]
        throw e;
    } catch (IOException e) {
        // shouldn't really happen, but is declared as possibility so:
        throw JsonMappingException.fromUnexpectedIOE(e);
    }
    return sw.getAndClear();
}","public void test07878() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
    String string0 = objectMapper0.writeValueAsString(objectMapper_DefaultTyping0);
    assertEquals(""\""NON_CONCRETE_AND_ARRAYS\"""", string0);
}","/**
 *  Method that can be used to serialize any Java value as
 *  a String. Functionally equivalent to calling
 *  {@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}
 *  and constructing String, but more efficient.
 * <p>
 *  Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.
 */"
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test07979() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
    ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"@Override
public String asText() {
    return """";
}","public void test08080() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectNode objectNode0 = objectMapper0.createObjectNode();
    assertEquals("""", objectNode0.asText());
}",""
"public boolean canSerialize(Class<?> type, AtomicReference<Throwable> cause) {
    return _serializerProvider(getSerializationConfig()).hasSerializerFor(type, cause);
}","public void test08181() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<CollectionType> class0 = CollectionType.class;
    AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
    boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    assertTrue(boolean0);
}","/**
 * Method similar to {@link #canSerialize(Class)} but that can return
 * actual {@link Throwable} that was thrown when trying to construct
 * serializer: this may be useful in figuring out what the actual problem is.
 *
 * @since 2.3
 */"
"public boolean isEnabled(SerializationFeature f) {
    return _serializationConfig.isEnabled(f);
}","public void test08282() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
    boolean boolean0 = objectMapper0.isEnabled(serializationFeature0);
    assertFalse(boolean0);
}","/**
 * Method for checking whether given serialization-specific
 * feature is enabled.
 */"
"public SerializerFactory getSerializerFactory() {
    return _serializerFactory;
}","public void test08383() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    SerializerFactory serializerFactory0 = objectMapper0.getSerializerFactory();
    assertNotNull(serializerFactory0);
}","/**
 *  Method for getting current {@link SerializerFactory}.
 * <p>
 *  Note that since instances are immutable, you can NOT change settings
 *  by accessing an instance and calling methods: this will simply create
 *  new instance of factory object.
 */"
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test08484() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
    assertEquals(0, objectMapper1.mixInCount());
}",""
"@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
public <T> T readValue(URL src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));
}","public void test08585() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeReference<MockFileWriter> typeReference0 = (TypeReference<MockFileWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        objectMapper0.readValue((URL) null, (TypeReference) typeReference0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
    }
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test08686() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test08787() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"@SuppressWarnings(""unchecked"")
public <T> T readValue(byte[] src, int offset, int len, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), valueType);
}","public void test08888() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    Class<CollectionType> class0 = CollectionType.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    byte[] byteArray0 = new byte[8];
    try {
        objectMapper0.readValue(byteArray0, 2, (int) (-39), (JavaType) simpleType0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No content to map due to end-of-input
        //  at [Source: [B@0000000459; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
"public ObjectMapper setSerializationInclusion(JsonInclude.Include incl) {
    _serializationConfig = _serializationConfig.withSerializationInclusion(incl);
    return this;
}","public void test08989() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
    ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
    assertSame(objectMapper0, objectMapper1);
}","/**
 * Method for setting defalt POJO property inclusion strategy for serialization.
 */"
"public ObjectMapper disable(SerializationFeature first, SerializationFeature... f) {
    _serializationConfig = _serializationConfig.without(first, f);
    return this;
}","public void test09090() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
    // Undeclared exception!
    try {
        objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializationConfig"", e);
    }
}","/**
 * Method for enabling specified {@link DeserializationConfig} features.
 * Modifies and returns this instance; no new object is created.
 */"
"public ObjectMapper disable(DeserializationFeature first, DeserializationFeature... f) {
    _deserializationConfig = _deserializationConfig.without(first, f);
    return this;
}","public void test09191() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
    // Undeclared exception!
    try {
        objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}","/**
 * Method for enabling specified {@link DeserializationConfig} features.
 * Modifies and returns this instance; no new object is created.
 */"
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test09494() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writer((FormatSchema) null);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"public ObjectMapper setConfig(SerializationConfig config) {
    _serializationConfig = config;
    return this;
}","public void test09696() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setConfig((SerializationConfig) null);
    assertSame(objectMapper1, objectMapper0);
}","/**
 *  Method that allows overriding of the underlying {@link SerializationConfig}
 *  object, which contains serialization-specific configuration settings.
 *  It is added as a fallback method that may be used if no other configuration
 *  modifier method works: it should not be used if there are alternatives,
 *  and its use is generally discouraged.
 * <p>
 *  <b>NOTE</b>: only use this method if you know what you are doing -- it allows
 *  by-passing some of checks applied to other configuration methods.
 *  Also keep in mind that as with all configuration of {@link ObjectMapper},
 *  this is only thread-safe if done before calling any serialization methods.
 *
 *  @since 2.4
 */"
"@Override
public JsonToken asToken() {
    return JsonToken.START_ARRAY;
}","public void test09797() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ArrayNode arrayNode0 = objectMapper0.createArrayNode();
    assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test09898() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonParser jsonParser0 = jsonFactory0.createParser(""0o"");
    Version version0 = jsonParser0.version();
    SimpleModule simpleModule0 = new SimpleModule("") does not override copy(); it has to"", version0);
    NamedType[] namedTypeArray0 = new NamedType[6];
    SimpleModule simpleModule1 = simpleModule0.registerSubtypes(namedTypeArray0);
    ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public boolean isEnabled(MapperFeature f) {
    // ok to use either one, should be kept in sync
    return _serializationConfig.isEnabled(f);
}","public void test09999() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
    boolean boolean0 = objectMapper0.isEnabled(mapperFeature0);
    assertTrue(boolean0);
}","/**
 * Method for checking whether given Mapper
 * feature is enabled.
 */"
"@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
public <T> T readValue(File src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));
}","public void test100100() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MockFile mockFile0 = new MockFile(""$RnOpz4ewP3':"");
    try {
        objectMapper0.readValue((File) mockFile0, (TypeReference) null);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",""
"@Override
public boolean isConcrete() {
    int mod = _class.getModifiers();
    if ((mod & (Modifier.INTERFACE | Modifier.ABSTRACT)) == 0) {
        return true;
    }
    /* 19-Feb-2010, tatus: Holy mackarel; primitive types
         *    have 'abstract' flag set...
         */
    return _class.isPrimitive();
}","public void test101101() throws Throwable {
    Class<BufferedWriter> class0 = BufferedWriter.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    JavaType javaType0 = objectMapper0.constructType(simpleType0);
    assertTrue(javaType0.isConcrete());
}","/**
 * Convenience method for checking whether underlying Java type
 * is a concrete class or not: abstract classes and interfaces
 * are not.
 */"
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test102102() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
    ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test103103() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writer((Base64Variant) null);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
public <T> T readValue(Reader src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));
}","public void test104104() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
    TypeReference<MockPrintWriter> typeReference0 = (TypeReference<MockPrintWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    // Undeclared exception!
    try {
        objectMapper0.readValue((Reader) mockFileReader0, (TypeReference) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
"/*
    /**********************************************************
    /* Type information configuration (1.5+)
    /**********************************************************
     */
/**
 *  Convenience method that is equivalent to calling
 * <pre>
 *   enableObjectTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);
 * </pre>
 */
public ObjectMapper enableDefaultTyping() {
    return enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);
}","public void test105105() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
    assertSame(objectMapper1, objectMapper0);
}",""
"@SuppressWarnings(""unchecked"")
public <T> T convertValue(Object fromValue, TypeReference<?> toValueTypeRef) throws IllegalArgumentException {
    return (T) convertValue(fromValue, _typeFactory.constructType(toValueTypeRef));
}","public void test106106() throws Throwable {
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
    ObjectMapper objectMapper0 = new ObjectMapper();
    // Undeclared exception!
    try {
        objectMapper0.convertValue((Object) objectMapper_DefaultTyping0, (TypeReference<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test107107() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writer((ContextAttributes) null);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"public ObjectMapper addHandler(DeserializationProblemHandler h) {
    _deserializationConfig = _deserializationConfig.withHandler(h);
    return this;
}","public void test108108() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
    assertSame(objectMapper0, objectMapper1);
}","/**
 * Method for adding specified {@link DeserializationProblemHandler}
 * to be used for handling specific problems during deserialization.
 */"
"@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
public <T> T readValue(InputStream src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));
}","public void test109109() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    TypeReference<MapType> typeReference0 = (TypeReference<MapType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    // Undeclared exception!
    try {
        objectMapper0.readValue((InputStream) byteArrayInputStream0, (TypeReference) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
"/*
    /**********************************************************
    /* Configuration, basic type handling
    /**********************************************************
     */
/**
 * Accessor for getting currently configured {@link TypeFactory} instance.
 */
public TypeFactory getTypeFactory() {
    return _typeFactory;
}","public void test110110() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = objectMapper0.getTypeFactory();
    assertNotNull(typeFactory0);
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test111111() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
    ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test112112() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test113113() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public boolean isEnabled(DeserializationFeature f) {
    return _deserializationConfig.isEnabled(f);
}","public void test114114() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
    boolean boolean0 = objectMapper0.isEnabled(deserializationFeature0);
    assertTrue(boolean0);
}","/**
 * Method for checking whether given deserialization-specific
 * feature is enabled.
 */"
"public ObjectMapper setTypeFactory(TypeFactory f) {
    _typeFactory = f;
    _deserializationConfig = _deserializationConfig.with(f);
    _serializationConfig = _serializationConfig.with(f);
    return this;
}","public void test115115() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
    assertSame(objectMapper0, objectMapper1);
}","/**
 *  Method that can be used to override {@link TypeFactory} instance
 *  used by this mapper.
 * <p>
 *  Note: will also set {@link TypeFactory} that deserialization and
 *  serialization config objects use.
 */"
"@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
public <T> T readValue(String content, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {
    return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueTypeRef));
}","public void test116116() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    // Undeclared exception!
    try {
        objectMapper0.readValue((String) null, (TypeReference) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.JsonFactory"", e);
    }
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test117117() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public ObjectMapper setAnnotationIntrospectors(AnnotationIntrospector serializerAI, AnnotationIntrospector deserializerAI) {
    _serializationConfig = _serializationConfig.with(serializerAI);
    _deserializationConfig = _deserializationConfig.with(deserializerAI);
    return this;
}","public void test118118() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
    ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(jacksonAnnotationIntrospector0, jacksonAnnotationIntrospector0);
    assertSame(objectMapper1, objectMapper0);
}","/**
 * Method for changing {@link AnnotationIntrospector} instances used
 * by this mapper instance for serialization and deserialization,
 * specifying them separately so that different introspection can be
 * used for different aspects
 *
 * @since 2.1
 *
 * @param serializerAI {@link AnnotationIntrospector} to use for configuring
 *    serialization
 * @param deserializerAI {@link AnnotationIntrospector} to use for configuring
 *    deserialization
 */"
"/*
    /**********************************************************
    /* Module registration, discovery
    /**********************************************************
     */
/**
 * Method for registering a module that can extend functionality
 * provided by this mapper; for example, by adding providers for
 * custom serializers and deserializers.
 *
 * @param module Module to register
 */
public ObjectMapper registerModule(Module module) {
    /* Let's ensure we have access to name and version information, 
         * even if we do not have immediate use for either. This way we know
         * that they will be available from beginning
         */
    String name = module.getModuleName();
    if (name == null) {
        throw new IllegalArgumentException(""Module without defined name"");
    }
    Version version = module.version();
    if (version == null) {
        throw new IllegalArgumentException(""Module without defined version"");
    }
    final ObjectMapper mapper = this;
    // And then call registration
    module.setupModule(new Module.SetupContext() {

        // // // Accessors
        @Override
        public Version getMapperVersion() {
            return version();
        }

        @SuppressWarnings(""unchecked"")
        @Override
        public <C extends ObjectCodec> C getOwner() {
            // why do we need the cast here?!?
            return (C) mapper;
        }

        @Override
        public TypeFactory getTypeFactory() {
            return _typeFactory;
        }

        @Override
        public boolean isEnabled(MapperFeature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(DeserializationFeature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(SerializationFeature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(JsonFactory.Feature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(JsonParser.Feature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(JsonGenerator.Feature f) {
            return mapper.isEnabled(f);
        }

        // // // Methods for registering handlers: deserializers
        @Override
        public void addDeserializers(Deserializers d) {
            DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalDeserializers(d);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        @Override
        public void addKeyDeserializers(KeyDeserializers d) {
            DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalKeyDeserializers(d);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        @Override
        public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {
            DeserializerFactory df = mapper._deserializationContext._factory.withDeserializerModifier(modifier);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        // // // Methods for registering handlers: serializers
        @Override
        public void addSerializers(Serializers s) {
            mapper._serializerFactory = mapper._serializerFactory.withAdditionalSerializers(s);
        }

        @Override
        public void addKeySerializers(Serializers s) {
            mapper._serializerFactory = mapper._serializerFactory.withAdditionalKeySerializers(s);
        }

        @Override
        public void addBeanSerializerModifier(BeanSerializerModifier modifier) {
            mapper._serializerFactory = mapper._serializerFactory.withSerializerModifier(modifier);
        }

        // // // Methods for registering handlers: other
        @Override
        public void addAbstractTypeResolver(AbstractTypeResolver resolver) {
            DeserializerFactory df = mapper._deserializationContext._factory.withAbstractTypeResolver(resolver);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        @Override
        public void addTypeModifier(TypeModifier modifier) {
            TypeFactory f = mapper._typeFactory;
            f = f.withModifier(modifier);
            mapper.setTypeFactory(f);
        }

        @Override
        public void addValueInstantiators(ValueInstantiators instantiators) {
            DeserializerFactory df = mapper._deserializationContext._factory.withValueInstantiators(instantiators);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        @Override
        public void setClassIntrospector(ClassIntrospector ci) {
            mapper._deserializationConfig = mapper._deserializationConfig.with(ci);
            mapper._serializationConfig = mapper._serializationConfig.with(ci);
        }

        @Override
        public void insertAnnotationIntrospector(AnnotationIntrospector ai) {
            mapper._deserializationConfig = mapper._deserializationConfig.withInsertedAnnotationIntrospector(ai);
            mapper._serializationConfig = mapper._serializationConfig.withInsertedAnnotationIntrospector(ai);
        }

        @Override
        public void appendAnnotationIntrospector(AnnotationIntrospector ai) {
            mapper._deserializationConfig = mapper._deserializationConfig.withAppendedAnnotationIntrospector(ai);
            mapper._serializationConfig = mapper._serializationConfig.withAppendedAnnotationIntrospector(ai);
        }

        @Override
        public void registerSubtypes(Class<?>... subtypes) {
            mapper.registerSubtypes(subtypes);
        }

        @Override
        public void registerSubtypes(NamedType... subtypes) {
            mapper.registerSubtypes(subtypes);
        }

        @Override
        public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) {
            mapper.addMixInAnnotations(target, mixinSource);
        }

        @Override
        public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {
            mapper.addHandler(handler);
        }

        @Override
        public void setNamingStrategy(PropertyNamingStrategy naming) {
            mapper.setPropertyNamingStrategy(naming);
        }
    });
    return this;
}","public void test119119() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
    Version version0 = objectReader0.version();
    SimpleModule simpleModule0 = new SimpleModule(""3X$MJi.gk|s3Qd{4"", version0);
    BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
    simpleModule0.setSerializerModifier(beanSerializerModifier0);
    ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    assertSame(objectMapper1, objectMapper0);
}",""
"@SuppressWarnings(""resource"")
public String writeValueAsString(Object value) throws JsonProcessingException {
    // alas, we have to pull the recycler directly here...
    SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler());
    try {
        _configAndWriteValue(_jsonFactory.createGenerator(sw), value);
    } catch (JsonProcessingException e) {
        // to support [JACKSON-758]
        throw e;
    } catch (IOException e) {
        // shouldn't really happen, but is declared as possibility so:
        throw JsonMappingException.fromUnexpectedIOE(e);
    }
    return sw.getAndClear();
}","public void test121121() throws Throwable {
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
    ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    byte[] byteArray0 = new byte[4];
    objectMapper0.setDefaultTyping(objectMapper_DefaultTypeResolverBuilder0);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-82), 0);
    // Undeclared exception!
    try {
        objectMapper0.writeValueAsString(byteArrayInputStream0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Can not build, 'init()' not yet called
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder"", e);
    }
}","/**
 *  Method that can be used to serialize any Java value as
 *  a String. Functionally equivalent to calling
 *  {@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}
 *  and constructing String, but more efficient.
 * <p>
 *  Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.
 */"
"/*
    /**********************************************************
    /* Module registration, discovery
    /**********************************************************
     */
/**
 * Method for registering a module that can extend functionality
 * provided by this mapper; for example, by adding providers for
 * custom serializers and deserializers.
 *
 * @param module Module to register
 */
public ObjectMapper registerModule(Module module) {
    /* Let's ensure we have access to name and version information, 
         * even if we do not have immediate use for either. This way we know
         * that they will be available from beginning
         */
    String name = module.getModuleName();
    if (name == null) {
        throw new IllegalArgumentException(""Module without defined name"");
    }
    Version version = module.version();
    if (version == null) {
        throw new IllegalArgumentException(""Module without defined version"");
    }
    final ObjectMapper mapper = this;
    // And then call registration
    module.setupModule(new Module.SetupContext() {

        // // // Accessors
        @Override
        public Version getMapperVersion() {
            return version();
        }

        @SuppressWarnings(""unchecked"")
        @Override
        public <C extends ObjectCodec> C getOwner() {
            // why do we need the cast here?!?
            return (C) mapper;
        }

        @Override
        public TypeFactory getTypeFactory() {
            return _typeFactory;
        }

        @Override
        public boolean isEnabled(MapperFeature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(DeserializationFeature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(SerializationFeature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(JsonFactory.Feature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(JsonParser.Feature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(JsonGenerator.Feature f) {
            return mapper.isEnabled(f);
        }

        // // // Methods for registering handlers: deserializers
        @Override
        public void addDeserializers(Deserializers d) {
            DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalDeserializers(d);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        @Override
        public void addKeyDeserializers(KeyDeserializers d) {
            DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalKeyDeserializers(d);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        @Override
        public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {
            DeserializerFactory df = mapper._deserializationContext._factory.withDeserializerModifier(modifier);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        // // // Methods for registering handlers: serializers
        @Override
        public void addSerializers(Serializers s) {
            mapper._serializerFactory = mapper._serializerFactory.withAdditionalSerializers(s);
        }

        @Override
        public void addKeySerializers(Serializers s) {
            mapper._serializerFactory = mapper._serializerFactory.withAdditionalKeySerializers(s);
        }

        @Override
        public void addBeanSerializerModifier(BeanSerializerModifier modifier) {
            mapper._serializerFactory = mapper._serializerFactory.withSerializerModifier(modifier);
        }

        // // // Methods for registering handlers: other
        @Override
        public void addAbstractTypeResolver(AbstractTypeResolver resolver) {
            DeserializerFactory df = mapper._deserializationContext._factory.withAbstractTypeResolver(resolver);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        @Override
        public void addTypeModifier(TypeModifier modifier) {
            TypeFactory f = mapper._typeFactory;
            f = f.withModifier(modifier);
            mapper.setTypeFactory(f);
        }

        @Override
        public void addValueInstantiators(ValueInstantiators instantiators) {
            DeserializerFactory df = mapper._deserializationContext._factory.withValueInstantiators(instantiators);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        @Override
        public void setClassIntrospector(ClassIntrospector ci) {
            mapper._deserializationConfig = mapper._deserializationConfig.with(ci);
            mapper._serializationConfig = mapper._serializationConfig.with(ci);
        }

        @Override
        public void insertAnnotationIntrospector(AnnotationIntrospector ai) {
            mapper._deserializationConfig = mapper._deserializationConfig.withInsertedAnnotationIntrospector(ai);
            mapper._serializationConfig = mapper._serializationConfig.withInsertedAnnotationIntrospector(ai);
        }

        @Override
        public void appendAnnotationIntrospector(AnnotationIntrospector ai) {
            mapper._deserializationConfig = mapper._deserializationConfig.withAppendedAnnotationIntrospector(ai);
            mapper._serializationConfig = mapper._serializationConfig.withAppendedAnnotationIntrospector(ai);
        }

        @Override
        public void registerSubtypes(Class<?>... subtypes) {
            mapper.registerSubtypes(subtypes);
        }

        @Override
        public void registerSubtypes(NamedType... subtypes) {
            mapper.registerSubtypes(subtypes);
        }

        @Override
        public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) {
            mapper.addMixInAnnotations(target, mixinSource);
        }

        @Override
        public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {
            mapper.addHandler(handler);
        }

        @Override
        public void setNamingStrategy(PropertyNamingStrategy naming) {
            mapper.setPropertyNamingStrategy(naming);
        }
    });
    return this;
}","public void test129129() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleModule simpleModule0 = new SimpleModule((String) null, (Version) null);
    // Undeclared exception!
    try {
        objectMapper0.registerModule(simpleModule0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Module without defined name
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",""
"/*
    /**********************************************************
    /* Module registration, discovery
    /**********************************************************
     */
/**
 * Method for registering a module that can extend functionality
 * provided by this mapper; for example, by adding providers for
 * custom serializers and deserializers.
 *
 * @param module Module to register
 */
public ObjectMapper registerModule(Module module) {
    /* Let's ensure we have access to name and version information, 
         * even if we do not have immediate use for either. This way we know
         * that they will be available from beginning
         */
    String name = module.getModuleName();
    if (name == null) {
        throw new IllegalArgumentException(""Module without defined name"");
    }
    Version version = module.version();
    if (version == null) {
        throw new IllegalArgumentException(""Module without defined version"");
    }
    final ObjectMapper mapper = this;
    // And then call registration
    module.setupModule(new Module.SetupContext() {

        // // // Accessors
        @Override
        public Version getMapperVersion() {
            return version();
        }

        @SuppressWarnings(""unchecked"")
        @Override
        public <C extends ObjectCodec> C getOwner() {
            // why do we need the cast here?!?
            return (C) mapper;
        }

        @Override
        public TypeFactory getTypeFactory() {
            return _typeFactory;
        }

        @Override
        public boolean isEnabled(MapperFeature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(DeserializationFeature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(SerializationFeature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(JsonFactory.Feature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(JsonParser.Feature f) {
            return mapper.isEnabled(f);
        }

        @Override
        public boolean isEnabled(JsonGenerator.Feature f) {
            return mapper.isEnabled(f);
        }

        // // // Methods for registering handlers: deserializers
        @Override
        public void addDeserializers(Deserializers d) {
            DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalDeserializers(d);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        @Override
        public void addKeyDeserializers(KeyDeserializers d) {
            DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalKeyDeserializers(d);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        @Override
        public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {
            DeserializerFactory df = mapper._deserializationContext._factory.withDeserializerModifier(modifier);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        // // // Methods for registering handlers: serializers
        @Override
        public void addSerializers(Serializers s) {
            mapper._serializerFactory = mapper._serializerFactory.withAdditionalSerializers(s);
        }

        @Override
        public void addKeySerializers(Serializers s) {
            mapper._serializerFactory = mapper._serializerFactory.withAdditionalKeySerializers(s);
        }

        @Override
        public void addBeanSerializerModifier(BeanSerializerModifier modifier) {
            mapper._serializerFactory = mapper._serializerFactory.withSerializerModifier(modifier);
        }

        // // // Methods for registering handlers: other
        @Override
        public void addAbstractTypeResolver(AbstractTypeResolver resolver) {
            DeserializerFactory df = mapper._deserializationContext._factory.withAbstractTypeResolver(resolver);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        @Override
        public void addTypeModifier(TypeModifier modifier) {
            TypeFactory f = mapper._typeFactory;
            f = f.withModifier(modifier);
            mapper.setTypeFactory(f);
        }

        @Override
        public void addValueInstantiators(ValueInstantiators instantiators) {
            DeserializerFactory df = mapper._deserializationContext._factory.withValueInstantiators(instantiators);
            mapper._deserializationContext = mapper._deserializationContext.with(df);
        }

        @Override
        public void setClassIntrospector(ClassIntrospector ci) {
            mapper._deserializationConfig = mapper._deserializationConfig.with(ci);
            mapper._serializationConfig = mapper._serializationConfig.with(ci);
        }

        @Override
        public void insertAnnotationIntrospector(AnnotationIntrospector ai) {
            mapper._deserializationConfig = mapper._deserializationConfig.withInsertedAnnotationIntrospector(ai);
            mapper._serializationConfig = mapper._serializationConfig.withInsertedAnnotationIntrospector(ai);
        }

        @Override
        public void appendAnnotationIntrospector(AnnotationIntrospector ai) {
            mapper._deserializationConfig = mapper._deserializationConfig.withAppendedAnnotationIntrospector(ai);
            mapper._serializationConfig = mapper._serializationConfig.withAppendedAnnotationIntrospector(ai);
        }

        @Override
        public void registerSubtypes(Class<?>... subtypes) {
            mapper.registerSubtypes(subtypes);
        }

        @Override
        public void registerSubtypes(NamedType... subtypes) {
            mapper.registerSubtypes(subtypes);
        }

        @Override
        public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) {
            mapper.addMixInAnnotations(target, mixinSource);
        }

        @Override
        public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {
            mapper.addHandler(handler);
        }

        @Override
        public void setNamingStrategy(PropertyNamingStrategy naming) {
            mapper.setPropertyNamingStrategy(naming);
        }
    });
    return this;
}","public void test130130() throws Throwable {
    SimpleModule simpleModule0 = new SimpleModule(""3X$MJi.gk|s3Qd{4"", (Version) null);
    ObjectMapper objectMapper0 = new ObjectMapper();
    // Undeclared exception!
    try {
        objectMapper0.registerModule(simpleModule0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Module without defined version
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",""
"public final Class<?> findMixInClassFor(Class<?> cls) {
    return (_mixInAnnotations == null) ? null : _mixInAnnotations.get(new ClassKey(cls));
}","public void test133133() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<Integer> class0 = Integer.class;
    Class<?> class1 = objectMapper0.findMixInClassFor(class0);
    assertNull(class1);
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test134134() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    int int0 = objectMapper0.mixInCount();
    assertEquals(0, int0);
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test135135() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
    ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public final int mixInCount() {
    return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();
}","public void test136136() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
    ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
    assertEquals(0, objectMapper1.mixInCount());
}",""
"public ObjectMapper configure(SerializationFeature f, boolean state) {
    _serializationConfig = state ? _serializationConfig.with(f) : _serializationConfig.without(f);
    return this;
}","public void test137137() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
    ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
    assertSame(objectMapper0, objectMapper1);
}","/**
 * Method for changing state of an on/off serialization feature for
 * this object mapper.
 */"
"public ObjectMapper configure(SerializationFeature f, boolean state) {
    _serializationConfig = state ? _serializationConfig.with(f) : _serializationConfig.without(f);
    return this;
}","public void test138138() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
    ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
    assertSame(objectMapper0, objectMapper1);
}","/**
 * Method for changing state of an on/off serialization feature for
 * this object mapper.
 */"
"public ObjectMapper configure(DeserializationFeature f, boolean state) {
    _deserializationConfig = state ? _deserializationConfig.with(f) : _deserializationConfig.without(f);
    return this;
}","public void test139139() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
    ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
    assertSame(objectMapper0, objectMapper1);
}","/**
 * Method for changing state of an on/off deserialization feature for
 * this object mapper.
 */"
"public ObjectMapper configure(DeserializationFeature f, boolean state) {
    _deserializationConfig = state ? _deserializationConfig.with(f) : _deserializationConfig.without(f);
    return this;
}","public void test140140() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
    ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
    assertSame(objectMapper0, objectMapper1);
}","/**
 * Method for changing state of an on/off deserialization feature for
 * this object mapper.
 */"
"@Override
public <T extends TreeNode> T readTree(JsonParser jp) throws IOException, JsonProcessingException {
    /* 02-Mar-2009, tatu: One twist; deserialization provider
         *   will map JSON null straight into Java null. But what
         *   we want to return is the ""null node"" instead.
         */
    /* 05-Aug-2011, tatu: Also, must check for EOF here before
         *   calling readValue(), since that'll choke on it otherwise
         */
    DeserializationConfig cfg = getDeserializationConfig();
    JsonToken t = jp.getCurrentToken();
    if (t == null) {
        t = jp.nextToken();
        if (t == null) {
            return null;
        }
    }
    JsonNode n = (JsonNode) _readValue(cfg, jp, JSON_NODE_TYPE);
    if (n == null) {
        n = getNodeFactory().nullNode();
    }
    @SuppressWarnings(""unchecked"")
    T result = (T) n;
    return result;
}","public void test141141() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonParser jsonParser0 = jsonFactory0.createParser(""\""yw;Dx"");
    jsonParser0.nextBooleanValue();
    try {
        objectMapper0.readTree(jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input: was expecting closing quote for a string value
        //  at [Source: java.lang.String@0000000460; line: 1, column: 13]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method to deserialize JSON content as tree expressed
 * using set of {@link JsonNode} instances. Returns
 * root of the resulting tree (where root can consist
 * of just a single node if the current event is a
 * value event, not container).
 */"
"@Override
public <T extends TreeNode> T readTree(JsonParser jp) throws IOException, JsonProcessingException {
    /* 02-Mar-2009, tatu: One twist; deserialization provider
         *   will map JSON null straight into Java null. But what
         *   we want to return is the ""null node"" instead.
         */
    /* 05-Aug-2011, tatu: Also, must check for EOF here before
         *   calling readValue(), since that'll choke on it otherwise
         */
    DeserializationConfig cfg = getDeserializationConfig();
    JsonToken t = jp.getCurrentToken();
    if (t == null) {
        t = jp.nextToken();
        if (t == null) {
            return null;
        }
    }
    JsonNode n = (JsonNode) _readValue(cfg, jp, JSON_NODE_TYPE);
    if (n == null) {
        n = getNodeFactory().nullNode();
    }
    @SuppressWarnings(""unchecked"")
    T result = (T) n;
    return result;
}","public void test142142() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonParser jsonParser0 = jsonFactory0.createParser(""\""yw;Dx"");
    try {
        objectMapper0.readTree(jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input: was expecting closing quote for a string value
        //  at [Source: java.lang.String@0000000461; line: 1, column: 13]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method to deserialize JSON content as tree expressed
 * using set of {@link JsonNode} instances. Returns
 * root of the resulting tree (where root can consist
 * of just a single node if the current event is a
 * value event, not container).
 */"
"@Override
public <T extends TreeNode> T readTree(JsonParser jp) throws IOException, JsonProcessingException {
    /* 02-Mar-2009, tatu: One twist; deserialization provider
         *   will map JSON null straight into Java null. But what
         *   we want to return is the ""null node"" instead.
         */
    /* 05-Aug-2011, tatu: Also, must check for EOF here before
         *   calling readValue(), since that'll choke on it otherwise
         */
    DeserializationConfig cfg = getDeserializationConfig();
    JsonToken t = jp.getCurrentToken();
    if (t == null) {
        t = jp.nextToken();
        if (t == null) {
            return null;
        }
    }
    JsonNode n = (JsonNode) _readValue(cfg, jp, JSON_NODE_TYPE);
    if (n == null) {
        n = getNodeFactory().nullNode();
    }
    @SuppressWarnings(""unchecked"")
    T result = (T) n;
    return result;
}","public void test143143() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonParser jsonParser0 = jsonFactory0.createParser("""");
    DoubleNode doubleNode0 = objectMapper0.readTree(jsonParser0);
    assertNull(doubleNode0);
}","/**
 * Method to deserialize JSON content as tree expressed
 * using set of {@link JsonNode} instances. Returns
 * root of the resulting tree (where root can consist
 * of just a single node if the current event is a
 * value event, not container).
 */"
"public float floatValue() {
    return 0.0f;
}","public void test145145() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 51;
    JsonNode jsonNode0 = objectMapper0.readTree(byteArray0);
    assertEquals(3.0F, jsonNode0.floatValue(), 0.01F);
}","/**
 * Returns 32-bit floating value for this node, <b>if and only if</b>
 * this node is numeric ({@link #isNumber} returns true). For other
 * types returns 0.0.
 * For integer values, conversion is done using coercion; this means
 * that an overflow is possible for `long` values
 *
 * @return 32-bit float value this node contains, if any; 0.0 for non-number nodes.
 *
 * @since 2.2
 */"
"public JsonNode readTree(Reader r) throws IOException, JsonProcessingException {
    JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(r), JSON_NODE_TYPE);
    return (n == null) ? NullNode.instance : n;
}","public void test146147() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper();
    MockFile mockFile0 = new MockFile(""JSON"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0);
    IntNode intNode0 = new IntNode(23);
    objectMapper0.writeTree(jsonGenerator0, (TreeNode) intNode0);
    JsonNode jsonNode0 = objectMapper0.readTree((File) mockFile0);
    MockFileReader mockFileReader0 = new MockFileReader(""JSON"");
    JsonNode jsonNode1 = objectMapper0.readTree((Reader) mockFileReader0);
    assertNotSame(jsonNode1, jsonNode0);
}","/**
 * Method to deserialize JSON content as tree expressed
 * using set of {@link JsonNode} instances.
 * Returns root of the resulting tree (where root can consist
 * of just a single node if the current event is a
 * value event, not container).
 *
 * @param r Reader used to read JSON content
 *   for building the JSON tree.
 */"
"@SuppressWarnings({ ""unchecked"", ""resource"" })
public <T extends JsonNode> T valueToTree(Object fromValue) throws IllegalArgumentException {
    if (fromValue == null)
        return null;
    TokenBuffer buf = new TokenBuffer(this, false);
    JsonNode result;
    try {
        writeValue(buf, fromValue);
        JsonParser jp = buf.asParser();
        result = readTree(jp);
        jp.close();
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
    return (T) result;
}","public void test148149() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    try {
        objectMapper0.valueToTree((Object) charsToNameCanonicalizer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No serializer found for class com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}","/**
 *  Reverse of {@link #treeToValue}; given a value (usually bean), will
 *  construct equivalent JSON Tree representation. Functionally similar
 *  to serializing value into JSON and parsing JSON as tree, but
 *  more efficient.
 * <p>
 *  NOTE: one known difference from actual serialization is that so-called
 *  ""raw values"" are not supported -- since they are opaque sequence of
 *  bytes to include (which may or may not be supported by the backend)
 *  they can not be converted using this method. It may be possible to
 *  support conversions using full serialization, if raw values must be
 *  preserved.
 *
 *  @param <T> Actual node type; usually either basic {@link JsonNode} or
 *   {@link com.fasterxml.jackson.databind.node.ObjectNode}
 *  @param fromValue Bean value to convert
 *  @return Root node of the resulting JSON tree
 */"
"@SuppressWarnings({ ""unchecked"", ""resource"" })
public <T extends JsonNode> T valueToTree(Object fromValue) throws IllegalArgumentException {
    if (fromValue == null)
        return null;
    TokenBuffer buf = new TokenBuffer(this, false);
    JsonNode result;
    try {
        writeValue(buf, fromValue);
        JsonParser jp = buf.asParser();
        result = readTree(jp);
        jp.close();
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
    return (T) result;
}","public void test149150() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
    ArrayNode arrayNode0 = objectMapper0.valueToTree((Object) null);
    assertNull(arrayNode0);
}","/**
 *  Reverse of {@link #treeToValue}; given a value (usually bean), will
 *  construct equivalent JSON Tree representation. Functionally similar
 *  to serializing value into JSON and parsing JSON as tree, but
 *  more efficient.
 * <p>
 *  NOTE: one known difference from actual serialization is that so-called
 *  ""raw values"" are not supported -- since they are opaque sequence of
 *  bytes to include (which may or may not be supported by the backend)
 *  they can not be converted using this method. It may be possible to
 *  support conversions using full serialization, if raw values must be
 *  preserved.
 *
 *  @param <T> Actual node type; usually either basic {@link JsonNode} or
 *   {@link com.fasterxml.jackson.databind.node.ObjectNode}
 *  @param fromValue Bean value to convert
 *  @return Root node of the resulting JSON tree
 */"
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test150151() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<MapType> class0 = MapType.class;
    ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test152153() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writerWithType((TypeReference<?>) null);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test153154() throws Throwable {
    DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) defaultPrettyPrinter0);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"public boolean hasPrefetchedSerializer() {
    return _rootSerializer != null;
}","public void test154155() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) null);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"@SuppressWarnings(""unchecked"")
public <T> T convertValue(Object fromValue, JavaType toValueType) throws IllegalArgumentException {
    // sanity check for null first:
    if (fromValue == null)
        return null;
    return (T) _convert(fromValue, toValueType);
}","public void test156157() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    // Undeclared exception!
    try {
        objectMapper0.convertValue((Object) bufferRecycler0, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",""
"@SuppressWarnings(""unchecked"")
public <T> T convertValue(Object fromValue, JavaType toValueType) throws IllegalArgumentException {
    // sanity check for null first:
    if (fromValue == null)
        return null;
    return (T) _convert(fromValue, toValueType);
}","public void test157158() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ByteArrayOutputStream byteArrayOutputStream0 = objectMapper0.convertValue((Object) null, (JavaType) null);
    assertNull(byteArrayOutputStream0);
}",""
"@SuppressWarnings(""resource"")
protected Object _convert(Object fromValue, JavaType toValueType) throws IllegalArgumentException {
    // also, as per [Issue-11], consider case for simple cast
    /* But with caveats: one is that while everything is Object.class, we don't
         * want to ""optimize"" that out; and the other is that we also do not want
         * to lose conversions of generic types.
         */
    Class<?> targetType = toValueType.getRawClass();
    if (targetType != Object.class && !toValueType.hasGenericTypes() && targetType.isAssignableFrom(fromValue.getClass())) {
        return fromValue;
    }
    /* Then use TokenBuffer, which is a JsonGenerator:
         * (see [JACKSON-175])
         */
    TokenBuffer buf = new TokenBuffer(this, false);
    try {
        // inlined 'writeValue' with minor changes:
        // first: disable wrapping when writing
        SerializationConfig config = getSerializationConfig().without(SerializationFeature.WRAP_ROOT_VALUE);
        // no need to check for closing of TokenBuffer
        _serializerProvider(config).serializeValue(buf, fromValue);
        // then matching read, inlined 'readValue' with minor mods:
        final JsonParser jp = buf.asParser();
        Object result;
        // ok to pass in existing feature flags; unwrapping handled by mapper
        final DeserializationConfig deserConfig = getDeserializationConfig();
        JsonToken t = _initForReading(jp);
        if (t == JsonToken.VALUE_NULL) {
            DeserializationContext ctxt = createDeserializationContext(jp, deserConfig);
            result = _findRootDeserializer(ctxt, toValueType).getNullValue();
        } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {
            result = null;
        } else {
            // pointing to event other than null
            DeserializationContext ctxt = createDeserializationContext(jp, deserConfig);
            JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, toValueType);
            // note: no handling of unwarpping
            result = deser.deserialize(jp, ctxt);
        }
        jp.close();
        return result;
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}","public void test158159() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Map> class0 = Map.class;
    MapType mapType0 = typeFactory0.constructRawMapType(class0);
    Object object0 = objectMapper0._convert((Object) null, mapType0);
    assertNull(object0);
}","/**
 * Actual conversion implementation: instead of using existing read
 * and write methods, much of code is inlined. Reason for this is
 * that we must avoid root value wrapping/unwrapping both for efficiency and
 * for correctness. If root value wrapping/unwrapping is actually desired,
 * caller must use explicit <code>writeValue</code> and
 * <code>readValue</code> methods.
 */"
"public void acceptJsonFormatVisitor(JavaType type, JsonFormatVisitorWrapper visitor) throws JsonMappingException {
    if (type == null) {
        throw new IllegalArgumentException(""type must be provided"");
    }
    _serializerProvider(getSerializationConfig()).acceptJsonFormatVisitor(type, visitor);
}","public void test159160() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
    JsonFormatVisitorWrapper jsonFormatVisitorWrapper0 = mock(JsonFormatVisitorWrapper.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        objectMapper0.acceptJsonFormatVisitor((JavaType) null, jsonFormatVisitorWrapper0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // type must be provided
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}","/**
 *  Method for visiting type hierarchy for given type, using specified visitor.
 *  Visitation uses <code>Serializer</code> hierarchy and related properties
 * <p>
 *  This method can be used for things like
 *  generating <a href=""http://json-schema.org/"">Json Schema</a>
 *  instance for specified type.
 *
 *  @param type Type to generate schema for (possibly with generic signature)
 *
 *  @since 2.1
 */"
"protected final void _configAndWriteValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException, JsonMappingException {
    SerializationConfig cfg = getSerializationConfig();
    // [JACKSON-96]: allow enabling pretty printing for ObjectMapper directly
    if (cfg.isEnabled(SerializationFeature.INDENT_OUTPUT)) {
        jgen.useDefaultPrettyPrinter();
    }
    // [Issue#232]
    if (cfg.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) {
        jgen.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);
    }
    // [JACKSON-282]: consider Closeable
    if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) {
        _configAndWriteCloseable(jgen, value, cfg);
        return;
    }
    boolean closed = false;
    try {
        _serializerProvider(cfg).serializeValue(jgen, value);
        closed = true;
        jgen.close();
    } finally {
        /* won't try to close twice; also, must catch exception (so it 
             * will not mask exception that is pending)
             */
        if (!closed) {
            /* 04-Mar-2014, tatu: But! Let's try to prevent auto-closing of
                 *    structures, which typically causes more damage.
                 */
            jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);
            try {
                jgen.close();
            } catch (IOException ioe) {
            }
        }
    }
}","public void test160161() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) null);
    // Undeclared exception!
    try {
        objectMapper0._configAndWriteValue(jsonGenerator0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.WriterBasedJsonGenerator"", e);
    }
}","/**
 * Method called to configure the generator as necessary and then
 * call write functionality
 */"
"protected final void _configAndWriteValue(JsonGenerator jgen, Object value, Class<?> viewClass) throws IOException, JsonGenerationException, JsonMappingException {
    SerializationConfig cfg = getSerializationConfig().withView(viewClass);
    if (cfg.isEnabled(SerializationFeature.INDENT_OUTPUT)) {
        jgen.useDefaultPrettyPrinter();
    }
    // [Issue#232]
    if (cfg.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) {
        jgen.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);
    }
    // [JACKSON-282]: consider Closeable
    if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) {
        _configAndWriteCloseable(jgen, value, cfg);
        return;
    }
    boolean closed = false;
    try {
        _serializerProvider(cfg).serializeValue(jgen, value);
        closed = true;
        jgen.close();
    } finally {
        if (!closed) {
            // 04-Mar-2014, tatu: But! Let's try to prevent auto-closing of
            //    structures, which typically causes more damage.
            jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);
            try {
                jgen.close();
            } catch (IOException ioe) {
            }
        }
    }
}","public void test162163() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, objectMapper0, (Writer) null);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
    Class<NullNode> class0 = NullNode.class;
    // Undeclared exception!
    try {
        objectMapper0._configAndWriteValue(jsonGeneratorDelegate0, (Object) null, class0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.WriterBasedJsonGenerator"", e);
    }
}",""
"protected final void _configAndWriteValue(JsonGenerator jgen, Object value, Class<?> viewClass) throws IOException, JsonGenerationException, JsonMappingException {
    SerializationConfig cfg = getSerializationConfig().withView(viewClass);
    if (cfg.isEnabled(SerializationFeature.INDENT_OUTPUT)) {
        jgen.useDefaultPrettyPrinter();
    }
    // [Issue#232]
    if (cfg.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) {
        jgen.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);
    }
    // [JACKSON-282]: consider Closeable
    if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) {
        _configAndWriteCloseable(jgen, value, cfg);
        return;
    }
    boolean closed = false;
    try {
        _serializerProvider(cfg).serializeValue(jgen, value);
        closed = true;
        jgen.close();
    } finally {
        if (!closed) {
            // 04-Mar-2014, tatu: But! Let's try to prevent auto-closing of
            //    structures, which typically causes more damage.
            jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);
            try {
                jgen.close();
            } catch (IOException ioe) {
            }
        }
    }
}","public void test163164() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BufferedReader> class0 = BufferedReader.class;
    // Undeclared exception!
    try {
        objectMapper0._configAndWriteValue((JsonGenerator) null, (Object) null, class0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",""
"public boolean isIntegralNumber() {
    return false;
}","public void test164165() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNode jsonNode0 = objectMapper0.readTree(""null"");
    assertFalse(jsonNode0.isIntegralNumber());
}","/**
 * @return True if this node represents an integral (integer)
 *   numeric JSON value
 */"
