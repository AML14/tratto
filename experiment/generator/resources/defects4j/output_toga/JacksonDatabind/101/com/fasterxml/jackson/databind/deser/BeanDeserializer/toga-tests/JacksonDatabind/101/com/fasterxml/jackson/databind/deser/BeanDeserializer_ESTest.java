/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 07:54:11 GMT 2024
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanDeserializer_ESTest extends BeanDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, true);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, nameTransformer0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedHashSet0, hashMap0);
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, set0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, (ObjectIdReader) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        Class<SimpleModule> class0 = SimpleModule.class;
        SimpleModule simpleModule0 = objectMapper0.readValue(jsonParser0, class0);
        simpleModule0.getModuleName();
        assertNotNull(simpleModule0.getModuleName());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PropertyName> class0 = PropertyName.class;
        PropertyName propertyName0 = objectMapper0.convertValue((Object) "go[", class0);
        propertyName0.hasSimpleName();
        assertTrue(propertyName0.hasSimpleName());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        NumericNode numericNode0 = arrayNode0.numberNode(101);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(numericNode0);
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        FloatNode floatNode0 = new FloatNode(2122.2256F);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(floatNode0);
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        RawValue rawValue0 = new RawValue(serializedString0);
        ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(valueNode0);
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BooleanNode booleanNode0 = BooleanNode.FALSE;
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        ObjectNode objectNode1 = objectNode0.putNull("]F(}Uw@BR4I-");
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withRootName("]F(}Uw@BR4I-");
        Class<ObjectReader> class0 = ObjectReader.class;
        objectReader1.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MissingNode missingNode0 = MissingNode.getInstance();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(missingNode0);
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
        Class<ObjectReader> class0 = ObjectReader.class;
        objectReader1.readValue(jsonParser0, class0);
        jsonParser0.getLastClearedToken();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.putNull("");
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        Class<ObjectReader> class0 = ObjectReader.class;
        objectReader0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.putNull("");
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        mapperFeatureArray0[0] = mapperFeature0;
        ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper1);
        Class<ObjectReader> class0 = ObjectReader.class;
        objectReader0.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.with("");
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
        objectMapper0.disable(deserializationFeature0);
        Long long0 = new Long(750L);
        ObjectNode objectNode1 = objectNode0.put("go[", long0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.readValue(jsonParser0, class0);
        jsonParser0.getLastClearedToken();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        mapperFeatureArray0[0] = mapperFeature0;
        objectMapper0.disable(mapperFeatureArray0);
        Class<SimpleModule> class0 = SimpleModule.class;
        SimpleModule simpleModule0 = objectMapper0.readValue(jsonParser0, class0);
        simpleModule0.getModuleName();
        assertNotNull(simpleModule0.getModuleName());
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
        ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
        Class<ObjectReader> class0 = ObjectReader.class;
        ObjectReader objectReader2 = objectReader1.readValue(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.putNull("");
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        mapperFeatureArray0[0] = mapperFeature0;
        objectMapper0.disable(mapperFeatureArray0);
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.readValue(jsonParser0, class0);
    }
}
