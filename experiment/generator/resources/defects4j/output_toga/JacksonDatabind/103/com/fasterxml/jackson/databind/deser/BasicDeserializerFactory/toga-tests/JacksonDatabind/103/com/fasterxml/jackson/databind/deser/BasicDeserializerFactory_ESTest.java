/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 08:11:33 GMT 2024
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.sql.BatchUpdateException;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLTransientException;
import java.util.List;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BasicDeserializerFactory_ESTest extends BasicDeserializerFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        beanDeserializerFactory0.withAdditionalDeserializers((Deserializers) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        beanDeserializerFactory0.withDeserializerModifier((BeanDeserializerModifier) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        int[] intArray0 = new int[3];
        BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(batchUpdateException0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
        Class<AsArrayTypeDeserializer> class0 = AsArrayTypeDeserializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
        beanDeserializerFactory0.resolveType(defaultDeserializationContext_Impl0, basicBeanDescription0, mapLikeType0, (AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DeserializerFactoryConfig deserializerFactoryConfig0 = beanDeserializerFactory0.getFactoryConfig();
        deserializerFactoryConfig0.hasDeserializers();
        assertFalse(deserializerFactoryConfig0.hasDeserializers());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
        beanDeserializerFactory0._reportUnwrappedCreatorProperty(defaultDeserializationContext_Impl0, basicBeanDescription0, (AnnotatedParameter) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ConcurrentHashMap<AnnotatedMethod, Boolean> concurrentHashMap0 = new ConcurrentHashMap<AnnotatedMethod, Boolean>();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(concurrentHashMap0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        Class<CollectionType> class0 = CollectionType.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        JavaType javaType0 = beanDeserializerFactory0.mapAbstractType((DeserializationConfig) null, simpleType0);
        javaType0.isFinal();
        assertTrue(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(beanDeserializerBuilder0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        TextNode textNode0 = TextNode.valueOf("java.com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder");
        beanDeserializerFactory0._valueInstantiatorInstance((DeserializationConfig) null, (Annotated) null, textNode0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        ValueInstantiator valueInstantiator0 = beanDeserializerFactory0._valueInstantiatorInstance((DeserializationConfig) null, (Annotated) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(sQLClientInfoException0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(typeBindings0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(treeSet0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(basicBeanDescription0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        CollectionType collectionType0 = beanDeserializerFactory0._mapAbstractCollectionType(collectionLikeType0, (DeserializationConfig) null);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
        Class<List> class1 = List.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
        beanDeserializerFactory0.createCollectionLikeDeserializer(defaultDeserializationContext_Impl0, collectionType0, (BeanDescription) null);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        beanDeserializerFactory0.createMapLikeDeserializer(defaultDeserializationContext_Impl0, mapType0, (BeanDescription) null);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
        beanDeserializerFactory0.createReferenceDeserializer(defaultDeserializationContext_Impl0, referenceType0, (BeanDescription) null);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        JavaType javaType0 = beanProperty_Bogus0.getType();
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
        beanDeserializerFactory0.findDefaultDeserializer(deserializationContext0, javaType0, basicBeanDescription0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        Deserializers.Base deserializers_Base0 = new Deserializers.Base();
        DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        JsonDeserializer<?> jsonDeserializer0 = beanDeserializerFactory0.createTreeDeserializer((DeserializationConfig) null, simpleType0, (BeanDescription) null);
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapLikeType0, classNameIdResolver0, "@JsonUnwrapped", false, mapLikeType0);
        JsonDeserializer<?> jsonDeserializer1 = beanDeserializerFactory0._findCustomMapLikeDeserializer(mapLikeType0, (DeserializationConfig) null, (BeanDescription) null, (KeyDeserializer) null, asArrayTypeDeserializer0, jsonDeserializer0);
        assertEquals(jsonDeserializer0, jsonDeserializer1);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        JavaType[] javaTypeArray0 = new JavaType[4];
        javaTypeArray0[0] = (JavaType) simpleType0;
        javaTypeArray0[2] = (JavaType) simpleType0;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[2]);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(referenceType0, referenceType0, javaTypeArray0[0]);
        ArrayType arrayType0 = ArrayType.construct(javaTypeArray0[0], typeBindings0, (Object) javaTypeArray0[2], (Object) mapLikeType0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "_QJXN?E,w0", false, arrayType0, jsonTypeInfo_As0);
        JsonDeserializer<?> jsonDeserializer0 = beanDeserializerFactory0._findCustomReferenceDeserializer(referenceType0, (DeserializationConfig) null, (BeanDescription) null, asPropertyTypeDeserializer0, (JsonDeserializer<?>) null);
        assertNotNull(jsonDeserializer0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        Deserializers.Base deserializers_Base0 = new Deserializers.Base();
        DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        beanDeserializerFactory0.createBeanDeserializer(defaultDeserializationContext_Impl0, (JavaType) null, basicBeanDescription0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<List> class0 = List.class;
        Class<MapType> class1 = MapType.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "java.com.fasterxl.jackson.databind.cfg.DeserializerFactoryConfig", true, collectionType0, jsonTypeInfo_As0);
        JsonDeserializer<?> jsonDeserializer0 = beanDeserializerFactory0._findCustomCollectionLikeDeserializer(collectionType0, (DeserializationConfig) null, (BeanDescription) null, asPropertyTypeDeserializer0, (JsonDeserializer<?>) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        Deserializers.Base deserializers_Base0 = new Deserializers.Base();
        DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
        JsonDeserializer<?> jsonDeserializer0 = beanDeserializerFactory0._findCustomEnumDeserializer(class0, (DeserializationConfig) null, (BeanDescription) null);
        assertNotNull(jsonDeserializer0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) referenceType0);
        TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
        VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "-#c+Bagd~dxM", referenceType0);
        beanDeserializerFactory0.constructEnumResolver(class0, (DeserializationConfig) null, virtualAnnotatedMember0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        beanDeserializerFactory0._findJsonValueFor((DeserializationConfig) null, simpleType0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotatedMethod annotatedMethod0 = beanDeserializerFactory0._findJsonValueFor((DeserializationConfig) null, (JavaType) null);
        assertNotNull(annotatedMethod0);
    }
}
