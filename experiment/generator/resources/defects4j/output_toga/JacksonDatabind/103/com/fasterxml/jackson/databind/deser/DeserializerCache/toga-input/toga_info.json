{
  "test1213" : {
    "methodSignature" : "public boolean canDeserialize(JavaType type, AtomicReference<Throwable> cause)",
    "methodName" : "canDeserialize",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1213() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    TypeBindings typeBindings0 = TypeBindings.emptyBindings();\n    Class<BigIntegerNode> class0 = BigIntegerNode.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);\n    boolean boolean0 = objectMapper0.canDeserialize((JavaType) resolvedRecursiveType0, atomicReference0);\n}",
    "testName" : "test1213"
  },
  "test1314" : {
    "methodSignature" : "protected JsonDeserializer<Object> _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
    "methodName" : "_createAndCacheValueDeserializer",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1314() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<ResolverStyle> class0 = ResolverStyle.class;\n    ObjectReader objectReader0 = objectMapper0.readerFor(class0);\n    TypeFactory typeFactory0 = objectReader0.getTypeFactory();\n    Class<String> class1 = String.class;\n    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, (JavaType) null, (JavaType) null);\n    deserializerCache0._createAndCacheValueDeserializer(defaultDeserializationContext_Impl0, beanDeserializerFactory0, mapLikeType0);\n}",
    "testName" : "test1314"
  },
  "test1112" : {
    "methodSignature" : "protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type, BeanDescription beanDesc) throws JsonMappingException",
    "methodName" : "_createDeserializer2",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1112() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    Class<BooleanNode> class0 = BooleanNode.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    deserializerCache0._createDeserializer2(defaultDeserializationContext_Impl0, beanDeserializerFactory0, referenceType0, (BeanDescription) null);\n}",
    "testName" : "test1112"
  },
  "test000" : {
    "methodSignature" : "public int cachedDeserializersCount()",
    "methodName" : "cachedDeserializersCount",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    int int0 = deserializerCache0.cachedDeserializersCount();\n}",
    "testName" : "test000"
  },
  "test011" : {
    "methodSignature" : "Object writeReplace()",
    "methodName" : "writeReplace",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    Object object0 = deserializerCache0.writeReplace();\n}",
    "testName" : "test011"
  },
  "test022" : {
    "methodSignature" : "public void flushCachedDeserializers()",
    "methodName" : "flushCachedDeserializers",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    deserializerCache0.flushCachedDeserializers();\n}",
    "testName" : "test022"
  },
  "test055" : {
    "methodSignature" : "public <T> T convertValue(Object fromValue, JavaType toValueType) throws IllegalArgumentException",
    "methodName" : "convertValue",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ArrayNode> class0 = ArrayNode.class;\n    Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);\n    objectMapper0.convertValue((Object) propertyAccessor0, (JavaType) collectionLikeType0);\n}",
    "testName" : "test055"
  },
  "test066" : {
    "methodSignature" : "public boolean canDeserialize(JavaType type, AtomicReference<Throwable> cause)",
    "methodName" : "canDeserialize",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<BeanDeserializer> class0 = BeanDeserializer.class;\n    objectMapper0.readerFor(class0);\n    JavaType javaType0 = TypeFactory.unknownType();\n    AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);\n    boolean boolean0 = objectMapper0.canDeserialize(javaType0, atomicReference0);\n}",
    "testName" : "test066"
  },
  "test077" : {
    "methodSignature" : "public boolean canDeserialize(JavaType type, AtomicReference<Throwable> cause)",
    "methodName" : "canDeserialize",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);\n    Class<NioPathDeserializer> class0 = NioPathDeserializer.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(referenceType0, simpleType0);\n    MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, simpleType0, simpleType0);\n    boolean boolean0 = objectMapper0.canDeserialize((JavaType) mapLikeType0, atomicReference0);\n}",
    "testName" : "test077"
  },
  "test089" : {
    "methodSignature" : "public boolean hasValueDeserializerFor(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
    "methodName" : "hasValueDeserializerFor",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    deserializerCache0.hasValueDeserializerFor(defaultDeserializationContext_Impl0, beanDeserializerFactory0, (JavaType) null);\n}",
    "testName" : "test089"
  },
  "test1415" : {
    "methodSignature" : "public boolean hasValueDeserializerFor(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
    "methodName" : "hasValueDeserializerFor",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1415() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;\n    MapType mapType0 = typeFactory0.constructRawMapType(class0);\n    MapType mapType1 = mapType0.withKeyValueHandler(deserializerCache0);\n    deserializerCache0.hasValueDeserializerFor(defaultDeserializationContext_Impl0, beanDeserializerFactory0, mapType1);\n}",
    "testName" : "test1415"
  },
  "test0910" : {
    "methodSignature" : "public boolean canDeserialize(JavaType type)",
    "methodName" : "canDeserialize",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0910() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;\n    Class<JsonSerializer> class1 = JsonSerializer.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);\n    MapLikeType mapLikeType0 = mapType0.withContentValueHandler(objectMapper0);\n    objectMapper0.canDeserialize((JavaType) mapLikeType0);\n}",
    "testName" : "test0910"
  },
  "test1516" : {
    "methodSignature" : "protected JsonDeserializer<Object> _handleUnknownValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException",
    "methodName" : "_handleUnknownValueDeserializer",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1516() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<BooleanNode> class0 = BooleanNode.class;\n    Class<Module> class1 = Module.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class0);\n    deserializerCache0._handleUnknownValueDeserializer(defaultDeserializationContext_Impl0, collectionLikeType0);\n}",
    "testName" : "test1516"
  }
}