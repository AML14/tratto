focal_method,test_prefix,docstring
"public String getPathReference() {
    return getPathReference(new StringBuilder()).toString();
}","public void test079() throws Throwable {
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
    JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
    JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
    String string0 = jsonMappingException0.getPathReference();
    assertEquals(""UNKNOWN[?]"", string0);
}","/**
 * Method for accessing description of path that lead to the
 * problem that triggered this exception
 */"
"public static JsonMappingException from(JsonGenerator g, String msg) {
    return new JsonMappingException(g, msg, (Throwable) null);
}","public void test1012() throws Throwable {
    JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, ""~w8E\"""");
    assertNotNull(jsonMappingException0);
}","/**
 * @since 2.7
 */"
"public static JsonMappingException from(DeserializationContext ctxt, String msg, Throwable t) {
    return new JsonMappingException(ctxt.getParser(), msg, t);
}","public void test1113() throws Throwable {
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
    ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
    JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, ""JSON"", (Throwable) sQLFeatureNotSupportedException0);
    assertNotNull(jsonMappingException0);
}","/**
 * @since 2.7
 */"
"public static JsonMappingException from(DeserializationContext ctxt, String msg) {
    return new JsonMappingException(ctxt.getParser(), msg);
}","public void test1214() throws Throwable {
    // Undeclared exception!
    try {
        JsonMappingException.from((DeserializationContext) null, ""&5z+k2$fC7dPu"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}","/**
 * @since 2.7
 */"
"/*
    /**********************************************************
    /* Overridden methods
    /**********************************************************
     */
// since 2.7.5
@Override
// as per [databind#1368]
@JsonIgnore
public Object getProcessor() {
    return _processor;
}","public void test1315() throws Throwable {
    SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("": "", ""[ObjectId: key=%s, type=%s, scope=%s]"", 0);
    JsonMappingException jsonMappingException0 = new JsonMappingException(""f>gEi)<r?}\"""", sQLIntegrityConstraintViolationException0);
    Object object0 = jsonMappingException0.getProcessor();
    assertNull(object0);
}",""
"public static JsonMappingException from(JsonGenerator g, String msg, Throwable problem) {
    return new JsonMappingException(g, msg, problem);
}","public void test1416() throws Throwable {
    SQLException sQLException0 = new SQLException();
    JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) sQLException0, 3406);
    JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, """", (Throwable) jsonMappingException0);
    assertNotSame(jsonMappingException1, jsonMappingException0);
}","/**
 * @since 2.7
 */"
"protected String _buildMessage() {
    // First: if we have no path info, let's just use parent's definition as is
    String msg = super.getMessage();
    if (_path == null) {
        return msg;
    }
    StringBuilder sb = (msg == null) ? new StringBuilder() : new StringBuilder(msg);
    /* 18-Feb-2009, tatu: initially there was a linefeed between
         *    message and path reference; but unfortunately many systems
         *   (loggers, junit) seem to assume linefeeds are only added to
         *   separate stack trace.
         */
    sb.append("" (through reference chain: "");
    sb = getPathReference(sb);
    sb.append(')');
    return sb.toString();
}","public void test1517() throws Throwable {
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
    JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, ""(@dFf}akv>"", (Throwable) sQLFeatureNotSupportedException0);
    String string0 = jsonMappingException0._buildMessage();
    assertEquals(""(@dFf}akv>"", string0);
}",""
"public static JsonMappingException from(SerializerProvider ctxt, String msg) {
    return new JsonMappingException(ctxt.getGenerator(), msg);
}","public void test1618() throws Throwable {
    // Undeclared exception!
    try {
        JsonMappingException.from((SerializerProvider) null, """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}","/**
 * @since 2.7
 */"
"public static JsonMappingException from(SerializerProvider ctxt, String msg, Throwable problem) {
    /* 17-Aug-2015, tatu: As per [databind#903] this is bit problematic as
         *   SerializerProvider instance does not currently hold on to generator...
         */
    return new JsonMappingException(ctxt.getGenerator(), msg, problem);
}","public void test1719() throws Throwable {
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, ""int"", (Throwable) sQLFeatureNotSupportedException0);
    assertNotNull(jsonMappingException0);
}","/**
 * @since 2.7
 */"
"@Override
public String toString() {
    return getClass().getName() + "": "" + getMessage();
}","public void test1820() throws Throwable {
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
    JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, (-380));
    String string0 = jsonMappingException0.toString();
    assertEquals(""com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLFeatureNotSupportedException) (through reference chain: java.sql.SQLFeatureNotSupportedException[?])"", string0);
}",""
"protected String _buildMessage() {
    // First: if we have no path info, let's just use parent's definition as is
    String msg = super.getMessage();
    if (_path == null) {
        return msg;
    }
    StringBuilder sb = (msg == null) ? new StringBuilder() : new StringBuilder(msg);
    /* 18-Feb-2009, tatu: initially there was a linefeed between
         *    message and path reference; but unfortunately many systems
         *   (loggers, junit) seem to assume linefeeds are only added to
         *   separate stack trace.
         */
    sb.append("" (through reference chain: "");
    sb = getPathReference(sb);
    sb.append(')');
    return sb.toString();
}","public void test1821() throws Throwable {
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
    JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, (-380));
    String string0 = jsonMappingException0.toString();
    String string1 = jsonMappingException0._buildMessage();
    assertEquals(""(was java.sql.SQLFeatureNotSupportedException) (through reference chain: java.sql.SQLFeatureNotSupportedException[?])"", string1);
}",""
"protected String _buildMessage() {
    // First: if we have no path info, let's just use parent's definition as is
    String msg = super.getMessage();
    if (_path == null) {
        return msg;
    }
    StringBuilder sb = (msg == null) ? new StringBuilder() : new StringBuilder(msg);
    /* 18-Feb-2009, tatu: initially there was a linefeed between
         *    message and path reference; but unfortunately many systems
         *   (loggers, junit) seem to assume linefeeds are only added to
         *   separate stack trace.
         */
    sb.append("" (through reference chain: "");
    sb = getPathReference(sb);
    sb.append(')');
    return sb.toString();
}","public void test1922() throws Throwable {
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
    JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, 604);
    jsonMappingException0.prependPath((Object) sQLFeatureNotSupportedException0, ""yTS=>e_RS{X?"");
    String string0 = jsonMappingException0._buildMessage();
    assertEquals(""(was java.sql.SQLFeatureNotSupportedException) (through reference chain: java.sql.SQLFeatureNotSupportedException[\""yTS=>e_RS{X?\""]->java.sql.SQLFeatureNotSupportedException[604])"", string0);
}",""
"public static JsonMappingException wrapWithPath(Throwable src, Object refFrom, String refFieldName) {
    return wrapWithPath(src, new Reference(refFrom, refFieldName));
}","public void test2023() throws Throwable {
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
    JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, ""MvjR*`|4bmC"");
    assertNotNull(jsonMappingException0);
}","/**
 * Method that can be called to either create a new JsonMappingException
 * (if underlying exception is not a JsonMappingException), or augment
 * given exception with given path/reference information.
 *
 * This version of method is called when the reference is through a
 * non-indexed object, such as a Map or POJO/bean.
 */"
"@Override
public String getLocalizedMessage() {
    return _buildMessage();
}","public void test2326() throws Throwable {
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
    JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, 700);
    String string0 = jsonMappingException0.getLocalizedMessage();
    assertEquals(""(was java.sql.SQLFeatureNotSupportedException) (through reference chain: java.sql.SQLFeatureNotSupportedException[700])"", string0);
}",""
"public static JsonMappingException fromUnexpectedIOE(IOException src) {
    return new JsonMappingException(null, String.format(""Unexpected IOException (of type %s): %s"", src.getClass().getName(), src.getMessage()));
}","public void test2427() throws Throwable {
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
    JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, 14);
    JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
    assertNotSame(jsonMappingException0, jsonMappingException1);
}","/**
 *  Factory method used when ""upgrading"" an {@link IOException} into
 *  {@link JsonMappingException}: usually only needed to comply with
 *  a signature.
 * <p>
 *  NOTE: since 2.9 should usually NOT be used on input-side (deserialization)
 *     exceptions; instead use method(s) of <code>InputMismatchException</code>
 *
 *  @since 2.1
 */"
"public String getPathReference() {
    return getPathReference(new StringBuilder()).toString();
}","public void test2630() throws Throwable {
    Class<String> class0 = String.class;
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    Class<JsonParserSequence> class1 = JsonParserSequence.class;
    JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, ""{pl`YSkubS=wnguZU)"", ""{pl`YSkubS=wnguZU)"");
    JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
    JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
    String string0 = jsonMappingException0.getPathReference();
    assertEquals(""java.lang.String[?]"", string0);
}","/**
 * Method for accessing description of path that lead to the
 * problem that triggered this exception
 */"
"public static JsonMappingException from(JsonParser p, String msg) {
    return new JsonMappingException(p, msg);
}","public void test2731() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ArrayNode arrayNode0 = objectMapper0.createArrayNode();
    JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
    JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, ""Unexpected IOException (of type %s): %s"");
    assertNotNull(jsonMappingException0);
}","/**
 * @since 2.7
 */"
"public static JsonMappingException wrapWithPath(Throwable src, Object refFrom, int index) {
    return wrapWithPath(src, new Reference(refFrom, index));
}","public void test2832() throws Throwable {
    SQLTransientException sQLTransientException0 = new SQLTransientException("""");
    JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLTransientException0, 676);
    assertNotNull(jsonMappingException0);
}","/**
 * Method that can be called to either create a new JsonMappingException
 * (if underlying exception is not a JsonMappingException), or augment
 * given exception with given path/reference information.
 *
 * This version of method is called when the reference is through an
 * index, which happens with arrays and Collections.
 */"
"public static JsonMappingException wrapWithPath(Throwable src, Object refFrom, int index) {
    return wrapWithPath(src, new Reference(refFrom, index));
}","public void test2933() throws Throwable {
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
    SQLTransientException sQLTransientException0 = new SQLTransientException(sQLFeatureNotSupportedException0);
    JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLFeatureNotSupportedException0, 20);
    assertNotNull(jsonMappingException0);
}","/**
 * Method that can be called to either create a new JsonMappingException
 * (if underlying exception is not a JsonMappingException), or augment
 * given exception with given path/reference information.
 *
 * This version of method is called when the reference is through an
 * index, which happens with arrays and Collections.
 */"
"public String getPathReference() {
    return getPathReference(new StringBuilder()).toString();
}","public void test3236() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    Class<String> class0 = String.class;
    JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, ""{pl`YSkubS=wnguZU)"", ""READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE"");
    String string0 = jsonMappingException0.getPathReference();
    assertEquals("""", string0);
}","/**
 * Method for accessing description of path that lead to the
 * problem that triggered this exception
 */"
