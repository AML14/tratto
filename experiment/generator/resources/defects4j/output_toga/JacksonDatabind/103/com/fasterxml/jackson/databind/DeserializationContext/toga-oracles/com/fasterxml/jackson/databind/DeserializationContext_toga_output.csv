project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    BooleanNode booleanNode0 = BooleanNode.getTrue();
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    try {
        objectReader0.treeToValue((TreeNode) booleanNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot construct instance of `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` (no Creators, like default construct, exist): no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (true)
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidDefinitionException"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Object[] objectArray0 = new Object[0];
    Class<DateFormat> class0 = DateFormat.class;
    try {
        defaultDeserializationContext0.handleWeirdKey(class0, ""JSON"", ""JSON"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot deserialize Map key of type `java.text.DateFormat` from String \""JSON\"": JSON
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidFormatException"", e);
    }
}",1,
project,0,test022,"public void test022() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<Integer> class0 = Integer.TYPE;
    BigInteger bigInteger0 = BigInteger.ONE;
    Object[] objectArray0 = new Object[1];
    try {
        defaultDeserializationContext0.handleWeirdNumberValue(class0, bigInteger0, ""JSON"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot deserialize value of type `int` from number 1: JSON
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidFormatException"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    defaultDeserializationContext_Impl0.unknownTypeException((JavaType) null, (String) null, (String) null);
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,
project,0,test044,"public void test044() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    assertEquals(0, objectMapper1.mixInCount());
}",0,
project,0,test055,"public void test055() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
    Object[] objectArray0 = new Object[3];
    try {
        defaultDeserializationContext0.reportWrongTokenException(jsonParser0, jsonToken0, ""JSON"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected token (null), expected NOT_AVAILABLE: JSON
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.MismatchedInputException"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    MockDate mockDate0 = new MockDate(1L);
    // Undeclared exception!
    try {
        defaultDeserializationContext_Impl0.constructCalendar(mockDate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    byte[] byteArray0 = new byte[0];
    try {
        objectReader0.readValue(byteArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No content to map due to end-of-input
        //  at [Source: (byte[])\""\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.MismatchedInputException"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        defaultDeserializationContext_Impl0.getAttribute(beanDeserializerFactory0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    // Undeclared exception!
    try {
        deserializationContext0.canOverrideAccessModifiers();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    Object[] objectArray0 = new Object[3];
    // Undeclared exception!
    try {
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) null, ""g1?Mo7~E'k@B"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",1,
project,0,test1212,"public void test1212() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        defaultDeserializationContext_Impl0.getLocale();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    JsonToken jsonToken0 = JsonToken.VALUE_NULL;
    Object[] objectArray0 = new Object[0];
    // Undeclared exception!
    try {
        defaultDeserializationContext_Impl0.reportWrongTokenException((JavaType) null, jsonToken0, (String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",1,
project,0,test1414,"public void test1414() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    // Undeclared exception!
    try {
        deserializationContext0.mappingException(""Cannot deserialize value of type %s from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type %s: incompatible types"", (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DatabindContext"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        defaultDeserializationContext_Impl0.findClass(""QUx*JK$yo18q<T4 "");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    Object[] objectArray0 = new Object[0];
    try {
        defaultDeserializationContext_Impl0.reportMappingException(""}f"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // }f
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
    Object[] objectArray0 = new Object[4];
    // Undeclared exception!
    try {
        defaultDeserializationContext_Impl0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, ""EE@Joj"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    defaultDeserializationContext_Impl0.mappingException(""DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s"");
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,"assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures())"
project,0,test1919,"public void test1919() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    Class<BeanDeserializer> class0 = BeanDeserializer.class;
    deserializationContext0.endOfInputException(class0);
    assertEquals(0, deserializationContext0.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationContext0.getDeserializationFeatures())"
project,0,test2121,"public void test2121() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    Class<BeanDeserializer> class0 = BeanDeserializer.class;
    JsonToken jsonToken0 = JsonToken.END_ARRAY;
    try {
        defaultDeserializationContext_Impl0.reportTrailingTokens((Class<?>) class0, (JsonParser) null, jsonToken0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Trailing token (of type END_ARRAY) found after value (bound as `com.fasterxml.jackson.databind.deser.BeanDeserializer`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
        //
        verifyException(""com.fasterxml.jackson.databind.exc.MismatchedInputException"", e);
    }
}",1,
project,0,test2424,"public void test2424() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<PlaceholderForType> class0 = PlaceholderForType.class;
    Object[] objectArray0 = new Object[1];
    try {
        defaultDeserializationContext0.handleWeirdStringValue(class0, ""JSON"", ""JSON"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.PlaceholderForType` from String \""JSON\"": JSON
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidFormatException"", e);
    }
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
    // Undeclared exception!
    try {
        deserializationContext0.instantiationException(class0, ""com.fasterxml.jackson.databind.SerializationFeature"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    Class<Throwable> class0 = Throwable.class;
    ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
    Object[] objectArray0 = new Object[2];
    // Undeclared exception!
    try {
        defaultDeserializationContext0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) null, ""G/"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.BeanDescription"", e);
    }
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<SequenceInputStream> class0 = SequenceInputStream.class;
    JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
    try {
        defaultDeserializationContext0.handleWeirdNativeValue(javaType0, jsonFactory0, jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot deserialize value of type `java.io.SequenceInputStream` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.core.JsonFactory`: incompatible types
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidFormatException"", e);
    }
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    Object[] objectArray0 = new Object[1];
    try {
        defaultDeserializationContext_Impl0.reportMissingContent(""~{~hISY3"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No content to map due to end-of-input
        //
        verifyException(""com.fasterxml.jackson.databind.exc.MismatchedInputException"", e);
    }
}",1,
project,0,test3030,"public void test3030() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    // Undeclared exception!
    try {
        deserializationContext0.reportUnresolvedObjectId((ObjectIdReader) null, (Object) objectMapper0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test3131,"public void test3131() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    Object[] objectArray0 = new Object[0];
    // Undeclared exception!
    try {
        defaultDeserializationContext_Impl0.reportBadTypeDefinition((BeanDescription) null, ""em?"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    defaultDeserializationContext_Impl0.getActiveView();
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,"assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures())"
project,0,test3434,"public void test3434() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    DeserializerFactory deserializerFactory0 = defaultDeserializationContext_Impl0.getFactory();
    assertNotNull(deserializerFactory0);
}",0,assertNotNull(deserializerFactory0)
project,0,test3435,"public void test3435() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    DeserializerFactory deserializerFactory0 = defaultDeserializationContext_Impl0.getFactory();
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,"assertEquals(1, defaultDeserializationContext_Impl0.getDeserializationFeatures())"
project,0,test3536,"public void test3536() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
    assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
}",0,"assertEquals(1, defaultDeserializationContext0.getDeserializationFeatures())"
project,0,test3637,"public void test3637() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
    JsonToken jsonToken0 = JsonToken.START_OBJECT;
    defaultDeserializationContext_Impl0.mappingException(class0, jsonToken0);
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,"assertEquals(1, defaultDeserializationContext_Impl0.getDeserializationFeatures())"
project,0,test3738,"public void test3738() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    int int0 = deserializationContext0.getDeserializationFeatures();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test3839,"public void test3839() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    // Undeclared exception!
    try {
        deserializationContext0.setAttribute(objectMapper0, objectMapper0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test3940,"public void test3940() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test4243,"public void test4243() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures((-950));
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4244,"public void test4244() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures((-950));
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,"assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures())"
project,0,test4345,"public void test4345() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    boolean boolean0 = deserializationContext0.hasDeserializationFeatures((byte) 0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4346,"public void test4346() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    boolean boolean0 = deserializationContext0.hasDeserializationFeatures((byte) 0);
    assertEquals(0, deserializationContext0.getDeserializationFeatures());
}",0,
project,0,test4447,"public void test4447() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures((-861));
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4548,"public void test4548() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""Cannot construct instance of %s (no Creators, like default construct, exist): %s"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures(20);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4649,"public void test4649() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
    boolean boolean0 = defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, atomicReference0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4650,"public void test4650() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
    boolean boolean0 = defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, atomicReference0);
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,"assertEquals(1, defaultDeserializationContext_Impl0.getDeserializationFeatures())"
project,0,test4751,"public void test4751() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, (AtomicReference<Throwable>) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null JavaType passed
        //
        verifyException(""com.fasterxml.jackson.databind.deser.DeserializerCache"", e);
    }
}",0,
project,0,test4852,"public void test4852() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
    objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    PlaceholderForType placeholderForType0 = new PlaceholderForType(633);
    try {
        defaultDeserializationContext0.readValue(jsonParser0, (JavaType) placeholderForType0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input when binding data into `java.lang.Object`
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.MismatchedInputException"", e);
    }
}",0,
project,0,test4953,"public void test4953() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
    JavaType javaType0 = beanProperty_Bogus0.getType();
    KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(javaType0, beanProperty_Bogus0);
    assertNotNull(keyDeserializer0);
}",1,
project,0,test5054,"public void test5054() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(""JSON"", ""JSON"");
    try {
        defaultDeserializationContext0.handleInstantiationProblem((Class<?>) null, jsonParser0, sQLTransientConnectionException0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot construct instance of [null], problem: JSON
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidDefinitionException"", e);
    }
}",0,
project,0,test5155,"public void test5155() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectBuffer objectBuffer0 = new ObjectBuffer();
    defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
    ObjectBuffer objectBuffer1 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
    assertSame(objectBuffer1, objectBuffer0);
}",0,
project,0,test5156,"public void test5156() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectBuffer objectBuffer0 = new ObjectBuffer();
    defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
    ObjectBuffer objectBuffer1 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,"assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures())"
project,0,test5258,"public void test5258() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
    assertNotNull(objectBuffer0);
}",0,assertNotNull(objectBuffer0)
project,0,test5259,"public void test5259() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,"assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures())"
project,0,test5360,"public void test5360() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    ObjectBuffer objectBuffer0 = new ObjectBuffer();
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
    defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,"assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures())"
project,0,test5461,"public void test5461() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    ObjectBuffer objectBuffer0 = new ObjectBuffer();
    objectBuffer0.resetAndStart();
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
    ObjectBuffer objectBuffer1 = new ObjectBuffer();
    defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer1);
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,"assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures())"
project,0,test5562,"public void test5562() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    defaultDeserializationContext_Impl0.getArrayBuilders();
    ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
    assertNotNull(arrayBuilders0);
}",0,assertNotNull(arrayBuilders0)
project,0,test5563,"public void test5563() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    defaultDeserializationContext_Impl0.getArrayBuilders();
    ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,"assertEquals(1, defaultDeserializationContext_Impl0.getDeserializationFeatures())"
project,0,test5664,"public void test5664() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(deserializationProblemHandler0).handleUnknownProperty(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.JsonDeserializer.class), any(), anyString());
    ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    JsonDeserializer<DoubleNode> jsonDeserializer0 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
    try {
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, jsonDeserializer0, objectMapper1, ""JSON"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized field \""JSON\"" (class com.fasterxml.jackson.databind.ObjectMapper), not marked as ignorable
        //  at [Source: (String)\""JSON\""; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[\""JSON\""])
        //
        verifyException(""com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException"", e);
    }
}",0,
project,0,test5765,"public void test5765() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn(true).when(deserializationProblemHandler0).handleUnknownProperty(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.JsonDeserializer.class), any(), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    boolean boolean0 = defaultDeserializationContext0.handleUnknownProperty(jsonParser0, jsonDeserializer0, jsonParser0, ""JSON"");
    assertTrue(boolean0);
}",0,
project,0,test5866,"public void test5866() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    try {
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, (JsonDeserializer<?>) null, jsonParser0, ""JSON"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized field \""JSON\"" (class com.fasterxml.jackson.core.json.ReaderBasedJsonParser), not marked as ignorable
        //  at [Source: (String)\""JSON\""; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.core.json.ReaderBasedJsonParser[\""JSON\""])
        //
        verifyException(""com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException"", e);
    }
}",0,
project,0,test5967,"public void test5967() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
    ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<Object> class0 = Object.class;
    Object[] objectArray0 = new Object[0];
    Object object0 = defaultDeserializationContext0.handleWeirdKey(class0, ""JSON"", ""JSON"", objectArray0);
    assertSame(object0, objectMapper1);
}",0,
project,0,test6068,"public void test6068() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<Object> class0 = Object.class;
    Object[] objectArray0 = new Object[0];
    Object object0 = defaultDeserializationContext0.handleWeirdKey(class0, """", """", objectArray0);
    assertNull(object0);
}",1,
project,0,test6169,"public void test6169() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Object[] objectArray0 = new Object[0];
    Class<Module> class0 = Module.class;
    try {
        defaultDeserializationContext0.handleWeirdKey(class0, ""JSON"", """", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot deserialize value of type `com.fasterxml.jackson.databind.Module` from String \""JSON\"": DeserializationProblemHandler.handleWeirdStringValue() for type class com.fasterxml.jackson.databind.Module returned value of type class com.fasterxml.jackson.databind.ObjectMapper
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidFormatException"", e);
    }
}",1,
project,0,test6270,"public void test6270() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdStringValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<SimpleType> class0 = SimpleType.class;
    Object[] objectArray0 = new Object[0];
    Object object0 = defaultDeserializationContext0.handleWeirdStringValue(class0, ""JSON"", ""JSON"", objectArray0);
    assertNull(object0);
}",0,
project,0,test6371,"public void test6371() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdStringValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<PlaceholderForType> class0 = PlaceholderForType.class;
    Object[] objectArray0 = new Object[1];
    try {
        defaultDeserializationContext0.handleWeirdStringValue(class0, ""JSON"", ""JSON"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.PlaceholderForType` from String \""JSON\"": DeserializationProblemHandler.handleWeirdStringValue() for type class com.fasterxml.jackson.databind.type.PlaceholderForType returned value of type class com.fasterxml.jackson.databind.ObjectMapper
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidFormatException"", e);
    }
}",0,
project,0,test6472,"public void test6472() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdNumberValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(java.lang.Number.class), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<Locale> class0 = Locale.class;
    BigDecimal bigDecimal0 = BigDecimal.ZERO;
    Object[] objectArray0 = new Object[1];
    Object object0 = defaultDeserializationContext0.handleWeirdNumberValue(class0, bigDecimal0, ""JSON"", objectArray0);
    assertNull(object0);
}",0,
project,0,test6573,"public void test6573() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdNumberValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(java.lang.Number.class), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<Integer> class0 = Integer.TYPE;
    BigInteger bigInteger0 = BigInteger.ONE;
    Object[] objectArray0 = new Object[1];
    try {
        defaultDeserializationContext0.handleWeirdNumberValue(class0, bigInteger0, ""JSON"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot deserialize value of type `int` from number 1: DeserializationProblemHandler.handleWeirdNumberValue() for type int returned value of type class com.fasterxml.jackson.databind.ObjectMapper
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidFormatException"", e);
    }
}",0,
project,0,test6674,"public void test6674() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(), any(com.fasterxml.jackson.core.JsonParser.class));
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    PlaceholderForType placeholderForType0 = new PlaceholderForType(633);
    Object object0 = defaultDeserializationContext0.handleWeirdNativeValue(placeholderForType0, objectReader0, jsonParser0);
    assertNull(object0);
}",0,
project,0,test6775,"public void test6775() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(), any(com.fasterxml.jackson.core.JsonParser.class));
    ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    PlaceholderForType placeholderForType0 = new PlaceholderForType(633);
    Object object0 = defaultDeserializationContext0.handleWeirdNativeValue(placeholderForType0, objectReader0, jsonParser0);
    assertSame(object0, objectMapper1);
}",0,
project,0,test6876,"public void test6876() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(), any(com.fasterxml.jackson.core.JsonParser.class));
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<String> class0 = String.class;
    JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
    PlaceholderForType placeholderForType0 = new PlaceholderForType((-1204));
    try {
        defaultDeserializationContext0.handleWeirdNativeValue(javaType0, placeholderForType0, jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // DeserializationProblemHandler.handleWeirdNativeValue() for type [simple type, class java.lang.String] returned value of type class com.fasterxml.jackson.databind.ObjectMapper
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test6977,"public void test6977() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    Object[] objectArray0 = new Object[2];
    try {
        defaultDeserializationContext0.handleMissingInstantiator(class0, (ValueInstantiator) null, jsonParser0, ""JSON"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot construct instance of `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` (although at least one Creator exists): JSON
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.MismatchedInputException"", e);
    }
}",0,
project,0,test7078,"public void test7078() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    BooleanNode booleanNode0 = BooleanNode.getTrue();
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    ResolvedRecursiveType resolvedRecursiveType0 = objectReader0.treeToValue((TreeNode) booleanNode0, class0);
    assertNull(resolvedRecursiveType0);
}",0,assertNotNull(resolvedRecursiveType0)
project,0,test7179,"public void test7179() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn(objectMapper0).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<SimpleType> class0 = SimpleType.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    Object[] objectArray0 = new Object[1];
    try {
        defaultDeserializationContext0.handleMissingInstantiator(class0, valueInstantiator_Base0, jsonParser0, ""JSON"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // DeserializationProblemHandler.handleMissingInstantiator() for type class com.fasterxml.jackson.databind.type.SimpleType returned value of type `com.fasterxml.jackson.databind.ObjectMapper`
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidDefinitionException"", e);
    }
}",0,
project,0,test7280,"public void test7280() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn(objectMapper0).when(deserializationProblemHandler0).handleInstantiationProblem(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(), any(java.lang.Throwable.class));
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(""JSON"");
    Class<String> class0 = String.class;
    try {
        defaultDeserializationContext0.handleInstantiationProblem(class0, objectMapper0, sQLTransientConnectionException0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // DeserializationProblemHandler.handleInstantiationProblem() for type class java.lang.String returned value of type `com.fasterxml.jackson.databind.ObjectMapper`
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidDefinitionException"", e);
    }
}",0,
project,0,test7381,"public void test7381() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(deserializationProblemHandler0).handleInstantiationProblem(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(), any(java.lang.Throwable.class));
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(""JSON"");
    Class<String> class0 = String.class;
    Object object0 = defaultDeserializationContext0.handleInstantiationProblem(class0, objectMapper0, sQLTransientConnectionException0);
    assertNull(object0);
}",0,
project,0,test7482,"public void test7482() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn(objectMapper0).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.core.JsonToken.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
    JavaType javaType0 = beanProperty_Bogus0.getType();
    DateFormat dateFormat0 = defaultDeserializationContext0.readValue(jsonParser0, javaType0);
    assertNull(dateFormat0);
}",0,assertNotNull(dateFormat0)
project,0,test7583,"public void test7583() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn(objectMapper0).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.core.JsonToken.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<InputStream> class0 = InputStream.class;
    JsonToken jsonToken0 = JsonToken.END_OBJECT;
    Object[] objectArray0 = new Object[1];
    try {
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, ""JSON"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // DeserializationProblemHandler.handleUnexpectedToken() for type `java.io.InputStream` returned value of type `com.fasterxml.jackson.databind.ObjectMapper`
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidDefinitionException"", e);
    }
}",0,
project,0,test7684,"public void test7684() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
    JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
    Object[] objectArray0 = new Object[0];
    try {
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, ""com.fasterxml.jackson.core.ObjectCodec"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // com.fasterxml.jackson.core.ObjectCodec
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.MismatchedInputException"", e);
    }
}",0,
project,0,test7785,"public void test7785() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn((JavaType) null).when(deserializationProblemHandler0).handleUnknownTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), anyString(), any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    try {
        defaultDeserializationContext0.handleUnknownTypeId((JavaType) null, ""JSON"", (TypeIdResolver) null, (String) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Could not resolve type id 'JSON' as a subtype of null
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidTypeIdException"", e);
    }
}",0,
project,0,test7886,"public void test7886() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Map> class0 = Map.class;
    Class<TypeNameIdResolver> class1 = TypeNameIdResolver.class;
    Class<String> class2 = String.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn(mapType0).when(deserializationProblemHandler0).handleMissingTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    JavaType javaType0 = TypeFactory.unknownType();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
    JavaType javaType1 = defaultDeserializationContext0.handleMissingTypeId(javaType0, classNameIdResolver0, ""JSON"");
    assertSame(javaType1, mapType0);
}",0,
project,0,test7987,"public void test7987() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    doReturn((JavaType) null).when(deserializationProblemHandler0).handleMissingTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class), anyString());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    JavaType javaType0 = TypeFactory.unknownType();
    TypeFactory typeFactory0 = objectReader0.getTypeFactory();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
    try {
        defaultDeserializationContext0.handleMissingTypeId(javaType0, classNameIdResolver0, ""JSON"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: JSON
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidTypeIdException"", e);
    }
}",0,
project,0,test8088,"public void test8088() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
    Class<Object> class0 = Object.class;
    boolean boolean0 = ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test8089,"public void test8089() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
    Class<Object> class0 = Object.class;
    boolean boolean0 = ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,"assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures())"
project,0,test8190,"public void test8190() throws Throwable {
    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
    Object[] objectArray0 = new Object[6];
    try {
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, ""|JZ("", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // |JZ(
        //
        verifyException(""com.fasterxml.jackson.databind.exc.MismatchedInputException"", e);
    }
}",0,
project,0,test8291,"public void test8291() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    Object[] objectArray0 = new Object[9];
    try {
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) null, ""Could not find JsonDeserializer for type %s (via property %s)"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Could not find JsonDeserializer for type null (via property null)
        //
        verifyException(""com.fasterxml.jackson.databind.exc.MismatchedInputException"", e);
    }
}",0,
project,0,test8392,"public void test8392() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    defaultDeserializationContext_Impl0.reportUnknownProperty(beanDeserializerFactory0, """", (JsonDeserializer<?>) null);
    assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
}",0,
project,0,test8493,"public void test8493() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
    try {
        defaultDeserializationContext0.reportUnknownProperty(jsonFactory0, ""JSON"", jsonDeserializer0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized field \""JSON\"" (class com.fasterxml.jackson.core.JsonFactory), not marked as ignorable
        //  at [Source: (String)\""JSON\""; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.core.JsonFactory[\""JSON\""])
        //
        verifyException(""com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException"", e);
    }
}",0,
project,0,test8594,"public void test8594() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    StringReader stringReader0 = new StringReader(""JSON"");
    JsonParser jsonParser0 = jsonFactory0.createParser((Reader) stringReader0);
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    try {
        defaultDeserializationContext0.reportUnknownProperty(jsonFactory0, ""JSON"", (JsonDeserializer<?>) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized field \""JSON\"" (class com.fasterxml.jackson.core.JsonFactory), not marked as ignorable
        //  at [Source: (StringReader); line: 1, column: 1] (through reference chain: com.fasterxml.jackson.core.JsonFactory[\""JSON\""])
        //
        verifyException(""com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException"", e);
    }
}",0,
project,0,test8695,"public void test8695() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Object object0 = defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
    assertNull(object0);
}",0,
project,0,test8796,"public void test8796() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    Class<Integer> class0 = Integer.TYPE;
    try {
        defaultDeserializationContext0.handleInstantiationProblem(class0, jsonFactory0, (Throwable) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot construct instance of `int`, problem: N/A
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidDefinitionException"", e);
    }
}",0,
project,0,test8897,"public void test8897() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
    SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
    Class<MockDateFormat> class0 = MockDateFormat.class;
    try {
        defaultDeserializationContext0.handleInstantiationProblem(class0, sQLTransientConnectionException0, sQLTransientConnectionException0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot construct instance of `org.evosuite.runtime.mock.java.text.MockDateFormat`, problem: `java.sql.SQLTransientConnectionException`
        //  at [Source: (String)\""JSON\""; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidDefinitionException"", e);
    }
}",0,
