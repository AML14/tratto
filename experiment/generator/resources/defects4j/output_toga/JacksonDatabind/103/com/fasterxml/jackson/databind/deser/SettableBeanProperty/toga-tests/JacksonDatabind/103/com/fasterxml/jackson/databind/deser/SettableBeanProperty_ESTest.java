/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 08:22:23 GMT 2024
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class SettableBeanProperty_ESTest extends SettableBeanProperty_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
        SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
        creatorProperty0._throwAsIOE(sQLIntegrityConstraintViolationException0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Qs)qy4=JkUz*F##uh", false, javaType0);
        Class<Integer> class0 = Integer.class;
        AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
        Boolean boolean0 = Boolean.valueOf(false);
        Integer integer0 = new Integer((-1707));
        PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Qs)qy4=JkUz*F##uh", integer0, "Qs)qy4=JkUz*F##uh");
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 2260, asExternalTypeDeserializer0, propertyMetadata0);
        int int0 = creatorProperty0.getPropertyIndex();
        creatorProperty0.hasValueTypeDeserializer();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Qs)qy4=JkUz*F##uh", false, javaType0);
        Class<Integer> class0 = Integer.class;
        AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
        Boolean boolean0 = Boolean.valueOf(false);
        Integer integer0 = new Integer((-1707));
        PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Qs)qy4=JkUz*F##uh", integer0, "Qs)qy4=JkUz*F##uh");
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 2260, asExternalTypeDeserializer0, propertyMetadata0);
        int int0 = creatorProperty0.getPropertyIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[21];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 215, jsonParserSequence0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        objectIdReferenceProperty0.markAsIgnorable();
        objectIdReferenceProperty0.getName();
        assertNotNull(objectIdReferenceProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[21];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 215, jsonParserSequence0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        objectIdReferenceProperty0.markAsIgnorable();
        objectIdReferenceProperty0.getPropertyIndex();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4, annotationMap0, propertyMetadata0);
        Class<Annotation> class0 = Annotation.class;
        creatorProperty0.getContextAnnotation(class0);
        creatorProperty0.getPropertyIndex();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, (String) null);
        Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
        creatorProperty0.getDeclaringClass();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 5003, (Object) null, propertyMetadata0);
        creatorProperty0.setManagedReferenceName("n-7n_$EA`wg.46sSiR");
        creatorProperty0.getName();
        assertNotNull(creatorProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "$(b;F>*Q/v%sT", false, javaType0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
        PropertyName propertyName1 = creatorProperty0.getWrapperName();
        creatorProperty0.hasValueTypeDeserializer();
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "$(b;F>*Q/v%sT", false, javaType0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
        PropertyName propertyName1 = creatorProperty0.getWrapperName();
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1203, annotationMap0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        creatorProperty0.setObjectIdInfo(objectIdInfo0);
        creatorProperty0.getName();
        assertNotNull(creatorProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[21];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 215, jsonParserSequence0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        boolean boolean0 = objectIdReferenceProperty0.isIgnorable();
        objectIdReferenceProperty0.getName();
        assertNotNull(objectIdReferenceProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[21];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 215, jsonParserSequence0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        boolean boolean0 = objectIdReferenceProperty0.isIgnorable();
        objectIdReferenceProperty0.getPropertyIndex();
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[21];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 215, jsonParserSequence0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        boolean boolean0 = objectIdReferenceProperty0.isIgnorable();
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Qs)qy4=JkUz*F##uh", false, javaType0);
        Class<Integer> class0 = Integer.class;
        AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
        Boolean boolean0 = Boolean.valueOf(false);
        Integer integer0 = new Integer((-1707));
        PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Qs)qy4=JkUz*F##uh", integer0, "Qs)qy4=JkUz*F##uh");
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 2278, asExternalTypeDeserializer0, propertyMetadata0);
        creatorProperty0.getFullName();
        creatorProperty0.hasValueTypeDeserializer();
        assertTrue(creatorProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$(b;F>*Q/v%sT", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, javaType0, propertyMetadata0);
        creatorProperty0.getNullValueProvider();
        creatorProperty0.hasValueTypeDeserializer();
        assertTrue(creatorProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 56319, (Object) null, propertyMetadata0);
        MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((String) null, (Throwable) null);
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, (Object) null);
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
        creatorProperty0.getName();
        assertNotNull(creatorProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
        SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
        settableBeanProperty0.getName();
        assertNotNull(settableBeanProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
        SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
        SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
        settableBeanProperty0.getPropertyIndex();
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, propertyName0, propertyMetadata0);
        SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1264), classNameIdResolver0, propertyMetadata0);
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
        SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("L? ViNj");
        settableBeanProperty0.getName();
        assertNotNull(settableBeanProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1264), classNameIdResolver0, propertyMetadata0);
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
        SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("L? ViNj");
        creatorProperty0.getName();
        assertNotNull(creatorProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test1625() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1264), classNameIdResolver0, propertyMetadata0);
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
        SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("L? ViNj");
        creatorProperty1.getPropertyIndex();
    }

    @Test(timeout = 4000)
    public void test1626() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1264), classNameIdResolver0, propertyMetadata0);
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
        SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("L? ViNj");
    }

    @Test(timeout = 4000)
    public void test1727() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "$(b;F>*Q/v%sT", true, javaType0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, objectIdGenerators_StringIdGenerator0, propertyMetadata0);
        creatorProperty0.assignIndex(0);
        creatorProperty0.assignIndex(0);
    }

    @Test(timeout = 4000)
    public void test1828() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$(b;F>*Q/v%tsT", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 598, (Object) null, propertyMetadata0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
        creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl0);
        creatorProperty0.hasValueTypeDeserializer();
        assertTrue(creatorProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test1929() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Qs)qy4=JkUz*F##uh", true, javaType0);
        Class<Integer> class0 = Integer.class;
        AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 2260, asExternalTypeDeserializer0, propertyMetadata0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        creatorProperty0.depositSchemaProperty((JsonObjectFormatVisitor) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
        JsonDeserializer<JsonDeserializer<ShortNode>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<ShortNode>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        boolean boolean0 = creatorProperty1.hasValueDeserializer();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2031() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
        JsonDeserializer<JsonDeserializer<ShortNode>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<ShortNode>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        boolean boolean0 = creatorProperty1.hasValueDeserializer();
        creatorProperty1.getName();
        assertNotNull(creatorProperty1.getName());
    }

    @Test(timeout = 4000)
    public void test2032() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
        JsonDeserializer<JsonDeserializer<ShortNode>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<ShortNode>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        boolean boolean0 = creatorProperty1.hasValueDeserializer();
        creatorProperty1.getPropertyIndex();
    }

    @Test(timeout = 4000)
    public void test2133() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
        JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
    }

    @Test(timeout = 4000)
    public void test2134() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
        JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
        creatorProperty0.getName();
        assertNotNull(creatorProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test2235() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        boolean boolean0 = creatorProperty0.visibleInView(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2236() throws Throwable {
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        boolean boolean0 = creatorProperty0.visibleInView(class0);
        creatorProperty0.getName();
        assertNotNull(creatorProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test2337() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 272, (Object) null, propertyMetadata0);
        Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
        Class<Integer> class0 = Integer.class;
        classArray0[0] = class0;
        classArray0[1] = class0;
        classArray0[2] = class0;
        classArray0[3] = classArray0[1];
        classArray0[4] = class0;
        classArray0[5] = classArray0[4];
        creatorProperty0.setViews(classArray0);
        Class<PropertyName> class1 = PropertyName.class;
        boolean boolean0 = creatorProperty0.visibleInView(class1);
        creatorProperty0.hasViews();
        assertFalse(creatorProperty0.hasViews());
    }

    @Test(timeout = 4000)
    public void test2338() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 272, (Object) null, propertyMetadata0);
        Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
        Class<Integer> class0 = Integer.class;
        classArray0[0] = class0;
        classArray0[1] = class0;
        classArray0[2] = class0;
        classArray0[3] = classArray0[1];
        classArray0[4] = class0;
        classArray0[5] = classArray0[4];
        creatorProperty0.setViews(classArray0);
        Class<PropertyName> class1 = PropertyName.class;
        boolean boolean0 = creatorProperty0.visibleInView(class1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2439() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        Object object0 = new Object();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-756), object0, propertyMetadata0);
        Class<ObjectIdResolver>[] classArray0 = (Class<ObjectIdResolver>[]) Array.newInstance(Class.class, 7);
        Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
        classArray0[0] = class0;
        creatorProperty0.setViews(classArray0);
        Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
        boolean boolean0 = creatorProperty0.visibleInView(class1);
        creatorProperty0.hasViews();
    }

    @Test(timeout = 4000)
    public void test2440() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        Object object0 = new Object();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-756), object0, propertyMetadata0);
        Class<ObjectIdResolver>[] classArray0 = (Class<ObjectIdResolver>[]) Array.newInstance(Class.class, 7);
        Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
        classArray0[0] = class0;
        creatorProperty0.setViews(classArray0);
        Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
        boolean boolean0 = creatorProperty0.visibleInView(class1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2541() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
        AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 2260, propertyName0, propertyMetadata0);
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
        ViewMatcher viewMatcher0 = new ViewMatcher();
        creatorProperty1._viewMatcher = viewMatcher0;
        boolean boolean0 = creatorProperty1.hasViews();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2642() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[2];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "JSON", false, javaType0);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 637, asWrapperTypeDeserializer0, propertyMetadata0);
        creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2743() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(javaType0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        creatorProperty1.hasValueDeserializer();
        assertTrue(creatorProperty1.hasValueDeserializer());
    }

    @Test(timeout = 4000)
    public void test2744() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(javaType0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        Object object0 = creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
        creatorProperty1.getPropertyIndex();
    }

    @Test(timeout = 4000)
    public void test2745() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(javaType0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        Object object0 = creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test2846() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
        creatorProperty1.getPropertyIndex();
    }

    @Test(timeout = 4000)
    public void test2947() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[0];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, classNameIdResolver0, "", true, javaType0);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, jsonParser0, propertyMetadata0);
        creatorProperty0.deserializeWith(jsonParser0, (DeserializationContext) null, jsonParser0);
    }

    @Test(timeout = 4000)
    public void test3048() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[41];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3023), propertyMetadata0, propertyMetadata0);
        Nulls nulls0 = Nulls.AS_EMPTY;
        JsonDeserializer<Nulls> jsonDeserializer0 = (JsonDeserializer<Nulls>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(nulls0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.annotation.Nulls.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
        creatorProperty1.getName();
        assertNotNull(creatorProperty1.getName());
    }

    @Test(timeout = 4000)
    public void test3049() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[41];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3023), propertyMetadata0, propertyMetadata0);
        Nulls nulls0 = Nulls.AS_EMPTY;
        JsonDeserializer<Nulls> jsonDeserializer0 = (JsonDeserializer<Nulls>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(nulls0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.annotation.Nulls.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
        creatorProperty1.getPropertyIndex();
    }

    @Test(timeout = 4000)
    public void test3150() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonDeserializer<ShortNode> jsonDeserializer0 = (JsonDeserializer<ShortNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.node.ShortNode.class));
        doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        Object object0 = creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, propertyMetadata0);
    }

    @Test(timeout = 4000)
    public void test3151() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonDeserializer<ShortNode> jsonDeserializer0 = (JsonDeserializer<ShortNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.node.ShortNode.class));
        doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        Object object0 = creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, propertyMetadata0);
        creatorProperty1.getPropertyIndex();
    }

    @Test(timeout = 4000)
    public void test3252() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
        SQLWarning sQLWarning0 = new SQLWarning();
        creatorProperty0._throwAsIOE(sQLWarning0, "), trying to assign ");
    }

    @Test(timeout = 4000)
    public void test3353() throws Throwable {
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
        AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 21, propertyName0, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON", "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase");
        MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("JSON", sQLTransientConnectionException0);
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, jsonFactory0);
    }
}
