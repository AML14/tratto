focal_method,test_prefix,docstring
"/*
    /**********************************************************
    /* Helper methods
    /**********************************************************
     */
/**
 * @param e Exception to re-throw or wrap
 * @param propName Name of property (from Json input) to set
 * @param value Value of the property
 */
protected void _throwAsIOE(Exception e, Object propName, Object value) throws IOException {
    if (e instanceof IllegalArgumentException) {
        String actType = ClassUtil.classNameOf(value);
        StringBuilder msg = new StringBuilder(""Problem deserializing \""any\"" property '"").append(propName);
        msg.append(""' of class "" + getClassName() + "" (expected type: "").append(_type);
        msg.append(""; actual type: "").append(actType).append("")"");
        String origMsg = e.getMessage();
        if (origMsg != null) {
            msg.append("", problem: "").append(origMsg);
        } else {
            msg.append("" (no error message provided)"");
        }
        throw new JsonMappingException(null, msg.toString(), e);
    }
    ClassUtil.throwIfIOE(e);
    ClassUtil.throwIfRTE(e);
    // let's wrap the innermost problem
    Throwable t = ClassUtil.getRootCause(e);
    throw new JsonMappingException(null, t.getMessage(), t);
}","public void test000() throws Throwable {
    TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, (TypeBindings) null);
    Class<NamedType> class0 = NamedType.class;
    VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, ""]that w#n't 2reviousby egistered."", (JavaType) null);
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(""]that w#n't 2reviousby egistered."");
    try {
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, (Object) null, (Object) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Problem deserializing \""any\"" property 'null' of class com.fasterxml.jackson.databind.jsontype.NamedType (expected type: null; actual type: [null]), problem: ]that w#n't 2reviousby egistered.
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableAnyProperty"", e);
    }
}",""
"@Override
public String toString() {
    return ""[any property on class "" + getClassName() + ""]"";
}","public void test011() throws Throwable {
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    // Undeclared exception!
    try {
        settableAnyProperty0.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableAnyProperty"", e);
    }
}",""
"public SettableAnyProperty withValueDeserializer(JsonDeserializer<Object> deser) {
    return new SettableAnyProperty(_property, _setter, _type, _keyDeserializer, deser, _valueTypeDeserializer);
}","public void test022() throws Throwable {
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
    assertNotSame(settableAnyProperty1, settableAnyProperty0);
}",""
"public void fixAccess(DeserializationConfig config) {
    _setter.fixAccess(config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
}","public void test033() throws Throwable {
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    // Undeclared exception!
    try {
        settableAnyProperty0.fixAccess((DeserializationConfig) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableAnyProperty"", e);
    }
}",""
"@Override
public final boolean isPrimitive() {
    return _class.isPrimitive();
}","public void test044() throws Throwable {
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, simpleType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    JavaType javaType0 = settableAnyProperty0.getType();
    assertFalse(javaType0.isPrimitive());
}",""
"/*
    /**********************************************************
    /* Public API, accessors
    /**********************************************************
     */
public BeanProperty getProperty() {
    return _property;
}","public void test055() throws Throwable {
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, simpleType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
    assertNull(beanProperty0);
}",""
"/*
    /**********************************************************
    /* JDK serialization handling
    /**********************************************************
     */
/**
 * Need to define this to verify that we retain actual Method reference
 */
Object readResolve() {
    // sanity check...
    if (_setter == null || _setter.getAnnotated() == null) {
        throw new IllegalArgumentException(""Missing method (broken JDK (de)serialization?)"");
    }
    return this;
}","public void test066() throws Throwable {
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    // Undeclared exception!
    try {
        settableAnyProperty0.readResolve();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Missing method (broken JDK (de)serialization?)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableAnyProperty"", e);
    }
}",""
"/*
    /**********************************************************
    /* JDK serialization handling
    /**********************************************************
     */
/**
 * Need to define this to verify that we retain actual Method reference
 */
Object readResolve() {
    // sanity check...
    if (_setter == null || _setter.getAnnotated() == null) {
        throw new IllegalArgumentException(""Missing method (broken JDK (de)serialization?)"");
    }
    return this;
}","public void test077() throws Throwable {
    AnnotationMap annotationMap0 = new AnnotationMap();
    AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    // Undeclared exception!
    try {
        settableAnyProperty0.readResolve();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Missing method (broken JDK (de)serialization?)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableAnyProperty"", e);
    }
}",""
"public boolean hasValueDeserializer() {
    return (_valueDeserializer != null);
}","public void test088() throws Throwable {
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
    assertFalse(boolean0);
}",""
"public boolean hasValueDeserializer() {
    return (_valueDeserializer != null);
}","public void test099() throws Throwable {
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, ""Unresolved forward reference but no identity info."", simpleType0);
    CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-4676));
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, simpleType0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
    boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
    assertTrue(boolean0);
}",""
"/*
    /**********************************************************
    /* Public API, deserialization
    /**********************************************************
     */
/**
 * Method called to deserialize appropriate value, given parser (and
 * context), and set it using appropriate method (a setter method).
 */
public final void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance, String propName) throws IOException {
    try {
        Object key = (_keyDeserializer == null) ? propName : _keyDeserializer.deserializeKey(propName, ctxt);
        set(instance, key, deserialize(p, ctxt));
    } catch (UnresolvedForwardReference reference) {
        if (!(_valueDeserializer.getObjectIdReader() != null)) {
            throw JsonMappingException.from(p, ""Unresolved forward reference but no identity info."", reference);
        }
        AnySetterReferring referring = new AnySetterReferring(this, reference, _type.getRawClass(), instance, propName);
        reference.getRoid().appendReferring(referring);
    }
}","public void test1010() throws Throwable {
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
    // Undeclared exception!
    try {
        settableAnyProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, jsonFactory0, ""JSON"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableAnyProperty"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, deserialization
    /**********************************************************
     */
/**
 * Method called to deserialize appropriate value, given parser (and
 * context), and set it using appropriate method (a setter method).
 */
public final void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance, String propName) throws IOException {
    try {
        Object key = (_keyDeserializer == null) ? propName : _keyDeserializer.deserializeKey(propName, ctxt);
        set(instance, key, deserialize(p, ctxt));
    } catch (UnresolvedForwardReference reference) {
        if (!(_valueDeserializer.getObjectIdReader() != null)) {
            throw JsonMappingException.from(p, ""Unresolved forward reference but no identity info."", reference);
        }
        AnySetterReferring referring = new AnySetterReferring(this, reference, _type.getRawClass(), instance, propName);
        reference.getRoid().appendReferring(referring);
    }
}","public void test1111() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "")"", false, (JavaType) null);
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
    // Undeclared exception!
    try {
        settableAnyProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, (Object) null, ""JSON"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableAnyProperty"", e);
    }
}",""
"@SuppressWarnings(""unchecked"")
public void set(Object instance, Object propName, Object value) throws IOException {
    try {
        // if annotation in the field (only map is supported now)
        if (_setterIsField) {
            AnnotatedField field = (AnnotatedField) _setter;
            Map<Object, Object> val = (Map<Object, Object>) field.getValue(instance);
            /* 01-Jun-2016, tatu: At this point it is not quite clear what to do if
                 *    field is `null` -- we cannot necessarily count on zero-args
                 *    constructor except for a small set of types, so for now just
                 *    ignore if null. May need to figure out something better in future.
                 */
            if (val != null) {
                // add the property key and value
                val.put(propName, value);
            }
        } else {
            // note: cannot use 'setValue()' due to taking 2 args
            ((AnnotatedMethod) _setter).callOnWith(instance, propName, value);
        }
    } catch (Exception e) {
        _throwAsIOE(e, propName, value);
    }
}","public void test1212() throws Throwable {
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    // Undeclared exception!
    try {
        settableAnyProperty0.set((Object) null, (Object) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableAnyProperty"", e);
    }
}",""
"@SuppressWarnings(""unchecked"")
public void set(Object instance, Object propName, Object value) throws IOException {
    try {
        // if annotation in the field (only map is supported now)
        if (_setterIsField) {
            AnnotatedField field = (AnnotatedField) _setter;
            Map<Object, Object> val = (Map<Object, Object>) field.getValue(instance);
            /* 01-Jun-2016, tatu: At this point it is not quite clear what to do if
                 *    field is `null` -- we cannot necessarily count on zero-args
                 *    constructor except for a small set of types, so for now just
                 *    ignore if null. May need to figure out something better in future.
                 */
            if (val != null) {
                // add the property key and value
                val.put(propName, value);
            }
        } else {
            // note: cannot use 'setValue()' due to taking 2 args
            ((AnnotatedMethod) _setter).callOnWith(instance, propName, value);
        }
    } catch (Exception e) {
        _throwAsIOE(e, propName, value);
    }
}","public void test1313() throws Throwable {
    AnnotationMap annotationMap0 = new AnnotationMap();
    AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    // Undeclared exception!
    try {
        settableAnyProperty0.set(annotatedField0, annotatedField0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.AnnotatedField"", e);
    }
}",""
"/*
    /**********************************************************
    /* Helper methods
    /**********************************************************
     */
/**
 * @param e Exception to re-throw or wrap
 * @param propName Name of property (from Json input) to set
 * @param value Value of the property
 */
protected void _throwAsIOE(Exception e, Object propName, Object value) throws IOException {
    if (e instanceof IllegalArgumentException) {
        String actType = ClassUtil.classNameOf(value);
        StringBuilder msg = new StringBuilder(""Problem deserializing \""any\"" property '"").append(propName);
        msg.append(""' of class "" + getClassName() + "" (expected type: "").append(_type);
        msg.append(""; actual type: "").append(actType).append("")"");
        String origMsg = e.getMessage();
        if (origMsg != null) {
            msg.append("", problem: "").append(origMsg);
        } else {
            msg.append("" (no error message provided)"");
        }
        throw new JsonMappingException(null, msg.toString(), e);
    }
    ClassUtil.throwIfIOE(e);
    ClassUtil.throwIfRTE(e);
    // let's wrap the innermost problem
    Throwable t = ClassUtil.getRootCause(e);
    throw new JsonMappingException(null, t.getMessage(), t);
}","public void test1414() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
    Class<Integer> class0 = Integer.class;
    VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, ""] that wasn't previously reistered."", (JavaType) null);
    SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
    MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
    try {
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, typeBindings0, simpleObjectIdResolver0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Problem deserializing \""any\"" property '<>' of class java.lang.Integer (expected type: null; actual type: `com.fasterxml.jackson.annotation.SimpleObjectIdResolver`) (no error message provided)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableAnyProperty"", e);
    }
}",""
