focal_method,test_prefix,docstring
"// since 2.7
@Deprecated
protected IOException _throwAsIOE(Exception e) throws IOException {
    return _throwAsIOE((JsonParser) null, e);
}","public void test000() throws Throwable {
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
    SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
    try {
        creatorProperty0._throwAsIOE(sQLIntegrityConstraintViolationException0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // N/A
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
"public boolean hasValueTypeDeserializer() {
    return (_valueTypeDeserializer != null);
}","public void test011() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, ""Qs)qy4=JkUz*F##uh"", false, javaType0);
    Class<Integer> class0 = Integer.class;
    AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
    Boolean boolean0 = Boolean.valueOf(false);
    Integer integer0 = new Integer((-1707));
    PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, ""Qs)qy4=JkUz*F##uh"", integer0, ""Qs)qy4=JkUz*F##uh"");
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 2260, asExternalTypeDeserializer0, propertyMetadata0);
    int int0 = creatorProperty0.getPropertyIndex();
    assertTrue(creatorProperty0.hasValueTypeDeserializer());
}",""
"public int getPropertyIndex() {
    return _propertyIndex;
}","public void test012() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, ""Qs)qy4=JkUz*F##uh"", false, javaType0);
    Class<Integer> class0 = Integer.class;
    AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
    Boolean boolean0 = Boolean.valueOf(false);
    Integer integer0 = new Integer((-1707));
    PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, ""Qs)qy4=JkUz*F##uh"", integer0, ""Qs)qy4=JkUz*F##uh"");
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 2260, asExternalTypeDeserializer0, propertyMetadata0);
    int int0 = creatorProperty0.getPropertyIndex();
    assertEquals((-1), int0);
}","/**
 * Method for accessing unique index of this property; indexes are
 * assigned once all properties of a {@link BeanDeserializer} have
 * been collected.
 *
 * @return Index of this property
 */"
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test023() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    JsonFactory jsonFactory0 = new JsonFactory();
    byte[] byteArray0 = new byte[21];
    JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 215, jsonParserSequence0, propertyMetadata0);
    ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
    ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
    objectIdReferenceProperty0.markAsIgnorable();
    assertEquals(""#temporary-name"", objectIdReferenceProperty0.getName());
}",""
"public int getPropertyIndex() {
    return _propertyIndex;
}","public void test024() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    JsonFactory jsonFactory0 = new JsonFactory();
    byte[] byteArray0 = new byte[21];
    JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 215, jsonParserSequence0, propertyMetadata0);
    ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
    ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
    objectIdReferenceProperty0.markAsIgnorable();
    assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
}","/**
 * Method for accessing unique index of this property; indexes are
 * assigned once all properties of a {@link BeanDeserializer} have
 * been collected.
 *
 * @return Index of this property
 */"
"public int getPropertyIndex() {
    return _propertyIndex;
}","public void test035() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4, annotationMap0, propertyMetadata0);
    Class<Annotation> class0 = Annotation.class;
    creatorProperty0.getContextAnnotation(class0);
    assertEquals((-1), creatorProperty0.getPropertyIndex());
}","/**
 * Method for accessing unique index of this property; indexes are
 * assigned once all properties of a {@link BeanDeserializer} have
 * been collected.
 *
 * @return Index of this property
 */"
"/*
    /**********************************************************
    /* Accessors
    /**********************************************************
     */
protected Class<?> getDeclaringClass() {
    return getMember().getDeclaringClass();
}","public void test057() throws Throwable {
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
    // Undeclared exception!
    try {
        creatorProperty0.getDeclaringClass();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableBeanProperty"", e);
    }
}",""
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test068() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 5003, (Object) null, propertyMetadata0);
    creatorProperty0.setManagedReferenceName(""n-7n_$EA`wg.46sSiR"");
    assertEquals(""#temporary-name"", creatorProperty0.getName());
}",""
"public boolean hasValueTypeDeserializer() {
    return (_valueTypeDeserializer != null);
}","public void test079() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, ""$(b;F>*Q/v%sT"", false, javaType0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
    PropertyName propertyName1 = creatorProperty0.getWrapperName();
    assertTrue(creatorProperty0.hasValueTypeDeserializer());
}",""
"@Override
public PropertyName getWrapperName() {
    return _wrapperName;
}","public void test0710() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, ""$(b;F>*Q/v%sT"", false, javaType0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
    PropertyName propertyName1 = creatorProperty0.getWrapperName();
    assertNotNull(propertyName1);
}",""
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test0811() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1203, annotationMap0, propertyMetadata0);
    ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
    creatorProperty0.setObjectIdInfo(objectIdInfo0);
    assertEquals(""#temporary-name"", creatorProperty0.getName());
}",""
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test0912() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    JsonFactory jsonFactory0 = new JsonFactory();
    byte[] byteArray0 = new byte[21];
    JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 215, jsonParserSequence0, propertyMetadata0);
    ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
    ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
    boolean boolean0 = objectIdReferenceProperty0.isIgnorable();
    assertEquals(""#temporary-name"", objectIdReferenceProperty0.getName());
}",""
"public int getPropertyIndex() {
    return _propertyIndex;
}","public void test0913() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    JsonFactory jsonFactory0 = new JsonFactory();
    byte[] byteArray0 = new byte[21];
    JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 215, jsonParserSequence0, propertyMetadata0);
    ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
    ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
    boolean boolean0 = objectIdReferenceProperty0.isIgnorable();
    assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
}","/**
 * Method for accessing unique index of this property; indexes are
 * assigned once all properties of a {@link BeanDeserializer} have
 * been collected.
 *
 * @return Index of this property
 */"
"public boolean isIgnorable() {
    return false;
}","public void test0914() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    JsonFactory jsonFactory0 = new JsonFactory();
    byte[] byteArray0 = new byte[21];
    JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 215, jsonParserSequence0, propertyMetadata0);
    ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
    ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
    boolean boolean0 = objectIdReferenceProperty0.isIgnorable();
    assertFalse(boolean0);
}","/**
 * @since 2.9.4
 */"
"public boolean hasValueTypeDeserializer() {
    return (_valueTypeDeserializer != null);
}","public void test1015() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, ""Qs)qy4=JkUz*F##uh"", false, javaType0);
    Class<Integer> class0 = Integer.class;
    AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
    Boolean boolean0 = Boolean.valueOf(false);
    Integer integer0 = new Integer((-1707));
    PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, ""Qs)qy4=JkUz*F##uh"", integer0, ""Qs)qy4=JkUz*F##uh"");
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 2278, asExternalTypeDeserializer0, propertyMetadata0);
    creatorProperty0.getFullName();
    assertTrue(creatorProperty0.hasValueTypeDeserializer());
}",""
"public boolean hasValueTypeDeserializer() {
    return (_valueTypeDeserializer != null);
}","public void test1116() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""$(b;F>*Q/v%sT"", true, (JavaType) null);
    AnnotationMap annotationMap0 = new AnnotationMap();
    BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
    PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, javaType0, propertyMetadata0);
    creatorProperty0.getNullValueProvider();
    assertTrue(creatorProperty0.hasValueTypeDeserializer());
}",""
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test1318() throws Throwable {
    PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
    assertEquals("""", creatorProperty0.getName());
}",""
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test1419() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
    SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
    assertEquals(""#temporary-name"", settableBeanProperty0.getName());
}",""
"@Override
public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {
    if (_valueDeserializer == deser) {
        return this;
    }
    return new CreatorProperty(this, deser, _nullProvider);
}","public void test1420() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
    SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
    assertNotSame(settableBeanProperty0, creatorProperty0);
}",""
"public int getPropertyIndex() {
    return _propertyIndex;
}","public void test1421() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
    SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
    assertEquals((-1), settableBeanProperty0.getPropertyIndex());
}","/**
 * Method for accessing unique index of this property; indexes are
 * assigned once all properties of a {@link BeanDeserializer} have
 * been collected.
 *
 * @return Index of this property
 */"
"public SettableBeanProperty withSimpleName(String simpleName) {
    PropertyName n = (_propName == null) ? new PropertyName(simpleName) : _propName.withSimpleName(simpleName);
    return (n == _propName) ? this : withName(n);
}","public void test1522() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, propertyName0, propertyMetadata0);
    SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("""");
    assertSame(settableBeanProperty0, creatorProperty0);
}","/**
 * @since 2.3
 */"
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test1623() throws Throwable {
    PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1264), classNameIdResolver0, propertyMetadata0);
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
    SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName(""L? ViNj"");
    assertEquals(""L? ViNj"", settableBeanProperty0.getName());
}",""
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test1624() throws Throwable {
    PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1264), classNameIdResolver0, propertyMetadata0);
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
    SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName(""L? ViNj"");
    assertEquals(""@JsonUnwrapped"", creatorProperty0.getName());
}",""
"public int getPropertyIndex() {
    return _propertyIndex;
}","public void test1625() throws Throwable {
    PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1264), classNameIdResolver0, propertyMetadata0);
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
    SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName(""L? ViNj"");
    assertEquals((-1), creatorProperty1.getPropertyIndex());
}","/**
 * Method for accessing unique index of this property; indexes are
 * assigned once all properties of a {@link BeanDeserializer} have
 * been collected.
 *
 * @return Index of this property
 */"
"public SettableBeanProperty withSimpleName(String simpleName) {
    PropertyName n = (_propName == null) ? new PropertyName(simpleName) : _propName.withSimpleName(simpleName);
    return (n == _propName) ? this : withName(n);
}","public void test1626() throws Throwable {
    PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1264), classNameIdResolver0, propertyMetadata0);
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
    SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName(""L? ViNj"");
    assertNotSame(settableBeanProperty0, creatorProperty1);
}","/**
 * @since 2.3
 */"
"public void assignIndex(int index) {
    if (_propertyIndex != -1) {
        throw new IllegalStateException(""Property '"" + getName() + ""' already had index ("" + _propertyIndex + ""), trying to assign "" + index);
    }
    _propertyIndex = index;
}","public void test1727() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, ""$(b;F>*Q/v%sT"", true, javaType0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
    PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
    ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, objectIdGenerators_StringIdGenerator0, propertyMetadata0);
    creatorProperty0.assignIndex(0);
    // Undeclared exception!
    try {
        creatorProperty0.assignIndex(0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Property '' already had index (0), trying to assign 0
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableBeanProperty"", e);
    }
}","/**
 * Method used to assign index for property.
 */"
"public boolean hasValueTypeDeserializer() {
    return (_valueTypeDeserializer != null);
}","public void test1828() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""$(b;F>*Q/v%tsT"", true, (JavaType) null);
    AnnotationMap annotationMap0 = new AnnotationMap();
    BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
    PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 598, (Object) null, propertyMetadata0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
    creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl0);
    assertTrue(creatorProperty0.hasValueTypeDeserializer());
}",""
"@Override
public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor, SerializerProvider provider) throws JsonMappingException {
    if (isRequired()) {
        objectVisitor.property(this);
    } else {
        objectVisitor.optionalProperty(this);
    }
}","public void test1929() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, ""Qs)qy4=JkUz*F##uh"", true, javaType0);
    Class<Integer> class0 = Integer.class;
    AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 2260, asExternalTypeDeserializer0, propertyMetadata0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        creatorProperty0.depositSchemaProperty((JsonObjectFormatVisitor) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableBeanProperty"", e);
    }
}",""
"public boolean hasValueDeserializer() {
    return (_valueDeserializer != null) && (_valueDeserializer != MISSING_VALUE_DESERIALIZER);
}","public void test2030() throws Throwable {
    PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
    JsonDeserializer<JsonDeserializer<ShortNode>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<ShortNode>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
    boolean boolean0 = creatorProperty1.hasValueDeserializer();
    assertTrue(boolean0);
}",""
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test2031() throws Throwable {
    PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
    JsonDeserializer<JsonDeserializer<ShortNode>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<ShortNode>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
    boolean boolean0 = creatorProperty1.hasValueDeserializer();
    assertEquals(""@JsonUnwrapped"", creatorProperty1.getName());
}",""
"public int getPropertyIndex() {
    return _propertyIndex;
}","public void test2032() throws Throwable {
    PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
    JsonDeserializer<JsonDeserializer<ShortNode>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<ShortNode>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
    boolean boolean0 = creatorProperty1.hasValueDeserializer();
    assertEquals((-1), creatorProperty1.getPropertyIndex());
}","/**
 * Method for accessing unique index of this property; indexes are
 * assigned once all properties of a {@link BeanDeserializer} have
 * been collected.
 *
 * @return Index of this property
 */"
"public JsonDeserializer<Object> getValueDeserializer() {
    JsonDeserializer<Object> deser = _valueDeserializer;
    if (deser == MISSING_VALUE_DESERIALIZER) {
        return null;
    }
    return deser;
}","public void test2133() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
    JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
    assertNull(jsonDeserializer0);
}",""
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test2134() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
    JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
    assertEquals(""#temporary-name"", creatorProperty0.getName());
}",""
"public boolean visibleInView(Class<?> activeView) {
    return (_viewMatcher == null) || _viewMatcher.isVisibleForView(activeView);
}","public void test2235() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
    Class<TypeIdResolver> class0 = TypeIdResolver.class;
    boolean boolean0 = creatorProperty0.visibleInView(class0);
    assertTrue(boolean0);
}",""
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test2236() throws Throwable {
    PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-341), propertyMetadata0, propertyMetadata0);
    Class<TypeIdResolver> class0 = TypeIdResolver.class;
    boolean boolean0 = creatorProperty0.visibleInView(class0);
    assertEquals(""#temporary-name"", creatorProperty0.getName());
}",""
"public boolean hasViews() {
    return _viewMatcher != null;
}","public void test2337() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 272, (Object) null, propertyMetadata0);
    Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
    Class<Integer> class0 = Integer.class;
    classArray0[0] = class0;
    classArray0[1] = class0;
    classArray0[2] = class0;
    classArray0[3] = classArray0[1];
    classArray0[4] = class0;
    classArray0[5] = classArray0[4];
    creatorProperty0.setViews(classArray0);
    Class<PropertyName> class1 = PropertyName.class;
    boolean boolean0 = creatorProperty0.visibleInView(class1);
    assertTrue(creatorProperty0.hasViews());
}",""
"public boolean visibleInView(Class<?> activeView) {
    return (_viewMatcher == null) || _viewMatcher.isVisibleForView(activeView);
}","public void test2338() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 272, (Object) null, propertyMetadata0);
    Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
    Class<Integer> class0 = Integer.class;
    classArray0[0] = class0;
    classArray0[1] = class0;
    classArray0[2] = class0;
    classArray0[3] = classArray0[1];
    classArray0[4] = class0;
    classArray0[5] = classArray0[4];
    creatorProperty0.setViews(classArray0);
    Class<PropertyName> class1 = PropertyName.class;
    boolean boolean0 = creatorProperty0.visibleInView(class1);
    assertFalse(boolean0);
}",""
"public boolean hasViews() {
    return _viewMatcher != null;
}","public void test2439() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    Object object0 = new Object();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-756), object0, propertyMetadata0);
    Class<ObjectIdResolver>[] classArray0 = (Class<ObjectIdResolver>[]) Array.newInstance(Class.class, 7);
    Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
    classArray0[0] = class0;
    creatorProperty0.setViews(classArray0);
    Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
    boolean boolean0 = creatorProperty0.visibleInView(class1);
    assertTrue(creatorProperty0.hasViews());
}",""
"public boolean visibleInView(Class<?> activeView) {
    return (_viewMatcher == null) || _viewMatcher.isVisibleForView(activeView);
}","public void test2440() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    Object object0 = new Object();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-756), object0, propertyMetadata0);
    Class<ObjectIdResolver>[] classArray0 = (Class<ObjectIdResolver>[]) Array.newInstance(Class.class, 7);
    Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
    classArray0[0] = class0;
    creatorProperty0.setViews(classArray0);
    Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
    boolean boolean0 = creatorProperty0.visibleInView(class1);
    assertTrue(boolean0);
}",""
"public boolean hasViews() {
    return _viewMatcher != null;
}","public void test2541() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
    AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 2260, propertyName0, propertyMetadata0);
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
    ViewMatcher viewMatcher0 = new ViewMatcher();
    creatorProperty1._viewMatcher = viewMatcher0;
    boolean boolean0 = creatorProperty1.hasViews();
    assertTrue(boolean0);
}",""
"public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
    if (p.hasToken(JsonToken.VALUE_NULL)) {
        return _nullProvider.getNullValue(ctxt);
    }
    if (_valueTypeDeserializer != null) {
        return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);
    }
    // 04-May-2018, tatu: [databind#2023] Coercion from String (mostly) can give null
    Object value = _valueDeserializer.deserialize(p, ctxt);
    if (value == null) {
        value = _nullProvider.getNullValue(ctxt);
    }
    return value;
}","public void test2642() throws Throwable {
    PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    JsonFactory jsonFactory0 = new JsonFactory();
    byte[] byteArray0 = new byte[2];
    JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, ""JSON"", false, javaType0);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 637, asWrapperTypeDeserializer0, propertyMetadata0);
    // Undeclared exception!
    try {
        creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer"", e);
    }
}","/**
 *  This method is needed by some specialized bean deserializers,
 *  and also called by some {@link #deserializeAndSet} implementations.
 * <p>
 *  Pre-condition is that passed parser must point to the first token
 *  that should be consumed to produce the value (the only value for
 *  scalars, multiple for Objects and Arrays).
 * <p>
 *  Note that this method is final for performance reasons: to override
 *  functionality you must override other methods that call this method;
 *  this method should also not be called directly unless you really know
 *  what you are doing (and probably not even then).
 */"
"public boolean hasValueDeserializer() {
    return (_valueDeserializer != null) && (_valueDeserializer != MISSING_VALUE_DESERIALIZER);
}","public void test2743() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
    JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    doReturn(javaType0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
    assertTrue(creatorProperty1.hasValueDeserializer());
}",""
"public int getPropertyIndex() {
    return _propertyIndex;
}","public void test2744() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
    JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    doReturn(javaType0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
    Object object0 = creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
    assertEquals((-1), creatorProperty1.getPropertyIndex());
}","/**
 * Method for accessing unique index of this property; indexes are
 * assigned once all properties of a {@link BeanDeserializer} have
 * been collected.
 *
 * @return Index of this property
 */"
"public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
    if (p.hasToken(JsonToken.VALUE_NULL)) {
        return _nullProvider.getNullValue(ctxt);
    }
    if (_valueTypeDeserializer != null) {
        return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);
    }
    // 04-May-2018, tatu: [databind#2023] Coercion from String (mostly) can give null
    Object value = _valueDeserializer.deserialize(p, ctxt);
    if (value == null) {
        value = _nullProvider.getNullValue(ctxt);
    }
    return value;
}","public void test2745() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
    JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    doReturn(javaType0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
    Object object0 = creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
    assertNotNull(object0);
}","/**
 *  This method is needed by some specialized bean deserializers,
 *  and also called by some {@link #deserializeAndSet} implementations.
 * <p>
 *  Pre-condition is that passed parser must point to the first token
 *  that should be consumed to produce the value (the only value for
 *  scalars, multiple for Objects and Arrays).
 * <p>
 *  Note that this method is final for performance reasons: to override
 *  functionality you must override other methods that call this method;
 *  this method should also not be called directly unless you really know
 *  what you are doing (and probably not even then).
 */"
"public int getPropertyIndex() {
    return _propertyIndex;
}","public void test2846() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
    JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
    doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
    creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
    assertEquals((-1), creatorProperty1.getPropertyIndex());
}","/**
 * Method for accessing unique index of this property; indexes are
 * assigned once all properties of a {@link BeanDeserializer} have
 * been collected.
 *
 * @return Index of this property
 */"
"public final Object deserializeWith(JsonParser p, DeserializationContext ctxt, Object toUpdate) throws IOException {
    // 20-Oct-2016, tatu: Not 100% sure what to do; probably best to simply return
    //   null value and let caller decide what to do.
    if (p.hasToken(JsonToken.VALUE_NULL)) {
        // ... except for ""skip nulls"" case which should just do that:
        if (NullsConstantProvider.isSkipper(_nullProvider)) {
            return toUpdate;
        }
        return _nullProvider.getNullValue(ctxt);
    }
    // 20-Oct-2016, tatu: Also tricky -- for now, report an error
    if (_valueTypeDeserializer != null) {
        ctxt.reportBadDefinition(getType(), String.format(""Cannot merge polymorphic property '%s'"", getName()));
        //            return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);
    }
    // 04-May-2018, tatu: [databind#2023] Coercion from String (mostly) can give null
    Object value = _valueDeserializer.deserialize(p, ctxt, toUpdate);
    if (value == null) {
        if (NullsConstantProvider.isSkipper(_nullProvider)) {
            return toUpdate;
        }
        value = _nullProvider.getNullValue(ctxt);
    }
    return value;
}","public void test2947() throws Throwable {
    PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    JsonFactory jsonFactory0 = new JsonFactory();
    byte[] byteArray0 = new byte[0];
    JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
    AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, classNameIdResolver0, """", true, javaType0);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, jsonParser0, propertyMetadata0);
    // Undeclared exception!
    try {
        creatorProperty0.deserializeWith(jsonParser0, (DeserializationContext) null, jsonParser0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableBeanProperty"", e);
    }
}","/**
 * @since 2.9
 */"
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test3048() throws Throwable {
    PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    JsonFactory jsonFactory0 = new JsonFactory();
    byte[] byteArray0 = new byte[41];
    JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3023), propertyMetadata0, propertyMetadata0);
    Nulls nulls0 = Nulls.AS_EMPTY;
    JsonDeserializer<Nulls> jsonDeserializer0 = (JsonDeserializer<Nulls>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    doReturn(nulls0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.annotation.Nulls.class));
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
    creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
    assertEquals(""@JsonUnwrapped"", creatorProperty1.getName());
}",""
"public int getPropertyIndex() {
    return _propertyIndex;
}","public void test3049() throws Throwable {
    PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    AnnotationMap annotationMap0 = new AnnotationMap();
    JsonFactory jsonFactory0 = new JsonFactory();
    byte[] byteArray0 = new byte[41];
    JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3023), propertyMetadata0, propertyMetadata0);
    Nulls nulls0 = Nulls.AS_EMPTY;
    JsonDeserializer<Nulls> jsonDeserializer0 = (JsonDeserializer<Nulls>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    doReturn(nulls0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.annotation.Nulls.class));
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
    creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
    assertEquals((-1), creatorProperty1.getPropertyIndex());
}","/**
 * Method for accessing unique index of this property; indexes are
 * assigned once all properties of a {@link BeanDeserializer} have
 * been collected.
 *
 * @return Index of this property
 */"
"public final Object deserializeWith(JsonParser p, DeserializationContext ctxt, Object toUpdate) throws IOException {
    // 20-Oct-2016, tatu: Not 100% sure what to do; probably best to simply return
    //   null value and let caller decide what to do.
    if (p.hasToken(JsonToken.VALUE_NULL)) {
        // ... except for ""skip nulls"" case which should just do that:
        if (NullsConstantProvider.isSkipper(_nullProvider)) {
            return toUpdate;
        }
        return _nullProvider.getNullValue(ctxt);
    }
    // 20-Oct-2016, tatu: Also tricky -- for now, report an error
    if (_valueTypeDeserializer != null) {
        ctxt.reportBadDefinition(getType(), String.format(""Cannot merge polymorphic property '%s'"", getName()));
        //            return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);
    }
    // 04-May-2018, tatu: [databind#2023] Coercion from String (mostly) can give null
    Object value = _valueDeserializer.deserialize(p, ctxt, toUpdate);
    if (value == null) {
        if (NullsConstantProvider.isSkipper(_nullProvider)) {
            return toUpdate;
        }
        value = _nullProvider.getNullValue(ctxt);
    }
    return value;
}","public void test3150() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
    JsonDeserializer<ShortNode> jsonDeserializer0 = (JsonDeserializer<ShortNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.node.ShortNode.class));
    doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
    Object object0 = creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, propertyMetadata0);
    assertNull(object0);
}","/**
 * @since 2.9
 */"
"public int getPropertyIndex() {
    return _propertyIndex;
}","public void test3151() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    JavaType javaType0 = TypeFactory.unknownType();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    AnnotationMap annotationMap0 = new AnnotationMap();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
    JsonDeserializer<ShortNode> jsonDeserializer0 = (JsonDeserializer<ShortNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.node.ShortNode.class));
    doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
    CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
    Object object0 = creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, propertyMetadata0);
    assertEquals((-1), creatorProperty1.getPropertyIndex());
}","/**
 * Method for accessing unique index of this property; indexes are
 * assigned once all properties of a {@link BeanDeserializer} have
 * been collected.
 *
 * @return Index of this property
 */"
