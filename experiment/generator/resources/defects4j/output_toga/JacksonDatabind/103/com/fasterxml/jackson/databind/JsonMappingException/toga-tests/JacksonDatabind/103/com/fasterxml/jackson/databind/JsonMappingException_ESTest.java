/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 08:04:59 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import java.sql.BatchUpdateException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLTransientException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        jsonMappingException_Reference0.setIndex(3296);
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference) jsonMappingException_Reference0.writeReplace();
        jsonMappingException_Reference1.getIndex();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
        jsonMappingException_Reference0.getFrom();
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        jsonMappingException_Reference0.setFieldName("");
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        jsonMappingException_Reference0.setDescription("H*qir\"CH8!!Jf");
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        int[] intArray0 = new int[0];
        BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(batchUpdateException0, "READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE");
        String string0 = jsonMappingException_Reference0.getFieldName();
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        int[] intArray0 = new int[0];
        BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(batchUpdateException0, "READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE");
        String string0 = jsonMappingException_Reference0.getFieldName();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        int int0 = jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
        String string0 = jsonMappingException0.getPathReference();
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
        String string0 = jsonMappingException0.getPathReference();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, (-383));
        jsonMappingException0.prependPath((Object) sQLFeatureNotSupportedException0, 32767);
        sQLFeatureNotSupportedException0.getErrorCode();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException(">$", (JsonLocation) null, (Throwable) null);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "~w8E\"");
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
        ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "JSON", (Throwable) sQLFeatureNotSupportedException0);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        JsonMappingException.from((DeserializationContext) null, "&5z+k2$fC7dPu");
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(": ", "[ObjectId: key=%s, type=%s, scope=%s]", 0);
        JsonMappingException jsonMappingException0 = new JsonMappingException("f>gEi)<r?}\"", sQLIntegrityConstraintViolationException0);
        Object object0 = jsonMappingException0.getProcessor();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        SQLException sQLException0 = new SQLException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) sQLException0, 3406);
        JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) jsonMappingException0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "(@dFf}akv>", (Throwable) sQLFeatureNotSupportedException0);
        String string0 = jsonMappingException0._buildMessage();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        JsonMappingException.from((SerializerProvider) null, "");
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "int", (Throwable) sQLFeatureNotSupportedException0);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, (-380));
        String string0 = jsonMappingException0.toString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, (-380));
        String string0 = jsonMappingException0.toString();
        String string1 = jsonMappingException0._buildMessage();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, 604);
        jsonMappingException0.prependPath((Object) sQLFeatureNotSupportedException0, "yTS=>e_RS{X?");
        String string0 = jsonMappingException0._buildMessage();
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, "MvjR*`|4bmC");
        assertNotNull(jsonMappingException0);
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException("%lh5B", (JsonLocation) null);
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "", (JsonLocation) null);
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, 700);
        String string0 = jsonMappingException0.getLocalizedMessage();
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, 14);
        JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        Object object0 = new Object();
        JsonMappingException.Reference jsonMappingException_Reference0 = null;
        jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, (String) null);
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        Class<String> class0 = String.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<JsonParserSequence> class1 = JsonParserSequence.class;
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "{pl`YSkubS=wnguZU)", "{pl`YSkubS=wnguZU)");
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
        jsonMappingException_Reference0.getIndex();
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        Class<String> class0 = String.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<JsonParserSequence> class1 = JsonParserSequence.class;
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "{pl`YSkubS=wnguZU)", "{pl`YSkubS=wnguZU)");
        JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
        String string0 = jsonMappingException0.getPathReference();
    }

    @Test(timeout = 4000)
    public void test2731() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "Unexpected IOException (of type %s): %s");
        assertNotNull(jsonMappingException0);
    }

    @Test(timeout = 4000)
    public void test2832() throws Throwable {
        SQLTransientException sQLTransientException0 = new SQLTransientException("");
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLTransientException0, 676);
        assertNotNull(jsonMappingException0);
    }

    @Test(timeout = 4000)
    public void test2933() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        SQLTransientException sQLTransientException0 = new SQLTransientException(sQLFeatureNotSupportedException0);
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLFeatureNotSupportedException0, 20);
        assertNotNull(jsonMappingException0);
    }

    @Test(timeout = 4000)
    public void test3034() throws Throwable {
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, 115);
        List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test3135() throws Throwable {
        JsonMappingException jsonMappingException0 = new JsonMappingException("Cannot use Object Id with Builder-based deserialization <typI ");
        List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test3236() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<String> class0 = String.class;
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "{pl`YSkubS=wnguZU)", "READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE");
        String string0 = jsonMappingException0.getPathReference();
    }
}
