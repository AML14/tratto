/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 08:25:05 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.AtomicBooleanDeserializer;
import com.fasterxml.jackson.databind.deser.std.DateDeserializers;
import com.fasterxml.jackson.databind.deser.std.NumberDeserializers;
import com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringDeserializer;
import com.fasterxml.jackson.databind.deser.std.UUIDDeserializer;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdDeserializer_ESTest extends StdDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StdDelegatingDeserializer<Class<InputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Class<InputStream>>((Converter<?, Class<InputStream>>) null);
        stdDelegatingDeserializer0._parseLongPrimitive((DeserializationContext) null, "JSON");
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Converter<Calendar, BeanDeserializer> converter0 = (Converter<Calendar, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
        StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
        boolean boolean0 = stdDelegatingDeserializer0._hasTextualNull("LP!Pv+yBA)Q&3x,pb9");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Converter<DecimalNode, LinkedList<Calendar>> converter0 = (Converter<DecimalNode, LinkedList<Calendar>>) mock(Converter.class, new ViolatedAssumptionAnswer());
        StdDelegatingDeserializer<LinkedList<Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<Calendar>>(converter0);
        StdDelegatingDeserializer<LinkedList<Calendar>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<Calendar>>(stdDelegatingDeserializer0);
        stdDelegatingDeserializer1.equals((Object) stdDelegatingDeserializer0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
        double double0 = numberDeserializers_FloatDeserializer0._parseDoublePrimitive((DeserializationContext) null, "NaN");
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        uUIDDeserializer0._verifyEndArrayForSingle(jsonParser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
        primitiveArrayDeserializers_BooleanDeser0._failDoubleToIntCoercion((JsonParser) null, (DeserializationContext) null, "INF");
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Converter<BeanDeserializer, Date> converter0 = (Converter<BeanDeserializer, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
        StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
        Class<?> class0 = stdDelegatingDeserializer0.getValueClass();
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StdDelegatingDeserializer<Class<InputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Class<InputStream>>((Converter<?, Class<InputStream>>) null);
        boolean boolean0 = stdDelegatingDeserializer0.isDefaultKeyDeserializer((KeyDeserializer) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = new NumberDeserializers.NumberDeserializer();
        PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
        boolean boolean0 = primitiveArrayDeserializers_IntDeser0.isDefaultDeserializer(numberDeserializers_NumberDeserializer0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        StdDelegatingDeserializer<DataInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DataInputStream>((Converter<?, DataInputStream>) null);
        JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
        stdDelegatingDeserializer0._parseBooleanPrimitive(jsonParser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AtomicBooleanDeserializer atomicBooleanDeserializer0 = new AtomicBooleanDeserializer();
        atomicBooleanDeserializer0._parseBytePrimitive(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
        numberDeserializers_FloatDeserializer0._parseIntPrimitive((DeserializationContext) null, "a/p9]>uL");
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
        numberDeserializers_FloatDeserializer0._parseIntPrimitive((DeserializationContext) null, "2.2250738585072012e-308");
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
        JsonFactory jsonFactory0 = new JsonFactory();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonParser jsonParser0 = jsonFactory0.createParser("com.fasterxml.jackson.databind.deser.std.DateDeserializers$TimestampDeserializer");
        primitiveArrayDeserializers_LongDeser0.handleSingleElementUnwrapped(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
        numberDeserializers_ByteDeserializer0._parseFloatPrimitive(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
        float float0 = numberDeserializers_FloatDeserializer0._parseFloatPrimitive((DeserializationContext) null, "-INF");
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
        numberDeserializers_IntegerDeserializer0._parseFloatPrimitive((DeserializationContext) null, "IUz");
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
        float float0 = numberDeserializers_IntegerDeserializer0._parseFloatPrimitive((DeserializationContext) null, "NaN");
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
        numberDeserializers_IntegerDeserializer0._parseFloatPrimitive((DeserializationContext) null, "MIN");
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
        float float0 = numberDeserializers_IntegerDeserializer0._parseFloatPrimitive((DeserializationContext) null, "INF");
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
        numberDeserializers_IntegerDeserializer0._parseFloatPrimitive((DeserializationContext) null, "NF");
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        numberDeserializers_IntegerDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "-N8V*1?cG/");
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
        numberDeserializers_ShortDeserializer0._parseDoublePrimitive(jsonParser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
        double double0 = numberDeserializers_FloatDeserializer0._parseDoublePrimitive((DeserializationContext) null, "-Infinity");
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        double double0 = numberDeserializers_FloatDeserializer0._parseDoublePrimitive(deserializationContext0, "Infinity");
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        numberDeserializers_FloatDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "IxbM@u_BM$G/RU/8");
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
        numberDeserializers_FloatDeserializer0._parseDoublePrimitive((DeserializationContext) null, "Not a subtype");
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        numberDeserializers_FloatDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "-N8V*1?cG/");
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        StdDelegatingDeserializer<DecimalNode> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DecimalNode>((Converter<?, DecimalNode>) null);
        stdDelegatingDeserializer0._parseDate(jsonParser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
        stdDelegatingDeserializer0._parseDateFromArray((JsonParser) null, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.primitiveInstance;
        numberDeserializers_ByteDeserializer0._parseDate("O", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
        Date date0 = dateDeserializers_CalendarDeserializer0._parseDate("", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        double double0 = numberDeserializers_FloatDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "2.2250738585072012e-308");
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
        uUIDDeserializer0._deserializeFromEmpty(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        StringDeserializer stringDeserializer0 = new StringDeserializer();
        Date date0 = stringDeserializer0._parseDate("null", defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
        numberDeserializers_FloatDeserializer0._deserializeFromArray((JsonParser) null, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        StdDelegatingDeserializer<DataInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DataInputStream>((Converter<?, DataInputStream>) null);
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        stdDelegatingDeserializer0._deserializeWrappedValue(jsonParser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
        stdDelegatingDeserializer0._coerceIntegral((JsonParser) null, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
        Object object0 = numberDeserializers_FloatDeserializer0._coerceNullToken((DeserializationContext) null, false);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
        numberDeserializers_ByteDeserializer0._coerceNullToken((DeserializationContext) null, true);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
        primitiveArrayDeserializers_DoubleDeser0._verifyNullForPrimitive(defaultDeserializationContext_Impl0);
        primitiveArrayDeserializers_DoubleDeser0.getEmptyAccessPattern();
        assertNotNull(primitiveArrayDeserializers_DoubleDeser0.getEmptyAccessPattern());
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
        uUIDDeserializer0._reportFailedNullCoerce((DeserializationContext) null, false, serializationFeature0, (String) null);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.primitiveInstance;
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        numberDeserializers_ByteDeserializer0._reportFailedNullCoerce(defaultDeserializationContext_Impl0, true, jsonFactory_Feature0, "JSON");
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
        String string0 = primitiveArrayDeserializers_DoubleDeser0._coercedTypeDesc();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
        boolean boolean0 = numberDeserializers_IntegerDeserializer0._isIntNumber("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
        boolean boolean0 = numberDeserializers_IntegerDeserializer0._isIntNumber("+FWMt60F}c@");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
        boolean boolean0 = numberDeserializers_IntegerDeserializer0._isIntNumber("-Infinity");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
        boolean boolean0 = numberDeserializers_IntegerDeserializer0._isIntNumber("1%");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        NullValueProvider nullValueProvider0 = numberDeserializers_FloatDeserializer0.findValueNullProvider((DeserializationContext) null, (SettableBeanProperty) null, propertyMetadata0);
        assertNotNull(nullValueProvider0);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        Converter<DataInputStream, BuilderBasedDeserializer> converter0 = (Converter<DataInputStream, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
        StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0);
        DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
        StdDelegatingDeserializer stdDelegatingDeserializer1 = (StdDelegatingDeserializer) dateDeserializers_CalendarDeserializer0.findContentNullProvider((DeserializationContext) null, (BeanProperty) null, stdDelegatingDeserializer0);
        stdDelegatingDeserializer1.isCachable();
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
        Converter<Calendar, DataInputStream> converter0 = (Converter<Calendar, DataInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
        StdDelegatingDeserializer<DataInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DataInputStream>(converter0);
        Nulls nulls0 = Nulls.FAIL;
        stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, dateDeserializers_CalendarDeserializer0);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
        Converter<Calendar, DataInputStream> converter0 = (Converter<Calendar, DataInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
        StdDelegatingDeserializer<DataInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DataInputStream>(converter0);
        Nulls nulls0 = Nulls.SKIP;
        NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, dateDeserializers_CalendarDeserializer0);
        nullValueProvider0.getNullAccessPattern();
        assertNotNull(nullValueProvider0.getNullAccessPattern());
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
        Integer integer0 = new Integer((-3160));
        stdDelegatingDeserializer0.handleUnknownProperty((JsonParser) null, defaultDeserializationContext_Impl0, integer0, ".l 8RH?7<'Nt");
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>((Converter<?, Boolean>) null);
        stdDelegatingDeserializer0.handleUnknownProperty(jsonParser0, defaultDeserializationContext_Impl0, (Object) null, "-bmJ:jc/ZC5");
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        Double double0 = new Double(0.0);
        boolean boolean0 = StdDeserializer._neitherNull(double0, (Object) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        StringDeserializer stringDeserializer0 = StringDeserializer.instance;
        boolean boolean0 = stringDeserializer0._byteOverflow((-438));
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        StringDeserializer stringDeserializer0 = StringDeserializer.instance;
        boolean boolean0 = stringDeserializer0._byteOverflow((-2));
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
        boolean boolean0 = numberDeserializers_FloatDeserializer0._byteOverflow(412);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        Converter<DecimalNode, BuilderBasedDeserializer> converter0 = (Converter<DecimalNode, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
        StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0);
        boolean boolean0 = stdDelegatingDeserializer0._shortOverflow((-2147483632));
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        Converter<DecimalNode, LinkedList<Calendar>> converter0 = (Converter<DecimalNode, LinkedList<Calendar>>) mock(Converter.class, new ViolatedAssumptionAnswer());
        StdDelegatingDeserializer<LinkedList<Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<Calendar>>(converter0);
        boolean boolean0 = stdDelegatingDeserializer0._shortOverflow(Integer.MAX_VALUE);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
        boolean boolean0 = stdDelegatingDeserializer0._shortOverflow(2700);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
        boolean boolean0 = stdDelegatingDeserializer0._intOverflow((-9223372036854775808L));
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>((Converter<?, Integer>) null);
        StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<Object, BuilderBasedDeserializer>) null, (JavaType) null, stdDelegatingDeserializer0);
        boolean boolean0 = stdDelegatingDeserializer1._intOverflow(2615);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        Converter<Double, BuilderBasedDeserializer> converter0 = (Converter<Double, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
        StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0);
        boolean boolean0 = stdDelegatingDeserializer0._intOverflow(9223372036854775807L);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>((Converter<?, Boolean>) null);
        Integer integer0 = new Integer((-319));
        Number number0 = stdDelegatingDeserializer0._nonNullNumber(integer0);
        assertEquals(1, number0);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>((Converter<?, Boolean>) null);
        Number number0 = stdDelegatingDeserializer0._nonNullNumber((Number) null);
        assertEquals(1, number0);
    }
}
