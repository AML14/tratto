project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    // Undeclared exception!
    try {
        ClassUtil.checkAndFixAccess((Member) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.util.ClassUtil"", e);
    }
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
    // Undeclared exception!
    try {
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.util.ClassUtil"", e);
    }
}",0,
project,0,test0044,"public void test0044() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-1514));
    DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
    BatchUpdateException batchUpdateException0 = new BatchUpdateException();
    // Undeclared exception!
    try {
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) batchUpdateException0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.sql.BatchUpdateException
        //
        verifyException(""com.fasterxml.jackson.databind.util.ClassUtil"", e);
    }
}",1,
project,0,test0055,"public void test0055() throws Throwable {
    ClassUtil classUtil0 = new ClassUtil();
    String string0 = ClassUtil.quotedOr(classUtil0, ""4?7+a&bK'Z;A]vg~V[2"");
    assertNotNull(string0);
}",0,
project,0,test0077,"public void test0077() throws Throwable {
    Class<AccessibleObject> class0 = AccessibleObject.class;
    try {
        ClassUtil.findConstructor(class0, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
        //
        verifyException(""com.fasterxml.jackson.databind.util.ClassUtil"", e);
    }
}",0,
project,0,test0088,"public void test0088() throws Throwable {
    SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""2p#.X}#J)j )G"");
    Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
    assertSame(throwable0, sQLIntegrityConstraintViolationException0);
}",0,
project,0,test0099,"public void test0099() throws Throwable {
    Class<Error> class0 = Error.class;
    Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
    assertNotNull(constructor0);
}",0,assertNotNull(constructor0)
project,0,test02021,"public void test02021() throws Throwable {
    PlaceholderForType placeholderForType0 = new PlaceholderForType(129);
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
    assertNotNull(objectReader0);
}",0,
project,0,test02122,"public void test02122() throws Throwable {
    Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
    String string0 = ClassUtil.canBeABeanType(class0);
    assertNotNull(string0);
}",0,
project,0,test02224,"public void test02224() throws Throwable {
    Class<Integer> class0 = Integer.TYPE;
    String string0 = ClassUtil.canBeABeanType(class0);
    assertNotNull(string0);
}",0,
project,0,test02326,"public void test02326() throws Throwable {
    Class<PlaceholderForType> class0 = PlaceholderForType.class;
    String string0 = ClassUtil.isLocalType(class0, false);
    assertNull(string0);
}",0,
project,0,test02427,"public void test02427() throws Throwable {
    Class<AccessPattern> class0 = AccessPattern.class;
    Class<?> class1 = ClassUtil.getOuterClass(class0);
    assertNull(class1);
}",0,
project,0,test02730,"public void test02730() throws Throwable {
    Class<AccessibleObject> class0 = AccessibleObject.class;
    Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
    ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
    boolean boolean0 = ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test02832,"public void test02832() throws Throwable {
    Class<List> class0 = List.class;
    boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test02933,"public void test02933() throws Throwable {
    Class<IOException> class0 = IOException.class;
    boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test03034,"public void test03034() throws Throwable {
    Class<Void> class0 = Void.class;
    boolean boolean0 = ClassUtil.isBogusClass(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03135,"public void test03135() throws Throwable {
    Class<Void> class0 = Void.TYPE;
    boolean boolean0 = ClassUtil.isBogusClass(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03236,"public void test03236() throws Throwable {
    Class<NoClass> class0 = NoClass.class;
    boolean boolean0 = ClassUtil.isBogusClass(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03337,"public void test03337() throws Throwable {
    Class<JsonMappingException> class0 = JsonMappingException.class;
    boolean boolean0 = ClassUtil.isBogusClass(class0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test03438,"public void test03438() throws Throwable {
    Class<Void> class0 = Void.TYPE;
    String string0 = ClassUtil.isLocalType(class0, true);
    assertNull(string0);
}",1,
project,0,test03539,"public void test03539() throws Throwable {
    Class<Object> class0 = Object.class;
    boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test03640,"public void test03640() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayType> class0 = ArrayType.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    boolean boolean0 = ClassUtil.hasClass(arrayType0, class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03741,"public void test03741() throws Throwable {
    Class<Object> class0 = Object.class;
    boolean boolean0 = ClassUtil.hasClass(class0, class0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test03943,"public void test03943() throws Throwable {
    Class<Float> class0 = Float.class;
    SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
    MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLTransactionRollbackException0);
    // Undeclared exception!
    try {
        ClassUtil.verifyMustOverride(class0, mockRuntimeException0, (String) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Sub-class org.evosuite.runtime.mock.java.lang.MockRuntimeException (of class java.lang.Float) must override method 'null'
        //
        verifyException(""com.fasterxml.jackson.databind.util.ClassUtil"", e);
    }
}",1,
project,0,test04044,"public void test04044() throws Throwable {
    SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
    MockError mockError0 = new MockError(sQLInvalidAuthorizationSpecException0);
    // Undeclared exception!
    try {
        ClassUtil.throwAsIAE((Throwable) mockError0, ""NyLL"");
        fail(""Expecting exception: Error"");
    } catch (Error e) {
    }
}",0,
project,0,test04145,"public void test04145() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    MockFileWriter mockFileWriter0 = new MockFileWriter(""java.lang.Class@0000000001"", true);
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockFileWriter0);
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    Class<Boolean> class0 = Boolean.class;
    JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, ""JSON"", ""0dWyN22u"");
    try {
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Cannot deserialize Map key of type `java.lang.Boolean` from String \""JSON\"": 0dWyN22u
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidFormatException"", e);
    }
}",0,
project,0,test04246,"public void test04246() throws Throwable {
    SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
    SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
    Throwable throwable0 = ClassUtil.getRootCause(sQLDataException0);
    assertSame(sQLTransactionRollbackException0, throwable0);
}",0,
project,0,test04347,"public void test04347() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    MockIOException mockIOException0 = new MockIOException(""xY3uryV"");
    try {
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // xY3uryV
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",1,
project,0,test04448,"public void test04448() throws Throwable {
    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, ""#)63]v9"");
    try {
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // #)63]v9
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",1,
project,0,test04549,"public void test04549() throws Throwable {
    SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(""elementType"");
    // Undeclared exception!
    try {
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLSyntaxErrorException0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.sql.SQLSyntaxErrorException: elementType
        //
        verifyException(""com.fasterxml.jackson.databind.util.ClassUtil"", e);
    }
}",1,
project,0,test04650,"public void test04650() throws Throwable {
    Class<Object> class0 = Object.class;
    Object object0 = ClassUtil.createInstance(class0, false);
    assertNotNull(object0);
}",1,
project,0,test04751,"public void test04751() throws Throwable {
    Class<ArrayType> class0 = ArrayType.class;
    try {
        ClassUtil.createInstance(class0, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
        //
        verifyException(""com.fasterxml.jackson.databind.util.ClassUtil"", e);
    }
}",1,
project,0,test04953,"public void test04953() throws Throwable {
    Class<?> class0 = ClassUtil.classOf((Object) null);
    assertNull(class0);
}",0,
project,0,test05155,"public void test05155() throws Throwable {
    Class<?> class0 = ClassUtil.rawClass((JavaType) null);
    assertNull(class0);
}",0,
project,0,test05256,"public void test05256() throws Throwable {
    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""Wkk6Gf!BNw|Wa"", ""Wkk6Gf!BNw|Wa"");
    MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLFeatureNotSupportedException0);
    RuntimeException runtimeException0 = ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
    assertSame(runtimeException0, mockRuntimeException0);
}",0,
project,0,test05357,"public void test05357() throws Throwable {
    Character character0 = Character.valueOf('&');
    Character character1 = ClassUtil.nonNull((Character) null, character0);
    assertEquals('&', (char) character1);
}",0,
project,0,test05458,"public void test05458() throws Throwable {
    Class<Float> class0 = Float.class;
    String string0 = ClassUtil.nullOrToString(class0);
    assertNotNull(string0);
}",0,
project,0,test05559,"public void test05559() throws Throwable {
    String string0 = ClassUtil.nullOrToString((Object) null);
    assertNull(string0);
}",0,
project,0,test05660,"public void test05660() throws Throwable {
    String string0 = ClassUtil.nonNullString((String) null);
    assertEquals("""", string0);
}",0,
project,0,test05761,"public void test05761() throws Throwable {
    String string0 = ClassUtil.quotedOr((Object) null, ""3qrS?IGt"");
    assertEquals(""3qrS?IGt"", string0);
}",0,
project,0,test05862,"public void test05862() throws Throwable {
    Class<AccessPattern> class0 = AccessPattern.class;
    String string0 = ClassUtil.getClassDescription(class0);
    assertEquals(""`com.fasterxml.jackson.databind.util.AccessPattern`"", string0);
}",0,
project,0,test05963,"public void test05963() throws Throwable {
    String string0 = ClassUtil.getClassDescription((Object) null);
    assertEquals(""unknown"", string0);
}",0,
project,0,test06064,"public void test06064() throws Throwable {
    MockError mockError0 = new MockError();
    String string0 = ClassUtil.getClassDescription(mockError0);
    assertEquals(""`org.evosuite.runtime.mock.java.lang.MockError`"", string0);
}",0,
project,0,test06165,"public void test06165() throws Throwable {
    Class<Float> class0 = Float.class;
    String string0 = ClassUtil.classNameOf(class0);
    assertEquals(""`java.lang.Class`"", string0);
}",0,
project,0,test06266,"public void test06266() throws Throwable {
    String string0 = ClassUtil.classNameOf((Object) null);
    assertEquals(""[null]"", string0);
}",0,
project,0,test06367,"public void test06367() throws Throwable {
    String string0 = ClassUtil.nameOf((Class<?>) null);
    assertEquals(""[null]"", string0);
}",0,
project,0,test06570,"public void test06570() throws Throwable {
    Class<AccessibleObject> class0 = AccessibleObject.class;
    Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
    ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    PlaceholderForType placeholderForType0 = new PlaceholderForType((-10));
    ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, (TypeBindings) null, (Object) classUtil_Ctor0, (Object) class0);
    CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(arrayType0, placeholderForType0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
    Class<Object> class1 = Object.class;
    VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, ""org.hibernate.proxy.java.lang.reflect.AccessibleObject"", arrayType0);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, collectionLikeType0, propertyName0, virtualAnnotatedMember0, propertyMetadata0);
    String string0 = ClassUtil.nameOf((Named) beanProperty_Std0);
    assertEquals(""``"", string0);
}",0,
project,0,test06671,"public void test06671() throws Throwable {
    String string0 = ClassUtil.nameOf((Named) null);
    assertEquals(""[null]"", string0);
}",0,
project,0,test06772,"public void test06772() throws Throwable {
    String string0 = ClassUtil.backticked((String) null);
    assertEquals(""[null]"", string0);
}",0,
project,0,test06873,"public void test06873() throws Throwable {
    Class<Double> class0 = Double.TYPE;
    Object object0 = ClassUtil.defaultValue(class0);
    assertEquals(0.0, object0);
}",0,
project,0,test06974,"public void test06974() throws Throwable {
    Class<Integer> class0 = Integer.TYPE;
    Object object0 = ClassUtil.defaultValue(class0);
    assertEquals(0, object0);
}",0,
project,0,test07075,"public void test07075() throws Throwable {
    Class<Long> class0 = Long.TYPE;
    Object object0 = ClassUtil.defaultValue(class0);
    assertEquals(0L, object0);
}",0,
project,0,test07176,"public void test07176() throws Throwable {
    Class<Boolean> class0 = Boolean.TYPE;
    Object object0 = ClassUtil.defaultValue(class0);
    assertEquals(false, object0);
}",0,
project,0,test07277,"public void test07277() throws Throwable {
    Class<Character> class0 = Character.TYPE;
    Object object0 = ClassUtil.defaultValue(class0);
    assertEquals('\u0000', object0);
}",0,
project,0,test07378,"public void test07378() throws Throwable {
    Class<Float> class0 = Float.TYPE;
    Object object0 = ClassUtil.defaultValue(class0);
    assertEquals(0.0F, object0);
}",0,
project,0,test07479,"public void test07479() throws Throwable {
    Class<Byte> class0 = Byte.TYPE;
    Object object0 = ClassUtil.defaultValue(class0);
    assertEquals((byte) 0, object0);
}",0,
project,0,test07580,"public void test07580() throws Throwable {
    Class<Short> class0 = Short.TYPE;
    Object object0 = ClassUtil.defaultValue(class0);
    assertEquals((short) 0, object0);
}",0,
project,0,test07681,"public void test07681() throws Throwable {
    Class<Short> class0 = Short.class;
    // Undeclared exception!
    try {
        ClassUtil.defaultValue(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.lang.Short is not a primitive type
        //
        verifyException(""com.fasterxml.jackson.databind.util.ClassUtil"", e);
    }
}",0,
project,0,test08590,"public void test08590() throws Throwable {
    Class<NoClass> class0 = NoClass.class;
    // Undeclared exception!
    try {
        ClassUtil.wrapperType(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
        //
        verifyException(""com.fasterxml.jackson.databind.util.ClassUtil"", e);
    }
}",0,
project,0,test08691,"public void test08691() throws Throwable {
    Class<JsonMappingException> class0 = JsonMappingException.class;
    Class<?> class1 = ClassUtil.primitiveType(class0);
    assertNull(class1);
}",0,
project,0,test08893,"public void test08893() throws Throwable {
    Class<Integer> class0 = Integer.class;
    Class<?> class1 = ClassUtil.primitiveType(class0);
    assertNotNull(class1);
}",0,"assertEquals(class0, class1)"
project,0,test08996,"public void test08996() throws Throwable {
    Class<Long> class0 = Long.class;
    Class<?> class1 = ClassUtil.primitiveType(class0);
    assertNotNull(class1);
}",0,"assertEquals(class0, class1)"
project,0,test09097,"public void test09097() throws Throwable {
    Class<Boolean> class0 = Boolean.class;
    Class<?> class1 = ClassUtil.primitiveType(class0);
    assertNotNull(class1);
}",0,
project,0,test09199,"public void test09199() throws Throwable {
    Class<Double> class0 = Double.class;
    Class<?> class1 = ClassUtil.primitiveType(class0);
    assertNotNull(class1);
}",0,"assertEquals(class0, class1)"
project,0,test092102,"public void test092102() throws Throwable {
    Class<Float> class0 = Float.class;
    Class<?> class1 = ClassUtil.primitiveType(class0);
    assertNotNull(class1);
}",0,
project,0,test093104,"public void test093104() throws Throwable {
    Class<Byte> class0 = Byte.class;
    Class<?> class1 = ClassUtil.primitiveType(class0);
    assertNotNull(class1);
}",0,"assertEquals(class0, class1)"
project,0,test094106,"public void test094106() throws Throwable {
    Class<Short> class0 = Short.class;
    Class<?> class1 = ClassUtil.primitiveType(class0);
    assertNotNull(class1);
}",0,
project,0,test095108,"public void test095108() throws Throwable {
    Class<Character> class0 = Character.class;
    Class<?> class1 = ClassUtil.primitiveType(class0);
    assertNotNull(class1);
}",0,"assertEquals(class0, class1)"
project,0,test104117,"public void test104117() throws Throwable {
    boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test105118,"public void test105118() throws Throwable {
    PlaceholderForType placeholderForType0 = new PlaceholderForType(129);
    boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) placeholderForType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test106119,"public void test106119() throws Throwable {
    Class<Character> class0 = Character.TYPE;
    String string0 = ClassUtil.getPackageName(class0);
    assertNull(string0);
}",0,
project,0,test107120,"public void test107120() throws Throwable {
    Class<Annotation> class0 = Annotation.class;
    ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
    assertEquals(0, classUtil_CtorArray0.length);
}",0,
project,0,test108121,"public void test108121() throws Throwable {
    Class<Integer> class0 = Integer.TYPE;
    ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
    assertEquals(0, classUtil_CtorArray0.length);
}",0,
project,0,test109122,"public void test109122() throws Throwable {
    Class<CollectionType> class0 = CollectionType.class;
    Class<?> class1 = ClassUtil.getDeclaringClass(class0);
    assertNull(class1);
}",0,
project,0,test110123,"public void test110123() throws Throwable {
    Class<Object> class0 = Object.class;
    Class<?> class1 = ClassUtil.getDeclaringClass(class0);
    assertNull(class1);
}",0,
project,0,test111124,"public void test111124() throws Throwable {
    Class<Object> class0 = Object.class;
    Class<?> class1 = ClassUtil.getOuterClass(class0);
    assertNull(class1);
}",0,
