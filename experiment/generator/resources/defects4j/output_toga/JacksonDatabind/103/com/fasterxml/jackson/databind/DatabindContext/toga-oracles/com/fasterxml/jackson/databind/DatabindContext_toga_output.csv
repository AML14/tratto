project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Class<TypeNameIdResolver> class0 = TypeNameIdResolver.class;
    // Undeclared exception!
    try {
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, ""Ud}q5e_0$j<~2-Y-1(Y"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JavaType javaType0 = defaultSerializerProvider_Impl0.constructType((Type) null);
    assertNull(javaType0);
}",0,
project,0,test033,"public void test033() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    Class<String> class0 = String.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    JavaType javaType0 = serializerProvider0.constructSpecializedType(simpleType0, class0);
    assertFalse(javaType0.isArrayType());
}",0,assertTrue(javaType0.isArrayType())
project,0,test044,"public void test044() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
    TypeFactory typeFactory0 = serializerProvider0.getTypeFactory();
    JavaType javaType0 = typeFactory0.constructType((Type) class0);
    try {
        serializerProvider0.resolveSubType(javaType0, ""com.fasterxml.jackson.databind.type.MapType"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Could not resolve type id 'com.fasterxml.jackson.databind.type.MapType' as a subtype of [simple type, class com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator]: Not a subtype
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidTypeIdException"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        defaultSerializerProvider_Impl0.resolveSubType((JavaType) null, ""; expected type Converter or Class<Converter> instead"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",1,
project,0,test066,"public void test066() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    PlaceholderForType placeholderForType0 = new PlaceholderForType(1024);
    JavaType javaType0 = serializerProvider0.resolveSubType(placeholderForType0, ""com.fasterxml.jackson.databind.cfg.ConfigOverride$Empty"");
    assertFalse(javaType0.hasContentType());
}",0,assertFalse(javaType0.hasContentType())
project,0,test077,"public void test077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
    // Undeclared exception!
    try {
        serializerProvider0.objectIdGeneratorInstance((Annotated) null, objectIdInfo0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.util.ClassUtil"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
    ObjectIdResolver objectIdResolver0 = serializerProvider0.objectIdResolverInstance((Annotated) null, objectIdInfo0);
    assertNotNull(objectIdResolver0);
}",1,
project,0,test099,"public void test099() throws Throwable {
    Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        defaultSerializerProvider_Impl0.converterInstance((Annotated) null, class0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // AnnotationIntrospector returned Class com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator; expected Class<Converter>
        //
        verifyException(""com.fasterxml.jackson.databind.DatabindContext"", e);
    }
}",1,
project,0,test1010,"public void test1010() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Converter<Object, Object> converter0 = defaultSerializerProvider_Impl0.converterInstance((Annotated) null, (Object) null);
    assertNull(converter0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        defaultSerializerProvider_Impl0.converterInstance((Annotated) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // AnnotationIntrospector returned Converter definition of type com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl; expected type Converter or Class<Converter> instead
        //
        verifyException(""com.fasterxml.jackson.databind.DatabindContext"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    Class<Object> class0 = Object.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    // Undeclared exception!
    try {
        valueInstantiator_Base0.createUsingDelegate(deserializationContext0, class0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
    Object[] objectArray0 = new Object[2];
    try {
        serializerProvider0.reportMappingProblem(""9O.2e I00Lq.ir;{"", objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // 9O.2e I00Lq.ir;{
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    String string0 = ((DatabindContext) defaultSerializerProvider_Impl0)._quotedString(""No 'injectableValues' configured, cannot inject value with id [%s]"");
    assertEquals(""\""No 'injectableValues' configured, cannot inject value with id [%s]\"""", string0);
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
    String string0 = ((DatabindContext) defaultSerializerProvider_Impl0)._truncate((String) null);
    assertEquals("""", string0);
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    String string0 = ((DatabindContext) defaultSerializerProvider_Impl0)._quotedString((String) null);
    assertEquals(""[N/A]"", string0);
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException) defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, ""tSN${-$n0's<mlR[IFN"", (String) null);
    assertEquals(""tSN${-$n0's<mlR[IFN"", invalidTypeIdException0.getTypeId());
}",0,assertNotNull(invalidTypeIdException0.getTypeId())
project,0,test1818,"public void test1818() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProvider();
    String string0 = ((DatabindContext) defaultSerializerProvider_Impl0)._desc(""; expcted type Converter or Class<Converter> instead"");
    assertEquals(""; expcted type Converter or Class<Converter> instead"", string0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    String string0 = ((DatabindContext) defaultSerializerProvider_Impl0)._desc((String) null);
    assertEquals(""[N/A]"", string0);
}",0,
