/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 08:17:00 GMT 2024
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerCache;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.time.format.ResolverStyle;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DeserializerCache_ESTest extends DeserializerCache_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        int int0 = deserializerCache0.cachedDeserializersCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        Object object0 = deserializerCache0.writeReplace();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        deserializerCache0.flushCachedDeserializers();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
        ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        Class<SimpleModule> class0 = SimpleModule.class;
        ObjectReader objectReader0 = objectMapper1.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
        objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayNode> class0 = ArrayNode.class;
        Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
        objectMapper0.convertValue((Object) propertyAccessor0, (JavaType) collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.readerFor(class0);
        JavaType javaType0 = TypeFactory.unknownType();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
        boolean boolean0 = objectMapper0.canDeserialize(javaType0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
        Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(referenceType0, simpleType0);
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, simpleType0, simpleType0);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) mapLikeType0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
        Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(referenceType0, simpleType0);
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, simpleType0, simpleType0);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) mapLikeType0, atomicReference0);
        atomicReference0.toString();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        deserializerCache0.hasValueDeserializerFor(defaultDeserializationContext_Impl0, beanDeserializerFactory0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
        Class<JsonSerializer> class1 = JsonSerializer.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
        MapLikeType mapLikeType0 = mapType0.withContentValueHandler(objectMapper0);
        objectMapper0.canDeserialize((JavaType) mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        ObjectReader objectReader0 = objectMapper1.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<BooleanNode> class0 = BooleanNode.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        deserializerCache0._createDeserializer2(defaultDeserializationContext_Impl0, beanDeserializerFactory0, referenceType0, (BeanDescription) null);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<BigIntegerNode> class0 = BigIntegerNode.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) resolvedRecursiveType0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ResolverStyle> class0 = ResolverStyle.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<String> class1 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, (JavaType) null, (JavaType) null);
        deserializerCache0._createAndCacheValueDeserializer(defaultDeserializationContext_Impl0, beanDeserializerFactory0, mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        MapType mapType1 = mapType0.withKeyValueHandler(deserializerCache0);
        deserializerCache0.hasValueDeserializerFor(defaultDeserializationContext_Impl0, beanDeserializerFactory0, mapType1);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<BooleanNode> class0 = BooleanNode.class;
        Class<Module> class1 = Module.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class0);
        deserializerCache0._handleUnknownValueDeserializer(defaultDeserializationContext_Impl0, collectionLikeType0);
    }
}
