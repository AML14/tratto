/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 00:07:37 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NumberSerializers;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NumberSerializers_ESTest extends NumberSerializers_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
        JsonNode jsonNode0 = numberSerializers_FloatSerializer0.getSchema((SerializerProvider) null, (Type) null, false);
        jsonNode0.isLong();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        NumberSerializers numberSerializers0 = new NumberSerializers();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer();
        numberSerializers_IntegerSerializer0.serializeWithType((Object) null, (JsonGenerator) null, (SerializerProvider) null, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
        Float float0 = new Float((-1692.891F));
        numberSerializers_FloatSerializer0.serialize(float0, (JsonGenerator) null, (SerializerProvider) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        numberSerializers_LongSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        numberSerializers_LongSerializer0.isUnwrappingSerializer();
        assertFalse(numberSerializers_LongSerializer0.isUnwrappingSerializer());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = new NumberSerializers.IntLikeSerializer();
        NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        numberSerializers_LongSerializer0.serialize(numberSerializers_IntLikeSerializer0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = NumberSerializers.IntLikeSerializer.instance;
        Double double0 = new Double(0.0);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        numberSerializers_IntLikeSerializer0.serialize((Number) double0, (JsonGenerator) jsonGeneratorDelegate0, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = NumberSerializers.DoubleSerializer.instance;
        Object object0 = new Object();
        numberSerializers_DoubleSerializer0.serializeWithType(object0, jsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer();
        numberSerializers_DoubleSerializer0.usesObjectId();
        assertFalse(numberSerializers_DoubleSerializer0.usesObjectId());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = new NumberSerializers.ShortSerializer();
        Short short0 = new Short((short) 693);
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        numberSerializers_ShortSerializer0.serialize(short0, jsonGenerator0, (SerializerProvider) null);
        jsonGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        numberSerializers_FloatSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        numberSerializers_FloatSerializer0.isUnwrappingSerializer();
        assertFalse(numberSerializers_FloatSerializer0.isUnwrappingSerializer());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<?> jsonSerializer0 = numberSerializers_FloatSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        jsonSerializer0.usesObjectId();
        assertFalse(jsonSerializer0.usesObjectId());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        MockFile mockFile0 = new MockFile("JSON");
        objectMapper0.writeValue((File) mockFile0, (Object) mockFile0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = new NumberSerializers.ShortSerializer();
        PropertyName propertyName0 = new PropertyName("`sj<{9:");
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapLikeType0, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
        JsonSerializer<?> jsonSerializer0 = numberSerializers_ShortSerializer0.createContextual((SerializerProvider) null, beanProperty_Std0);
    }
}
