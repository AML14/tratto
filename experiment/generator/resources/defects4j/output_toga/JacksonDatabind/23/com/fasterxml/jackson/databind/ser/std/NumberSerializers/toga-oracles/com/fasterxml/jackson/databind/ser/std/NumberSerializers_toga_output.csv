project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
    JsonNode jsonNode0 = numberSerializers_FloatSerializer0.getSchema((SerializerProvider) null, (Type) null, false);
    assertFalse(jsonNode0.isLong());
}",0,
project,0,test022,"public void test022() throws Throwable {
    NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer();
    // Undeclared exception!
    try {
        numberSerializers_IntegerSerializer0.serializeWithType((Object) null, (JsonGenerator) null, (SerializerProvider) null, (TypeSerializer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
    Float float0 = new Float((-1692.891F));
    // Undeclared exception!
    try {
        numberSerializers_FloatSerializer0.serialize(float0, (JsonGenerator) null, (SerializerProvider) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerializer"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    numberSerializers_LongSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(numberSerializers_LongSerializer0.isUnwrappingSerializer());
}",0,assertFalse(numberSerializers_LongSerializer0.isUnwrappingSerializer())
project,0,test055,"public void test055() throws Throwable {
    NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = new NumberSerializers.IntLikeSerializer();
    NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializers_LongSerializer0.serialize(numberSerializers_IntLikeSerializer0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer cannot be cast to java.lang.Long
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$LongSerializer"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = NumberSerializers.IntLikeSerializer.instance;
    Double double0 = new Double(0.0);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializers_IntLikeSerializer0.serialize((Number) double0, (JsonGenerator) jsonGeneratorDelegate0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""JSON"");
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = NumberSerializers.DoubleSerializer.instance;
    Object object0 = new Object();
    // Undeclared exception!
    try {
        numberSerializers_DoubleSerializer0.serializeWithType(object0, jsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Object cannot be cast to java.lang.Double
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer();
    assertFalse(numberSerializers_DoubleSerializer0.usesObjectId());
}",0,assertFalse(numberSerializers_DoubleSerializer0.usesObjectId())
project,0,test1010,"public void test1010() throws Throwable {
    NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    numberSerializers_FloatSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(numberSerializers_FloatSerializer0.isUnwrappingSerializer());
}",0,assertFalse(numberSerializers_FloatSerializer0.isUnwrappingSerializer())
project,0,test1111,"public void test1111() throws Throwable {
    NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonSerializer<?> jsonSerializer0 = numberSerializers_FloatSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test1212,"public void test1212() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    MockFile mockFile0 = new MockFile(""JSON"");
    try {
        objectMapper0.writeValue((File) mockFile0, (Object) mockFile0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Loop has been executed more times than the allowed 10000 (through reference chain: org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""path\""])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
