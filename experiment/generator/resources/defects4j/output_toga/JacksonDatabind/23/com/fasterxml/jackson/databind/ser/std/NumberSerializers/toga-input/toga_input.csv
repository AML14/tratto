focal_method,test_prefix,docstring
"public boolean isLong() {
    return false;
}","public void test000() throws Throwable {
    NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
    JsonNode jsonNode0 = numberSerializers_FloatSerializer0.getSchema((SerializerProvider) null, (Type) null, false);
    assertFalse(jsonNode0.isLong());
}","/**
 * Method that can be used to check whether contained value
 * is a number represented as Java <code>long</code>.
 * Note, however, that even if this method returns false, it
 * is possible that conversion would be possible from other numeric
 * types -- to check if this is possible, use
 * {@link #canConvertToInt()} instead.
 *
 * @return True if the value contained by this node is stored as Java <code>long</code>
 */"
"@Override
public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {
    typeSer.writeTypePrefixForScalar(value, jgen);
    serialize(value, jgen, provider);
    typeSer.writeTypeSuffixForScalar(value, jgen);
}","public void test022() throws Throwable {
    NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer();
    // Undeclared exception!
    try {
        numberSerializers_IntegerSerializer0.serializeWithType((Object) null, (JsonGenerator) null, (SerializerProvider) null, (TypeSerializer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer"", e);
    }
}","/**
 * Default implementation will write type prefix, call regular serialization
 * method (since assumption is that value itself does not need JSON
 * Array or Object start/end markers), and then write type suffix.
 * This should work for most cases; some sub-classes may want to
 * change this behavior.
 */"
"/*
    /**********************************************************
    /* Serialization
    /**********************************************************
     */
@Override
public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider) throws IOException;","public void test033() throws Throwable {
    NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
    Float float0 = new Float((-1692.891F));
    // Undeclared exception!
    try {
        numberSerializers_FloatSerializer0.serialize(float0, (JsonGenerator) null, (SerializerProvider) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerializer"", e);
    }
}",""
"public boolean isUnwrappingSerializer() {
    return false;
}","public void test044() throws Throwable {
    NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    numberSerializers_LongSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(numberSerializers_LongSerializer0.isUnwrappingSerializer());
}","/**
 * Accessor for checking whether this serializer is an
 * ""unwrapping"" serializer; this is necessary to know since
 * it may also require caller to suppress writing of the
 * leading property name.
 */"
"/*
    /**********************************************************
    /* Serialization
    /**********************************************************
     */
@Override
public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider) throws IOException;","public void test055() throws Throwable {
    NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = new NumberSerializers.IntLikeSerializer();
    NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializers_LongSerializer0.serialize(numberSerializers_IntLikeSerializer0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer cannot be cast to java.lang.Long
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$LongSerializer"", e);
    }
}",""
"/*
    /**********************************************************
    /* Serialization
    /**********************************************************
     */
@Override
public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider) throws IOException;","public void test066() throws Throwable {
    NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = NumberSerializers.IntLikeSerializer.instance;
    Double double0 = new Double(0.0);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializers_IntLikeSerializer0.serialize((Number) double0, (JsonGenerator) jsonGeneratorDelegate0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"@Override
public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {
    typeSer.writeTypePrefixForScalar(value, jgen);
    serialize(value, jgen, provider);
    typeSer.writeTypeSuffixForScalar(value, jgen);
}","public void test077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""JSON"");
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = NumberSerializers.DoubleSerializer.instance;
    Object object0 = new Object();
    // Undeclared exception!
    try {
        numberSerializers_DoubleSerializer0.serializeWithType(object0, jsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Object cannot be cast to java.lang.Double
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer"", e);
    }
}","/**
 * Default implementation will write type prefix, call regular serialization
 * method (since assumption is that value itself does not need JSON
 * Array or Object start/end markers), and then write type suffix.
 * This should work for most cases; some sub-classes may want to
 * change this behavior.
 */"
"public boolean usesObjectId() {
    return false;
}","public void test088() throws Throwable {
    NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer();
    assertFalse(numberSerializers_DoubleSerializer0.usesObjectId());
}","/**
 * Method that can be called to see whether this serializer instance
 * will use Object Id to handle cyclic references.
 */"
"public boolean isUnwrappingSerializer() {
    return false;
}","public void test1010() throws Throwable {
    NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    numberSerializers_FloatSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(numberSerializers_FloatSerializer0.isUnwrappingSerializer());
}","/**
 * Accessor for checking whether this serializer is an
 * ""unwrapping"" serializer; this is necessary to know since
 * it may also require caller to suppress writing of the
 * leading property name.
 */"
"public boolean usesObjectId() {
    return false;
}","public void test1111() throws Throwable {
    NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonSerializer<?> jsonSerializer0 = numberSerializers_FloatSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
    assertFalse(jsonSerializer0.usesObjectId());
}","/**
 * Method that can be called to see whether this serializer instance
 * will use Object Id to handle cyclic references.
 */"
"/*
    /**********************************************************
    /* Extended Public API: serialization
    /* (mapping from Java types to JSON)
    /**********************************************************
     */
/**
 * Method that can be used to serialize any Java value as
 * JSON output, written to File provided.
 */
public void writeValue(File resultFile, Object value) throws IOException, JsonGenerationException, JsonMappingException {
    _configAndWriteValue(_jsonFactory.createGenerator(resultFile, JsonEncoding.UTF8), value);
}","public void test1212() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    MockFile mockFile0 = new MockFile(""JSON"");
    try {
        objectMapper0.writeValue((File) mockFile0, (Object) mockFile0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Loop has been executed more times than the allowed 10000 (through reference chain: org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""absoluteFile\""]->org.evosuite.runtime.mock.java.io.MockFile[\""path\""])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
