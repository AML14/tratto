{
  "test1212" : {
    "methodSignature" : "public int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();\n    Class<JavaType> class0 = JavaType.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);\n    resolvedRecursiveType0.containedTypeCount();\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "public boolean isUnwrappingSerializer()",
    "methodName" : "isUnwrappingSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Boolean boolean0 = Boolean.valueOf(true);\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0);\n    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();\n    sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);\n    sqlDateSerializer0.isUnwrappingSerializer();\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();\n    DateSerializer dateSerializer0 = new DateSerializer();\n    JsonNode jsonNode0 = dateSerializer0.getSchema(serializerProvider0, (Type) null);\n    jsonNode0.size();\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public void serialize(Date value, JsonGenerator gen, SerializerProvider provider) throws IOException",
    "methodName" : "serialize",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    DateSerializer dateSerializer0 = new DateSerializer();\n    DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();\n    DateSerializer dateSerializer1 = dateSerializer0.withFormat((Boolean) null, dateFormat0);\n    BufferRecycler bufferRecycler0 = new BufferRecycler();\n    Object object0 = new Object();\n    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);\n    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    dateSerializer1.serialize((java.util.Date) null, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
    "methodName" : "acceptJsonFormatVisitor",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    CalendarSerializer calendarSerializer0 = new CalendarSerializer();\n    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();\n    calendarSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public boolean isEmpty(T value)",
    "methodName" : "isEmpty",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    boolean boolean0 = sqlDateSerializer0.isEmpty((Date) null);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public boolean isEmpty(T value)",
    "methodName" : "isEmpty",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    Date date0 = new Date((-2171L));\n    boolean boolean0 = sqlDateSerializer0.isEmpty(date0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public boolean isEmpty(SerializerProvider serializers, T value)",
    "methodName" : "isEmpty",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    Date date0 = new Date((-2164L));\n    boolean boolean0 = sqlDateSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, date0);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;\n    Boolean boolean0 = Boolean.valueOf(false);\n    Locale locale0 = Locale.JAPANESE;\n    DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0, locale0);\n    CalendarSerializer calendarSerializer1 = calendarSerializer0.withFormat(boolean0, dateFormat0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    JsonNode jsonNode0 = calendarSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);\n    jsonNode0.size();\n}",
    "testName" : "test099"
  },
  "test000" : {
    "methodSignature" : "public boolean isUnwrappingSerializer()",
    "methodName" : "isUnwrappingSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    JsonSerializer<?> jsonSerializer0 = sqlDateSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);\n    jsonSerializer0.isUnwrappingSerializer();\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException",
    "methodName" : "createContextual",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<Object> class0 = Object.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, simpleType0, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    JsonSerializer<?> jsonSerializer0 = sqlDateSerializer0.createContextual(serializerProvider0, beanProperty_Std0);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public boolean isEmpty(T value)",
    "methodName" : "isEmpty",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Boolean boolean0 = new Boolean(true);\n    CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, (DateFormat) null);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1486), (-2036), (-2036), (-65), (-65));\n    boolean boolean1 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public boolean isEmpty(SerializerProvider serializers, T value)",
    "methodName" : "isEmpty",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    CalendarSerializer calendarSerializer0 = new CalendarSerializer();\n    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) null, (Calendar) null);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public boolean isEmpty(SerializerProvider serializers, T value)",
    "methodName" : "isEmpty",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(108, 108, 108, 108, 108, 4961);\n    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) mockGregorianCalendar0);\n}",
    "testName" : "test088"
  }
}