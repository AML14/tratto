project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonSerializer<?> jsonSerializer0 = sqlDateSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
    assertFalse(jsonSerializer0.isUnwrappingSerializer());
}",0,
project,0,test011,"public void test011() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    // Undeclared exception!
    try {
        calendarSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null SerializerProvider passed for java.util.Calendar
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<Object> class0 = Object.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, simpleType0, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
    JsonSerializer<?> jsonSerializer0 = sqlDateSerializer0.createContextual(serializerProvider0, beanProperty_Std0);
    assertSame(sqlDateSerializer0, jsonSerializer0);
}",0,
project,0,test033,"public void test033() throws Throwable {
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
    boolean boolean0 = sqlDateSerializer0.isEmpty((Date) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test044,"public void test044() throws Throwable {
    Boolean boolean0 = new Boolean(true);
    CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, (DateFormat) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1486), (-2036), (-2036), (-65), (-65));
    boolean boolean1 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
    assertTrue(boolean1);
}",0,assertTrue(boolean1)
project,0,test055,"public void test055() throws Throwable {
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
    Date date0 = new Date((-2171L));
    boolean boolean0 = sqlDateSerializer0.isEmpty(date0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test066,"public void test066() throws Throwable {
    CalendarSerializer calendarSerializer0 = new CalendarSerializer();
    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) null, (Calendar) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test077,"public void test077() throws Throwable {
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Date date0 = new Date((-2164L));
    boolean boolean0 = sqlDateSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, date0);
    assertFalse(boolean0);
}",0,
project,0,test088,"public void test088() throws Throwable {
    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(108, 108, 108, 108, 108, 4961);
    boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) mockGregorianCalendar0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test099,"public void test099() throws Throwable {
    CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
    Boolean boolean0 = Boolean.valueOf(false);
    Locale locale0 = Locale.JAPANESE;
    DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0, locale0);
    CalendarSerializer calendarSerializer1 = calendarSerializer0.withFormat(boolean0, dateFormat0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonNode jsonNode0 = calendarSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
    assertEquals(1, jsonNode0.size());
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    DateSerializer dateSerializer0 = new DateSerializer();
    JsonNode jsonNode0 = dateSerializer0.getSchema(serializerProvider0, (Type) null);
    assertEquals(1, jsonNode0.size());
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    DateSerializer dateSerializer0 = new DateSerializer();
    DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
    DateSerializer dateSerializer1 = dateSerializer0.withFormat((Boolean) null, dateFormat0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        dateSerializer1.serialize((java.util.Date) null, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Calendar"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    Class<JavaType> class0 = JavaType.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);
    assertEquals(0, resolvedRecursiveType0.containedTypeCount());
}",0,"assertEquals(1, resolvedRecursiveType0.containedTypeCount())"
project,0,test1313,"public void test1313() throws Throwable {
    Boolean boolean0 = Boolean.valueOf(true);
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0);
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(sqlDateSerializer0.isUnwrappingSerializer());
}",0,
