focal_method,test_prefix,docstring
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
@Override
public boolean isContainerType() {
    return false;
}","public void test011() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
    simpleType0.isContainerType();
}",""
"/*
    /**********************************************************
    /* Standard methods
    /**********************************************************
     */
@Override
public String toString() {
    StringBuilder sb = new StringBuilder(40);
    sb.append(""[simple type, class "").append(buildCanonicalName()).append(']');
    return sb.toString();
}","public void test022() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    simpleType0.toString();
}",""
"@Override
public SimpleType withContentValueHandler(Object h) {
    // no content type, so:
    throw new IllegalArgumentException(""Simple types have no content types; can not call withContenValueHandler()"");
}","public void test033() throws Throwable {
    Class<Object> class0 = Object.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    // Undeclared exception!
    try {
        simpleType0.withContentValueHandler(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Simple types have no content types; can not call withContenValueHandler()
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",""
"@Override
protected String buildCanonicalName() {
    StringBuilder sb = new StringBuilder();
    sb.append(_class.getName());
    final int count = _bindings.size();
    if (count > 0) {
        sb.append('<');
        for (int i = 0; i < count; ++i) {
            JavaType t = containedType(i);
            if (i > 0) {
                sb.append(',');
            }
            sb.append(t.toCanonical());
        }
        sb.append('>');
    }
    return sb.toString();
}","public void test044() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    simpleType0.buildCanonicalName();
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o.getClass() != getClass())
        return false;
    SimpleType other = (SimpleType) o;
    // Classes must be identical...
    if (other._class != this._class)
        return false;
    // And finally, generic bindings, if any
    TypeBindings b1 = _bindings;
    TypeBindings b2 = other._bindings;
    return b1.equals(b2);
}","public void test055() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    SimpleType simpleType1 = simpleType0.withStaticTyping();
    simpleType0.equals(simpleType1);
}",""
"@Override
public SimpleType withStaticTyping() {
    return _asStatic ? this : new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, true);
}","public void test066() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    SimpleType simpleType1 = simpleType0.withStaticTyping();
    simpleType1.withStaticTyping();
}",""
"/*
    /**********************************************************
    /* Standard methods
    /**********************************************************
     */
@Override
public String toString() {
    StringBuilder sb = new StringBuilder(40);
    sb.append(""[simple type, class "").append(buildCanonicalName()).append(']');
    return sb.toString();
}","public void test077() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    simpleType0.withContentTypeHandler(""com.fasterxml.jackson.databind.type.SimpleType"");
    // Undeclared exception!
    try {
        simpleType0.toString();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Simple types have no content types; can not call withContenTypeHandler()
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",""
"@Override
public SimpleType withTypeHandler(Object h) {
    if (_typeHandler == h) {
        return this;
    }
    return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);
}","public void test088() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    simpleType0.withTypeHandler((Object) null);
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o.getClass() != getClass())
        return false;
    SimpleType other = (SimpleType) o;
    // Classes must be identical...
    if (other._class != this._class)
        return false;
    // And finally, generic bindings, if any
    TypeBindings b1 = _bindings;
    TypeBindings b2 = other._bindings;
    return b1.equals(b2);
}","public void test099() throws Throwable {
    Class<ChronoUnit> class0 = ChronoUnit.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    simpleType0.equals(class0);
}",""
"@Override
public JavaType withContentType(JavaType contentType) {
    throw new IllegalArgumentException(""Simple types have no content types; can not call withContentType()"");
}","public void test1010() throws Throwable {
    Class<ChronoUnit> class0 = ChronoUnit.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    // Undeclared exception!
    try {
        simpleType0.withContentType(simpleType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Simple types have no content types; can not call withContentType()
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o.getClass() != getClass())
        return false;
    SimpleType other = (SimpleType) o;
    // Classes must be identical...
    if (other._class != this._class)
        return false;
    // And finally, generic bindings, if any
    TypeBindings b1 = _bindings;
    TypeBindings b2 = other._bindings;
    return b1.equals(b2);
}","public void test1111() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    simpleType0.equals((Object) null);
}",""
"@Override
public SimpleType withValueHandler(Object h) {
    if (h == _valueHandler) {
        return this;
    }
    return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic);
}","public void test1212() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    simpleType0.withValueHandler(simpleType0);
}",""
"/*
    /**********************************************************
    /* Support for producing signatures
    /**********************************************************
     */
//public abstract String toCanonical();
/**
 * Method for accessing signature that contains generic
 * type information, in form compatible with JVM 1.5
 * as per JLS. It is a superset of {@link #getErasedSignature},
 * in that generic information can be automatically removed
 * if necessary (just remove outermost
 * angle brackets along with content inside)
 */
public String getGenericSignature() {
    StringBuilder sb = new StringBuilder(40);
    getGenericSignature(sb);
    return sb.toString();
}","public void test1313() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    simpleType0.getGenericSignature();
}",""
"public String getErasedSignature() {
    StringBuilder sb = new StringBuilder(40);
    getErasedSignature(sb);
    return sb.toString();
}","public void test1414() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    simpleType0.getErasedSignature();
}","/**
 * Method for accessing signature without generic
 * type information, in form compatible with all versions
 * of JVM, and specifically used for type descriptions
 * when generating byte code.
 */"
"@Override
public SimpleType withTypeHandler(Object h) {
    if (_typeHandler == h) {
        return this;
    }
    return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);
}","public void test1515() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    simpleType0.withTypeHandler(simpleType0);
}",""
"public static SimpleType constructUnsafe(Class<?> raw) {
    return new SimpleType(raw, null, // 18-Oct-2015, tatu: Should be ok to omit possible super-types, right?
    null, null, null, null, false);
}","public void test1717() throws Throwable {
    Class<Object> class0 = Object.class;
    SimpleType.constructUnsafe(class0);
}","/**
 *  Method used by core Jackson classes: NOT to be used by application code:
 *  it does NOT properly handle inspection of super-types, so neither parent
 *  Classes nor implemented Interfaces are accessible with resulting type
 *  instance.
 * <p>
 *  NOTE: public only because it is called by <code>ObjectMapper</code> which is
 *  not in same package
 */"
"@Override
public ReferenceType withContentTypeHandler(Object h) {
    if (h == _referencedType.<Object>getTypeHandler()) {
        return this;
    }
    return new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType.withTypeHandler(h), _valueHandler, _typeHandler, _asStatic);
}","public void test1919() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    referenceType0.withContentTypeHandler(simpleType0);
}",""
"@Override
@Deprecated
protected JavaType _narrow(Class<?> subclass) {
    if (_class == subclass) {
        return this;
    }
    // Should we check that there is a sub-class relationship?
    // 15-Jan-2016, tatu: Almost yes, but there are some complications with
    //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
    // TODO: fix in 2.8
    /*
            throw new IllegalArgumentException(""Class ""+subclass.getName()+"" not sub-type of ""
                    +_class.getName());
                    */
    return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic);
    // Otherwise, stitch together the hierarchy. First, super-class
    // if not found, try a super-interface
    // should not get here but...
}","public void test2020() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    Class<Object> class0 = Object.class;
    simpleType0._narrow(class0);
}",""
"@Override
@Deprecated
protected JavaType _narrow(Class<?> subclass) {
    if (_class == subclass) {
        return this;
    }
    // Should we check that there is a sub-class relationship?
    // 15-Jan-2016, tatu: Almost yes, but there are some complications with
    //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
    // TODO: fix in 2.8
    /*
            throw new IllegalArgumentException(""Class ""+subclass.getName()+"" not sub-type of ""
                    +_class.getName());
                    */
    return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic);
    // Otherwise, stitch together the hierarchy. First, super-class
    // if not found, try a super-interface
    // should not get here but...
}","public void test2121() throws Throwable {
    Class<TemporalField> class0 = TemporalField.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    simpleType0._narrow(class0);
}",""
"@Override
public SimpleType withValueHandler(Object h) {
    if (h == _valueHandler) {
        return this;
    }
    return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic);
}","public void test2222() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    simpleType0.withValueHandler((Object) null);
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o.getClass() != getClass())
        return false;
    SimpleType other = (SimpleType) o;
    // Classes must be identical...
    if (other._class != this._class)
        return false;
    // And finally, generic bindings, if any
    TypeBindings b1 = _bindings;
    TypeBindings b2 = other._bindings;
    return b1.equals(b2);
}","public void test2323() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    SimpleType simpleType1 = TypeFactory.CORE_TYPE_LONG;
    simpleType0.equals(simpleType1);
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o.getClass() != getClass())
        return false;
    SimpleType other = (SimpleType) o;
    // Classes must be identical...
    if (other._class != this._class)
        return false;
    // And finally, generic bindings, if any
    TypeBindings b1 = _bindings;
    TypeBindings b2 = other._bindings;
    return b1.equals(b2);
}","public void test2424() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    simpleType0.equals(simpleType0);
}",""
"@Deprecated
public static SimpleType construct(Class<?> cls) {
    /* Let's add sanity checks, just to ensure no
         * Map/Collection entries are constructed
         */
    if (Map.class.isAssignableFrom(cls)) {
        throw new IllegalArgumentException(""Can not construct SimpleType for a Map (class: "" + cls.getName() + "")"");
    }
    if (Collection.class.isAssignableFrom(cls)) {
        throw new IllegalArgumentException(""Can not construct SimpleType for a Collection (class: "" + cls.getName() + "")"");
    }
    // ... and while we are at it, not array types either
    if (cls.isArray()) {
        throw new IllegalArgumentException(""Can not construct SimpleType for an array (class: "" + cls.getName() + "")"");
    }
    TypeBindings b = TypeBindings.emptyBindings();
    return new SimpleType(cls, b, _buildSuperClass(cls.getSuperclass(), b), null, null, null, false);
}","public void test2525() throws Throwable {
    Class<HashMap> class0 = HashMap.class;
    // Undeclared exception!
    try {
        SimpleType.construct(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not construct SimpleType for a Map (class: java.util.HashMap)
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}","/**
 *  Method that should NOT to be used by application code:
 *  it does NOT properly handle inspection of super-types, so neither parent
 *  Classes nor implemented Interfaces are accessible with resulting type
 *  instance. Instead, please use {@link TypeFactory}'s <code>constructType</code>
 *  methods which handle introspection appropriately.
 * <p>
 *  Note that prior to 2.7, method usage was not limited and would typically
 *  have worked acceptably: the problem comes from inability to resolve super-type
 *  information, for which {@link TypeFactory} is needed.
 *
 *  @deprecated Since 2.7
 */"
"@Deprecated
public static SimpleType construct(Class<?> cls) {
    /* Let's add sanity checks, just to ensure no
         * Map/Collection entries are constructed
         */
    if (Map.class.isAssignableFrom(cls)) {
        throw new IllegalArgumentException(""Can not construct SimpleType for a Map (class: "" + cls.getName() + "")"");
    }
    if (Collection.class.isAssignableFrom(cls)) {
        throw new IllegalArgumentException(""Can not construct SimpleType for a Collection (class: "" + cls.getName() + "")"");
    }
    // ... and while we are at it, not array types either
    if (cls.isArray()) {
        throw new IllegalArgumentException(""Can not construct SimpleType for an array (class: "" + cls.getName() + "")"");
    }
    TypeBindings b = TypeBindings.emptyBindings();
    return new SimpleType(cls, b, _buildSuperClass(cls.getSuperclass(), b), null, null, null, false);
}","public void test2626() throws Throwable {
    Class<LinkedList> class0 = LinkedList.class;
    // Undeclared exception!
    try {
        SimpleType.construct(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not construct SimpleType for a Collection (class: java.util.LinkedList)
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}","/**
 *  Method that should NOT to be used by application code:
 *  it does NOT properly handle inspection of super-types, so neither parent
 *  Classes nor implemented Interfaces are accessible with resulting type
 *  instance. Instead, please use {@link TypeFactory}'s <code>constructType</code>
 *  methods which handle introspection appropriately.
 * <p>
 *  Note that prior to 2.7, method usage was not limited and would typically
 *  have worked acceptably: the problem comes from inability to resolve super-type
 *  information, for which {@link TypeFactory} is needed.
 *
 *  @deprecated Since 2.7
 */"
"@Override
public StringBuilder getGenericSignature(StringBuilder sb) {
    _classSignature(_class, sb, false);
    final int count = _bindings.size();
    if (count > 0) {
        sb.append('<');
        for (int i = 0; i < count; ++i) {
            sb = containedType(i).getGenericSignature(sb);
        }
        sb.append('>');
    }
    sb.append(';');
    return sb;
}","public void test2727() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    Class<String> class1 = String.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
    SimpleType simpleType0 = new SimpleType(collectionType0);
    char[] charArray0 = new char[1];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
    simpleType0.getGenericSignature(stringBuilder0);
}",""
"/*
    /**********************************************************
    /* Standard methods
    /**********************************************************
     */
@Override
public String toString() {
    StringBuilder sb = new StringBuilder(40);
    sb.append(""[simple type, class "").append(buildCanonicalName()).append(']');
    return sb.toString();
}","public void test2828() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
    Class<TemporalField> class2 = TemporalField.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
    SimpleType simpleType0 = new SimpleType(mapType0);
    simpleType0.toString();
}",""
"/*
    /**********************************************************
    /* Standard methods
    /**********************************************************
     */
@Override
public String toString() {
    StringBuilder sb = new StringBuilder(40);
    sb.append(""[simple type, class "").append(buildCanonicalName()).append(']');
    return sb.toString();
}","public void test2929() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    Class<String> class1 = String.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
    SimpleType simpleType0 = new SimpleType(collectionType0);
    simpleType0.toString();
}",""
