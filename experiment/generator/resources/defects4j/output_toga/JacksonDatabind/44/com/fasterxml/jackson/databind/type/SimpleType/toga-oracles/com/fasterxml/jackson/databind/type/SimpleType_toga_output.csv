project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
    simpleType0.isContainerType();
}",0,
project,0,test022,"public void test022() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    simpleType0.toString();
}",0,
project,0,test033,"public void test033() throws Throwable {
    Class<Object> class0 = Object.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    // Undeclared exception!
    try {
        simpleType0.withContentValueHandler(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Simple types have no content types; can not call withContenValueHandler()
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",1,
project,0,test044,"public void test044() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    simpleType0.buildCanonicalName();
}",0,
project,0,test055,"public void test055() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    SimpleType simpleType1 = simpleType0.withStaticTyping();
    simpleType0.equals(simpleType1);
}",0,
project,0,test066,"public void test066() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    SimpleType simpleType1 = simpleType0.withStaticTyping();
    simpleType1.withStaticTyping();
}",0,
project,0,test077,"public void test077() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    simpleType0.withContentTypeHandler(""com.fasterxml.jackson.databind.type.SimpleType"");
    // Undeclared exception!
    try {
        simpleType0.toString();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Simple types have no content types; can not call withContenTypeHandler()
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    simpleType0.withTypeHandler((Object) null);
}",0,
project,0,test099,"public void test099() throws Throwable {
    Class<ChronoUnit> class0 = ChronoUnit.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    simpleType0.equals(class0);
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Class<ChronoUnit> class0 = ChronoUnit.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    // Undeclared exception!
    try {
        simpleType0.withContentType(simpleType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Simple types have no content types; can not call withContentType()
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",1,
project,0,test1111,"public void test1111() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    simpleType0.equals((Object) null);
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    simpleType0.withValueHandler(simpleType0);
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    simpleType0.getGenericSignature();
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    simpleType0.getErasedSignature();
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    simpleType0.withTypeHandler(simpleType0);
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    Class<Object> class0 = Object.class;
    SimpleType.constructUnsafe(class0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    referenceType0.withContentTypeHandler(simpleType0);
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    Class<Object> class0 = Object.class;
    simpleType0._narrow(class0);
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    Class<TemporalField> class0 = TemporalField.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    simpleType0._narrow(class0);
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    simpleType0.withValueHandler((Object) null);
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    SimpleType simpleType1 = TypeFactory.CORE_TYPE_LONG;
    simpleType0.equals(simpleType1);
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    simpleType0.equals(simpleType0);
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    Class<HashMap> class0 = HashMap.class;
    // Undeclared exception!
    try {
        SimpleType.construct(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not construct SimpleType for a Map (class: java.util.HashMap)
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",1,
project,0,test2626,"public void test2626() throws Throwable {
    Class<LinkedList> class0 = LinkedList.class;
    // Undeclared exception!
    try {
        SimpleType.construct(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not construct SimpleType for a Collection (class: java.util.LinkedList)
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    Class<String> class1 = String.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
    SimpleType simpleType0 = new SimpleType(collectionType0);
    char[] charArray0 = new char[1];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
    simpleType0.getGenericSignature(stringBuilder0);
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
    Class<TemporalField> class2 = TemporalField.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
    SimpleType simpleType0 = new SimpleType(mapType0);
    simpleType0.toString();
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    Class<String> class1 = String.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
    SimpleType simpleType0 = new SimpleType(collectionType0);
    simpleType0.toString();
}",0,
