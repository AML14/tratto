{
  "test1212" : {
    "methodSignature" : "protected boolean isPotentialBeanType(Class<?> type)",
    "methodName" : "isPotentialBeanType",
    "className" : "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<Throwable> class0 = Throwable.class;\n    ObjectReader objectReader0 = objectMapper0.reader();\n    Class<Integer> class1 = Integer.TYPE;\n    objectReader0.forType(class1);\n    beanDeserializerFactory0.isPotentialBeanType(class0);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "protected boolean isPotentialBeanType(Class<?> type)",
    "methodName" : "isPotentialBeanType",
    "className" : "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];\n    MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;\n    mapperFeatureArray0[0] = mapperFeature0;\n    MapperFeature mapperFeature1 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;\n    mapperFeatureArray0[1] = mapperFeature1;\n    MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_IS_GETTERS;\n    mapperFeatureArray0[2] = mapperFeature2;\n    MapperFeature mapperFeature3 = MapperFeature.DEFAULT_VIEW_INCLUSION;\n    mapperFeatureArray0[3] = mapperFeature3;\n    MapperFeature mapperFeature4 = MapperFeature.DEFAULT_VIEW_INCLUSION;\n    mapperFeatureArray0[4] = mapperFeature4;\n    objectMapper0.disable(mapperFeatureArray0);\n    Class<Throwable> class0 = Throwable.class;\n    ObjectReader objectReader0 = objectMapper0.reader();\n    JsonPointer jsonPointer0 = JsonPointer.compile((String) null);\n    objectReader0.at(jsonPointer0);\n    objectReader0.forType(class0);\n    beanDeserializerFactory0.isPotentialBeanType(class0);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "protected boolean isPotentialBeanType(Class<?> type)",
    "methodName" : "isPotentialBeanType",
    "className" : "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    ObjectReader objectReader0 = objectMapper0.reader();\n    Class<BeanDeserializer> class0 = BeanDeserializer.class;\n    objectReader0.forType(class0);\n    beanDeserializerFactory0.isPotentialBeanType(class0);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException",
    "methodName" : "addBeanProps",
    "className" : "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);\n    JsonFactory jsonFactory0 = new JsonFactory();\n    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;\n    JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);\n    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();\n    ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider0);\n    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;\n    ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, \"com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer\");\n    ObjectReader objectReader0 = objectMapper2.reader(jsonNodeFactory0);\n    Locale locale0 = Locale.CHINA;\n    ObjectReader objectReader1 = objectReader0.with(locale0);\n    objectReader0.getTypeFactory();\n    Class<CreatorProperty> class0 = CreatorProperty.class;\n    objectReader1.forType(class0);\n    BeanDescription beanDescription0 = null;\n    BeanDeserializerBuilder beanDeserializerBuilder0 = beanDeserializerFactory0.constructBeanDeserializerBuilder(defaultDeserializationContext_Impl0, (BeanDescription) null);\n    beanDeserializerFactory0.addBeanProps(defaultDeserializationContext_Impl0, beanDescription0, beanDeserializerBuilder0);\n}",
    "testName" : "test1111"
  },
  "test000" : {
    "methodSignature" : "public DeserializerFactory withConfig(DeserializerFactoryConfig config)",
    "methodName" : "withConfig",
    "className" : "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);\n    beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);\n}",
    "testName" : "test000"
  },
  "test011" : {
    "methodSignature" : "public DeserializerFactory withConfig(DeserializerFactoryConfig config)",
    "methodName" : "withConfig",
    "className" : "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();\n    beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "protected boolean isPotentialBeanType(Class<?> type)",
    "methodName" : "isPotentialBeanType",
    "className" : "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    Class<Throwable> class0 = Throwable.class;\n    beanDeserializerFactory0.isPotentialBeanType(class0);\n}",
    "testName" : "test033"
  },
  "test044" : {
    "methodSignature" : "protected JavaType materializeAbstractType(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException",
    "methodName" : "materializeAbstractType",
    "className" : "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;\n    beanDeserializerFactory0.isPotentialBeanType(class0);\n    BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());\n    Deserializers.Base deserializers_Base0 = new Deserializers.Base();\n    BeanDeserializerModifier beanDeserializerModifier1 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());\n    BeanDeserializerModifier beanDeserializerModifier2 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());\n    DeserializationContext deserializationContext0 = null;\n    JavaType javaType0 = null;\n    BeanDescription beanDescription0 = null;\n    beanDeserializerFactory0.createBuilderBasedDeserializer((DeserializationContext) null, (JavaType) null, (BeanDescription) null, class0);\n    beanDeserializerFactory0.materializeAbstractType(deserializationContext0, javaType0, beanDescription0);\n}",
    "testName" : "test044"
  },
  "test055" : {
    "methodSignature" : "protected void addInjectables(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException",
    "methodName" : "addInjectables",
    "className" : "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());\n    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();\n    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();\n    doReturn((Map) null).when(pOJOPropertiesCollector0).getInjectables();\n    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();\n    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();\n    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    beanDeserializerFactory0.addInjectables(defaultDeserializationContext_Impl0, basicBeanDescription0, (BeanDeserializerBuilder) null);\n}",
    "testName" : "test055"
  },
  "test066" : {
    "methodSignature" : "protected JavaType materializeAbstractType(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException",
    "methodName" : "materializeAbstractType",
    "className" : "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    JavaType javaType0 = TypeFactory.unknownType();\n    beanDeserializerFactory0.materializeAbstractType((DeserializationContext) null, javaType0, (BeanDescription) null);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "protected boolean isPotentialBeanType(Class<?> type)",
    "methodName" : "isPotentialBeanType",
    "className" : "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    Class<Month> class0 = Month.class;\n    beanDeserializerFactory0.isPotentialBeanType(class0);\n}",
    "testName" : "test088"
  },
  "test099" : {
    "methodSignature" : "protected JavaType materializeAbstractType(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException",
    "methodName" : "materializeAbstractType",
    "className" : "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();\n    BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory) beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);\n    SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();\n    beanDeserializerFactory1.materializeAbstractType(defaultDeserializationContext_Impl0, simpleType0, (BeanDescription) null);\n}",
    "testName" : "test099"
  }
}