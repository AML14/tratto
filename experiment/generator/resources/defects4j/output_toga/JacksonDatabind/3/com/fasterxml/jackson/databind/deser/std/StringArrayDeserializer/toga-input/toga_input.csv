focal_method,test_prefix,docstring
"@Override
public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {
    return typeDeserializer.deserializeTypedFromArray(jp, ctxt);
}","public void test00() throws Throwable {
    StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    // Undeclared exception!
    try {
        stringArrayDeserializer0.deserializeWithType(jsonParser0, deserializationContext0, (TypeDeserializer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer"", e);
    }
}",""
"protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException {
    final ObjectBuffer buffer = ctxt.leaseObjectBuffer();
    Object[] chunk = buffer.resetAndStart();
    final JsonDeserializer<String> deser = _elementDeserializer;
    int ix = 0;
    JsonToken t;
    while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
        // Ok: no need to convert Strings, but must recognize nulls
        String value = (t == JsonToken.VALUE_NULL) ? null : deser.deserialize(jp, ctxt);
        if (ix >= chunk.length) {
            chunk = buffer.appendCompletedChunk(chunk);
            ix = 0;
        }
        chunk[ix++] = value;
    }
    String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);
    ctxt.returnObjectBuffer(buffer);
    return result;
}","public void test11() throws Throwable {
    StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    StringArrayDeserializer stringArrayDeserializer1 = new StringArrayDeserializer(stringArrayDeserializer0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
    deserializationFeatureArray0[0] = deserializationFeature0;
    deserializationFeatureArray0[1] = deserializationFeature0;
    deserializationFeatureArray0[2] = deserializationFeature0;
    deserializationFeatureArray0[3] = deserializationFeature0;
    deserializationFeatureArray0[4] = deserializationFeatureArray0[3];
    deserializationFeatureArray0[5] = deserializationFeature0;
    deserializationFeatureArray0[6] = deserializationFeature0;
    deserializationFeatureArray0[7] = deserializationFeature0;
    deserializationFeatureArray0[8] = deserializationFeature0;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
    ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
    ValueNode valueNode0 = arrayNode0.numberNode((Long) null);
    JsonParser jsonParser0 = objectReader0.treeAsTokens(valueNode0);
    // Undeclared exception!
    try {
        stringArrayDeserializer1._deserializeCustom(jsonParser0, defaultDeserializationContext_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}","/**
 * Offlined version used when we do not use the default deserialization method.
 */"
"protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException {
    final ObjectBuffer buffer = ctxt.leaseObjectBuffer();
    Object[] chunk = buffer.resetAndStart();
    final JsonDeserializer<String> deser = _elementDeserializer;
    int ix = 0;
    JsonToken t;
    while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
        // Ok: no need to convert Strings, but must recognize nulls
        String value = (t == JsonToken.VALUE_NULL) ? null : deser.deserialize(jp, ctxt);
        if (ix >= chunk.length) {
            chunk = buffer.appendCompletedChunk(chunk);
            ix = 0;
        }
        chunk[ix++] = value;
    }
    String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);
    ctxt.returnObjectBuffer(buffer);
    return result;
}","public void test22() throws Throwable {
    StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    StringArrayDeserializer stringArrayDeserializer1 = new StringArrayDeserializer(stringArrayDeserializer0);
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
    JsonParser jsonParser0 = arrayNode0.traverse();
    StringArrayDeserializer stringArrayDeserializer2 = new StringArrayDeserializer(stringArrayDeserializer1);
    // Undeclared exception!
    try {
        stringArrayDeserializer2._deserializeCustom(jsonParser0, defaultDeserializationContext_Impl0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // [Ljava.lang.String; cannot be cast to java.lang.String
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer"", e);
    }
}","/**
 * Offlined version used when we do not use the default deserialization method.
 */"
"protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException {
    final ObjectBuffer buffer = ctxt.leaseObjectBuffer();
    Object[] chunk = buffer.resetAndStart();
    final JsonDeserializer<String> deser = _elementDeserializer;
    int ix = 0;
    JsonToken t;
    while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
        // Ok: no need to convert Strings, but must recognize nulls
        String value = (t == JsonToken.VALUE_NULL) ? null : deser.deserialize(jp, ctxt);
        if (ix >= chunk.length) {
            chunk = buffer.appendCompletedChunk(chunk);
            ix = 0;
        }
        chunk[ix++] = value;
    }
    String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);
    ctxt.returnObjectBuffer(buffer);
    return result;
}","public void test33() throws Throwable {
    StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    StringArrayDeserializer stringArrayDeserializer1 = new StringArrayDeserializer(stringArrayDeserializer0);
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
    BigInteger bigInteger0 = BigInteger.ONE;
    BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
    ArrayNode arrayNode1 = arrayNode0.insert(3848, (JsonNode) bigIntegerNode0);
    JsonParser jsonParser0 = arrayNode1.traverse();
    // Undeclared exception!
    try {
        stringArrayDeserializer1._deserializeCustom(jsonParser0, defaultDeserializationContext_Impl0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // [Ljava.lang.String; cannot be cast to java.lang.String
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer"", e);
    }
}","/**
 * Offlined version used when we do not use the default deserialization method.
 */"
"protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException {
    final ObjectBuffer buffer = ctxt.leaseObjectBuffer();
    Object[] chunk = buffer.resetAndStart();
    final JsonDeserializer<String> deser = _elementDeserializer;
    int ix = 0;
    JsonToken t;
    while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
        // Ok: no need to convert Strings, but must recognize nulls
        String value = (t == JsonToken.VALUE_NULL) ? null : deser.deserialize(jp, ctxt);
        if (ix >= chunk.length) {
            chunk = buffer.appendCompletedChunk(chunk);
            ix = 0;
        }
        chunk[ix++] = value;
    }
    String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);
    ctxt.returnObjectBuffer(buffer);
    return result;
}","public void test44() throws Throwable {
    StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    StringArrayDeserializer stringArrayDeserializer1 = new StringArrayDeserializer(stringArrayDeserializer0);
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
    arrayNode0.insert(1669, (JsonNode) null);
    JsonParser jsonParser0 = arrayNode0.traverse();
    // Undeclared exception!
    try {
        stringArrayDeserializer1._deserializeCustom(jsonParser0, defaultDeserializationContext_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer"", e);
    }
}","/**
 * Offlined version used when we do not use the default deserialization method.
 */"
"protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException {
    final ObjectBuffer buffer = ctxt.leaseObjectBuffer();
    Object[] chunk = buffer.resetAndStart();
    final JsonDeserializer<String> deser = _elementDeserializer;
    int ix = 0;
    JsonToken t;
    while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
        // Ok: no need to convert Strings, but must recognize nulls
        String value = (t == JsonToken.VALUE_NULL) ? null : deser.deserialize(jp, ctxt);
        if (ix >= chunk.length) {
            chunk = buffer.appendCompletedChunk(chunk);
            ix = 0;
        }
        chunk[ix++] = value;
    }
    String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);
    ctxt.returnObjectBuffer(buffer);
    return result;
}","public void test55() throws Throwable {
    StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) null);
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        stringArrayDeserializer0._deserializeCustom(jsonParser0, defaultDeserializationContext_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer"", e);
    }
}","/**
 * Offlined version used when we do not use the default deserialization method.
 */"
