/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 02:34:13 GMT 2024
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanDeserializerBase_ESTest extends BeanDeserializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[6];
        MapperFeature mapperFeature0 = MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        mapperFeatureArray0[2] = mapperFeatureArray0[0];
        mapperFeatureArray0[3] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        mapperFeatureArray0[4] = mapperFeature1;
        mapperFeatureArray0[5] = mapperFeatureArray0[0];
        objectMapper0.disable(mapperFeatureArray0);
        NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(nioPathDeserializer0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.enableDefaultTyping();
        NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(nioPathDeserializer0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ManagedReferenceProperty> class0 = ManagedReferenceProperty.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1);
        Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
        objectMapper0.convertValue((Object) coreXMLDeserializers_Std0, class1);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockError mockError0 = new MockError();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(mockError0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ManagedReferenceProperty> class0 = ManagedReferenceProperty.class;
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "abstract type (need to add/enable type information?)");
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1);
        Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
        objectMapper0.convertValue((Object) coreXMLDeserializers_Std0, class1);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PropertyBasedObjectIdGenerator> class0 = PropertyBasedObjectIdGenerator.class;
        ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
        objectMapper0.convertValue((Object) objectIdGenerators_UUIDGenerator0, class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        NumericNode numericNode0 = arrayNode0.numberNode(10000000000L);
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        objectMapper0.treeToValue((TreeNode) numericNode0, class0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ShortNode shortNode0 = ShortNode.valueOf((short) 140);
        Class<AsWrapperTypeDeserializer> class0 = AsWrapperTypeDeserializer.class;
        objectMapper0.treeToValue((TreeNode) shortNode0, class0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        objectMapper0.treeToValue((TreeNode) bigIntegerNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Long> class0 = Long.TYPE;
        Class<PropertyBasedObjectIdGenerator> class1 = PropertyBasedObjectIdGenerator.class;
        objectMapper0.convertValue((Object) class0, class1);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0);
        Class<AsWrapperTypeDeserializer> class0 = AsWrapperTypeDeserializer.class;
        objectMapper0.treeToValue((TreeNode) numericNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BigDecimal bigDecimal0 = new BigDecimal((-3));
        DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        objectMapper0.treeToValue((TreeNode) decimalNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BooleanNode booleanNode0 = BooleanNode.TRUE;
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        objectMapper0.treeToValue((TreeNode) booleanNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BooleanNode booleanNode0 = BooleanNode.FALSE;
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        objectMapper0.treeToValue((TreeNode) booleanNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
        objectMapper0.treeToValue((TreeNode) arrayNode0, class0);
    }
}
