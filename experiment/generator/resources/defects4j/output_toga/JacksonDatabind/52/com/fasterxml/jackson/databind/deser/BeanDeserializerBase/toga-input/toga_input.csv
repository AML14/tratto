focal_method,test_prefix,docstring
"public ObjectReader readerForUpdating(Object valueToUpdate) {
    JavaType t = _typeFactory.constructType(valueToUpdate.getClass());
    return _newReader(getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);
}","public void test000() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[6];
    MapperFeature mapperFeature0 = MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING;
    mapperFeatureArray0[0] = mapperFeature0;
    mapperFeatureArray0[1] = mapperFeature0;
    mapperFeatureArray0[2] = mapperFeatureArray0[0];
    mapperFeatureArray0[3] = mapperFeature0;
    MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
    mapperFeatureArray0[4] = mapperFeature1;
    mapperFeatureArray0[5] = mapperFeatureArray0[0];
    objectMapper0.disable(mapperFeatureArray0);
    NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(nioPathDeserializer0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * update given Object (usually Bean, but can be a Collection or Map
 * as well, but NOT an array) with JSON data. Deserialization occurs
 * normally except that the root-level value in JSON is not used for
 * instantiating a new object; instead give updateable object is used
 * as root.
 * Runtime type of value object is used for locating deserializer,
 * unless overridden by other factory methods of {@link ObjectReader}
 */"
"public ObjectReader readerForUpdating(Object valueToUpdate) {
    JavaType t = _typeFactory.constructType(valueToUpdate.getClass());
    return _newReader(getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);
}","public void test011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.enableDefaultTyping();
    NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(nioPathDeserializer0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * update given Object (usually Bean, but can be a Collection or Map
 * as well, but NOT an array) with JSON data. Deserialization occurs
 * normally except that the root-level value in JSON is not used for
 * instantiating a new object; instead give updateable object is used
 * as root.
 * Runtime type of value object is used for locating deserializer,
 * unless overridden by other factory methods of {@link ObjectReader}
 */"
"@SuppressWarnings(""unchecked"")
@Override
public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException {
    try {
        // Simple cast when we just want to cast to, say, ObjectNode
        // ... one caveat; while everything is Object.class, let's not take shortcut
        if (valueType != Object.class && valueType.isAssignableFrom(n.getClass())) {
            return (T) n;
        }
        // 20-Apr-2016, tatu: Another thing: for VALUE_EMBEDDED_OBJECT, assume similar
        //    short-cut coercion
        if (n.asToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {
            if (n instanceof POJONode) {
                Object ob = ((POJONode) n).getPojo();
                if ((ob == null) || valueType.isInstance(ob)) {
                    return (T) ob;
                }
            }
        }
        return readValue(treeAsTokens(n), valueType);
    } catch (JsonProcessingException e) {
        throw e;
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}","public void test077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
    NumericNode numericNode0 = arrayNode0.numberNode(10000000000L);
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) numericNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: no long/Long-argument constructor/factory method to deserialize from Number value (10000000000)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}","/**
 *  Convenience conversion method that will bind data given JSON tree
 *  contains into specific value (usually bean) type.
 * <p>
 *  Functionally equivalent to:
 * <pre>
 *    objectMapper.convertValue(n, valueClass);
 * </pre>
 */"
"@SuppressWarnings(""unchecked"")
@Override
public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException {
    try {
        // Simple cast when we just want to cast to, say, ObjectNode
        // ... one caveat; while everything is Object.class, let's not take shortcut
        if (valueType != Object.class && valueType.isAssignableFrom(n.getClass())) {
            return (T) n;
        }
        // 20-Apr-2016, tatu: Another thing: for VALUE_EMBEDDED_OBJECT, assume similar
        //    short-cut coercion
        if (n.asToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {
            if (n instanceof POJONode) {
                Object ob = ((POJONode) n).getPojo();
                if ((ob == null) || valueType.isInstance(ob)) {
                    return (T) ob;
                }
            }
        }
        return readValue(treeAsTokens(n), valueType);
    } catch (JsonProcessingException e) {
        throw e;
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}","public void test088() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ShortNode shortNode0 = ShortNode.valueOf((short) 140);
    Class<AsWrapperTypeDeserializer> class0 = AsWrapperTypeDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) shortNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer: no int/Int-argument constructor/factory method to deserialize from Number value (140)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}","/**
 *  Convenience conversion method that will bind data given JSON tree
 *  contains into specific value (usually bean) type.
 * <p>
 *  Functionally equivalent to:
 * <pre>
 *    objectMapper.convertValue(n, valueClass);
 * </pre>
 */"
"@SuppressWarnings(""unchecked"")
@Override
public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException {
    try {
        // Simple cast when we just want to cast to, say, ObjectNode
        // ... one caveat; while everything is Object.class, let's not take shortcut
        if (valueType != Object.class && valueType.isAssignableFrom(n.getClass())) {
            return (T) n;
        }
        // 20-Apr-2016, tatu: Another thing: for VALUE_EMBEDDED_OBJECT, assume similar
        //    short-cut coercion
        if (n.asToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {
            if (n instanceof POJONode) {
                Object ob = ((POJONode) n).getPojo();
                if ((ob == null) || valueType.isInstance(ob)) {
                    return (T) ob;
                }
            }
        }
        return readValue(treeAsTokens(n), valueType);
    } catch (JsonProcessingException e) {
        throw e;
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}","public void test099() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) bigIntegerNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: no suitable creator method found to deserialize from Number value (null)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}","/**
 *  Convenience conversion method that will bind data given JSON tree
 *  contains into specific value (usually bean) type.
 * <p>
 *  Functionally equivalent to:
 * <pre>
 *    objectMapper.convertValue(n, valueClass);
 * </pre>
 */"
"@SuppressWarnings(""unchecked"")
@Override
public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException {
    try {
        // Simple cast when we just want to cast to, say, ObjectNode
        // ... one caveat; while everything is Object.class, let's not take shortcut
        if (valueType != Object.class && valueType.isAssignableFrom(n.getClass())) {
            return (T) n;
        }
        // 20-Apr-2016, tatu: Another thing: for VALUE_EMBEDDED_OBJECT, assume similar
        //    short-cut coercion
        if (n.asToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {
            if (n instanceof POJONode) {
                Object ob = ((POJONode) n).getPojo();
                if ((ob == null) || valueType.isInstance(ob)) {
                    return (T) ob;
                }
            }
        }
        return readValue(treeAsTokens(n), valueType);
    } catch (JsonProcessingException e) {
        throw e;
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}","public void test1111() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0);
    Class<AsWrapperTypeDeserializer> class0 = AsWrapperTypeDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) numericNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer: no double/Double-argument constructor/factory method to deserialize from Number value (0.0)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}","/**
 *  Convenience conversion method that will bind data given JSON tree
 *  contains into specific value (usually bean) type.
 * <p>
 *  Functionally equivalent to:
 * <pre>
 *    objectMapper.convertValue(n, valueClass);
 * </pre>
 */"
"@SuppressWarnings(""unchecked"")
@Override
public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException {
    try {
        // Simple cast when we just want to cast to, say, ObjectNode
        // ... one caveat; while everything is Object.class, let's not take shortcut
        if (valueType != Object.class && valueType.isAssignableFrom(n.getClass())) {
            return (T) n;
        }
        // 20-Apr-2016, tatu: Another thing: for VALUE_EMBEDDED_OBJECT, assume similar
        //    short-cut coercion
        if (n.asToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {
            if (n instanceof POJONode) {
                Object ob = ((POJONode) n).getPojo();
                if ((ob == null) || valueType.isInstance(ob)) {
                    return (T) ob;
                }
            }
        }
        return readValue(treeAsTokens(n), valueType);
    } catch (JsonProcessingException e) {
        throw e;
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}","public void test1212() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BigDecimal bigDecimal0 = new BigDecimal((-3));
    DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) decimalNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: no suitable creator method found to deserialize from Number value (-3)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}","/**
 *  Convenience conversion method that will bind data given JSON tree
 *  contains into specific value (usually bean) type.
 * <p>
 *  Functionally equivalent to:
 * <pre>
 *    objectMapper.convertValue(n, valueClass);
 * </pre>
 */"
"@SuppressWarnings(""unchecked"")
@Override
public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException {
    try {
        // Simple cast when we just want to cast to, say, ObjectNode
        // ... one caveat; while everything is Object.class, let's not take shortcut
        if (valueType != Object.class && valueType.isAssignableFrom(n.getClass())) {
            return (T) n;
        }
        // 20-Apr-2016, tatu: Another thing: for VALUE_EMBEDDED_OBJECT, assume similar
        //    short-cut coercion
        if (n.asToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {
            if (n instanceof POJONode) {
                Object ob = ((POJONode) n).getPojo();
                if ((ob == null) || valueType.isInstance(ob)) {
                    return (T) ob;
                }
            }
        }
        return readValue(treeAsTokens(n), valueType);
    } catch (JsonProcessingException e) {
        throw e;
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}","public void test1313() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BooleanNode booleanNode0 = BooleanNode.TRUE;
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) booleanNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (true)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}","/**
 *  Convenience conversion method that will bind data given JSON tree
 *  contains into specific value (usually bean) type.
 * <p>
 *  Functionally equivalent to:
 * <pre>
 *    objectMapper.convertValue(n, valueClass);
 * </pre>
 */"
"@SuppressWarnings(""unchecked"")
@Override
public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException {
    try {
        // Simple cast when we just want to cast to, say, ObjectNode
        // ... one caveat; while everything is Object.class, let's not take shortcut
        if (valueType != Object.class && valueType.isAssignableFrom(n.getClass())) {
            return (T) n;
        }
        // 20-Apr-2016, tatu: Another thing: for VALUE_EMBEDDED_OBJECT, assume similar
        //    short-cut coercion
        if (n.asToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {
            if (n instanceof POJONode) {
                Object ob = ((POJONode) n).getPojo();
                if ((ob == null) || valueType.isInstance(ob)) {
                    return (T) ob;
                }
            }
        }
        return readValue(treeAsTokens(n), valueType);
    } catch (JsonProcessingException e) {
        throw e;
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}","public void test1414() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BooleanNode booleanNode0 = BooleanNode.FALSE;
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) booleanNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (false)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}","/**
 *  Convenience conversion method that will bind data given JSON tree
 *  contains into specific value (usually bean) type.
 * <p>
 *  Functionally equivalent to:
 * <pre>
 *    objectMapper.convertValue(n, valueClass);
 * </pre>
 */"
"@SuppressWarnings(""unchecked"")
@Override
public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException {
    try {
        // Simple cast when we just want to cast to, say, ObjectNode
        // ... one caveat; while everything is Object.class, let's not take shortcut
        if (valueType != Object.class && valueType.isAssignableFrom(n.getClass())) {
            return (T) n;
        }
        // 20-Apr-2016, tatu: Another thing: for VALUE_EMBEDDED_OBJECT, assume similar
        //    short-cut coercion
        if (n.asToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {
            if (n instanceof POJONode) {
                Object ob = ((POJONode) n).getPojo();
                if ((ob == null) || valueType.isInstance(ob)) {
                    return (T) ob;
                }
            }
        }
        return readValue(treeAsTokens(n), valueType);
    } catch (JsonProcessingException e) {
        throw e;
    } catch (IOException e) {
        // should not occur, no real i/o...
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}","public void test1515() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
    try {
        objectMapper0.treeToValue((TreeNode) arrayNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not deserialize instance of com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer out of START_ARRAY token
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}","/**
 *  Convenience conversion method that will bind data given JSON tree
 *  contains into specific value (usually bean) type.
 * <p>
 *  Functionally equivalent to:
 * <pre>
 *    objectMapper.convertValue(n, valueClass);
 * </pre>
 */"
