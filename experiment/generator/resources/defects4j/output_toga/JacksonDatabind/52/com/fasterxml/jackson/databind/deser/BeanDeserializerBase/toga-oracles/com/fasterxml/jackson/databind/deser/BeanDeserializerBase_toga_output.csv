project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[6];
    MapperFeature mapperFeature0 = MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING;
    mapperFeatureArray0[0] = mapperFeature0;
    mapperFeatureArray0[1] = mapperFeature0;
    mapperFeatureArray0[2] = mapperFeatureArray0[0];
    mapperFeatureArray0[3] = mapperFeature0;
    MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
    mapperFeatureArray0[4] = mapperFeature1;
    mapperFeatureArray0[5] = mapperFeatureArray0[0];
    objectMapper0.disable(mapperFeatureArray0);
    NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(nioPathDeserializer0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test011,"public void test011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.enableDefaultTyping();
    NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(nioPathDeserializer0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test077,"public void test077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
    NumericNode numericNode0 = arrayNode0.numberNode(10000000000L);
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) numericNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: no long/Long-argument constructor/factory method to deserialize from Number value (10000000000)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ShortNode shortNode0 = ShortNode.valueOf((short) 140);
    Class<AsWrapperTypeDeserializer> class0 = AsWrapperTypeDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) shortNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer: no int/Int-argument constructor/factory method to deserialize from Number value (140)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",1,
project,0,test099,"public void test099() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) bigIntegerNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: no suitable creator method found to deserialize from Number value (null)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0);
    Class<AsWrapperTypeDeserializer> class0 = AsWrapperTypeDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) numericNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer: no double/Double-argument constructor/factory method to deserialize from Number value (0.0)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BigDecimal bigDecimal0 = new BigDecimal((-3));
    DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) decimalNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: no suitable creator method found to deserialize from Number value (-3)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BooleanNode booleanNode0 = BooleanNode.TRUE;
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) booleanNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (true)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",1,
project,0,test1414,"public void test1414() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BooleanNode booleanNode0 = BooleanNode.FALSE;
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    try {
        objectMapper0.treeToValue((TreeNode) booleanNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (false)
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",1,
project,0,test1515,"public void test1515() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
    try {
        objectMapper0.treeToValue((TreeNode) arrayNode0, class0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not deserialize instance of com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer out of START_ARRAY token
        //  at [Source: java.lang.String@0000000924; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",1,
