project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
    assertTrue(collectionType0.isContainerType());
}",0,assertTrue(collectionType0.isContainerType())
project,0,test011,"public void test011() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    Class<CreatorProperty> class0 = CreatorProperty.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
    assertNotNull(objectReader0);
}",0,
project,0,test033,"public void test033() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
    ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapType0);
    assertFalse(arrayType0.isMapLikeType());
}",0,assertTrue(arrayType0.isMapLikeType())
project,0,test044,"public void test044() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<CollectionType> class0 = CollectionType.class;
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
    assertFalse(mapLikeType0.isInterface());
}",0,assertFalse(mapLikeType0.isInterface())
project,0,test055,"public void test055() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.clearCache();
}",0,
project,0,test066,"public void test066() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    assertTrue(collectionLikeType0.hasGenericTypes());
}",0,assertFalse(collectionLikeType0.hasGenericTypes())
project,0,test077,"public void test077() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
    assertTrue(collectionLikeType0.isInterface());
}",0,
project,0,test099,"public void test099() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(arrayType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.util.HashMap is not assignable to [Ljava.util.HashMap;
        //
        verifyException(""com.fasterxml.jackson.databind.JavaType"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    // Undeclared exception!
    try {
        typeFactory0.constructType((TypeReference<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    MapType mapType0 = typeFactory0.constructRawMapType(class0);
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, mapType0);
    assertTrue(javaType0.isContainerType());
}",0,assertTrue(javaType0.isContainerType())
project,0,test1212,"public void test1212() throws Throwable {
    Class<ArrayList> class0 = ArrayList.class;
    JavaType javaType0 = TypeFactory.unknownType();
    TypeFactory typeFactory0 = TypeFactory.instance;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, javaType0);
    assertFalse(collectionLikeType0.isInterface());
}",0,assertTrue(collectionLikeType0.isInterface())
project,0,test1313,"public void test1313() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<CollectionType> class0 = CollectionType.class;
    MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
    assertFalse(mapLikeType0.isEnumType());
}",0,assertTrue(mapLikeType0.isEnumType())
project,0,test1414,"public void test1414() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    try {
        typeFactory0.constructFromCanonical(""5qToukNo$#*Y"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Failed to parse type '5qToukNo$#*Y' (remaining: ''): Can not locate class '5qToukNo$#*Y', problem: Class '5qToukNo$#*Y.class' should be in target project, but could not be found!
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeParser"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    Class<ArrayList> class0 = ArrayList.class;
    JavaType javaType0 = TypeFactory.unknownType();
    TypeFactory typeFactory0 = TypeFactory.instance;
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, javaType0, javaType0);
    assertFalse(mapLikeType0.isInterface());
}",0,assertTrue(mapLikeType0.isInterface())
project,0,test1717,"public void test1717() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
    assertNotSame(typeFactory0, typeFactory1);
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<CreatorProperty> class0 = CreatorProperty.class;
    SimpleType simpleType0 = new SimpleType(class0);
    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
    assertSame(simpleType0, javaType0);
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
    JavaType javaType0 = typeFactory0.constructSpecializedType(typeBindings0.UNBOUND, class0);
    assertFalse(javaType0.isCollectionLikeType());
}",0,assertTrue(javaType0.isCollectionLikeType())
project,0,test2323,"public void test2323() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Class<CollectionType> class0 = CollectionType.class;
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class com.fasterxml.jackson.databind.type.CollectionType is not assignable to boolean
        //
        verifyException(""com.fasterxml.jackson.databind.JavaType"", e);
    }
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.lang.Class not subtype of [simple type, class boolean]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayList> class0 = ArrayList.class;
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    SimpleType simpleType1 = simpleType0.withTypeHandler(class0);
    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType1, class0);
    assertTrue(javaType0.hasGenericTypes());
}",0,assertTrue(javaType0.hasGenericTypes())
project,0,test2626,"public void test2626() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    JavaType javaType0 = simpleType0.widenBy(class0);
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    objectMapper0.acceptJsonFormatVisitor(javaType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    assertFalse(javaType0.isPrimitive());
}",0,assertTrue(javaType0.isPrimitive())
project,0,test2727,"public void test2727() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<BinaryNode> class0 = BinaryNode.class;
    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);
    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class1);
    assertNull(javaTypeArray1);
}",0,
project,0,test2728,"public void test2728() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<BinaryNode> class0 = BinaryNode.class;
    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);
    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class1);
    assertFalse(javaType0.useStaticType());
}",0,assertTrue(javaType0.useStaticType())
project,0,test2729,"public void test2729() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<BinaryNode> class0 = BinaryNode.class;
    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);
    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class1);
    assertFalse(javaType0.isAbstract());
}",0,assertTrue(javaType0.isAbstract())
project,0,test2830,"public void test2830() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    Class<MapType> class0 = MapType.class;
    // Undeclared exception!
    try {
        typeFactory0.findTypeParameters((JavaType) simpleType0, (Class<?>) class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.lang.Object is not a subtype of com.fasterxml.jackson.databind.type.MapType
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test2931,"public void test2931() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    Class<Object> class1 = Object.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
    Class<?> class2 = collectionType0.getParameterSource();
    Class<ClassKey> class3 = ClassKey.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class2, (Class<?>) class3);
    assertTrue(javaType0.hasGenericTypes());
}",0,assertTrue(javaType0.hasGenericTypes())
project,0,test3032,"public void test3032() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = typeFactory0._unknownType();
    JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, (JavaType) null);
    assertFalse(javaType1.isCollectionLikeType());
}",0,assertFalse(javaType1.isCollectionLikeType())
project,0,test3133,"public void test3133() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    assertNull(javaType0);
}",0,
project,0,test3234,"public void test3234() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);
    assertFalse(javaType0.useStaticType());
}",0,
project,0,test3335,"public void test3335() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, simpleType0);
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, typeBindings0.UNBOUND);
    assertTrue(javaType0.isFinal());
}",0,assertTrue(javaType0.isFinal())
project,0,test3436,"public void test3436() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    // Undeclared exception!
    try {
        typeFactory0.constructType((Type) null, (Class<?>) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test3537,"public void test3537() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    JavaType javaType0 = typeFactory0.constructType((Type) simpleType0, (JavaType) simpleType0);
    assertFalse(javaType0.isFinal());
}",0,assertTrue(javaType0.isFinal())
project,0,test3638,"public void test3638() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<MinguoEra> class0 = MinguoEra.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class0, (JavaType) null);
    assertTrue(javaType0.isEnumType());
}",0,assertTrue(javaType0.isEnumType())
project,0,test3739,"public void test3739() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    TypeModifier[] typeModifierArray0 = new TypeModifier[0];
    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
    Class<MapType> class1 = MapType.class;
    JavaType javaType0 = typeFactory1.constructType((Type) class0, (Class<?>) class1);
    assertTrue(javaType0.isContainerType());
}",0,assertTrue(javaType0.isContainerType())
project,0,test3840,"public void test3840() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<SimpleType> class0 = SimpleType.class;
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    TypeModifier[] typeModifierArray0 = new TypeModifier[1];
    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
    // Undeclared exception!
    try {
        typeFactory1.constructType((Type) class0, (Class<?>) class0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test4042,"public void test4042() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<SimpleModule> class0 = SimpleModule.class;
    Class<CollectionType>[] classArray0 = (Class<CollectionType>[]) Array.newInstance(Class.class, 0);
    JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
    assertFalse(javaType0.useStaticType());
}",0,assertFalse(javaType0.useStaticType())
project,0,test4345,"public void test4345() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Long> class0 = Long.TYPE;
    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class1);
    assertTrue(javaType0.isAbstract());
}",0,assertTrue(javaType0.isAbstract())
project,0,test4446,"public void test4446() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayList> class0 = ArrayList.class;
    ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, arrayList0);
    assertTrue(javaType0.isCollectionLikeType());
}",0,
project,0,test4547,"public void test4547() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Stack<JavaType> stack0 = new Stack<JavaType>();
    Class<MinguoEra> class0 = MinguoEra.class;
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
    assertFalse(javaType0.isCollectionLikeType());
}",0,
project,0,test4648,"public void test4648() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
    assertTrue(javaType0.isContainerType());
}",0,assertTrue(javaType0.isContainerType())
project,0,test4749,"public void test4749() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Vector<JavaType> vector0 = new Vector<JavaType>();
    vector0.add((JavaType) simpleType0);
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
    assertFalse(javaType0.isCollectionLikeType());
}",0,assertTrue(javaType0.isCollectionLikeType())
project,0,test4850,"public void test4850() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Vector<JavaType> vector0 = new Vector<JavaType>();
    vector0.add((JavaType) simpleType0);
    vector0.add((JavaType) simpleType0);
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
    assertFalse(javaType0.isFinal());
}",0,assertTrue(javaType0.isFinal())
project,0,test4951,"public void test4951() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<SimpleType> class0 = SimpleType.class;
    Stack<JavaType> stack0 = new Stack<JavaType>();
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
    assertFalse(javaType0.isCollectionLikeType());
}",0,
project,0,test5052,"public void test5052() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType javaType0 = TypeFactory.unknownType();
    Class<ArrayList> class0 = ArrayList.class;
    LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
    linkedList0.add(javaType0);
    JavaType javaType1 = typeFactory0._fromParameterizedClass(class0, linkedList0);
    assertTrue(javaType1.hasGenericTypes());
}",0,assertTrue(javaType1.hasGenericTypes())
project,0,test5153,"public void test5153() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<SimpleType> class0 = SimpleType.class;
    Stack<JavaType> stack0 = new Stack<JavaType>();
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    stack0.add(javaType0);
    // Undeclared exception!
    try {
        typeFactory0._fromParameterizedClass(class0, stack0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter type mismatch for com.fasterxml.jackson.databind.type.SimpleType (and target com.fasterxml.jackson.databind.type.SimpleType): expected 0 parameters, was given 1
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test5254,"public void test5254() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType javaType0 = typeFactory0._resolveVariableViaSubTypes((HierarchicType) null, ""2+u%&cXPr"", (TypeBindings) null);
    assertFalse(javaType0.isPrimitive());
}",0,
project,0,test5355,"public void test5355() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<SimpleType> class0 = SimpleType.class;
    Class<Object> class1 = Object.class;
    HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class1);
    assertFalse(hierarchicType0.isGeneric());
}",0,assertTrue(hierarchicType0.isGeneric())
project,0,test5456,"public void test5456() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    Class<CollectionType> class1 = CollectionType.class;
    HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class1);
    assertNull(hierarchicType0);
}",0,assertNotNull(hierarchicType0)
project,0,test5557,"public void test5557() throws Throwable {
    Class<HashMap> class0 = HashMap.class;
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Object> class1 = Object.class;
    HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
    assertFalse(hierarchicType0.isGeneric());
}",0,
project,0,test5658,"public void test5658() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ObjectWriter> class0 = ObjectWriter.class;
    HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class0);
    // Undeclared exception!
    try {
        typeFactory0._hashMapSuperInterfaceChain(hierarchicType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test5759,"public void test5759() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    // Undeclared exception!
    try {
        typeFactory0._arrayListSuperInterfaceChain((HierarchicType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
