{
  "test1212" : {
    "methodSignature" : "public final boolean isInterface()",
    "methodName" : "isInterface",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Class<ArrayList> class0 = ArrayList.class;\n    JavaType javaType0 = TypeFactory.unknownType();\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, javaType0);\n    collectionLikeType0.isInterface();\n}",
    "testName" : "test1212"
  },
  "test5658" : {
    "methodSignature" : "protected synchronized HierarchicType _hashMapSuperInterfaceChain(HierarchicType current)",
    "methodName" : "_hashMapSuperInterfaceChain",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5658() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ObjectWriter> class0 = ObjectWriter.class;\n    HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class0);\n    typeFactory0._hashMapSuperInterfaceChain(hierarchicType0);\n}",
    "testName" : "test5658"
  },
  "test4446" : {
    "methodSignature" : "public boolean isCollectionLikeType()",
    "methodName" : "isCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4446() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ArrayList> class0 = ArrayList.class;\n    ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();\n    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, arrayList0);\n    javaType0.isCollectionLikeType();\n}",
    "testName" : "test4446"
  },
  "test2424" : {
    "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
    "methodName" : "constructSpecializedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class0 = HashMap.class;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;\n    typeFactory0.constructSpecializedType(simpleType0, class0);\n}",
    "testName" : "test2424"
  },
  "test3436" : {
    "methodSignature" : "public JavaType constructType(Type type, Class<?> context)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3436() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.constructType((Type) null, (Class<?>) null);\n}",
    "testName" : "test3436"
  },
  "test1010" : {
    "methodSignature" : "public JavaType constructType(TypeReference<?> typeRef)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.constructType((TypeReference<?>) null);\n}",
    "testName" : "test1010"
  },
  "test5456" : {
    "methodSignature" : "protected HierarchicType _findSuperTypeChain(Class<?> subtype, Class<?> supertype)",
    "methodName" : "_findSuperTypeChain",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5456() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<CollectionLikeType> class0 = CollectionLikeType.class;\n    Class<CollectionType> class1 = CollectionType.class;\n    HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class1);\n}",
    "testName" : "test5456"
  },
  "test2222" : {
    "methodSignature" : "public boolean isCollectionLikeType()",
    "methodName" : "isCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<HashMap> class0 = HashMap.class;\n    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);\n    JavaType javaType0 = typeFactory0.constructSpecializedType(typeBindings0.UNBOUND, class0);\n    javaType0.isCollectionLikeType();\n}",
    "testName" : "test2222"
  },
  "test3234" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3234() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;\n    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);\n    javaType0.useStaticType();\n}",
    "testName" : "test3234"
  },
  "test033" : {
    "methodSignature" : "public boolean isMapLikeType()",
    "methodName" : "isMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<HashMap> class0 = HashMap.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);\n    ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapType0);\n    arrayType0.isMapLikeType();\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "public final boolean isInterface()",
    "methodName" : "isInterface",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ObjectIdResolver> class0 = ObjectIdResolver.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);\n    collectionLikeType0.isInterface();\n}",
    "testName" : "test077"
  },
  "test1616" : {
    "methodSignature" : "public final boolean isInterface()",
    "methodName" : "isInterface",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Class<ArrayList> class0 = ArrayList.class;\n    JavaType javaType0 = TypeFactory.unknownType();\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, javaType0, javaType0);\n    mapLikeType0.isInterface();\n}",
    "testName" : "test1616"
  },
  "test1414" : {
    "methodSignature" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
    "methodName" : "constructFromCanonical",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.constructFromCanonical(\"5qToukNo$#*Y\");\n}",
    "testName" : "test1414"
  },
  "test4648" : {
    "methodSignature" : "public abstract boolean isContainerType()",
    "methodName" : "isContainerType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4648() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<HashMap> class0 = HashMap.class;\n    LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();\n    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);\n    javaType0.isContainerType();\n}",
    "testName" : "test4648"
  },
  "test2626" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;\n    JavaType javaType0 = simpleType0.widenBy(class0);\n    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();\n    objectMapper0.acceptJsonFormatVisitor(javaType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);\n    javaType0.isPrimitive();\n}",
    "testName" : "test2626"
  },
  "test3638" : {
    "methodSignature" : "public final boolean isEnumType()",
    "methodName" : "isEnumType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3638() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<MinguoEra> class0 = MinguoEra.class;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0, (JavaType) null);\n    javaType0.isEnumType();\n}",
    "testName" : "test3638"
  },
  "test5254" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5254() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    JavaType javaType0 = typeFactory0._resolveVariableViaSubTypes((HierarchicType) null, \"2+u%&cXPr\", (TypeBindings) null);\n    javaType0.isPrimitive();\n}",
    "testName" : "test5254"
  },
  "test4042" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4042() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<SimpleModule> class0 = SimpleModule.class;\n    Class<CollectionType>[] classArray0 = (Class<CollectionType>[]) Array.newInstance(Class.class, 0);\n    JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);\n    javaType0.useStaticType();\n}",
    "testName" : "test4042"
  },
  "test3032" : {
    "methodSignature" : "public boolean isCollectionLikeType()",
    "methodName" : "isCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3032() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    JavaType javaType0 = typeFactory0._unknownType();\n    JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, (JavaType) null);\n    javaType1.isCollectionLikeType();\n}",
    "testName" : "test3032"
  },
  "test5052" : {
    "methodSignature" : "public boolean hasGenericTypes()",
    "methodName" : "hasGenericTypes",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5052() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<ArrayList> class0 = ArrayList.class;\n    LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();\n    linkedList0.add(javaType0);\n    JavaType javaType1 = typeFactory0._fromParameterizedClass(class0, linkedList0);\n    javaType1.hasGenericTypes();\n}",
    "testName" : "test5052"
  },
  "test2830" : {
    "methodSignature" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
    "methodName" : "findTypeParameters",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2830() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;\n    Class<MapType> class0 = MapType.class;\n    typeFactory0.findTypeParameters((JavaType) simpleType0, (Class<?>) class0);\n}",
    "testName" : "test2830"
  },
  "test3840" : {
    "methodSignature" : "public JavaType constructType(Type type, Class<?> context)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3840() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<SimpleType> class0 = SimpleType.class;\n    TypeParser typeParser0 = new TypeParser(typeFactory0);\n    TypeModifier[] typeModifierArray0 = new TypeModifier[1];\n    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);\n    typeFactory1.constructType((Type) class0, (Class<?>) class0);\n}",
    "testName" : "test3840"
  },
  "test4850" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4850() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class0 = HashMap.class;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;\n    Vector<JavaType> vector0 = new Vector<JavaType>();\n    vector0.add((JavaType) simpleType0);\n    vector0.add((JavaType) simpleType0);\n    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);\n    javaType0.isFinal();\n}",
    "testName" : "test4850"
  },
  "test066" : {
    "methodSignature" : "public boolean hasGenericTypes()",
    "methodName" : "hasGenericTypes",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<CollectionLikeType> class0 = CollectionLikeType.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    collectionLikeType0.hasGenericTypes();\n}",
    "testName" : "test066"
  },
  "test4547" : {
    "methodSignature" : "public boolean isCollectionLikeType()",
    "methodName" : "isCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4547() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Stack<JavaType> stack0 = new Stack<JavaType>();\n    Class<MinguoEra> class0 = MinguoEra.class;\n    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);\n    javaType0.isCollectionLikeType();\n}",
    "testName" : "test4547"
  },
  "test2323" : {
    "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
    "methodName" : "constructSpecializedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;\n    Class<CollectionType> class0 = CollectionType.class;\n    typeFactory0.constructSpecializedType(simpleType0, class0);\n}",
    "testName" : "test2323"
  },
  "test3335" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3335() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;\n    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, simpleType0);\n    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, typeBindings0.UNBOUND);\n    javaType0.isFinal();\n}",
    "testName" : "test3335"
  },
  "test1313" : {
    "methodSignature" : "public final boolean isEnumType()",
    "methodName" : "isEnumType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<CollectionType> class0 = CollectionType.class;\n    MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);\n    mapLikeType0.isEnumType();\n}",
    "testName" : "test1313"
  },
  "test5557" : {
    "methodSignature" : "public final boolean isGeneric()",
    "methodName" : "isGeneric",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5557() throws Throwable {\n    Class<HashMap> class0 = HashMap.class;\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<Object> class1 = Object.class;\n    HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);\n    hierarchicType0.isGeneric();\n}",
    "testName" : "test5557"
  },
  "test4345" : {
    "methodSignature" : "public boolean isAbstract()",
    "methodName" : "isAbstract",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4345() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<Long> class0 = Long.TYPE;\n    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class1);\n    javaType0.isAbstract();\n}",
    "testName" : "test4345"
  },
  "test2121" : {
    "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
    "methodName" : "constructSpecializedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<CreatorProperty> class0 = CreatorProperty.class;\n    SimpleType simpleType0 = new SimpleType(class0);\n    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);\n}",
    "testName" : "test2121"
  },
  "test3133" : {
    "methodSignature" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
    "methodName" : "moreSpecificType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3133() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);\n}",
    "testName" : "test3133"
  },
  "test1111" : {
    "methodSignature" : "public abstract boolean isContainerType()",
    "methodName" : "isContainerType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class0 = HashMap.class;\n    MapType mapType0 = typeFactory0.constructRawMapType(class0);\n    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;\n    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, mapType0);\n    javaType0.isContainerType();\n}",
    "testName" : "test1111"
  },
  "test5355" : {
    "methodSignature" : "public final boolean isGeneric()",
    "methodName" : "isGeneric",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5355() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<SimpleType> class0 = SimpleType.class;\n    Class<Object> class1 = Object.class;\n    HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class1);\n    hierarchicType0.isGeneric();\n}",
    "testName" : "test5355"
  },
  "test011" : {
    "methodSignature" : "public <T extends ObjectReader> T reader(JavaType type)",
    "methodName" : "reader",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    JsonFactory jsonFactory0 = new JsonFactory();\n    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);\n    Class<CreatorProperty> class0 = CreatorProperty.class;\n    SimpleType simpleType0 = new SimpleType(class0);\n    ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "public void clearCache()",
    "methodName" : "clearCache",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.clearCache();\n}",
    "testName" : "test055"
  },
  "test099" : {
    "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
    "methodName" : "constructSpecializedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<HashMap> class0 = HashMap.class;\n    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);\n    typeFactory0.constructSpecializedType(arrayType0, class0);\n}",
    "testName" : "test099"
  },
  "test2728" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2728() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<BinaryNode> class0 = BinaryNode.class;\n    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);\n    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class1);\n    javaType0.useStaticType();\n}",
    "testName" : "test2728"
  },
  "test2727" : {
    "methodSignature" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
    "methodName" : "findTypeParameters",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<BinaryNode> class0 = BinaryNode.class;\n    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);\n    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class1);\n}",
    "testName" : "test2727"
  },
  "test3739" : {
    "methodSignature" : "public abstract boolean isContainerType()",
    "methodName" : "isContainerType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3739() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<HashMap> class0 = HashMap.class;\n    TypeParser typeParser0 = new TypeParser(typeFactory0);\n    TypeModifier[] typeModifierArray0 = new TypeModifier[0];\n    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);\n    Class<MapType> class1 = MapType.class;\n    JavaType javaType0 = typeFactory1.constructType((Type) class0, (Class<?>) class1);\n    javaType0.isContainerType();\n}",
    "testName" : "test3739"
  },
  "test1717" : {
    "methodSignature" : "public TypeFactory withModifier(TypeModifier mod)",
    "methodName" : "withModifier",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);\n}",
    "testName" : "test1717"
  },
  "test2729" : {
    "methodSignature" : "public boolean isAbstract()",
    "methodName" : "isAbstract",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2729() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<BinaryNode> class0 = BinaryNode.class;\n    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);\n    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class1);\n    javaType0.isAbstract();\n}",
    "testName" : "test2729"
  },
  "test4749" : {
    "methodSignature" : "public boolean isCollectionLikeType()",
    "methodName" : "isCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4749() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class0 = HashMap.class;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;\n    Vector<JavaType> vector0 = new Vector<JavaType>();\n    vector0.add((JavaType) simpleType0);\n    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);\n    javaType0.isCollectionLikeType();\n}",
    "testName" : "test4749"
  },
  "test2525" : {
    "methodSignature" : "public boolean hasGenericTypes()",
    "methodName" : "hasGenericTypes",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ArrayList> class0 = ArrayList.class;\n    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;\n    SimpleType simpleType1 = simpleType0.withTypeHandler(class0);\n    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType1, class0);\n    javaType0.hasGenericTypes();\n}",
    "testName" : "test2525"
  },
  "test3537" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3537() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;\n    JavaType javaType0 = typeFactory0.constructType((Type) simpleType0, (JavaType) simpleType0);\n    javaType0.isFinal();\n}",
    "testName" : "test3537"
  },
  "test5759" : {
    "methodSignature" : "protected synchronized HierarchicType _arrayListSuperInterfaceChain(HierarchicType current)",
    "methodName" : "_arrayListSuperInterfaceChain",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5759() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0._arrayListSuperInterfaceChain((HierarchicType) null);\n}",
    "testName" : "test5759"
  },
  "test5153" : {
    "methodSignature" : "protected JavaType _fromParameterizedClass(Class<?> clz, List<JavaType> paramTypes)",
    "methodName" : "_fromParameterizedClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5153() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<SimpleType> class0 = SimpleType.class;\n    Stack<JavaType> stack0 = new Stack<JavaType>();\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n    stack0.add(javaType0);\n    typeFactory0._fromParameterizedClass(class0, stack0);\n}",
    "testName" : "test5153"
  },
  "test2931" : {
    "methodSignature" : "public boolean hasGenericTypes()",
    "methodName" : "hasGenericTypes",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2931() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<LinkedList> class0 = LinkedList.class;\n    Class<Object> class1 = Object.class;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);\n    Class<?> class2 = collectionType0.getParameterSource();\n    Class<ClassKey> class3 = ClassKey.class;\n    JavaType javaType0 = typeFactory0.constructType((Type) class2, (Class<?>) class3);\n    javaType0.hasGenericTypes();\n}",
    "testName" : "test2931"
  },
  "test4951" : {
    "methodSignature" : "public boolean isCollectionLikeType()",
    "methodName" : "isCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4951() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<SimpleType> class0 = SimpleType.class;\n    Stack<JavaType> stack0 = new Stack<JavaType>();\n    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);\n    javaType0.isCollectionLikeType();\n}",
    "testName" : "test4951"
  },
  "test000" : {
    "methodSignature" : "public boolean isContainerType()",
    "methodName" : "isContainerType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<LinkedList> class0 = LinkedList.class;\n    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);\n    collectionType0.isContainerType();\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "public final boolean isInterface()",
    "methodName" : "isInterface",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<CollectionType> class0 = CollectionType.class;\n    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);\n    mapLikeType0.isInterface();\n}",
    "testName" : "test044"
  }
}