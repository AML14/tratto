focal_method,test_prefix,docstring
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
@Override
public boolean isContainerType() {
    return true;
}","public void test000() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
    assertTrue(collectionType0.isContainerType());
}",""
"@SuppressWarnings(""unchecked"")
public <T extends ObjectReader> T reader(JavaType type) {
    return (T) _newReader(getDeserializationConfig(), type, null, null, _injectableValues);
}","public void test011() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    Class<CreatorProperty> class0 = CreatorProperty.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * read or update instances of specified type
 */"
"@Override
public boolean isMapLikeType() {
    return false;
}","public void test033() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
    ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapType0);
    assertFalse(arrayType0.isMapLikeType());
}","/**
 * @return True if type is either true {@link java.util.Map} type,
 *    or something similar (meaning it has at least two type parameter;
 *    first one describing key type, second value type)
 */"
"@Override
public final boolean isInterface() {
    return _class.isInterface();
}","public void test044() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<CollectionType> class0 = CollectionType.class;
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
    assertFalse(mapLikeType0.isInterface());
}",""
"public void clearCache() {
    _typeCache.clear();
}","public void test055() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.clearCache();
}","/**
 * Method that will clear up any cached type definitions that may
 * be cached by this {@link TypeFactory} instance.
 * This method should not be commonly used, that is, only use it
 * if you know there is a problem with retention of type definitions;
 * the most likely (and currently only known) problem is retention
 * of {@link Class} instances via {@link JavaType} reference.
 *
 * @since 2.4.1
 */"
"/*
    /**********************************************************
    /* Public API, type parameter access; pass-through
    /**********************************************************
     */
@Override
public boolean hasGenericTypes() {
    return containedTypeCount() > 0;
}","public void test066() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    assertTrue(collectionLikeType0.hasGenericTypes());
}",""
"@Override
public final boolean isInterface() {
    return _class.isInterface();
}","public void test077() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
    assertTrue(collectionLikeType0.isInterface());
}",""
"/*
    /**********************************************************
    /* Type conversion, parameterization resolution methods
    /**********************************************************
     */
/**
 * Factory method for creating a subtype of given base type, as defined
 * by specified subclass; but retaining generic type information if any.
 * Can be used, for example, to get equivalent of ""HashMap&lt;String,Integer>""
 * from ""Map&ltString,Integer>"" by giving <code>HashMap.class</code>
 * as subclass.
 */
public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {
    // simple optimization to avoid costly introspection if type-erased type does NOT differ
    if (baseType.getRawClass() == subclass) {
        return baseType;
    }
    // Currently only SimpleType instances can become something else
    if (baseType instanceof SimpleType) {
        // and only if subclass is an array, Collection or Map
        if (subclass.isArray() || Map.class.isAssignableFrom(subclass) || Collection.class.isAssignableFrom(subclass)) {
            // need to assert type compatibility...
            if (!baseType.getRawClass().isAssignableFrom(subclass)) {
                throw new IllegalArgumentException(""Class "" + subclass.getClass().getName() + "" not subtype of "" + baseType);
            }
            // this _should_ work, right?
            JavaType subtype = _fromClass(subclass, new TypeBindings(this, baseType.getRawClass()));
            // one more thing: handlers to copy?
            Object h = baseType.getValueHandler();
            if (h != null) {
                subtype = subtype.withValueHandler(h);
            }
            h = baseType.getTypeHandler();
            if (h != null) {
                subtype = subtype.withTypeHandler(h);
            }
            return subtype;
        }
    }
    // otherwise regular narrowing should work just fine
    return baseType.narrowBy(subclass);
}","public void test099() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(arrayType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.util.HashMap is not assignable to [Ljava.util.HashMap;
        //
        verifyException(""com.fasterxml.jackson.databind.JavaType"", e);
    }
}",""
"public JavaType constructType(TypeReference<?> typeRef) {
    return _constructType(typeRef.getType(), null);
}","public void test1010() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    // Undeclared exception!
    try {
        typeFactory0.constructType((TypeReference<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
"@Override
public abstract boolean isContainerType();","public void test1111() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    MapType mapType0 = typeFactory0.constructRawMapType(class0);
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, mapType0);
    assertTrue(javaType0.isContainerType());
}","/**
 * @return True if type represented is a container type; this includes
 *    array, Map and Collection types.
 */"
"@Override
public final boolean isInterface() {
    return _class.isInterface();
}","public void test1212() throws Throwable {
    Class<ArrayList> class0 = ArrayList.class;
    JavaType javaType0 = TypeFactory.unknownType();
    TypeFactory typeFactory0 = TypeFactory.instance;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, javaType0);
    assertFalse(collectionLikeType0.isInterface());
}",""
"@Override
public final boolean isEnumType() {
    return _class.isEnum();
}","public void test1313() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<CollectionType> class0 = CollectionType.class;
    MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
    assertFalse(mapLikeType0.isEnumType());
}",""
"public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException {
    return _parser.parse(canonical);
}","public void test1414() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    try {
        typeFactory0.constructFromCanonical(""5qToukNo$#*Y"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Failed to parse type '5qToukNo$#*Y' (remaining: ''): Can not locate class '5qToukNo$#*Y', problem: Class '5qToukNo$#*Y.class' should be in target project, but could not be found!
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeParser"", e);
    }
}","/**
 * Factory method for constructing a {@link JavaType} out of its canonical
 * representation (see {@link JavaType#toCanonical()}).
 *
 * @param canonical Canonical string representation of a type
 *
 * @throws IllegalArgumentException If canonical representation is malformed,
 *   or class that type represents (including its generic parameters) is
 *   not found
 */"
"@Override
public final boolean isInterface() {
    return _class.isInterface();
}","public void test1616() throws Throwable {
    Class<ArrayList> class0 = ArrayList.class;
    JavaType javaType0 = TypeFactory.unknownType();
    TypeFactory typeFactory0 = TypeFactory.instance;
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, javaType0, javaType0);
    assertFalse(mapLikeType0.isInterface());
}",""
"public TypeFactory withModifier(TypeModifier mod) {
    if (mod == null) {
        // mostly for unit tests
        return new TypeFactory(_parser, _modifiers);
    }
    if (_modifiers == null) {
        return new TypeFactory(_parser, new TypeModifier[] { mod });
    }
    return new TypeFactory(_parser, ArrayBuilders.insertInListNoDup(_modifiers, mod));
}","public void test1717() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
    assertNotSame(typeFactory0, typeFactory1);
}",""
"/*
    /**********************************************************
    /* Type conversion, parameterization resolution methods
    /**********************************************************
     */
/**
 * Factory method for creating a subtype of given base type, as defined
 * by specified subclass; but retaining generic type information if any.
 * Can be used, for example, to get equivalent of ""HashMap&lt;String,Integer>""
 * from ""Map&ltString,Integer>"" by giving <code>HashMap.class</code>
 * as subclass.
 */
public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {
    // simple optimization to avoid costly introspection if type-erased type does NOT differ
    if (baseType.getRawClass() == subclass) {
        return baseType;
    }
    // Currently only SimpleType instances can become something else
    if (baseType instanceof SimpleType) {
        // and only if subclass is an array, Collection or Map
        if (subclass.isArray() || Map.class.isAssignableFrom(subclass) || Collection.class.isAssignableFrom(subclass)) {
            // need to assert type compatibility...
            if (!baseType.getRawClass().isAssignableFrom(subclass)) {
                throw new IllegalArgumentException(""Class "" + subclass.getClass().getName() + "" not subtype of "" + baseType);
            }
            // this _should_ work, right?
            JavaType subtype = _fromClass(subclass, new TypeBindings(this, baseType.getRawClass()));
            // one more thing: handlers to copy?
            Object h = baseType.getValueHandler();
            if (h != null) {
                subtype = subtype.withValueHandler(h);
            }
            h = baseType.getTypeHandler();
            if (h != null) {
                subtype = subtype.withTypeHandler(h);
            }
            return subtype;
        }
    }
    // otherwise regular narrowing should work just fine
    return baseType.narrowBy(subclass);
}","public void test2121() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<CreatorProperty> class0 = CreatorProperty.class;
    SimpleType simpleType0 = new SimpleType(class0);
    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
    assertSame(simpleType0, javaType0);
}",""
"@Override
public boolean isCollectionLikeType() {
    return false;
}","public void test2222() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
    JavaType javaType0 = typeFactory0.constructSpecializedType(typeBindings0.UNBOUND, class0);
    assertFalse(javaType0.isCollectionLikeType());
}","/**
 * @return True if type is either true {@link java.util.Collection} type,
 *    or something similar (meaning it has at least one type parameter,
 *    which describes type of contents)
 */"
"/*
    /**********************************************************
    /* Type conversion, parameterization resolution methods
    /**********************************************************
     */
/**
 * Factory method for creating a subtype of given base type, as defined
 * by specified subclass; but retaining generic type information if any.
 * Can be used, for example, to get equivalent of ""HashMap&lt;String,Integer>""
 * from ""Map&ltString,Integer>"" by giving <code>HashMap.class</code>
 * as subclass.
 */
public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {
    // simple optimization to avoid costly introspection if type-erased type does NOT differ
    if (baseType.getRawClass() == subclass) {
        return baseType;
    }
    // Currently only SimpleType instances can become something else
    if (baseType instanceof SimpleType) {
        // and only if subclass is an array, Collection or Map
        if (subclass.isArray() || Map.class.isAssignableFrom(subclass) || Collection.class.isAssignableFrom(subclass)) {
            // need to assert type compatibility...
            if (!baseType.getRawClass().isAssignableFrom(subclass)) {
                throw new IllegalArgumentException(""Class "" + subclass.getClass().getName() + "" not subtype of "" + baseType);
            }
            // this _should_ work, right?
            JavaType subtype = _fromClass(subclass, new TypeBindings(this, baseType.getRawClass()));
            // one more thing: handlers to copy?
            Object h = baseType.getValueHandler();
            if (h != null) {
                subtype = subtype.withValueHandler(h);
            }
            h = baseType.getTypeHandler();
            if (h != null) {
                subtype = subtype.withTypeHandler(h);
            }
            return subtype;
        }
    }
    // otherwise regular narrowing should work just fine
    return baseType.narrowBy(subclass);
}","public void test2323() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Class<CollectionType> class0 = CollectionType.class;
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class com.fasterxml.jackson.databind.type.CollectionType is not assignable to boolean
        //
        verifyException(""com.fasterxml.jackson.databind.JavaType"", e);
    }
}",""
"/*
    /**********************************************************
    /* Type conversion, parameterization resolution methods
    /**********************************************************
     */
/**
 * Factory method for creating a subtype of given base type, as defined
 * by specified subclass; but retaining generic type information if any.
 * Can be used, for example, to get equivalent of ""HashMap&lt;String,Integer>""
 * from ""Map&ltString,Integer>"" by giving <code>HashMap.class</code>
 * as subclass.
 */
public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {
    // simple optimization to avoid costly introspection if type-erased type does NOT differ
    if (baseType.getRawClass() == subclass) {
        return baseType;
    }
    // Currently only SimpleType instances can become something else
    if (baseType instanceof SimpleType) {
        // and only if subclass is an array, Collection or Map
        if (subclass.isArray() || Map.class.isAssignableFrom(subclass) || Collection.class.isAssignableFrom(subclass)) {
            // need to assert type compatibility...
            if (!baseType.getRawClass().isAssignableFrom(subclass)) {
                throw new IllegalArgumentException(""Class "" + subclass.getClass().getName() + "" not subtype of "" + baseType);
            }
            // this _should_ work, right?
            JavaType subtype = _fromClass(subclass, new TypeBindings(this, baseType.getRawClass()));
            // one more thing: handlers to copy?
            Object h = baseType.getValueHandler();
            if (h != null) {
                subtype = subtype.withValueHandler(h);
            }
            h = baseType.getTypeHandler();
            if (h != null) {
                subtype = subtype.withTypeHandler(h);
            }
            return subtype;
        }
    }
    // otherwise regular narrowing should work just fine
    return baseType.narrowBy(subclass);
}","public void test2424() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.lang.Class not subtype of [simple type, class boolean]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, type parameter access; pass-through
    /**********************************************************
     */
@Override
public boolean hasGenericTypes() {
    return containedTypeCount() > 0;
}","public void test2525() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayList> class0 = ArrayList.class;
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    SimpleType simpleType1 = simpleType0.withTypeHandler(class0);
    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType1, class0);
    assertTrue(javaType0.hasGenericTypes());
}",""
"@Override
public final boolean isPrimitive() {
    return _class.isPrimitive();
}","public void test2626() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    JavaType javaType0 = simpleType0.widenBy(class0);
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    objectMapper0.acceptJsonFormatVisitor(javaType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    assertFalse(javaType0.isPrimitive());
}",""
"public JavaType[] findTypeParameters(JavaType type, Class<?> expType) {
    /* Tricky part here is that some JavaType instances have been constructed
         * from generic type (usually via TypeReference); and in those case
         * types have been resolved. Alternative is that the leaf type is type-erased
         * class, in which case this has not been done.
         * For now simplest way to handle this is to split processing in two: latter
         * case actually fully works; and former mostly works. In future may need to
         * rewrite former part, which requires changes to JavaType as well.
         */
    if (expType == type.getParameterSource()) {
        // Direct type info; good since we can return it as is
        int count = type.containedTypeCount();
        if (count == 0)
            return null;
        JavaType[] result = new JavaType[count];
        for (int i = 0; i < count; ++i) {
            result[i] = type.containedType(i);
        }
        return result;
    }
    /* Otherwise need to go through type-erased class. This may miss cases where
         * we get generic type; ideally JavaType/SimpleType would retain information
         * about generic declaration at main level... but let's worry about that
         * if/when there are problems; current handling is an improvement over earlier
         * code.
         */
    Class<?> raw = type.getRawClass();
    return findTypeParameters(raw, expType, new TypeBindings(this, type));
}","public void test2727() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<BinaryNode> class0 = BinaryNode.class;
    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);
    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class1);
    assertNull(javaTypeArray1);
}","/**
 * Method that is to figure out actual type parameters that given
 * class binds to generic types defined by given (generic)
 * interface or class.
 * This could mean, for example, trying to figure out
 * key and value types for Map implementations.
 *
 * @param type Sub-type (leaf type) that implements <code>expType</code>
 */"
"public final boolean useStaticType() {
    return _asStatic;
}","public void test2728() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<BinaryNode> class0 = BinaryNode.class;
    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);
    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class1);
    assertFalse(javaType0.useStaticType());
}","/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */"
"@Override
public boolean isAbstract() {
    return Modifier.isAbstract(_class.getModifiers());
}","public void test2729() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<BinaryNode> class0 = BinaryNode.class;
    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);
    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class1);
    assertFalse(javaType0.isAbstract());
}",""
"public JavaType[] findTypeParameters(JavaType type, Class<?> expType) {
    /* Tricky part here is that some JavaType instances have been constructed
         * from generic type (usually via TypeReference); and in those case
         * types have been resolved. Alternative is that the leaf type is type-erased
         * class, in which case this has not been done.
         * For now simplest way to handle this is to split processing in two: latter
         * case actually fully works; and former mostly works. In future may need to
         * rewrite former part, which requires changes to JavaType as well.
         */
    if (expType == type.getParameterSource()) {
        // Direct type info; good since we can return it as is
        int count = type.containedTypeCount();
        if (count == 0)
            return null;
        JavaType[] result = new JavaType[count];
        for (int i = 0; i < count; ++i) {
            result[i] = type.containedType(i);
        }
        return result;
    }
    /* Otherwise need to go through type-erased class. This may miss cases where
         * we get generic type; ideally JavaType/SimpleType would retain information
         * about generic declaration at main level... but let's worry about that
         * if/when there are problems; current handling is an improvement over earlier
         * code.
         */
    Class<?> raw = type.getRawClass();
    return findTypeParameters(raw, expType, new TypeBindings(this, type));
}","public void test2830() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    Class<MapType> class0 = MapType.class;
    // Undeclared exception!
    try {
        typeFactory0.findTypeParameters((JavaType) simpleType0, (Class<?>) class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.lang.Object is not a subtype of com.fasterxml.jackson.databind.type.MapType
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}","/**
 * Method that is to figure out actual type parameters that given
 * class binds to generic types defined by given (generic)
 * interface or class.
 * This could mean, for example, trying to figure out
 * key and value types for Map implementations.
 *
 * @param type Sub-type (leaf type) that implements <code>expType</code>
 */"
"/*
    /**********************************************************
    /* Public API, type parameter access; pass-through
    /**********************************************************
     */
@Override
public boolean hasGenericTypes() {
    return containedTypeCount() > 0;
}","public void test2931() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    Class<Object> class1 = Object.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
    Class<?> class2 = collectionType0.getParameterSource();
    Class<ClassKey> class3 = ClassKey.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class2, (Class<?>) class3);
    assertTrue(javaType0.hasGenericTypes());
}",""
"@Override
public boolean isCollectionLikeType() {
    return false;
}","public void test3032() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = typeFactory0._unknownType();
    JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, (JavaType) null);
    assertFalse(javaType1.isCollectionLikeType());
}","/**
 * @return True if type is either true {@link java.util.Collection} type,
 *    or something similar (meaning it has at least one type parameter,
 *    which describes type of contents)
 */"
"public JavaType moreSpecificType(JavaType type1, JavaType type2) {
    if (type1 == null) {
        return type2;
    }
    if (type2 == null) {
        return type1;
    }
    Class<?> raw1 = type1.getRawClass();
    Class<?> raw2 = type2.getRawClass();
    if (raw1 == raw2) {
        return type1;
    }
    // TODO: maybe try sub-classing, to retain generic types?
    if (raw1.isAssignableFrom(raw2)) {
        return type2;
    }
    return type1;
}","public void test3133() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    assertNull(javaType0);
}","/**
 * Method that can be called to figure out more specific of two
 * types (if they are related; that is, one implements or extends the
 * other); or if not related, return the primary type.
 *
 * @param type1 Primary type to consider
 * @param type2 Secondary type to consider
 *
 * @since 2.2
 */"
"public final boolean useStaticType() {
    return _asStatic;
}","public void test3234() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);
    assertFalse(javaType0.useStaticType());
}","/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */"
"@Override
public final boolean isFinal() {
    return Modifier.isFinal(_class.getModifiers());
}","public void test3335() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, simpleType0);
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, typeBindings0.UNBOUND);
    assertTrue(javaType0.isFinal());
}",""
"public JavaType constructType(Type type, Class<?> context) {
    TypeBindings b = (context == null) ? null : new TypeBindings(this, context);
    return _constructType(type, b);
}","public void test3436() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    // Undeclared exception!
    try {
        typeFactory0.constructType((Type) null, (Class<?>) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
"@Override
public final boolean isFinal() {
    return Modifier.isFinal(_class.getModifiers());
}","public void test3537() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    JavaType javaType0 = typeFactory0.constructType((Type) simpleType0, (JavaType) simpleType0);
    assertFalse(javaType0.isFinal());
}",""
"@Override
public final boolean isEnumType() {
    return _class.isEnum();
}","public void test3638() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<MinguoEra> class0 = MinguoEra.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class0, (JavaType) null);
    assertTrue(javaType0.isEnumType());
}",""
"@Override
public abstract boolean isContainerType();","public void test3739() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    TypeModifier[] typeModifierArray0 = new TypeModifier[0];
    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
    Class<MapType> class1 = MapType.class;
    JavaType javaType0 = typeFactory1.constructType((Type) class0, (Class<?>) class1);
    assertTrue(javaType0.isContainerType());
}","/**
 * @return True if type represented is a container type; this includes
 *    array, Map and Collection types.
 */"
"public JavaType constructType(Type type, Class<?> context) {
    TypeBindings b = (context == null) ? null : new TypeBindings(this, context);
    return _constructType(type, b);
}","public void test3840() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<SimpleType> class0 = SimpleType.class;
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    TypeModifier[] typeModifierArray0 = new TypeModifier[1];
    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
    // Undeclared exception!
    try {
        typeFactory1.constructType((Type) class0, (Class<?>) class0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
"public final boolean useStaticType() {
    return _asStatic;
}","public void test4042() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<SimpleModule> class0 = SimpleModule.class;
    Class<CollectionType>[] classArray0 = (Class<CollectionType>[]) Array.newInstance(Class.class, 0);
    JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
    assertFalse(javaType0.useStaticType());
}","/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */"
"@Override
public boolean isAbstract() {
    return Modifier.isAbstract(_class.getModifiers());
}","public void test4345() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Long> class0 = Long.TYPE;
    Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class1);
    assertTrue(javaType0.isAbstract());
}",""
"@Override
public boolean isCollectionLikeType() {
    return false;
}","public void test4446() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayList> class0 = ArrayList.class;
    ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, arrayList0);
    assertTrue(javaType0.isCollectionLikeType());
}","/**
 * @return True if type is either true {@link java.util.Collection} type,
 *    or something similar (meaning it has at least one type parameter,
 *    which describes type of contents)
 */"
"@Override
public boolean isCollectionLikeType() {
    return false;
}","public void test4547() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Stack<JavaType> stack0 = new Stack<JavaType>();
    Class<MinguoEra> class0 = MinguoEra.class;
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
    assertFalse(javaType0.isCollectionLikeType());
}","/**
 * @return True if type is either true {@link java.util.Collection} type,
 *    or something similar (meaning it has at least one type parameter,
 *    which describes type of contents)
 */"
"@Override
public abstract boolean isContainerType();","public void test4648() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
    assertTrue(javaType0.isContainerType());
}","/**
 * @return True if type represented is a container type; this includes
 *    array, Map and Collection types.
 */"
"@Override
public boolean isCollectionLikeType() {
    return false;
}","public void test4749() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Vector<JavaType> vector0 = new Vector<JavaType>();
    vector0.add((JavaType) simpleType0);
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
    assertFalse(javaType0.isCollectionLikeType());
}","/**
 * @return True if type is either true {@link java.util.Collection} type,
 *    or something similar (meaning it has at least one type parameter,
 *    which describes type of contents)
 */"
"@Override
public final boolean isFinal() {
    return Modifier.isFinal(_class.getModifiers());
}","public void test4850() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Vector<JavaType> vector0 = new Vector<JavaType>();
    vector0.add((JavaType) simpleType0);
    vector0.add((JavaType) simpleType0);
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
    assertFalse(javaType0.isFinal());
}",""
"@Override
public boolean isCollectionLikeType() {
    return false;
}","public void test4951() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<SimpleType> class0 = SimpleType.class;
    Stack<JavaType> stack0 = new Stack<JavaType>();
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
    assertFalse(javaType0.isCollectionLikeType());
}","/**
 * @return True if type is either true {@link java.util.Collection} type,
 *    or something similar (meaning it has at least one type parameter,
 *    which describes type of contents)
 */"
"/*
    /**********************************************************
    /* Public API, type parameter access; pass-through
    /**********************************************************
     */
@Override
public boolean hasGenericTypes() {
    return containedTypeCount() > 0;
}","public void test5052() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType javaType0 = TypeFactory.unknownType();
    Class<ArrayList> class0 = ArrayList.class;
    LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
    linkedList0.add(javaType0);
    JavaType javaType1 = typeFactory0._fromParameterizedClass(class0, linkedList0);
    assertTrue(javaType1.hasGenericTypes());
}",""
"protected JavaType _fromParameterizedClass(Class<?> clz, List<JavaType> paramTypes) {
    if (clz.isArray()) {
        // ignore generics (should never have any)
        return ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);
    }
    if (clz.isEnum()) {
        // ditto for enums
        return new SimpleType(clz);
    }
    if (Map.class.isAssignableFrom(clz)) {
        // First: if we do have param types, use them
        JavaType keyType, contentType;
        if (paramTypes.size() > 0) {
            keyType = paramTypes.get(0);
            contentType = (paramTypes.size() >= 2) ? paramTypes.get(1) : _unknownType();
            return MapType.construct(clz, keyType, contentType);
        }
        return _mapType(clz);
    }
    if (Collection.class.isAssignableFrom(clz)) {
        if (paramTypes.size() >= 1) {
            return CollectionType.construct(clz, paramTypes.get(0));
        }
        return _collectionType(clz);
    }
    if (paramTypes.size() == 0) {
        return new SimpleType(clz);
    }
    // Hmmh. Does this actually occur?
    JavaType[] pt = paramTypes.toArray(new JavaType[paramTypes.size()]);
    return constructSimpleType(clz, clz, pt);
}","public void test5153() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<SimpleType> class0 = SimpleType.class;
    Stack<JavaType> stack0 = new Stack<JavaType>();
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    stack0.add(javaType0);
    // Undeclared exception!
    try {
        typeFactory0._fromParameterizedClass(class0, stack0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter type mismatch for com.fasterxml.jackson.databind.type.SimpleType (and target com.fasterxml.jackson.databind.type.SimpleType): expected 0 parameters, was given 1
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}","/**
 * Method used by {@link TypeParser} when generics-aware version
 * is constructed.
 */"
"@Override
public final boolean isPrimitive() {
    return _class.isPrimitive();
}","public void test5254() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType javaType0 = typeFactory0._resolveVariableViaSubTypes((HierarchicType) null, ""2+u%&cXPr"", (TypeBindings) null);
    assertFalse(javaType0.isPrimitive());
}",""
"public final boolean isGeneric() {
    return _genericType != null;
}","public void test5355() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<SimpleType> class0 = SimpleType.class;
    Class<Object> class1 = Object.class;
    HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class1);
    assertFalse(hierarchicType0.isGeneric());
}",""
"/*
    /**********************************************************
    /* Helper methods
    /**********************************************************
     */
/**
 * Helper method used to find inheritance (implements, extends) path
 * between given types, if one exists (caller generally checks before
 * calling this method). Returned type represents given <b>subtype</b>,
 * with supertype linkage extending to <b>supertype</b>.
 */
protected HierarchicType _findSuperTypeChain(Class<?> subtype, Class<?> supertype) {
    // If super-type is a class (not interface), bit simpler
    if (supertype.isInterface()) {
        return _findSuperInterfaceChain(subtype, supertype);
    }
    return _findSuperClassChain(subtype, supertype);
}","public void test5456() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    Class<CollectionType> class1 = CollectionType.class;
    HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class1);
    assertNull(hierarchicType0);
}",""
"public final boolean isGeneric() {
    return _genericType != null;
}","public void test5557() throws Throwable {
    Class<HashMap> class0 = HashMap.class;
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Object> class1 = Object.class;
    HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
    assertFalse(hierarchicType0.isGeneric());
}",""
"protected synchronized HierarchicType _hashMapSuperInterfaceChain(HierarchicType current) {
    if (_cachedHashMapType == null) {
        HierarchicType base = current.deepCloneWithoutSubtype();
        _doFindSuperInterfaceChain(base, Map.class);
        _cachedHashMapType = base.getSuperType();
    }
    HierarchicType t = _cachedHashMapType.deepCloneWithoutSubtype();
    current.setSuperType(t);
    t.setSubType(current);
    return current;
}","public void test5658() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ObjectWriter> class0 = ObjectWriter.class;
    HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class0);
    // Undeclared exception!
    try {
        typeFactory0._hashMapSuperInterfaceChain(hierarchicType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
"protected synchronized HierarchicType _arrayListSuperInterfaceChain(HierarchicType current) {
    if (_cachedArrayListType == null) {
        HierarchicType base = current.deepCloneWithoutSubtype();
        _doFindSuperInterfaceChain(base, List.class);
        _cachedArrayListType = base.getSuperType();
    }
    HierarchicType t = _cachedArrayListType.deepCloneWithoutSubtype();
    current.setSuperType(t);
    t.setSubType(current);
    return current;
}","public void test5759() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    // Undeclared exception!
    try {
        typeFactory0._arrayListSuperInterfaceChain((HierarchicType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
