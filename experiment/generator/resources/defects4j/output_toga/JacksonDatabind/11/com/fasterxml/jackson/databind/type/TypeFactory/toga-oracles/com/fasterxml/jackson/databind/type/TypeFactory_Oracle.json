[ {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean isContainerType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(collectionType0.isContainerType())",
  "exception" : "",
  "testName" : "test000"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public <T extends ObjectReader> T reader(JavaType type)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test011"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean isMapLikeType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(arrayType0.isMapLikeType())",
  "exception" : "",
  "testName" : "test033"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isInterface()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(mapLikeType0.isInterface())",
  "exception" : "",
  "testName" : "test044"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public void clearCache()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test055"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean hasGenericTypes()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(collectionLikeType0.hasGenericTypes())",
  "exception" : "",
  "testName" : "test066"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isInterface()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test077"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test099"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public JavaType constructType(TypeReference<?> typeRef)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1010"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public abstract boolean isContainerType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.isContainerType())",
  "exception" : "",
  "testName" : "test1111"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isInterface()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(collectionLikeType0.isInterface())",
  "exception" : "",
  "testName" : "test1212"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isEnumType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(mapLikeType0.isEnumType())",
  "exception" : "",
  "testName" : "test1313"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1414"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isInterface()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(mapLikeType0.isInterface())",
  "exception" : "",
  "testName" : "test1616"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public TypeFactory withModifier(TypeModifier mod)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1717"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2121"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean isCollectionLikeType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.isCollectionLikeType())",
  "exception" : "",
  "testName" : "test2222"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2323"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2424"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean hasGenericTypes()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.hasGenericTypes())",
  "exception" : "",
  "testName" : "test2525"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isPrimitive()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.isPrimitive())",
  "exception" : "",
  "testName" : "test2626"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2727"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean useStaticType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.useStaticType())",
  "exception" : "",
  "testName" : "test2728"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean isAbstract()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.isAbstract())",
  "exception" : "",
  "testName" : "test2729"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2830"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean hasGenericTypes()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.hasGenericTypes())",
  "exception" : "",
  "testName" : "test2931"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean isCollectionLikeType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(javaType1.isCollectionLikeType())",
  "exception" : "",
  "testName" : "test3032"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3133"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean useStaticType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3234"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isFinal()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.isFinal())",
  "exception" : "",
  "testName" : "test3335"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public JavaType constructType(Type type, Class<?> context)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3436"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isFinal()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.isFinal())",
  "exception" : "",
  "testName" : "test3537"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isEnumType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.isEnumType())",
  "exception" : "",
  "testName" : "test3638"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public abstract boolean isContainerType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.isContainerType())",
  "exception" : "",
  "testName" : "test3739"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public JavaType constructType(Type type, Class<?> context)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3840"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean useStaticType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(javaType0.useStaticType())",
  "exception" : "",
  "testName" : "test4042"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean isAbstract()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.isAbstract())",
  "exception" : "",
  "testName" : "test4345"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean isCollectionLikeType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4446"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean isCollectionLikeType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4547"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public abstract boolean isContainerType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.isContainerType())",
  "exception" : "",
  "testName" : "test4648"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean isCollectionLikeType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.isCollectionLikeType())",
  "exception" : "",
  "testName" : "test4749"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isFinal()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType0.isFinal())",
  "exception" : "",
  "testName" : "test4850"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean isCollectionLikeType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4951"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public boolean hasGenericTypes()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(javaType1.hasGenericTypes())",
  "exception" : "",
  "testName" : "test5052"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "protected JavaType _fromParameterizedClass(Class<?> clz, List<JavaType> paramTypes)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5153"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isPrimitive()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5254"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isGeneric()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(hierarchicType0.isGeneric())",
  "exception" : "",
  "testName" : "test5355"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "protected HierarchicType _findSuperTypeChain(Class<?> subtype, Class<?> supertype)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertNotNull(hierarchicType0)",
  "exception" : "",
  "testName" : "test5456"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "public final boolean isGeneric()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5557"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "protected synchronized HierarchicType _hashMapSuperInterfaceChain(HierarchicType current)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5658"
}, {
  "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
  "methodSignature" : "protected synchronized HierarchicType _arrayListSuperInterfaceChain(HierarchicType current)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5759"
} ]