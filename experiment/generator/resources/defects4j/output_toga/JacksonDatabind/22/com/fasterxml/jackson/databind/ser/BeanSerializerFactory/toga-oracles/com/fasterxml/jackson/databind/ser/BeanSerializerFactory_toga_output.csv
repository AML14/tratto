project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
    Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
    BeanPropertyWriter beanPropertyWriter1 = beanSerializerFactory0.instance.constructFilteredBeanWriter(beanPropertyWriter0, classArray0);
    assertFalse(beanPropertyWriter1.isUnwrapping());
}",0,assertFalse(beanPropertyWriter1.isUnwrapping())
project,0,test011,"public void test011() throws Throwable {
    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
    SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
    assertSame(serializerFactory0, beanSerializerFactory0);
}",1,
project,0,test022,"public void test022() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<MapType> class0 = MapType.class;
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test033,"public void test033() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    // Undeclared exception!
    try {
        beanSerializerFactory0._createSerializer2(defaultSerializerProvider_Impl0, arrayType0, basicBeanDescription0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<InputStream> class0 = InputStream.class;
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
    ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) collectionType0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test055,"public void test055() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleSerializers simpleSerializers0 = new SimpleSerializers();
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);
    ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
    Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
    boolean boolean0 = objectMapper1.canSerialize(class0);
    assertNotSame(serializerFactory0, beanSerializerFactory0);
}",0,
project,0,test067,"public void test067() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<JsonParser.Feature> class0 = JsonParser.Feature.class;
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test078,"public void test078() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
    BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
    doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.JsonSerializer.class));
    SerializerFactoryConfig serializerFactoryConfig1 = serializerFactoryConfig0.withSerializerModifier(beanSerializerModifier0);
    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig1);
    objectMapper0.setSerializerFactory(beanSerializerFactory0);
    Class<Integer> class0 = Integer.class;
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test089,"public void test089() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
    doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
    doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifyEnumSerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.JavaType.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.JsonSerializer.class));
    doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
    doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
    SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
    ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
    Class<JsonParser.Feature> class0 = JsonParser.Feature.class;
    // Undeclared exception!
    try {
        objectMapper1.canSerialize(class0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BeanSerializerFactory"", e);
    }
}",0,
project,0,test0910,"public void test0910() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    JsonSerializer<Object> jsonSerializer0 = beanSerializerFactory0.findBeanSerializer(defaultSerializerProvider_Impl0, arrayType0, basicBeanDescription0);
    assertNull(jsonSerializer0);
}",0,assertNotNull(jsonSerializer0)
project,0,test1011,"public void test1011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<Object> class0 = Object.class;
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1112,"public void test1112() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
    MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
    mapperFeatureArray0[0] = mapperFeature0;
    ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
    Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
    boolean boolean0 = objectMapper1.canSerialize(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1213,"public void test1213() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
    objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    Class<BeanSerializerFactory> class0 = BeanSerializerFactory.class;
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1314,"public void test1314() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
    objectMapper0.configure(mapperFeature0, false);
    Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1415,"public void test1415() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
    MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
    mapperFeatureArray0[0] = mapperFeature0;
    ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
    try {
        objectMapper1.writeValueAsBytes(objectMapper0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // (was java.lang.NullPointerException) (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[\""dateFormat\""]->com.fasterxml.jackson.databind.util.StdDateFormat[\""lenient\""])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.enableDefaultTyping();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1617,"public void test1617() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[6];
    MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
    mapperFeatureArray0[0] = mapperFeature0;
    mapperFeatureArray0[1] = mapperFeature0;
    mapperFeatureArray0[2] = mapperFeature0;
    mapperFeatureArray0[3] = mapperFeatureArray0[2];
    mapperFeatureArray0[4] = mapperFeatureArray0[0];
    MapperFeature mapperFeature1 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
    mapperFeatureArray0[5] = mapperFeature1;
    objectMapper0.disable(mapperFeatureArray0);
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
