{
  "test1212" : {
    "methodSignature" : "public void writeValue(JsonGenerator g, Object value) throws IOException, JsonGenerationException, JsonMappingException",
    "methodName" : "writeValue",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    JsonFactory jsonFactory0 = new JsonFactory();\n    MockFile mockFile0 = new MockFile(\"JSON\", \"JSON\");\n    JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;\n    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);\n    objectMapper0.writeValue(jsonGenerator0, (Object) defaultSerializerProvider_Impl0);\n}",
    "testName" : "test1212"
  },
  "test3434" : {
    "methodSignature" : "protected Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneClass)",
    "methodName" : "_verifyAsClass",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    Class<DataTruncation> class0 = DataTruncation.class;\n    Class<?> class1 = beanSerializerFactory0._verifyAsClass((Object) null, \"W,w \\n%.~^&6 ].\", class0);\n}",
    "testName" : "test3434"
  },
  "test1313" : {
    "methodSignature" : "public void writeValue(JsonGenerator g, Object value) throws IOException, JsonGenerationException, JsonMappingException",
    "methodName" : "writeValue",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    JsonFactory jsonFactory0 = new JsonFactory();\n    MockFile mockFile0 = new MockFile(\"JSON\");\n    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;\n    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);\n    POJONode pOJONode0 = new POJONode(jsonFactory0);\n    objectMapper0.writeValue(jsonGenerator0, (Object) pOJONode0);\n}",
    "testName" : "test1313"
  },
  "test3535" : {
    "methodSignature" : "protected Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneClass)",
    "methodName" : "_verifyAsClass",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    Class<JSONWrappedObject> class0 = JSONWrappedObject.class;\n    Class<?> class1 = beanSerializerFactory0._verifyAsClass(class0, (String) null, class0);\n}",
    "testName" : "test3535"
  },
  "test2121" : {
    "methodSignature" : "protected JsonSerializer<?> buildContainerSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException",
    "methodName" : "buildContainerSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Map> class0 = Map.class;\n    MapType mapType0 = typeFactory0.constructRawMapType(class0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    CollectionType collectionType0 = CollectionType.construct(class0, mapType0);\n    CollectionType collectionType1 = collectionType0.withStaticTyping();\n    beanSerializerFactory0.buildContainerSerializer(defaultSerializerProvider_Impl0, collectionType1, (BeanDescription) null, false);\n}",
    "testName" : "test2121"
  },
  "test3232" : {
    "methodSignature" : "protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer)",
    "methodName" : "usesStaticTyping",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());\n    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();\n    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();\n    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();\n    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();\n    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, \"uv\");\n    boolean boolean0 = beanSerializerFactory0.usesStaticTyping((SerializationConfig) null, basicBeanDescription0, asExistingPropertyTypeSerializer0);\n}",
    "testName" : "test3232"
  },
  "test1111" : {
    "methodSignature" : "protected JsonSerializer<?> _createSerializer2(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException",
    "methodName" : "_createSerializer2",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;\n    Object object0 = new Object();\n    Class<SerializationFeature> class0 = SerializationFeature.class;\n    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, object0, (Object) defaultSerializerProvider_Impl0);\n    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());\n    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();\n    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();\n    doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();\n    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();\n    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();\n    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);\n    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);\n    beanSerializerFactory0._createSerializer2(defaultSerializerProvider_Impl0, referenceType0, basicBeanDescription0, false);\n}",
    "testName" : "test1111"
  },
  "test3333" : {
    "methodSignature" : "protected Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneClass)",
    "methodName" : "_verifyAsClass",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    JsonFactory jsonFactory0 = new JsonFactory();\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    Class<Time> class0 = Time.class;\n    beanSerializerFactory0._verifyAsClass(jsonFactory0, \"\", class0);\n}",
    "testName" : "test3333"
  },
  "test000" : {
    "methodSignature" : "protected JsonSerializer<?> buildIteratorSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType valueType) throws JsonMappingException",
    "methodName" : "buildIteratorSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    beanSerializerFactory0.buildIteratorSerializer((SerializationConfig) null, simpleType0, (BeanDescription) null, false, simpleType0);\n}",
    "testName" : "test000"
  },
  "test011" : {
    "methodSignature" : "public final SerializerFactory withSerializerModifier(BeanSerializerModifier modifier)",
    "methodName" : "withSerializerModifier",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    beanSerializerFactory0.withSerializerModifier((BeanSerializerModifier) null);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "protected JsonSerializer<?> buildMapEntrySerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType keyType, JavaType valueType) throws JsonMappingException",
    "methodName" : "buildMapEntrySerializer",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    beanSerializerFactory0.buildMapEntrySerializer((SerializationConfig) null, simpleType0, (BeanDescription) null, true, simpleType0, simpleType0);\n}",
    "testName" : "test033"
  },
  "test044" : {
    "methodSignature" : "public final SerializerFactory withAdditionalSerializers(Serializers additional)",
    "methodName" : "withAdditionalSerializers",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    SimpleSerializers simpleSerializers0 = new SimpleSerializers();\n    SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);\n}",
    "testName" : "test044"
  },
  "test055" : {
    "methodSignature" : "public void writeValue(JsonGenerator g, Object value) throws IOException, JsonGenerationException, JsonMappingException",
    "methodName" : "writeValue",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    JsonFactory jsonFactory0 = new JsonFactory();\n    MockFile mockFile0 = new MockFile(\"JSON\");\n    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;\n    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];\n    MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;\n    mapperFeatureArray0[0] = mapperFeature0;\n    mapperFeatureArray0[1] = mapperFeature0;\n    mapperFeatureArray0[2] = mapperFeature0;\n    mapperFeatureArray0[3] = mapperFeature0;\n    mapperFeatureArray0[4] = mapperFeatureArray0[0];\n    MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_GETTERS;\n    mapperFeatureArray0[5] = mapperFeature1;\n    mapperFeatureArray0[6] = mapperFeature0;\n    mapperFeatureArray0[7] = mapperFeatureArray0[1];\n    mapperFeatureArray0[8] = mapperFeature0;\n    objectMapper0.disable(mapperFeatureArray0);\n    SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(\"iF7|VDi5;\");\n    SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(\"iF7|VDi5;\", \"JSON\", sQLNonTransientException0);\n    objectMapper0.writeValue(jsonGenerator0, (Object) sQLTimeoutException0);\n}",
    "testName" : "test055"
  },
  "test066" : {
    "methodSignature" : "public void writeValue(JsonGenerator g, Object value) throws IOException, JsonGenerationException, JsonMappingException",
    "methodName" : "writeValue",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    JsonFactory jsonFactory0 = new JsonFactory();\n    MockFile mockFile0 = new MockFile(\"JSON\");\n    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;\n    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);\n    objectMapper0.writeValue(jsonGenerator0, (Object) beanSerializerFactory0);\n}",
    "testName" : "test066"
  },
  "test077" : {
    "methodSignature" : "public final SerializerFactory withAdditionalKeySerializers(Serializers additional)",
    "methodName" : "withAdditionalKeySerializers",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    Serializers.Base serializers_Base0 = new Serializers.Base();\n    SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalKeySerializers(serializers_Base0);\n}",
    "testName" : "test077"
  },
  "test1919" : {
    "methodSignature" : "protected JsonSerializer<?> buildContainerSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException",
    "methodName" : "buildContainerSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    beanSerializerFactory0.buildContainerSerializer(defaultSerializerProvider_Impl0, simpleType0, (BeanDescription) null, true);\n}",
    "testName" : "test1919"
  },
  "test2020" : {
    "methodSignature" : "public boolean hasPrefetchedSerializer()",
    "methodName" : "hasPrefetchedSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;\n    Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;\n    JavaType javaType0 = TypeFactory.unknownType();\n    MissingNode missingNode0 = MissingNode.getInstance();\n    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, javaType0, (Object) serializerFactoryConfig0, (Object) missingNode0);\n    MapType mapType0 = MapType.construct(class0, referenceType0, javaType0);\n    ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) mapType0);\n    objectWriter0.hasPrefetchedSerializer();\n}",
    "testName" : "test2020"
  }
}