project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    // Undeclared exception!
    try {
        beanSerializerFactory0.buildIteratorSerializer((SerializationConfig) null, simpleType0, (BeanDescription) null, false, simpleType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",1,
project,0,test011,"public void test011() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    // Undeclared exception!
    try {
        beanSerializerFactory0.withSerializerModifier((BeanSerializerModifier) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not pass null modifier
        //
        verifyException(""com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    // Undeclared exception!
    try {
        beanSerializerFactory0.buildMapEntrySerializer((SerializationConfig) null, simpleType0, (BeanDescription) null, true, simpleType0, simpleType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    SimpleSerializers simpleSerializers0 = new SimpleSerializers();
    SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);
    assertNotSame(serializerFactory0, beanSerializerFactory0);
}",0,
project,0,test055,"public void test055() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory();
    MockFile mockFile0 = new MockFile(""JSON"");
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
    MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
    mapperFeatureArray0[0] = mapperFeature0;
    mapperFeatureArray0[1] = mapperFeature0;
    mapperFeatureArray0[2] = mapperFeature0;
    mapperFeatureArray0[3] = mapperFeature0;
    mapperFeatureArray0[4] = mapperFeatureArray0[0];
    MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_GETTERS;
    mapperFeatureArray0[5] = mapperFeature1;
    mapperFeatureArray0[6] = mapperFeature0;
    mapperFeatureArray0[7] = mapperFeatureArray0[1];
    mapperFeatureArray0[8] = mapperFeature0;
    objectMapper0.disable(mapperFeatureArray0);
    SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(""iF7|VDi5;"");
    SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""iF7|VDi5;"", ""JSON"", sQLNonTransientException0);
    // Undeclared exception!
    try {
        objectMapper0.writeValue(jsonGenerator0, (Object) sQLTimeoutException0);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory();
    MockFile mockFile0 = new MockFile(""JSON"");
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
    try {
        objectMapper0.writeValue(jsonGenerator0, (Object) beanSerializerFactory0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No serializer found for class com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: com.fasterxml.jackson.databind.ser.BeanSerializerFactory[\""factoryConfig\""])
        //
        verifyException(""com.fasterxml.jackson.databind.ser.impl.UnknownSerializer"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Serializers.Base serializers_Base0 = new Serializers.Base();
    SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalKeySerializers(serializers_Base0);
    assertNotSame(beanSerializerFactory0, serializerFactory0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    Object object0 = new Object();
    Class<SerializationFeature> class0 = SerializationFeature.class;
    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, object0, (Object) defaultSerializerProvider_Impl0);
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
    // Undeclared exception!
    try {
        beanSerializerFactory0._createSerializer2(defaultSerializerProvider_Impl0, referenceType0, basicBeanDescription0, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.util.EnumValues"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonFactory jsonFactory0 = new JsonFactory();
    MockFile mockFile0 = new MockFile(""JSON"", ""JSON"");
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
    try {
        objectMapper0.writeValue(jsonGenerator0, (Object) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // (was java.lang.NullPointerException) (through reference chain: com.fasterxml.jackson.databind.ser.Impl[\""annotationIntrospector\""])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory();
    MockFile mockFile0 = new MockFile(""JSON"");
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
    POJONode pOJONode0 = new POJONode(jsonFactory0);
    try {
        objectMapper0.writeValue(jsonGenerator0, (Object) pOJONode0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.JsonFactory)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.DefaultSerializerProvider"", e);
    }
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        beanSerializerFactory0.buildContainerSerializer(defaultSerializerProvider_Impl0, simpleType0, (BeanDescription) null, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
    Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
    JavaType javaType0 = TypeFactory.unknownType();
    MissingNode missingNode0 = MissingNode.getInstance();
    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, javaType0, (Object) serializerFactoryConfig0, (Object) missingNode0);
    MapType mapType0 = MapType.construct(class0, referenceType0, javaType0);
    ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) mapType0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test2121,"public void test2121() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Map> class0 = Map.class;
    MapType mapType0 = typeFactory0.constructRawMapType(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    CollectionType collectionType0 = CollectionType.construct(class0, mapType0);
    CollectionType collectionType1 = collectionType0.withStaticTyping();
    // Undeclared exception!
    try {
        beanSerializerFactory0.buildContainerSerializer(defaultSerializerProvider_Impl0, collectionType1, (BeanDescription) null, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, ""uv"");
    boolean boolean0 = beanSerializerFactory0.usesStaticTyping((SerializationConfig) null, basicBeanDescription0, asExistingPropertyTypeSerializer0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3333,"public void test3333() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<Time> class0 = Time.class;
    // Undeclared exception!
    try {
        beanSerializerFactory0._verifyAsClass(jsonFactory0, """", class0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // AnnotationIntrospector.() returned value of type com.fasterxml.jackson.core.JsonFactory: expected type JsonSerializer or Class<JsonSerializer> instead
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<DataTruncation> class0 = DataTruncation.class;
    Class<?> class1 = beanSerializerFactory0._verifyAsClass((Object) null, ""W,w \n%.~^&6 ]."", class0);
    assertNull(class1);
}",0,"assertEquals(class0, class1)"
project,0,test3535,"public void test3535() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<JSONWrappedObject> class0 = JSONWrappedObject.class;
    Class<?> class1 = beanSerializerFactory0._verifyAsClass(class0, (String) null, class0);
    assertNull(class1);
}",1,
