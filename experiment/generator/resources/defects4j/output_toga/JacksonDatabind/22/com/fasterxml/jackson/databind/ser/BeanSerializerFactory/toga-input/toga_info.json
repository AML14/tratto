{
  "test1213" : {
    "methodSignature" : "public boolean canSerialize(Class<?> type)",
    "methodName" : "canSerialize",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1213() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;\n    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;\n    objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);\n    Class<BeanSerializerFactory> class0 = BeanSerializerFactory.class;\n    boolean boolean0 = objectMapper0.canSerialize(class0);\n}",
    "testName" : "test1213"
  },
  "test1314" : {
    "methodSignature" : "public boolean canSerialize(Class<?> type)",
    "methodName" : "canSerialize",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1314() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;\n    objectMapper0.configure(mapperFeature0, false);\n    Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;\n    boolean boolean0 = objectMapper0.canSerialize(class0);\n}",
    "testName" : "test1314"
  },
  "test1011" : {
    "methodSignature" : "public boolean canSerialize(Class<?> type)",
    "methodName" : "canSerialize",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1011() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<Object> class0 = Object.class;\n    boolean boolean0 = objectMapper0.canSerialize(class0);\n}",
    "testName" : "test1011"
  },
  "test1112" : {
    "methodSignature" : "public boolean canSerialize(Class<?> type)",
    "methodName" : "canSerialize",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1112() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];\n    MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;\n    mapperFeatureArray0[0] = mapperFeature0;\n    ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);\n    Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;\n    boolean boolean0 = objectMapper1.canSerialize(class0);\n}",
    "testName" : "test1112"
  },
  "test000" : {
    "methodSignature" : "public boolean isUnwrapping()",
    "methodName" : "isUnwrapping",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();\n    Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);\n    BeanPropertyWriter beanPropertyWriter1 = beanSerializerFactory0.instance.constructFilteredBeanWriter(beanPropertyWriter0, classArray0);\n    beanPropertyWriter1.isUnwrapping();\n}",
    "testName" : "test000"
  },
  "test011" : {
    "methodSignature" : "public SerializerFactory withConfig(SerializerFactoryConfig config)",
    "methodName" : "withConfig",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();\n    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);\n    SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);\n}",
    "testName" : "test011"
  },
  "test022" : {
    "methodSignature" : "public boolean canSerialize(Class<?> type)",
    "methodName" : "canSerialize",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<MapType> class0 = MapType.class;\n    boolean boolean0 = objectMapper0.canSerialize(class0);\n}",
    "testName" : "test022"
  },
  "test033" : {
    "methodSignature" : "protected JsonSerializer<?> _createSerializer2(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException",
    "methodName" : "_createSerializer2",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());\n    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();\n    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();\n    doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();\n    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();\n    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();\n    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;\n    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);\n    beanSerializerFactory0._createSerializer2(defaultSerializerProvider_Impl0, arrayType0, basicBeanDescription0, true);\n}",
    "testName" : "test033"
  },
  "test044" : {
    "methodSignature" : "public boolean hasPrefetchedSerializer()",
    "methodName" : "hasPrefetchedSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<InputStream> class0 = InputStream.class;\n    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;\n    CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);\n    ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) collectionType0);\n    objectWriter0.hasPrefetchedSerializer();\n}",
    "testName" : "test044"
  },
  "test055" : {
    "methodSignature" : "public boolean canSerialize(Class<?> type)",
    "methodName" : "canSerialize",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SimpleSerializers simpleSerializers0 = new SimpleSerializers();\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);\n    ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);\n    Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;\n    boolean boolean0 = objectMapper1.canSerialize(class0);\n}",
    "testName" : "test055"
  },
  "test067" : {
    "methodSignature" : "public boolean canSerialize(Class<?> type)",
    "methodName" : "canSerialize",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<JsonParser.Feature> class0 = JsonParser.Feature.class;\n    boolean boolean0 = objectMapper0.canSerialize(class0);\n}",
    "testName" : "test067"
  },
  "test078" : {
    "methodSignature" : "public boolean canSerialize(Class<?> type)",
    "methodName" : "canSerialize",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();\n    BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());\n    doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.JsonSerializer.class));\n    SerializerFactoryConfig serializerFactoryConfig1 = serializerFactoryConfig0.withSerializerModifier(beanSerializerModifier0);\n    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig1);\n    objectMapper0.setSerializerFactory(beanSerializerFactory0);\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = objectMapper0.canSerialize(class0);\n}",
    "testName" : "test078"
  },
  "test089" : {
    "methodSignature" : "public boolean canSerialize(Class<?> type)",
    "methodName" : "canSerialize",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());\n    doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());\n    doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifyEnumSerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.JavaType.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.JsonSerializer.class));\n    doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());\n    doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));\n    SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);\n    ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);\n    Class<JsonParser.Feature> class0 = JsonParser.Feature.class;\n    objectMapper1.canSerialize(class0);\n}",
    "testName" : "test089"
  },
  "test1617" : {
    "methodSignature" : "public boolean canSerialize(Class<?> type)",
    "methodName" : "canSerialize",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1617() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[6];\n    MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;\n    mapperFeatureArray0[0] = mapperFeature0;\n    mapperFeatureArray0[1] = mapperFeature0;\n    mapperFeatureArray0[2] = mapperFeature0;\n    mapperFeatureArray0[3] = mapperFeatureArray0[2];\n    mapperFeatureArray0[4] = mapperFeatureArray0[0];\n    MapperFeature mapperFeature1 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;\n    mapperFeatureArray0[5] = mapperFeature1;\n    objectMapper0.disable(mapperFeatureArray0);\n    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;\n    boolean boolean0 = objectMapper0.canSerialize(class0);\n}",
    "testName" : "test1617"
  },
  "test1415" : {
    "methodSignature" : "public byte[] writeValueAsBytes(Object value) throws JsonProcessingException",
    "methodName" : "writeValueAsBytes",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1415() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];\n    MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;\n    mapperFeatureArray0[0] = mapperFeature0;\n    ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);\n    objectMapper1.writeValueAsBytes(objectMapper0);\n}",
    "testName" : "test1415"
  },
  "test0910" : {
    "methodSignature" : "public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc) throws JsonMappingException",
    "methodName" : "findBeanSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0910() throws Throwable {\n    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;\n    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());\n    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();\n    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();\n    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();\n    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();\n    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;\n    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);\n    JsonSerializer<Object> jsonSerializer0 = beanSerializerFactory0.findBeanSerializer(defaultSerializerProvider_Impl0, arrayType0, basicBeanDescription0);\n}",
    "testName" : "test0910"
  },
  "test1516" : {
    "methodSignature" : "public boolean canSerialize(Class<?> type)",
    "methodName" : "canSerialize",
    "className" : "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1516() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    objectMapper0.enableDefaultTyping();\n    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;\n    boolean boolean0 = objectMapper0.canSerialize(class0);\n}",
    "testName" : "test1516"
  }
}