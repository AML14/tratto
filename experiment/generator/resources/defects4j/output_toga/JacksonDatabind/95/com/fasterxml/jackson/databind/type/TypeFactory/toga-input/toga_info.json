{
  "test1015" : {
    "methodSignature" : "public final boolean isJavaLangObject()",
    "methodName" : "isJavaLangObject",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1015() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<String> class0 = String.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    collectionLikeType0.isJavaLangObject();\n}",
    "testName" : "test1015"
  },
  "test1016" : {
    "methodSignature" : "public boolean isAbstract()",
    "methodName" : "isAbstract",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1016() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<String> class0 = String.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    collectionLikeType0.isAbstract();\n}",
    "testName" : "test1016"
  },
  "test4048" : {
    "methodSignature" : "public abstract int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4048() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<LinkedList> class0 = LinkedList.class;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);\n    JavaType javaType0 = typeFactory0.constructGeneralizedType(collectionType0, class0);\n    javaType0.containedTypeCount();\n}",
    "testName" : "test4048"
  },
  "test5058" : {
    "methodSignature" : "public JavaType constructType(Type type, Class<?> contextClass)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5058() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.constructType((Type) null, (Class<?>) null);\n}",
    "testName" : "test5058"
  },
  "test1218" : {
    "methodSignature" : "public int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1218() throws Throwable {\n    Class<LinkedList> class0 = LinkedList.class;\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<SimpleType> class1 = SimpleType.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);\n    collectionLikeType0.containedTypeCount();\n}",
    "testName" : "test1218"
  },
  "test024" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<PlaceholderForType> class0 = PlaceholderForType.class;\n    Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 0);\n    JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);\n    javaType0.isFinal();\n}",
    "testName" : "test024"
  },
  "test6069" : {
    "methodSignature" : "public int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6069() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<EnumSet> class0 = EnumSet.class;\n    Class<Object> class1 = Object.class;\n    SimpleType simpleType0 = new SimpleType(class1);\n    CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) simpleType0);\n    collectionType0.containedTypeCount();\n}",
    "testName" : "test6069"
  },
  "test3644" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3644() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Double> class0 = Double.TYPE;\n    JavaType javaType0 = TypeFactory.unknownType();\n    JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);\n    javaType1.isFinal();\n}",
    "testName" : "test3644"
  },
  "test5867" : {
    "methodSignature" : "public final boolean isEnumType()",
    "methodName" : "isEnumType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5867() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;\n    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());\n    doReturn(simpleType0, simpleType0).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));\n    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);\n    Class<MapperFeature> class0 = MapperFeature.class;\n    MapLikeType mapLikeType0 = typeFactory1.constructRawMapLikeType(class0);\n    mapLikeType0.isEnumType();\n}",
    "testName" : "test5867"
  },
  "test3643" : {
    "methodSignature" : "public final boolean isJavaLangObject()",
    "methodName" : "isJavaLangObject",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3643() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Double> class0 = Double.TYPE;\n    JavaType javaType0 = TypeFactory.unknownType();\n    javaType0.isJavaLangObject();\n}",
    "testName" : "test3643"
  },
  "test4856" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4856() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;\n    JavaType javaType0 = typeFactory0._unknownType();\n    JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, simpleType0);\n    javaType1.isFinal();\n}",
    "testName" : "test4856"
  },
  "test0610" : {
    "methodSignature" : "public final boolean isEnumType()",
    "methodName" : "isEnumType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0610() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<SerializationFeature> class0 = SerializationFeature.class;\n    Class<AnnotationIntrospector.ReferenceProperty.Type> class1 = AnnotationIntrospector.ReferenceProperty.Type.class;\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class1, javaTypeArray0);\n    javaType0.isEnumType();\n}",
    "testName" : "test0610"
  },
  "test1622" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1622() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    JavaType javaType0 = typeFactory0.constructFromCanonical(\"long\");\n    javaType0.isPrimitive();\n}",
    "testName" : "test1622"
  },
  "test4654" : {
    "methodSignature" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
    "methodName" : "moreSpecificType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4654() throws Throwable {\n    LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1757, 200);\n    TypeFactory typeFactory0 = new TypeFactory(lRUMap0);\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;\n    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, (JavaType) null);\n}",
    "testName" : "test4654"
  },
  "test1420" : {
    "methodSignature" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
    "methodName" : "constructRawMapType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1420() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Properties> class0 = Properties.class;\n    typeFactory0.constructRawMapType(class0);\n}",
    "testName" : "test1420"
  },
  "test2431" : {
    "methodSignature" : "public TypeFactory withModifier(TypeModifier mod)",
    "methodName" : "withModifier",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);\n}",
    "testName" : "test2431"
  },
  "test5664" : {
    "methodSignature" : "public abstract int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5664() throws Throwable {\n    LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1023, (-17));\n    TypeFactory typeFactory0 = new TypeFactory(lRUMap0);\n    Class<DeserializationFeature> class0 = DeserializationFeature.class;\n    Class<LinkedList> class1 = LinkedList.class;\n    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);\n    TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (JavaType) collectionType0);\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    JavaType javaType0 = typeFactory0._constructSimple(class0, typeBindings0, collectionType0, javaTypeArray0);\n    javaType0.containedTypeCount();\n}",
    "testName" : "test5664"
  },
  "test023" : {
    "methodSignature" : "public final boolean isJavaLangObject()",
    "methodName" : "isJavaLangObject",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<PlaceholderForType> class0 = PlaceholderForType.class;\n    Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 0);\n    JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);\n    javaType0.isJavaLangObject();\n}",
    "testName" : "test023"
  },
  "test0611" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0611() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<SerializationFeature> class0 = SerializationFeature.class;\n    Class<AnnotationIntrospector.ReferenceProperty.Type> class1 = AnnotationIntrospector.ReferenceProperty.Type.class;\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class1, javaTypeArray0);\n    javaType0.isFinal();\n}",
    "testName" : "test0611"
  },
  "test3846" : {
    "methodSignature" : "public final boolean isEnumType()",
    "methodName" : "isEnumType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3846() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;\n    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;\n    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);\n    javaType0.isEnumType();\n}",
    "testName" : "test3846"
  },
  "test1824" : {
    "methodSignature" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
    "methodName" : "findTypeParameters",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1824() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<CollectionLikeType> class0 = CollectionLikeType.class;\n    JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0, (TypeBindings) null);\n}",
    "testName" : "test1824"
  },
  "test059" : {
    "methodSignature" : "public boolean isConcrete()",
    "methodName" : "isConcrete",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<IntNode> class0 = IntNode.class;\n    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);\n    JavaType javaType0 = typeFactory0.constructType((Type) mapLikeType0, (Class<?>) class0);\n    javaType0.isConcrete();\n}",
    "testName" : "test059"
  },
  "test4452" : {
    "methodSignature" : "public final boolean isJavaLangObject()",
    "methodName" : "isJavaLangObject",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4452() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<JsonDeserializer> class0 = JsonDeserializer.class;\n    ClassStack classStack0 = new ClassStack(class0);\n    PlaceholderForType placeholderForType0 = new PlaceholderForType((-465));\n    TypeBindings typeBindings0 = placeholderForType0.getBindings();\n    JavaType javaType0 = typeFactory0._fromClass(classStack0, class0, typeBindings0);\n    JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, placeholderForType0);\n    javaType1.isJavaLangObject();\n}",
    "testName" : "test4452"
  },
  "test4250" : {
    "methodSignature" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
    "methodName" : "constructGeneralizedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4250() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;\n    Class<ArrayType> class0 = ArrayType.class;\n    typeFactory0.constructGeneralizedType(simpleType0, class0);\n}",
    "testName" : "test4250"
  },
  "test5260" : {
    "methodSignature" : "public MapType constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)",
    "methodName" : "constructMapType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5260() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<IntNode> class0 = IntNode.class;\n    typeFactory0.constructMapType((Class<? extends Map>) null, class0, (Class<?>) null);\n}",
    "testName" : "test5260"
  },
  "test2128" : {
    "methodSignature" : "public final boolean isInterface()",
    "methodName" : "isInterface",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2128() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    JavaType javaType0 = TypeFactory.unknownType();\n    typeFactory0.constructArrayType(javaType0);\n    javaType0.isInterface();\n}",
    "testName" : "test2128"
  },
  "test4149" : {
    "methodSignature" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
    "methodName" : "constructGeneralizedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4149() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;\n    Class<Object> class0 = Object.class;\n    typeFactory0.constructGeneralizedType(simpleType0, class0);\n}",
    "testName" : "test4149"
  },
  "test2127" : {
    "methodSignature" : "public final boolean isJavaLangObject()",
    "methodName" : "isJavaLangObject",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2127() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    JavaType javaType0 = TypeFactory.unknownType();\n    typeFactory0.constructArrayType(javaType0);\n    javaType0.isJavaLangObject();\n}",
    "testName" : "test2127"
  },
  "test5159" : {
    "methodSignature" : "public abstract int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5159() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<LinkedList> class0 = LinkedList.class;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);\n    JavaType javaType0 = typeFactory0.constructType((Type) collectionType0, (Class<?>) class0);\n    javaType0.containedTypeCount();\n}",
    "testName" : "test5159"
  },
  "test1319" : {
    "methodSignature" : "public JavaType constructType(TypeReference<?> typeRef)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1319() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.constructType((TypeReference<?>) null);\n}",
    "testName" : "test1319"
  },
  "test012" : {
    "methodSignature" : "public <T> T convertValue(Object fromValue, JavaType toValueType) throws IllegalArgumentException",
    "methodName" : "convertValue",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<SimpleType> class0 = SimpleType.class;\n    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    JavaType[] javaTypeArray0 = new JavaType[1];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);\n    objectMapper0.convertValue((Object) typeBindings0, (JavaType) collectionType0);\n}",
    "testName" : "test012"
  },
  "test1117" : {
    "methodSignature" : "public abstract int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1117() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<LinkedList> class0 = LinkedList.class;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);\n    JavaType javaType0 = typeFactory0.constructSpecializedType(collectionType0, class0);\n    javaType0.containedTypeCount();\n}",
    "testName" : "test1117"
  },
  "test048" : {
    "methodSignature" : "public final boolean isEnumType()",
    "methodName" : "isEnumType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<MapperFeature> class0 = MapperFeature.class;\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n    javaType0.isEnumType();\n}",
    "testName" : "test048"
  },
  "test047" : {
    "methodSignature" : "public JavaType uncheckedSimpleType(Class<?> cls)",
    "methodName" : "uncheckedSimpleType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<MapperFeature> class0 = MapperFeature.class;\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n}",
    "testName" : "test047"
  },
  "test1521" : {
    "methodSignature" : "public boolean hasContentType()",
    "methodName" : "hasContentType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Properties> class0 = Properties.class;\n    MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);\n    mapLikeType0.hasContentType();\n}",
    "testName" : "test1521"
  },
  "test3745" : {
    "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
    "methodName" : "constructSpecializedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3745() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;\n    Class<CollectionLikeType> class0 = CollectionLikeType.class;\n    typeFactory0.constructSpecializedType(simpleType0, class0);\n}",
    "testName" : "test3745"
  },
  "test5766" : {
    "methodSignature" : "public final boolean isJavaLangObject()",
    "methodName" : "isJavaLangObject",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5766() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Object> class0 = Object.class;\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n    javaType0.isJavaLangObject();\n}",
    "testName" : "test5766"
  },
  "test4755" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4755() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);\n    JavaType javaType0 = typeFactory0.moreSpecificType(resolvedRecursiveType0, resolvedRecursiveType0);\n    javaType0.isPrimitive();\n}",
    "testName" : "test4755"
  },
  "test2330" : {
    "methodSignature" : "public TypeFactory withModifier(TypeModifier mod)",
    "methodName" : "withModifier",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2330() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());\n    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);\n    TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());\n    TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);\n}",
    "testName" : "test2330"
  },
  "test5765" : {
    "methodSignature" : "public JavaType uncheckedSimpleType(Class<?> cls)",
    "methodName" : "uncheckedSimpleType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5765() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Object> class0 = Object.class;\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n}",
    "testName" : "test5765"
  },
  "test4553" : {
    "methodSignature" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
    "methodName" : "moreSpecificType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4553() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);\n}",
    "testName" : "test4553"
  },
  "test000" : {
    "methodSignature" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget, JavaType[] parameterTypes)",
    "methodName" : "constructSimpleType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<DeserializationFeature> class0 = DeserializationFeature.class;\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);\n}",
    "testName" : "test000"
  },
  "test001" : {
    "methodSignature" : "public final boolean isEnumType()",
    "methodName" : "isEnumType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<DeserializationFeature> class0 = DeserializationFeature.class;\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);\n    javaType0.isEnumType();\n}",
    "testName" : "test001"
  },
  "test1925" : {
    "methodSignature" : "public JavaType constructReferenceType(Class<?> rawType, JavaType referredType)",
    "methodName" : "constructReferenceType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1925() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<SettableBeanProperty> class0 = SettableBeanProperty.class;\n    typeFactory0.constructReferenceType(class0, (JavaType) null);\n}",
    "testName" : "test1925"
  },
  "test0914" : {
    "methodSignature" : "public void clearCache()",
    "methodName" : "clearCache",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0914() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.clearCache();\n}",
    "testName" : "test0914"
  },
  "test1723" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1723() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();\n    TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);\n    typeFactory1.findClass(\"\");\n}",
    "testName" : "test1723"
  },
  "test2734" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2734() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.findClass(\"[nF.L`2EoWM;f\");\n}",
    "testName" : "test2734"
  },
  "test3947" : {
    "methodSignature" : "public int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3947() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<LinkedList> class0 = LinkedList.class;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);\n    Class<Object> class1 = Object.class;\n    typeFactory0.constructGeneralizedType(collectionType0, class1);\n    collectionType0.containedTypeCount();\n}",
    "testName" : "test3947"
  },
  "test5968" : {
    "methodSignature" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
    "methodName" : "constructRawMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5968() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());\n    doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));\n    doReturn((String) null).when(typeModifier0).toString();\n    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);\n    Class<IntNode> class0 = IntNode.class;\n    typeFactory1.constructRawMapLikeType(class0);\n}",
    "testName" : "test5968"
  },
  "test4957" : {
    "methodSignature" : "public abstract boolean isContainerType()",
    "methodName" : "isContainerType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4957() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<Properties> class0 = Properties.class;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);\n    javaType0.isContainerType();\n}",
    "testName" : "test4957"
  },
  "test6170" : {
    "methodSignature" : "protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype, TypeBindings parentBindings)",
    "methodName" : "_fromParamType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6170() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();\n    doReturn((Type) null).when(parameterizedType0).getRawType();\n    typeFactory0._fromParamType((ClassStack) null, parameterizedType0, (TypeBindings) null);\n}",
    "testName" : "test6170"
  },
  "test5563" : {
    "methodSignature" : "public <T> T convertValue(Object fromValue, JavaType toValueType) throws IllegalArgumentException",
    "methodName" : "convertValue",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5563() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    JsonFactory jsonFactory0 = new JsonFactory();\n    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);\n    objectMapper0.setTypeFactory(typeFactory0);\n    Integer integer0 = new Integer(2449);\n    AtomicReference<Integer> atomicReference0 = new AtomicReference<Integer>(integer0);\n    Class<CollectionType> class0 = CollectionType.class;\n    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);\n    CollectionType collectionType0 = new CollectionType(arrayType0, arrayType0);\n    objectMapper0.convertValue((Object) atomicReference0, (JavaType) collectionType0);\n}",
    "testName" : "test5563"
  },
  "test3340" : {
    "methodSignature" : "public boolean isAbstract()",
    "methodName" : "isAbstract",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3340() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    JavaType javaType0 = typeFactory0.constructFromCanonical(\"char\");\n    javaType0.isAbstract();\n}",
    "testName" : "test3340"
  }
}