project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<DeserializationFeature> class0 = DeserializationFeature.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);
    assertNotNull(javaType0);
}",0,"assertEquals(javaTypeArray0, javaType0)"
project,0,test001,"public void test001() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<DeserializationFeature> class0 = DeserializationFeature.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);
    assertTrue(javaType0.isEnumType());
}",0,assertTrue(javaType0.isEnumType())
project,0,test012,"public void test012() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SimpleType> class0 = SimpleType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    JavaType[] javaTypeArray0 = new JavaType[1];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
    try {
        objectMapper0.convertValue((Object) typeBindings0, (JavaType) collectionType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not find a Value deserializer for type [collection type; class com.fasterxml.jackson.databind.type.SimpleType, contains [recursive type; UNRESOLVED]
        //  at [Source: java.lang.String@0000000284; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",1,
project,0,test023,"public void test023() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<PlaceholderForType> class0 = PlaceholderForType.class;
    Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 0);
    JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
    assertFalse(javaType0.isJavaLangObject());
}",0,assertTrue(javaType0.isJavaLangObject())
project,0,test024,"public void test024() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<PlaceholderForType> class0 = PlaceholderForType.class;
    Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 0);
    JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
    assertFalse(javaType0.isFinal());
}",0,assertTrue(javaType0.isFinal())
project,0,test047,"public void test047() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<MapperFeature> class0 = MapperFeature.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertNotNull(javaType0);
}",0,
project,0,test048,"public void test048() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<MapperFeature> class0 = MapperFeature.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertTrue(javaType0.isEnumType());
}",0,assertTrue(javaType0.isEnumType())
project,0,test059,"public void test059() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<IntNode> class0 = IntNode.class;
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
    JavaType javaType0 = typeFactory0.constructType((Type) mapLikeType0, (Class<?>) class0);
    assertTrue(javaType0.isConcrete());
}",0,
project,0,test0610,"public void test0610() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<SerializationFeature> class0 = SerializationFeature.class;
    Class<AnnotationIntrospector.ReferenceProperty.Type> class1 = AnnotationIntrospector.ReferenceProperty.Type.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class1, javaTypeArray0);
    assertTrue(javaType0.isEnumType());
}",0,assertTrue(javaType0.isEnumType())
project,0,test0611,"public void test0611() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<SerializationFeature> class0 = SerializationFeature.class;
    Class<AnnotationIntrospector.ReferenceProperty.Type> class1 = AnnotationIntrospector.ReferenceProperty.Type.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class1, javaTypeArray0);
    assertTrue(javaType0.isFinal());
}",0,assertTrue(javaType0.isFinal())
project,0,test0914,"public void test0914() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.clearCache();
}",0,
project,0,test1015,"public void test1015() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<String> class0 = String.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    assertFalse(collectionLikeType0.isJavaLangObject());
}",0,assertFalse(collectionLikeType0.isJavaLangObject())
project,0,test1016,"public void test1016() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<String> class0 = String.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    assertFalse(collectionLikeType0.isAbstract());
}",0,assertTrue(collectionLikeType0.isAbstract())
project,0,test1117,"public void test1117() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    JavaType javaType0 = typeFactory0.constructSpecializedType(collectionType0, class0);
    assertEquals(1, javaType0.containedTypeCount());
}",0,"assertEquals(1, javaType0.containedTypeCount())"
project,0,test1218,"public void test1218() throws Throwable {
    Class<LinkedList> class0 = LinkedList.class;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<SimpleType> class1 = SimpleType.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
    assertEquals(1, collectionLikeType0.containedTypeCount());
}",0,"assertEquals(1, collectionLikeType0.containedTypeCount())"
project,0,test1319,"public void test1319() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    // Undeclared exception!
    try {
        typeFactory0.constructType((TypeReference<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test1420,"public void test1420() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Properties> class0 = Properties.class;
    // Undeclared exception!
    try {
        typeFactory0.constructRawMapType(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not create TypeBindings for class java.util.Properties with 2 type parameters: class expects 0
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeBindings"", e);
    }
}",0,
project,0,test1521,"public void test1521() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Properties> class0 = Properties.class;
    MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
    assertTrue(mapLikeType0.hasContentType());
}",0,assertTrue(mapLikeType0.hasContentType())
project,0,test1622,"public void test1622() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = typeFactory0.constructFromCanonical(""long"");
    assertTrue(javaType0.isPrimitive());
}",0,assertTrue(javaType0.isPrimitive())
project,0,test1723,"public void test1723() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
    try {
        typeFactory1.findClass("""");
        fail(""Expecting exception: ClassNotFoundException"");
    } catch (ClassNotFoundException e) {
        //
        //
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test1824,"public void test1824() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0, (TypeBindings) null);
    assertEquals(0, javaTypeArray0.length);
}",0,
project,0,test1925,"public void test1925() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
    // Undeclared exception!
    try {
        typeFactory0.constructReferenceType(class0, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ReferenceType"", e);
    }
}",0,
project,0,test2127,"public void test2127() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = TypeFactory.unknownType();
    typeFactory0.constructArrayType(javaType0);
    assertTrue(javaType0.isJavaLangObject());
}",0,
project,0,test2128,"public void test2128() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = TypeFactory.unknownType();
    typeFactory0.constructArrayType(javaType0);
    assertFalse(javaType0.isInterface());
}",0,
project,0,test2330,"public void test2330() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
    TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);
    assertNotSame(typeFactory0, typeFactory2);
}",0,
project,0,test2431,"public void test2431() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
    assertNotSame(typeFactory0, typeFactory1);
}",0,
project,0,test2734,"public void test2734() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    try {
        typeFactory0.findClass(""[nF.L`2EoWM;f"");
        fail(""Expecting exception: ClassNotFoundException"");
    } catch (ClassNotFoundException e) {
        //
        // [nF/L`2EoWM;f
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test3340,"public void test3340() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = typeFactory0.constructFromCanonical(""char"");
    assertTrue(javaType0.isAbstract());
}",0,assertFalse(javaType0.isAbstract())
project,0,test3643,"public void test3643() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Double> class0 = Double.TYPE;
    JavaType javaType0 = TypeFactory.unknownType();
    assertTrue(javaType0.isJavaLangObject());
}",0,assertTrue(javaType0.isJavaLangObject())
project,0,test3644,"public void test3644() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Double> class0 = Double.TYPE;
    JavaType javaType0 = TypeFactory.unknownType();
    JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
    assertTrue(javaType1.isFinal());
}",0,assertTrue(javaType1.isFinal())
project,0,test3745,"public void test3745() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class com.fasterxml.jackson.databind.type.CollectionLikeType not subtype of [simple type, class boolean]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test3846,"public void test3846() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
    assertTrue(javaType0.isEnumType());
}",0,assertTrue(javaType0.isEnumType())
project,0,test3947,"public void test3947() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    Class<Object> class1 = Object.class;
    typeFactory0.constructGeneralizedType(collectionType0, class1);
    assertEquals(1, collectionType0.containedTypeCount());
}",0,"assertEquals(0, collectionType0.containedTypeCount())"
project,0,test4048,"public void test4048() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    JavaType javaType0 = typeFactory0.constructGeneralizedType(collectionType0, class0);
    assertEquals(1, javaType0.containedTypeCount());
}",0,"assertEquals(0, javaType0.containedTypeCount())"
project,0,test4149,"public void test4149() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    Class<Object> class0 = Object.class;
    // Undeclared exception!
    try {
        typeFactory0.constructGeneralizedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Internal error: class java.lang.Object not included as super-type for [simple type, class java.lang.Enum]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test4250,"public void test4250() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    Class<ArrayType> class0 = ArrayType.class;
    // Undeclared exception!
    try {
        typeFactory0.constructGeneralizedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class com.fasterxml.jackson.databind.type.ArrayType not a super-type of [simple type, class java.lang.Enum]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test4452,"public void test4452() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<JsonDeserializer> class0 = JsonDeserializer.class;
    ClassStack classStack0 = new ClassStack(class0);
    PlaceholderForType placeholderForType0 = new PlaceholderForType((-465));
    TypeBindings typeBindings0 = placeholderForType0.getBindings();
    JavaType javaType0 = typeFactory0._fromClass(classStack0, class0, typeBindings0);
    JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, placeholderForType0);
    assertFalse(javaType1.isJavaLangObject());
}",0,assertTrue(javaType1.isJavaLangObject())
project,0,test4553,"public void test4553() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    assertNull(javaType0);
}",0,
project,0,test4654,"public void test4654() throws Throwable {
    LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1757, 200);
    TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, (JavaType) null);
    assertSame(javaType0, simpleType0);
}",0,
project,0,test4755,"public void test4755() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    JavaType javaType0 = typeFactory0.moreSpecificType(resolvedRecursiveType0, resolvedRecursiveType0);
    assertFalse(javaType0.isPrimitive());
}",0,assertTrue(javaType0.isPrimitive())
project,0,test4856,"public void test4856() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
    JavaType javaType0 = typeFactory0._unknownType();
    JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, simpleType0);
    assertTrue(javaType1.isFinal());
}",0,
project,0,test4957,"public void test4957() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Properties> class0 = Properties.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
    assertTrue(javaType0.isContainerType());
}",0,assertTrue(javaType0.isContainerType())
project,0,test5058,"public void test5058() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    // Undeclared exception!
    try {
        typeFactory0.constructType((Type) null, (Class<?>) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test5159,"public void test5159() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    JavaType javaType0 = typeFactory0.constructType((Type) collectionType0, (Class<?>) class0);
    assertEquals(1, javaType0.containedTypeCount());
}",0,"assertEquals(0, javaType0.containedTypeCount())"
project,0,test5260,"public void test5260() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<IntNode> class0 = IntNode.class;
    // Undeclared exception!
    try {
        typeFactory0.constructMapType((Class<? extends Map>) null, class0, (Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test5563,"public void test5563() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    objectMapper0.setTypeFactory(typeFactory0);
    Integer integer0 = new Integer(2449);
    AtomicReference<Integer> atomicReference0 = new AtomicReference<Integer>(integer0);
    Class<CollectionType> class0 = CollectionType.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    CollectionType collectionType0 = new CollectionType(arrayType0, arrayType0);
    try {
        objectMapper0.convertValue((Object) atomicReference0, (JavaType) collectionType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not find a Value deserializer for abstract type [collection type; class [Lcom.fasterxml.jackson.databind.type.CollectionType;, contains [array type, component type: [simple type, class com.fasterxml.jackson.databind.type.CollectionType]]]
        //  at [Source: java.lang.String@0000000375; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",1,
project,0,test5664,"public void test5664() throws Throwable {
    LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1023, (-17));
    TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
    Class<DeserializationFeature> class0 = DeserializationFeature.class;
    Class<LinkedList> class1 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
    TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (JavaType) collectionType0);
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0._constructSimple(class0, typeBindings0, collectionType0, javaTypeArray0);
    assertEquals(1, javaType0.containedTypeCount());
}",0,"assertEquals(0, javaType0.containedTypeCount())"
project,0,test5765,"public void test5765() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Object> class0 = Object.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertNotNull(javaType0);
}",0,
project,0,test5766,"public void test5766() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Object> class0 = Object.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertTrue(javaType0.isJavaLangObject());
}",0,assertTrue(javaType0.isJavaLangObject())
project,0,test5867,"public void test5867() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    doReturn(simpleType0, simpleType0).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
    Class<MapperFeature> class0 = MapperFeature.class;
    MapLikeType mapLikeType0 = typeFactory1.constructRawMapLikeType(class0);
    assertTrue(mapLikeType0.isEnumType());
}",0,assertTrue(mapLikeType0.isEnumType())
project,0,test5968,"public void test5968() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
    doReturn((String) null).when(typeModifier0).toString();
    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
    Class<IntNode> class0 = IntNode.class;
    // Undeclared exception!
    try {
        typeFactory1.constructRawMapLikeType(class0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // TypeModifier Mock for TypeModifier, hashCode: 1624497119 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$458767912) return null for type [simple type, class java.lang.Object]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test6069,"public void test6069() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<EnumSet> class0 = EnumSet.class;
    Class<Object> class1 = Object.class;
    SimpleType simpleType0 = new SimpleType(class1);
    CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) simpleType0);
    assertEquals(1, collectionType0.containedTypeCount());
}",0,"assertEquals(1, collectionType0.containedTypeCount())"
project,0,test6170,"public void test6170() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
    doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
    doReturn((Type) null).when(parameterizedType0).getRawType();
    // Undeclared exception!
    try {
        typeFactory0._fromParamType((ClassStack) null, parameterizedType0, (TypeBindings) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
