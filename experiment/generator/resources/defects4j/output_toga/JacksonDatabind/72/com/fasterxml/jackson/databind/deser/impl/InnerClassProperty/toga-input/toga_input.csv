focal_method,test_prefix,docstring
"/*
    /**********************************************************
    /* Deserialization methods
    /**********************************************************
     */
@Override
public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object bean) throws IOException {
    JsonToken t = jp.getCurrentToken();
    Object value;
    if (t == JsonToken.VALUE_NULL) {
        value = _valueDeserializer.getNullValue(ctxt);
    } else if (_valueTypeDeserializer != null) {
        value = _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);
    } else {
        // the usual case
        try {
            value = _creator.newInstance(bean);
        } catch (Exception e) {
            ClassUtil.unwrapAndThrowAsIAE(e, ""Failed to instantiate class "" + _creator.getDeclaringClass().getName() + "", problem: "" + e.getMessage());
            value = null;
        }
        _valueDeserializer.deserialize(jp, ctxt, value);
    }
    set(bean, value);
}","public void test000() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<Integer> class0 = Integer.TYPE;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyName0, propertyMetadata0);
    InnerClassProperty innerClassProperty0 = new InnerClassProperty(creatorProperty0, (Constructor<?>) null);
    ObjectMapper objectMapper0 = new ObjectMapper();
    ArrayNode arrayNode0 = objectMapper0.createArrayNode();
    JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
    // Undeclared exception!
    try {
        innerClassProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, jsonParser0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.impl.InnerClassProperty"", e);
    }
}",""
"@Override
public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {
    return setAndReturn(instance, deserialize(jp, ctxt));
}","public void test011() throws Throwable {
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    Class<Integer> class0 = Integer.TYPE;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-7), propertyName0, propertyMetadata0);
    InnerClassProperty innerClassProperty0 = new InnerClassProperty(creatorProperty0, (Constructor<?>) null);
    // Undeclared exception!
    try {
        innerClassProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.SettableBeanProperty"", e);
    }
}",""
"/*
    /**********************************************************
    /* JDK serialization handling
    /**********************************************************
     */
// When reading things back,
Object readResolve() {
    return new InnerClassProperty(this, _annotated);
}","public void test088() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<Integer> class0 = Integer.TYPE;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-16), propertyName0, propertyMetadata0);
    InnerClassProperty innerClassProperty0 = new InnerClassProperty(creatorProperty0, (Constructor<?>) null);
    // Undeclared exception!
    try {
        innerClassProperty0.readResolve();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Missing constructor (broken JDK (de)serialization?)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.impl.InnerClassProperty"", e);
    }
}",""
"/*
    /**********************************************************
    /* Deserialization methods
    /**********************************************************
     */
@Override
public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object bean) throws IOException {
    JsonToken t = jp.getCurrentToken();
    Object value;
    if (t == JsonToken.VALUE_NULL) {
        value = _valueDeserializer.getNullValue(ctxt);
    } else if (_valueTypeDeserializer != null) {
        value = _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);
    } else {
        // the usual case
        try {
            value = _creator.newInstance(bean);
        } catch (Exception e) {
            ClassUtil.unwrapAndThrowAsIAE(e, ""Failed to instantiate class "" + _creator.getDeclaringClass().getName() + "", problem: "" + e.getMessage());
            value = null;
        }
        _valueDeserializer.deserialize(jp, ctxt, value);
    }
    set(bean, value);
}","public void test1111() throws Throwable {
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    Class<Integer> class0 = Integer.TYPE;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, """", false, class0);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1146, annotationMap0, propertyMetadata0);
    InnerClassProperty innerClassProperty0 = new InnerClassProperty(creatorProperty0, (Constructor<?>) null);
    ObjectMapper objectMapper0 = new ObjectMapper();
    ArrayNode arrayNode0 = objectMapper0.createArrayNode();
    JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
    // Undeclared exception!
    try {
        innerClassProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, propertyName0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer"", e);
    }
}",""
"Object writeReplace() {
    // need to construct a fake instance to support serialization
    if (_annotated != null) {
        return this;
    }
    return new InnerClassProperty(this, new AnnotatedConstructor(null, _creator, null, null));
}","public void test1212() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<Integer> class0 = Integer.TYPE;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-16), propertyName0, propertyMetadata0);
    InnerClassProperty innerClassProperty0 = new InnerClassProperty(creatorProperty0, (Constructor<?>) null);
    // Undeclared exception!
    try {
        innerClassProperty0.writeReplace();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null constructor not allowed
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.AnnotatedConstructor"", e);
    }
}",""
