project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    typeFactory0.withClassLoader(classLoader0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Properties> class0 = Properties.class;
    ClassStack classStack0 = new ClassStack(class0);
    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
    doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
    doReturn((Type) null).when(parameterizedType0).getRawType();
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    // Undeclared exception!
    try {
        typeFactory0._fromParamType(classStack0, parameterizedType0, typeBindings0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    typeFactory0.withModifier(typeModifier0);
}",0,
project,0,test044,"public void test044() throws Throwable {
    TypeFactory.rawClass((Type) null);
}",0,
project,0,test055,"public void test055() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<EnumSet> class0 = EnumSet.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    typeFactory0.constructSpecializedType(collectionType0, class0);
}",0,
project,0,test066,"public void test066() throws Throwable {
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.constructType((Type) class0, (Class<?>) class0);
}",0,
project,0,test088,"public void test088() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
    typeFactory0._findWellKnownSimple(class0);
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.constructFromCanonical(""com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer"");
    typeFactory0.findClass(""wE;eG"");
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<SimpleType> class0 = SimpleType.class;
    typeFactory0.constructRawMapLikeType(class0);
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Properties> class0 = Properties.class;
    // Undeclared exception!
    try {
        typeFactory0.constructRawMapType(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not create TypeBindings for class java.util.Properties with 2 type parameters: class expects 0
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeBindings"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<SerializationFeature> class0 = SerializationFeature.class;
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
    TypeFactory.rawClass(mapLikeType0);
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    TypeFactory.defaultInstance();
    TypeFactory.unknownType();
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<MapLikeType> class0 = MapLikeType.class;
    Class<ReferenceType> class1 = ReferenceType.class;
    typeFactory0._findWellKnownSimple(class1);
    // Undeclared exception!
    try {
        typeFactory0.constructReferenceType(class0, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ReferenceType"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.constructType((TypeReference<?>) null);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""mJM~ayZ9M(}d3"");
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<String> class0 = String.class;
    typeFactory0.uncheckedSimpleType(class0);
}",1,
project,0,test2424,"public void test2424() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<EnumSet> class0 = EnumSet.class;
    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
    typeFactory0.moreSpecificType(collectionType0, collectionType0);
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.clearCache();
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) null);
    // Undeclared exception!
    try {
        typeFactory0.moreSpecificType(arrayType0, arrayType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ArrayType"", e);
    }
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    typeFactory0.constructType((Type) simpleType0, (JavaType) simpleType0);
    typeFactory0.findClass(""[value=%sdcontent=%s]"");
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    TypeFactory.rawClass(simpleType0);
}",0,
project,0,test3030,"public void test3030() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayType> class0 = ArrayType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    typeFactory0.findTypeParameters(class0, class0, typeBindings0);
    Class<MapperFeature> class1 = MapperFeature.class;
    typeFactory0.uncheckedSimpleType(class1);
}",1,
project,0,test3131,"public void test3131() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    Class<DeserializationFeature> class0 = DeserializationFeature.class;
    typeFactory0.findTypeParameters((JavaType) simpleType0, (Class<?>) class0);
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<SerializationFeature> class0 = SerializationFeature.class;
    typeFactory0.uncheckedSimpleType(class0);
}",1,
project,0,test4141,"public void test4141() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
}",0,
project,0,test4242,"public void test4242() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.withModifier((TypeModifier) null);
}",0,
project,0,test4444,"public void test4444() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<RuntimeException> class0 = RuntimeException.class;
    JavaType javaType0 = typeFactory0._unknownType();
    // Undeclared exception!
    try {
        typeFactory0.constructGeneralizedType(javaType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.lang.RuntimeException not a super-type of [simple type, class java.lang.Object]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test4646,"public void test4646() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""float"");
}",0,
project,0,test4747,"public void test4747() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.findClass(""char"");
}",0,
project,0,test5151,"public void test5151() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    typeFactory0.moreSpecificType(simpleType0, simpleType0);
}",0,
project,0,test5353,"public void test5353() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""short"");
}",0,
project,0,test5454,"public void test5454() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
    Class<MapLikeType> class1 = MapLikeType.class;
    Class<SerializationFeature> class2 = SerializationFeature.class;
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class2);
    FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
    typeFactory0.moreSpecificType(mapLikeType0, mapLikeType0);
    Class<HashSet> class3 = HashSet.class;
    typeFactory0.constructCollectionType(class3, class2);
    Class<Object> class4 = Object.class;
    typeFactory0.constructGeneralizedType(mapLikeType0, class4);
}",0,
project,0,test5555,"public void test5555() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<DeserializationFeature> class0 = DeserializationFeature.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    typeFactory0.moreSpecificType(collectionLikeType0, collectionLikeType0);
}",0,
project,0,test5656,"public void test5656() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""Tnh>^XldB5.V~+;f!_P"");
}",0,
project,0,test5858,"public void test5858() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    Class<ArrayList> class0 = ArrayList.class;
    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
    TypeParser typeParser1 = new TypeParser(typeFactory0);
    typeFactory0.constructType((Type) collectionType0, (TypeBindings) null);
    Class<HashSet> class1 = HashSet.class;
    typeFactory0.constructCollectionType(class0, class0);
    JsonFactory jsonFactory0 = new JsonFactory();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
    ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider((DefaultSerializerProvider) null);
    ObjectReader objectReader0 = objectMapper1.readerFor(class0);
    TypeFactory typeFactory1 = objectReader0.getTypeFactory();
    CollectionType collectionType1 = typeFactory1.constructCollectionType(class1, class0);
    Class<Object> class2 = Object.class;
    typeFactory0.constructGeneralizedType(collectionType1, class2);
}",0,
project,0,test5959,"public void test5959() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.findClass(""int"");
}",0,
project,0,test6060,"public void test6060() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
    typeFactory1.findClass(""s`["");
}",0,
project,0,test6161,"public void test6161() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""void"");
}",0,
project,0,test6262,"public void test6262() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""byte"");
}",0,
project,0,test6363,"public void test6363() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type not subtype of [simple type, class int]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test6565,"public void test6565() throws Throwable {
    Class<LinkedList> class0 = LinkedList.class;
    TypeFactory.rawClass(class0);
}",0,
project,0,test6666,"public void test6666() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    JavaType[] javaTypeArray0 = new JavaType[0];
    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
    typeFactory0.moreSpecificType(referenceType0, simpleType0);
}",0,
project,0,test6767,"public void test6767() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    typeFactory0.constructGeneralizedType(collectionType0, class0);
}",0,
project,0,test6868,"public void test6868() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    typeFactory0.moreSpecificType(simpleType0, (JavaType) null);
}",0,
project,0,test7171,"public void test7171() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<ArrayType> class0 = ArrayType.class;
    JavaType javaType0 = TypeBase._bogusSuperClass(class0);
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
    MapType mapType1 = mapType0.withKeyType(simpleType0);
    MapType mapType2 = mapType1.withTypeHandler(javaType0);
    typeFactory0.moreSpecificType(javaType0, mapType2);
    typeFactory0.findClass(""K_:"");
}",0,
project,0,test7272,"public void test7272() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.findClass(""double"");
}",0,
project,0,test7373,"public void test7373() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    simpleType0.toString();
    Class<MapType> class0 = MapType.class;
    typeFactory0.constructSpecializedType(simpleType0, class0);
}",0,
project,0,test7474,"public void test7474() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""long"");
}",0,
project,0,test7575,"public void test7575() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Integer> class0 = Integer.TYPE;
    Class<ArrayList> class1 = ArrayList.class;
    typeFactory0.constructRawCollectionType(class1);
    JsonFactory jsonFactory0 = new JsonFactory();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
    try {
        objectMapper0.writeValueAsString(defaultDeserializationContext_Impl0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // (was java.lang.NullPointerException) (through reference chain: com.fasterxml.jackson.databind.deser.Impl[\""base64Variant\""])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test7878,"public void test7878() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType javaType0 = null;
    // Undeclared exception!
    try {
        typeFactory0.constructType((Type) null, (JavaType) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test7979,"public void test7979() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Integer> class0 = Integer.TYPE;
    Class<ArrayList> class1 = ArrayList.class;
    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    TypeParser typeParser1 = typeParser0.withFactory(typeFactory0);
    TypeModifier[] typeModifierArray0 = new TypeModifier[9];
    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    typeModifierArray0[0] = typeModifier0;
    typeModifierArray0[1] = typeModifier0;
    typeModifierArray0[2] = typeModifier0;
    typeModifierArray0[3] = typeModifier0;
    typeModifierArray0[4] = typeModifier0;
    typeModifierArray0[5] = typeModifier0;
    typeModifierArray0[6] = typeModifier0;
    typeModifierArray0[7] = typeModifier0;
    typeModifierArray0[8] = typeModifier0;
    TypeFactory typeFactory1 = new TypeFactory(typeParser1, typeModifierArray0);
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory1.constructParametricType(class0, javaTypeArray0);
    Class<ObjectMapper.DefaultTyping> class2 = ObjectMapper.DefaultTyping.class;
    TypeBindings typeBindings0 = TypeBindings.create(class1, javaType0);
    typeFactory0._constructSimple(class2, typeBindings0, collectionType0, javaTypeArray0);
    typeFactory0.findClass("""");
}",0,
project,0,test8080,"public void test8080() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    Class<MapperFeature> class0 = MapperFeature.class;
    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
    // Undeclared exception!
    try {
        TypeBindings.create(class0, javaType0, javaType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not create TypeBindings for class com.fasterxml.jackson.databind.MapperFeature with 2 type parameters: class expects 0
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeBindings"", e);
    }
}",0,
project,0,test8181,"public void test8181() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.findClass(""boolean"");
}",0,
