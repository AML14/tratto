project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    POJONode pOJONode0 = new POJONode((Object) null);
    JsonParser jsonParser0 = objectMapper0.treeAsTokens(pOJONode0);
    DataInputStream dataInputStream0 = objectReader0.readValue(jsonParser0);
    assertNull(dataInputStream0);
}",0,assertNotNull(dataInputStream0)
project,0,test066,"public void test066() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<CreatorProperty> class0 = CreatorProperty.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    ObjectNode objectNode0 = objectMapper0.createObjectNode();
    JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
    try {
        objectReader0.readValue(jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No suitable constructor found for type [simple type, class com.fasterxml.jackson.databind.deser.CreatorProperty]: can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)
        //  at [Source: java.lang.String@0000000077; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
    objectMapper0.readerFor(class0);
    ObjectNode objectNode0 = objectMapper0.createObjectNode();
    objectMapper0.treeAsTokens(objectNode0);
}",0,
project,0,test088,"public void test088() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<BeanDeserializer> class1 = BeanDeserializer.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class1);
    try {
        objectMapper0.convertValue((Object) class0, javaType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not instantiate value of type [simple type, class com.fasterxml.jackson.databind.deser.BeanDeserializer] from String value ('com.fasterxml.jackson.annotation.SimpleObjectIdResolver'); no single-String constructor/factory method
        //  at [Source: java.lang.String@0000001666; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",1,
project,0,test099,"public void test099() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<CreatorProperty> class0 = CreatorProperty.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    IntNode intNode0 = IntNode.valueOf((-940));
    JsonParser jsonParser0 = objectMapper0.treeAsTokens(intNode0);
    try {
        objectReader0.readValue(jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not instantiate value of type [simple type, class com.fasterxml.jackson.databind.deser.CreatorProperty] from Integral number (-940); no single-int-arg constructor/factory method
        //  at [Source: java.lang.String@0000000077; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    DecimalNode decimalNode0 = DecimalNode.ZERO;
    JsonParser jsonParser0 = objectMapper0.treeAsTokens(decimalNode0);
    try {
        objectReader0.readValue(jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not construct instance of com.fasterxml.jackson.annotation.SimpleObjectIdResolver, problem: no suitable creator method found to deserialize from JSON floating-point number
        //  at [Source: java.lang.String@0000000077; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    BooleanNode booleanNode0 = BooleanNode.getTrue();
    JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
    try {
        objectReader0.readValue(jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not instantiate value of type [simple type, class com.fasterxml.jackson.annotation.SimpleObjectIdResolver] from Boolean value (true); no single-boolean/Boolean-arg constructor/factory method
        //  at [Source: java.lang.String@0000000077; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<CreatorProperty> class0 = CreatorProperty.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    BooleanNode booleanNode0 = BooleanNode.FALSE;
    JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
    try {
        objectReader0.readValue(jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not instantiate value of type [simple type, class com.fasterxml.jackson.databind.deser.CreatorProperty] from Boolean value (false); no single-boolean/Boolean-arg constructor/factory method
        //  at [Source: java.lang.String@0000000077; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    ArrayNode arrayNode0 = objectMapper0.createArrayNode();
    JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
    try {
        objectReader0.readValue(jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not deserialize instance of com.fasterxml.jackson.annotation.SimpleObjectIdResolver out of START_ARRAY token
        //  at [Source: java.lang.String@0000000077; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    BigInteger bigInteger0 = BigInteger.TEN;
    BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
    JsonNode jsonNode0 = bigIntegerNode0.path((-243));
    JsonParser jsonParser0 = objectMapper0.treeAsTokens(jsonNode0);
    try {
        objectReader0.readValue(jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not deserialize instance of com.fasterxml.jackson.annotation.SimpleObjectIdResolver out of NOT_AVAILABLE token
        //  at [Source: java.lang.String@0000000077; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectNode objectNode0 = objectMapper0.createObjectNode();
    JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
    objectMapper0.readerForUpdating(jsonParser0);
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectNode objectNode0 = objectMapper0.createObjectNode();
    objectNode0.putNull(""eyc"");
    JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonParser0);
    try {
        objectReader0.readValue(jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized field \""eyc\"" (class com.fasterxml.jackson.databind.node.TreeTraversingParser), not marked as ignorable (4 known properties: \""currentValue\"", \""schema\"", \""featureMask\"", \""codec\""])
        //  at [Source: java.lang.String@0000000077; line: -1, column: -1] (through reference chain: com.fasterxml.jackson.databind.node.TreeTraversingParser[\""eyc\""])
        //
        verifyException(""com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    ObjectNode objectNode0 = objectMapper0.createObjectNode();
    ObjectNode objectNode1 = objectNode0.putNull(""';z&,$f^kT1RV@2~ze"");
    JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
    try {
        objectReader0.readValue(jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized field \""';z&,$f^kT1RV@2~ze\"" (class com.fasterxml.jackson.annotation.SimpleObjectIdResolver), not marked as ignorable (0 known properties: ])
        //  at [Source: java.lang.String@0000000077; line: -1, column: -1] (through reference chain: com.fasterxml.jackson.annotation.SimpleObjectIdResolver[\""';z&,$f^kT1RV@2~ze\""])
        //
        verifyException(""com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException"", e);
    }
}",0,
