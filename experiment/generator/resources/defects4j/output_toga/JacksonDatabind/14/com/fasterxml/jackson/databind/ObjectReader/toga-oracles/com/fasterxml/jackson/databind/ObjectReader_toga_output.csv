project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
    boolean boolean0 = objectReader0.isEnabled(mapperFeature0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test011,"public void test011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
    DeserializationConfig deserializationConfig0 = objectReader0.getConfig();
    assertNull(deserializationConfig0.getRootName());
}",0,assertNotNull(deserializationConfig0.getRootName())
project,0,test022,"public void test022() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    MissingNode missingNode0 = MissingNode.getInstance();
    IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
    MockFile mockFile0 = new MockFile("""", "".n:UoBD2T\""p8"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, mockPrintStream0);
    // Undeclared exception!
    try {
        objectReader0.writeTree(uTF8JsonGenerator0, missingNode0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",1,
project,0,test055,"public void test055() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test066,"public void test066() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    Class<DecimalNode> class0 = DecimalNode.class;
    ObjectReader objectReader1 = objectReader0.withView(class0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test077,"public void test077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
    ObjectReader objectReader1 = objectReader0.withAttributes(hashMap0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test088,"public void test088() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    byte[] byteArray0 = new byte[0];
    try {
        objectReader0.readValues(byteArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No value type configured for ObjectReader
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",1,
project,0,test099,"public void test099() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) jsonFactory0);
    // Undeclared exception!
    try {
        objectMapper0.writeValueAsBytes(objectReader0);
        fail(""Expecting exception: NoClassDefFoundError"");
    } catch (NoClassDefFoundError e) {
        //
        // com/fasterxml/jackson/databind/JsonMappingException$Reference
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.BeanSerializerBase"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
    try {
        objectReader0._reportUndetectableSource(jsonInclude_Include0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not use source of type com.fasterxml.jackson.annotation.JsonInclude$Include with format auto-detection: must be byte- not char-based
        //  at [Source: java.lang.String@0000000021; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",1,
project,0,test1111,"public void test1111() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
    ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
    assertNotSame(objectReader1, objectReader0);
}",1,
project,0,test1212,"public void test1212() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
    ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
    ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    Vector<ObjectReader> vector0 = new Vector<ObjectReader>(1);
    DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
    DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((byte[]) null, 64, 64);
    // Undeclared exception!
    try {
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    ObjectReader objectReader1 = objectReader0.withRootName("""");
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    ObjectReader objectReader1 = objectReader0.withHandler((DeserializationProblemHandler) null);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""IN=zJhe\""N(OMS7M"", false);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 252, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
    ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
    try {
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, (ResolvedType) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No content to map due to end-of-input
        //  at [Source: java.lang.String@0000000022; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    JsonFactory jsonFactory0 = new JsonFactory();
    char[] charArray0 = new char[1];
    JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-808), (-808));
    try {
        objectReader0.readTree(jsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No content to map due to end-of-input
        //  at [Source: [C@0000000023; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    Locale locale0 = Locale.ITALIAN;
    ObjectReader objectReader1 = objectReader0.with(locale0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
    MapType mapType0 = typeFactory0.constructRawMapType(class0);
    Iterator<AbstractDeserializer> iterator0 = objectReader0.readValues((JsonParser) null, (ResolvedType) mapType0);
    assertNotNull(iterator0);
}",0,assertNotNull(iterator0)
project,0,test2323,"public void test2323() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
    ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
    MissingNode missingNode0 = MissingNode.getInstance();
    try {
        objectReader0.readValue((JsonNode) missingNode0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not deserialize instance of com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std out of NOT_AVAILABLE token
        //  at [Source: java.lang.String@0000000021; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    // Undeclared exception!
    try {
        objectReader0.with((DeserializationConfig) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    boolean boolean0 = objectReader0.isEnabled(deserializationFeature0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3030,"public void test3030() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BooleanNode> class0 = BooleanNode.class;
    ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
    ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
    ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
    assertSame(objectReader1, objectReader0);
}",0,
project,0,test3131,"public void test3131() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
    // Undeclared exception!
    try {
        objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    TypeReference<BeanDeserializer> typeReference0 = (TypeReference<BeanDeserializer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    // Undeclared exception!
    try {
        objectReader0.readValue((JsonParser) null, (TypeReference<?>) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test3333,"public void test3333() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    TypeFactory typeFactory0 = objectReader0.getTypeFactory();
    assertNotNull(typeFactory0);
}",0,assertNotNull(typeFactory0)
project,0,test3434,"public void test3434() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
    TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    // Undeclared exception!
    try {
        objectReader0.readValues((JsonParser) jsonParserSequence0, (TypeReference<?>) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    URL uRL0 = MockURL.getFileExample();
    // Undeclared exception!
    try {
        objectReader0._inputStream(uRL0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.net.URL"", e);
    }
}",0,
project,0,test3636,"public void test3636() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<Object> class0 = Object.class;
    ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
    ArrayNode arrayNode0 = objectMapper0.createArrayNode();
    JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
    try {
        objectReader0.readValue(jsonParser0, (JavaType) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No value type configured for ObjectReader
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",0,
project,0,test3939,"public void test3939() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
    InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
    ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
    boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4040,"public void test4040() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonNode jsonNode0 = objectReader0.createArrayNode();
    assertFalse(jsonNode0.isInt());
}",0,assertFalse(jsonNode0.isInt())
project,0,test4141,"public void test4141() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
    deserializationFeatureArray0[0] = deserializationFeature0;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
    ObjectReader objectReader1 = objectReader0.with((Base64Variant) null);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test4242,"public void test4242() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
    ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test4343,"public void test4343() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    MissingNode missingNode0 = MissingNode.getInstance();
    ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, missingNode0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test4444,"public void test4444() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BooleanNode> class0 = BooleanNode.class;
    ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
    ObjectReader objectReader1 = objectReader0.withType((Type) class0);
    assertSame(objectReader1, objectReader0);
}",0,
project,0,test4545,"public void test4545() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
    try {
        objectReader0.readValue((InputStream) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No content to map due to end-of-input
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test4646,"public void test4646() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    ObjectReader objectReader1 = objectReader0.withoutAttribute(""Can not use source of type "");
    assertSame(objectReader1, objectReader0);
}",0,
project,0,test4747,"public void test4747() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    TimeZone timeZone0 = TimeZone.getDefault();
    ObjectReader objectReader1 = objectReader0.with(timeZone0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test4848,"public void test4848() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
    // Undeclared exception!
    try {
        objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}",0,
project,0,test4949,"public void test4949() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
    deserializationFeatureArray0[0] = deserializationFeature0;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
    JsonNode jsonNode0 = objectReader0.readTree(""0"");
    assertFalse(jsonNode0.isDouble());
}",0,assertTrue(jsonNode0.isDouble())
project,0,test5151,"public void test5151() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    ContextAttributes contextAttributes0 = objectReader0.getAttributes();
    assertNotNull(contextAttributes0);
}",0,
project,0,test5252,"public void test5252() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    // Undeclared exception!
    try {
        objectReader0.forType((TypeReference<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",0,
project,0,test5353,"public void test5353() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationFeature0, true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""f7T>"");
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1030), objectReader0, mockPrintStream0);
    // Undeclared exception!
    try {
        objectReader0.writeValue(uTF8JsonGenerator0, (Object) null);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Not implemented for ObjectReader
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",1,
project,0,test5454,"public void test5454() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    ObjectReader objectReader1 = objectMapper0.readerForUpdating((Object) objectReader0);
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    Class<MissingNode> class0 = MissingNode.class;
    // Undeclared exception!
    try {
        objectReader1.treeToValue((TreeNode) objectNode0, class0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Can not update object of type com.fasterxml.jackson.databind.ObjectReader (by deserializer of type com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer)
        //
        verifyException(""com.fasterxml.jackson.databind.JsonDeserializer"", e);
    }
}",0,
project,0,test5555,"public void test5555() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
    ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test5656,"public void test5656() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) jsonFactory0);
    ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    assertSame(objectReader1, objectReader0);
}",0,
project,0,test5757,"public void test5757() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test5858,"public void test5858() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
    assertSame(objectReader1, objectReader0);
}",0,
project,0,test5959,"public void test5959() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test6060,"public void test6060() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<DecimalNode> class0 = DecimalNode.class;
    ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
    ObjectReader objectReader1 = objectReader0.withValueToUpdate((Object) null);
    assertSame(objectReader0, objectReader1);
}",0,
project,0,test6161,"public void test6161() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SimpleType> class0 = SimpleType.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
    ObjectReader objectReader1 = objectReader0.withValueToUpdate(class0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test6262,"public void test6262() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    PipedReader pipedReader0 = new PipedReader();
    try {
        objectReader0.readValue((Reader) pipedReader0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedReader"", e);
    }
}",0,
project,0,test6363,"public void test6363() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    try {
        objectReader0.readValue(""'), but "");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character (''' (code 39)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
        //  at [Source: java.lang.String@0000000024; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test6464,"public void test6464() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    byte[] byteArray0 = new byte[1];
    try {
        objectReader0.readValue(byteArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: [B@0000000025; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test6565,"public void test6565() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    // Undeclared exception!
    try {
        objectReader0.readValue((byte[]) null, 1, 1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",0,
project,0,test6666,"public void test6666() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    // Undeclared exception!
    try {
        objectReader0.readValue((File) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",1,
project,0,test6767,"public void test6767() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    URL uRL0 = MockURL.getFileExample();
    // Undeclared exception!
    try {
        objectReader0.readValue(uRL0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.net.URL"", e);
    }
}",0,
project,0,test6868,"public void test6868() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    try {
        objectReader0.readTree((InputStream) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No content to map due to end-of-input
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test6969,"public void test6969() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    PipedReader pipedReader0 = new PipedReader();
    try {
        objectReader0.readTree((Reader) pipedReader0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedReader"", e);
    }
}",0,
project,0,test7070,"public void test7070() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    try {
        objectReader0.readValues((InputStream) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No value type configured for ObjectReader
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",0,
project,0,test7171,"public void test7171() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    PipedReader pipedReader0 = new PipedReader();
    try {
        objectReader0.readValues((Reader) pipedReader0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedReader"", e);
    }
}",0,
project,0,test7272,"public void test7272() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    try {
        objectReader0.readValues("""");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No value type configured for ObjectReader
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",0,
project,0,test7373,"public void test7373() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    // Undeclared exception!
    try {
        objectReader0.readValues((File) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",0,
project,0,test7474,"public void test7474() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    NullNode nullNode0 = NullNode.instance;
    try {
        objectReader0.readValue((JsonNode) nullNode0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No value type configured for ObjectReader
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",0,
project,0,test7575,"public void test7575() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
    deserializationFeatureArray0[0] = deserializationFeature0;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
    try {
        objectReader0.readTree(""0"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token not START_OBJECT (needed to unwrap root name 'JsonNode'), but VALUE_NUMBER_INT
        //  at [Source: java.lang.String@0000000026; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test7676,"public void test7676() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BooleanNode> class0 = BooleanNode.class;
    objectMapper0.reader((Class<?>) class0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    ObjectReader objectReader1 = objectReader0.withType((Type) class0);
    assertNotSame(objectReader1, objectReader0);
}",0,
project,0,test7777,"public void test7777() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    byte[] byteArray0 = new byte[7];
    Stack<ObjectReader> stack0 = new Stack<ObjectReader>();
    DataFormatReaders dataFormatReaders0 = new DataFormatReaders(stack0);
    DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
    // Undeclared exception!
    try {
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",0,
project,0,test7878,"public void test7878() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    objectReader0._verifySchemaType((FormatSchema) null);
}",1,
