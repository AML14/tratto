focal_method,test_prefix,docstring
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test000() throws Throwable {
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""ZV"", false, (JavaType) null);
    String string0 = asWrapperTypeDeserializer0.getPropertyName();
    assertEquals(""ZV"", string0);
}",""
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test011() throws Throwable {
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""ZV"", false, (JavaType) null);
    asWrapperTypeDeserializer0.getDefaultImpl();
    assertEquals(""ZV"", asWrapperTypeDeserializer0.getPropertyName());
}",""
"protected JavaType _handleMissingTypeId(DeserializationContext ctxt, String extraDesc) throws IOException {
    return ctxt.handleMissingTypeId(_baseType, _idResolver, extraDesc);
}","public void test022() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""GSE2a=s_A"", false, (JavaType) null);
    // Undeclared exception!
    try {
        asWrapperTypeDeserializer0._handleMissingTypeId(defaultDeserializationContext_Impl0, ""GSE2a=s_A"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}","/**
 * @since 2.9
 */"
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test033() throws Throwable {
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""ZV"", true, (JavaType) null);
    asWrapperTypeDeserializer0.getTypeIdResolver();
    assertEquals(""ZV"", asWrapperTypeDeserializer0.getPropertyName());
}",""
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test044() throws Throwable {
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""Zk'V"", false, (JavaType) null);
    String string0 = asWrapperTypeDeserializer0.toString();
    assertEquals(""Zk'V"", asWrapperTypeDeserializer0.getPropertyName());
}",""
"@Override
public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append('[').append(getClass().getName());
    sb.append(""; base-type:"").append(_baseType);
    sb.append(""; id-resolver: "").append(_idResolver);
    sb.append(']');
    return sb.toString();
}","public void test045() throws Throwable {
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""Zk'V"", false, (JavaType) null);
    String string0 = asWrapperTypeDeserializer0.toString();
    assertEquals(""[com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer; base-type:null; id-resolver: null]"", string0);
}",""
"@Override
public Object deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt) throws IOException {
    return _deserialize(jp, ctxt);
}","public void test056() throws Throwable {
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""oIu/6"", true, (JavaType) null);
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""oIu/6"");
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        asWrapperTypeDeserializer0.deserializeTypedFromArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase"", e);
    }
}",""
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test067() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""JSON"", false, (JavaType) null);
    asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0);
    assertEquals(""JSON"", asWrapperTypeDeserializer0.getPropertyName());
}",""
"protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId) throws IOException {
    String extraDesc = _idResolver.getDescForKnownTypeIds();
    if (extraDesc == null) {
        extraDesc = ""type ids are not statically known"";
    } else {
        extraDesc = ""known type ids = "" + extraDesc;
    }
    if (_property != null) {
        extraDesc = String.format(""%s (for POJO property '%s')"", extraDesc, _property.getName());
    }
    return ctxt.handleUnknownTypeId(_baseType, typeId, _idResolver, extraDesc);
}","public void test078() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = TypeFactory.unknownType();
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, typeFactory0);
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, minimalClassNameIdResolver0, ""No (native) type id found when one was expected for polymorphic type handling"", false, javaType0);
    BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
    AsWrapperTypeDeserializer asWrapperTypeDeserializer1 = new AsWrapperTypeDeserializer(asWrapperTypeDeserializer0, beanProperty_Bogus0);
    // Undeclared exception!
    try {
        asWrapperTypeDeserializer1._handleUnknownTypeId((DeserializationContext) null, ""No (native) type id found when one was expected for polymorphic type handling"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase"", e);
    }
}","/**
 * Helper method called when given type id cannot be resolved into
 * concrete deserializer either directly (using given {@link  TypeIdResolver}),
 * or using default type.
 * Default implementation simply throws a {@link com.fasterxml.jackson.databind.JsonMappingException} to
 * indicate the problem; sub-classes may choose
 *
 * @return If it is possible to resolve type id into a {@link JsonDeserializer}
 *   should return that deserializer; otherwise throw an exception to indicate
 *   the problem.
 *
 * @since 2.8
 */"
"protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt, Object typeId) throws IOException {
    JsonDeserializer<Object> deser;
    if (typeId == null) {
        /* 04-May-2014, tatu: Should error be obligatory, or should there be another method
             *   for ""try to deserialize with native tpye id""?
             */
        deser = _findDefaultImplDeserializer(ctxt);
        if (deser == null) {
            return ctxt.reportInputMismatch(baseType(), ""No (native) type id found when one was expected for polymorphic type handling"");
        }
    } else {
        String typeIdStr = (typeId instanceof String) ? (String) typeId : String.valueOf(typeId);
        deser = _findDeserializer(ctxt, typeIdStr);
    }
    return deser.deserialize(jp, ctxt);
}","public void test089() throws Throwable {
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""dh>|"", false, (JavaType) null);
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase"", e);
    }
}","/**
 * Helper method called when {@link JsonParser} indicates that it can use
 * so-called native type ids, and such type id has been found.
 *
 * @since 2.4
 */"
"protected final JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt) throws IOException {
    /* 06-Feb-2013, tatu: As per [databind#148], consider default implementation value of
         *   {@link java.lang.Void} to mean ""serialize as null""; as well as DeserializationFeature
         *   to do swift mapping to null
         */
    if (_defaultImpl == null) {
        if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) {
            return NullifyingDeserializer.instance;
        }
        return null;
    }
    Class<?> raw = _defaultImpl.getRawClass();
    if (ClassUtil.isBogusClass(raw)) {
        return NullifyingDeserializer.instance;
    }
    synchronized (_defaultImpl) {
        if (_defaultImplDeserializer == null) {
            _defaultImplDeserializer = ctxt.findContextualValueDeserializer(_defaultImpl, _property);
        }
        return _defaultImplDeserializer;
    }
}","public void test0910() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, ""d`D|"", false, javaType0);
    // Undeclared exception!
    try {
        asWrapperTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase"", e);
    }
}",""
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test1011() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = TypeFactory.unknownType();
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, typeFactory0);
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, minimalClassNameIdResolver0, ""5F@lbIJ7Mg"", false, (JavaType) null);
    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
    HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
    InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
    DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, (JsonParser) null, injectableValues_Std0);
    asWrapperTypeDeserializer0._findDefaultImplDeserializer(defaultDeserializationContext0);
    assertEquals(""5F@lbIJ7Mg"", asWrapperTypeDeserializer0.getPropertyName());
}",""
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test1112() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, ""d`D|"", false, javaType0);
    Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
    CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
    asWrapperTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
    JsonDeserializer<Object> jsonDeserializer0 = asWrapperTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
    assertEquals(""d`D|"", asWrapperTypeDeserializer0.getPropertyName());
}",""
"public AccessPattern getEmptyAccessPattern() {
    return AccessPattern.DYNAMIC;
}","public void test1113() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, ""d`D|"", false, javaType0);
    Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
    CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
    asWrapperTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
    JsonDeserializer<Object> jsonDeserializer0 = asWrapperTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
    assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
}","/**
 * This method may be called in conjunction with calls to
 * {@link #getEmptyValue(DeserializationContext)}, to check whether it needs
 * to be called just once (static values), or each time empty value is
 * needed.
 *
 * @since 2.9
 */"
"protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt, Object typeId) throws IOException {
    JsonDeserializer<Object> deser;
    if (typeId == null) {
        /* 04-May-2014, tatu: Should error be obligatory, or should there be another method
             *   for ""try to deserialize with native tpye id""?
             */
        deser = _findDefaultImplDeserializer(ctxt);
        if (deser == null) {
            return ctxt.reportInputMismatch(baseType(), ""No (native) type id found when one was expected for polymorphic type handling"");
        }
    } else {
        String typeIdStr = (typeId instanceof String) ? (String) typeId : String.valueOf(typeId);
        deser = _findDeserializer(ctxt, typeIdStr);
    }
    return deser.deserialize(jp, ctxt);
}","public void test1214() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""JSON"", false, (JavaType) null);
    // Undeclared exception!
    try {
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0, ""JSON"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase"", e);
    }
}","/**
 * Helper method called when {@link JsonParser} indicates that it can use
 * so-called native type ids, and such type id has been found.
 *
 * @since 2.4
 */"
"protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId) throws IOException {
    String extraDesc = _idResolver.getDescForKnownTypeIds();
    if (extraDesc == null) {
        extraDesc = ""type ids are not statically known"";
    } else {
        extraDesc = ""known type ids = "" + extraDesc;
    }
    if (_property != null) {
        extraDesc = String.format(""%s (for POJO property '%s')"", extraDesc, _property.getName());
    }
    return ctxt.handleUnknownTypeId(_baseType, typeId, _idResolver, extraDesc);
}","public void test1315() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = TypeFactory.unknownType();
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, typeFactory0);
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, minimalClassNameIdResolver0, ""No (native) type id found when one was expected for polymorphic type handling"", false, javaType0);
    // Undeclared exception!
    try {
        asWrapperTypeDeserializer0._handleUnknownTypeId((DeserializationContext) null, ""No (native) type id found when one was expected for polymorphic type handling"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase"", e);
    }
}","/**
 * Helper method called when given type id cannot be resolved into
 * concrete deserializer either directly (using given {@link  TypeIdResolver}),
 * or using default type.
 * Default implementation simply throws a {@link com.fasterxml.jackson.databind.JsonMappingException} to
 * indicate the problem; sub-classes may choose
 *
 * @return If it is possible to resolve type id into a {@link JsonDeserializer}
 *   should return that deserializer; otherwise throw an exception to indicate
 *   the problem.
 *
 * @since 2.8
 */"
