project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
    objectReader0.getAttributes();
}",0,
project,0,test022,"public void test022() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<NullNode> class0 = NullNode.class;
    ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    MissingNode.getInstance();
    objectReader0._bind((JsonParser) null, objectMapper0);
}",0,
project,0,test033,"public void test033() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    MockFile mockFile0 = new MockFile("" 8 2M|3[M4@{f"");
    mockFile0.createNewFile();
    objectReader0.readValues((File) mockFile0);
}",0,
project,0,test055,"public void test055() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
    objectReader0.without(deserializationFeature0);
    DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
    objectMapper0.reader(deserializationFeature1);
}",0,
project,0,test066,"public void test066() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
    DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
    ObjectReader[] objectReaderArray0 = new ObjectReader[3];
    objectReaderArray0[0] = objectReader0;
    objectReaderArray0[1] = objectReader0;
    objectReaderArray0[2] = objectReader0;
    DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
    dataFormatReaders1.withMaxInputLookahead((-1094));
    byte[] byteArray0 = new byte[4];
    DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0, 1, 0);
    dataFormatReaders_Match0.createParserWithMatch();
    objectReader0.readValues((JsonParser) null);
}",0,
project,0,test088,"public void test088() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
    objectReader0.readValues((String) null);
}",0,
project,0,test099,"public void test099() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
    ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
    URL uRL0 = MockURL.getFtpExample();
    // Undeclared exception!
    try {
        objectReader0.readValues(uRL0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.net.URL"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    MockFile mockFile0 = new MockFile(""No 'injectableValues' configured, can not inject value with id ["");
    mockFile0.createNewFile();
    objectMapper0.reader();
    objectReader0.readValue((File) mockFile0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
    ObjectReader objectReader0 = objectMapper0.reader();
    objectReader0.withType((TypeReference<?>) null);
    String string0 = null;
    objectReader0.readValues(string0);
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
    ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0);
    objectReader1.with((Locale) null);
    objectReader0.with((Locale) null);
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
    tokenFilter1.filterStartArray();
    ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
    objectReader0.getAttributes();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
    BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
    IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, true);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
    DeserializationFeature deserializationFeature1 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
    deserializationFeatureArray0[0] = deserializationFeature1;
    deserializationFeatureArray0[1] = deserializationFeature0;
    deserializationFeatureArray0[2] = deserializationFeature1;
    ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
    TypeFactory typeFactory0 = objectReader1.getTypeFactory();
    Class<ArrayList> class0 = ArrayList.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    CollectionType collectionType1 = collectionType0.withValueHandler(objectNode0);
    objectReader1.withAttribute(collectionType1, tokenFilter0);
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
    deserializationFeatureArray0[0] = deserializationFeature0;
    deserializationFeatureArray0[1] = deserializationFeature0;
    deserializationFeatureArray0[2] = deserializationFeature0;
    deserializationFeatureArray0[3] = deserializationFeature0;
    deserializationFeatureArray0[4] = deserializationFeature0;
    deserializationFeatureArray0[5] = deserializationFeature0;
    deserializationFeatureArray0[6] = deserializationFeature0;
    ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
    objectReader0.with((FormatSchema) null);
    objectReader0.with(deserializationFeature0);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(formatFeature0).getMask();
    objectReader0.with(formatFeature0);
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ObjectReader objectReader0 = objectMapper0.reader();
    ContextAttributes contextAttributes0 = objectReader0.getAttributes();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    DoubleNode doubleNode0 = DoubleNode.valueOf(2);
    IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
    readerBasedJsonParser0.getSchema();
    ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
    objectReader1.with(contextAttributes0);
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    objectReader0.readValues((byte[]) null, 0, 0);
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
    JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
    ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
    ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
    Class<MapType> class0 = MapType.class;
    objectReader0.withView(class0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    objectReader0.with((Locale) null);
    objectReader0.with((Locale) null);
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
    JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
    OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
    JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    objectReader0.with(jsonParser_Feature0);
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
    DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
    ObjectReader[] objectReaderArray0 = new ObjectReader[3];
    objectReaderArray0[0] = objectReader0;
    objectReaderArray0[1] = objectReader0;
    objectReaderArray0[2] = objectReader0;
    DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
    DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMaxInputLookahead((-1094));
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 0;
    byteArray0[1] = (byte) (-75);
    byteArray0[2] = (byte) (-86);
    byteArray0[3] = (byte) (-1);
    dataFormatReaders2.findFormat(byteArray0, 0, 0);
    ObjectReader objectReader1 = objectReader0.forType((JavaType) null);
    BooleanNode booleanNode0 = BooleanNode.valueOf(false);
    objectReader1.withoutAttribute(booleanNode0);
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ObjectReader objectReader0 = objectMapper0.reader();
    Class<BooleanNode> class0 = BooleanNode.class;
    objectReader0.withType(class0);
    objectReader0.readValue(""?Y21r)y/2"");
    String string0 = null;
    objectReader0.readValues(string0);
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    ObjectReader objectReader0 = objectMapper1.reader();
    TypeFactory.defaultInstance();
    Class<DeserializationConfig> class0 = DeserializationConfig.class;
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
    ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
    ObjectNode objectNode1 = objectNode0.deepCopy();
    ObjectNode objectNode2 = objectNode1.put((String) null, false);
    ObjectNode objectNode3 = objectNode2.removeAll();
    objectNode3.get((String) null);
    objectReader0.treeToValue((TreeNode) null, class0);
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ObjectReader objectReader0 = objectMapper0.reader();
    objectReader0.getAttributes();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    DoubleNode doubleNode0 = DoubleNode.valueOf(2);
    IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
    readerBasedJsonParser0.getSchema();
    ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
    objectReader1.readValues((JsonParser) readerBasedJsonParser0, (JavaType) null);
    objectReader0.withoutRootName();
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
    objectMapper1.configure(serializationFeature0, true);
    ObjectReader objectReader0 = objectMapper1.reader((JsonNodeFactory) null);
    objectReader0.createObjectNode();
    objectReader0.getInjectableValues();
}",0,
project,0,test3131,"public void test3131() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
    deserializationFeatureArray0[0] = deserializationFeature0;
    DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
    deserializationFeatureArray0[1] = deserializationFeature1;
    deserializationFeatureArray0[2] = deserializationFeature0;
    objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator(""JSON"");
    MockFile mockFile0 = new MockFile((String) null, ""JSON"");
    File file0 = MockFile.createTempFile(""JSON"", ""JSON"", (File) mockFile0);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
    jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0);
    jsonFactory1.createParser((char[]) null, 0, 0);
    ObjectReader objectReader1 = objectReader0.with((Locale) null);
    objectReader0.createArrayNode();
    objectReader1.at((JsonPointer) null);
}",0,
project,0,test3333,"public void test3333() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
    DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
    objectMapper0.addHandler(deserializationProblemHandler0);
    ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
    DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
    deserializationFeatureArray0[0] = deserializationFeature0;
    deserializationFeatureArray0[1] = deserializationFeature0;
    deserializationFeatureArray0[2] = deserializationFeature0;
    objectReader0.with(deserializationFeature1, deserializationFeatureArray0);
    URL uRL0 = MockURL.getFtpExample();
    // Undeclared exception!
    try {
        objectReader0.readValues(uRL0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.net.URL"", e);
    }
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
    tokenFilter1.filterStartArray();
    ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
    DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayList0);
    DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with((ObjectReader[]) null);
    MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
    DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withOptimalMatch(matchStrength0);
    dataFormatReaders1.withMaxInputLookahead(2950);
    byte[] byteArray0 = new byte[0];
    DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, 1, (-237));
    dataFormatReaders_Match0.createParserWithMatch();
    objectReader0.readValues((JsonParser) null);
    JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
    ObjectReader objectReader1 = objectReader0.withFeatures(jsonParser_FeatureArray0);
    char[] charArray0 = new char[5];
    charArray0[0] = '-';
    charArray0[1] = 'm';
    charArray0[2] = 'j';
    charArray0[3] = '0';
    charArray0[4] = 'E';
    JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 64);
    TypeReference<DoubleNode> typeReference0 = (TypeReference<DoubleNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    objectReader0.readValue(jsonParser0, (TypeReference<?>) typeReference0);
    LongNode longNode0 = LongNode.valueOf(dataFormatReaders2.DEFAULT_MAX_INPUT_LOOKAHEAD);
    boolean boolean0 = false;
    boolean boolean1 = false;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, boolean0, boolean1);
    objectReader1.withAttribute(longNode0, filteringParserDelegate0);
}",0,
project,0,test3636,"public void test3636() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
    tokenFilter1.filterStartArray();
    ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
    objectReader0.getAttributes();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
    BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
    IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, true);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2243);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2243, pipedReader0, objectReader0, charsToNameCanonicalizer0);
    readerBasedJsonParser0.getSchema();
    objectReader0.withValueToUpdate(bufferRecycler0);
}",0,
project,0,test3737,"public void test3737() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ObjectReader objectReader0 = objectMapper0.reader();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""Called operation not supported for TokenBuffer"");
    DoubleNode doubleNode0 = DoubleNode.valueOf(2);
    IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
    readerBasedJsonParser0.getSchema();
    ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
    MockFile mockFile0 = new MockFile(""Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array"");
    objectReader1.withValueToUpdate(doubleNode0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
    objectReader0.without(deserializationFeature0, (DeserializationFeature[]) null);
}",0,
project,0,test3838,"public void test3838() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
    ObjectReader objectReader0 = objectMapper0.reader();
    byte[] byteArray0 = new byte[0];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 54, (-769));
    objectReader0.readTree((InputStream) byteArrayInputStream0);
}",0,
project,0,test3939,"public void test3939() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    ObjectReader objectReader0 = objectMapper0.reader();
    objectReader0.getAttributes();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    DoubleNode.valueOf(2);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
    CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[0];
    DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
    objectReader0.isEnabled(deserializationFeature0);
}",0,
project,0,test4040,"public void test4040() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    FormatFeature[] formatFeatureArray0 = new FormatFeature[6];
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
    formatFeatureArray0[0] = formatFeature0;
    formatFeatureArray0[1] = formatFeature0;
    formatFeatureArray0[2] = formatFeature0;
    formatFeatureArray0[3] = formatFeature0;
    formatFeatureArray0[4] = formatFeature0;
    formatFeatureArray0[5] = formatFeature0;
    objectReader0.withFeatures(formatFeatureArray0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
    ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0);
    objectReader1.with((Locale) null);
    objectReader1.with((Locale) null);
}",0,
project,0,test4141,"public void test4141() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ObjectReader objectReader0 = objectMapper0.reader();
    objectReader0.getAttributes();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    DoubleNode doubleNode0 = DoubleNode.valueOf(2);
    IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
    readerBasedJsonParser0.getSchema();
    ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[6];
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
    formatFeatureArray0[0] = formatFeature0;
    formatFeatureArray0[1] = formatFeature0;
    formatFeatureArray0[2] = formatFeature0;
    formatFeatureArray0[3] = formatFeature0;
    formatFeatureArray0[4] = formatFeature0;
    formatFeatureArray0[5] = formatFeature0;
    objectReader1.withFeatures(formatFeatureArray0);
    TimeZone timeZone0 = TimeZone.getTimeZone(""i8)5_Ub%N^0o;,Xki`"");
    objectReader1.with(timeZone0);
}",0,
project,0,test4242,"public void test4242() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
    deserializationFeatureArray0[1] = deserializationFeature0;
    deserializationFeatureArray0[2] = deserializationFeature0;
    objectMapper0.reader();
    objectMapper0.reader();
    MockFile mockFile0 = new MockFile("" 8 2M|3[M4@{f"");
    mockFile0.createNewFile();
    ObjectReader objectReader0 = objectMapper0.reader();
    FormatFeature[] formatFeatureArray0 = new FormatFeature[6];
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
    formatFeatureArray0[0] = formatFeature0;
    formatFeatureArray0[1] = formatFeature0;
    formatFeatureArray0[2] = formatFeature0;
    formatFeatureArray0[3] = formatFeature0;
    formatFeatureArray0[4] = formatFeature0;
    formatFeatureArray0[5] = formatFeature0;
    objectReader0.withoutFeatures(formatFeatureArray0);
    objectReader0.readValues((File) mockFile0);
}",0,
project,0,test4343,"public void test4343() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[10];
    deserializationFeatureArray0[0] = deserializationFeature0;
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonNode jsonNode0 = objectReader0.createArrayNode();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
    jsonFactory0.disable(jsonParser_Feature0);
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, true);
    JsonParser jsonParser2 = objectMapper0.treeAsTokens(jsonNode0);
    objectReader0._bindAsTree(jsonParser2);
    Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
    ObjectReader objectReader1 = objectReader0.forType(class0);
    objectReader0.withValueToUpdate(jsonParser0);
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    objectReader0.getAttributes();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    DoubleNode.valueOf((-1105.0));
    IOContext iOContext0 = new IOContext(bufferRecycler0, jsonParser2, true);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
    CharsToNameCanonicalizer.createRoot();
    jsonParser1.getSchema();
    ObjectReader objectReader2 = objectReader1.with((FormatSchema) null);
    objectReader2.readValue(jsonParser2);
}",0,
project,0,test4444,"public void test4444() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MockFile mockFile0 = new MockFile(""No 'injectableValues' configured, can not inject value with id ["");
    FileSystemHandling.shouldAllThrowIOExceptions();
    ObjectReader objectReader0 = objectMapper0.reader();
    objectReader0.readValue((File) mockFile0);
}",0,
project,0,test4545,"public void test4545() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
    deserializationFeatureArray0[1] = deserializationFeature0;
    deserializationFeatureArray0[2] = deserializationFeature0;
    ObjectReader objectReader0 = objectMapper0.reader();
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationFeature0, true);
    PipedReader pipedReader0 = new PipedReader();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectReader0, charsToNameCanonicalizer0);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) (-92);
    byteArray0[1] = (byte) 90;
    byteArray0[2] = (byte) 23;
    byteArray0[3] = (byte) 59;
    byteArray0[4] = (byte) 1;
    byteArray0[5] = (byte) 1;
    byteArray0[6] = (byte) 74;
    byteArray0[7] = (byte) (-64);
    FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
    readerBasedJsonParser0.getSchema();
    ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
    MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
    objectReader1.withoutAttribute(mapperFeature0);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
    objectReader1.isEnabled(jsonParser_Feature0);
}",0,
project,0,test4747,"public void test4747() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
    deserializationFeatureArray0[1] = deserializationFeature0;
    JsonParser jsonParser0 = null;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    objectReader0.readValues((byte[]) null);
    JsonParser jsonParser1 = null;
    // Undeclared exception!
    try {
        objectReader0._bind(jsonParser0, jsonParser1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectReader"", e);
    }
}",0,
project,0,test4848,"public void test4848() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ObjectReader objectReader0 = objectMapper0.reader();
    objectReader0.getAttributes();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    DoubleNode doubleNode0 = DoubleNode.valueOf(2);
    IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""l#"");
    readerBasedJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    readerBasedJsonParser0.getSchema();
    objectReader0.with((FormatSchema) null);
    objectReader0.getInjectableValues();
}",0,
project,0,test5050,"public void test5050() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
    LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
    DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
    ObjectReader[] objectReaderArray0 = new ObjectReader[4];
    objectReaderArray0[0] = objectReader0;
    objectReaderArray0[1] = objectReader0;
    objectReaderArray0[2] = objectReader0;
    objectReaderArray0[3] = objectReader0;
    DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
    DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMaxInputLookahead(64);
    objectReader0.withFormatDetection(dataFormatReaders2);
}",0,
project,0,test5252,"public void test5252() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ObjectReader objectReader0 = objectMapper0.reader();
    objectReader0.getAttributes();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    DoubleNode doubleNode0 = DoubleNode.valueOf(2);
    IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
    readerBasedJsonParser0.getSchema();
    ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
    objectReader1._verifySchemaType((FormatSchema) null);
    objectReader0.with((JsonFactory) null);
}",0,
project,0,test5353,"public void test5353() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    tokenFilter0.includeElement(42);
    TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
    tokenFilter1.filterStartArray();
    ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
    objectReader0.getAttributes();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
    BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
    IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, true);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2243);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2243, pipedReader0, objectReader0, charsToNameCanonicalizer0);
    readerBasedJsonParser0.getSchema();
    objectReader0.withValueToUpdate(bufferRecycler0);
    objectReader0.withAttributes((Map<?, ?>) null);
}",0,
project,0,test5454,"public void test5454() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ObjectReader objectReader0 = objectMapper0.reader();
    objectReader0.getAttributes();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    DoubleNode.valueOf(2);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
    CharsToNameCanonicalizer.createRoot();
    objectReader0.withType((JavaType) null);
    objectReader0.getConfig();
    IntNode intNode0 = IntNode.valueOf(156);
    JsonParser jsonParser0 = objectReader0.treeAsTokens(intNode0);
    objectReader0._bindAndClose(jsonParser0);
    URL uRL0 = MockURL.getFileExample();
    objectReader0.readValues(uRL0);
}",0,
project,0,test5555,"public void test5555() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    Stack<ObjectReader> stack0 = new Stack<ObjectReader>();
    DataFormatReaders dataFormatReaders0 = new DataFormatReaders(stack0);
    byte[] byteArray0 = null;
    FileSystemHandling.appendStringToFile((EvoSuiteFile) null, """");
    ObjectReader objectReader1 = objectReader0.withoutRootName();
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
    deserializationFeatureArray0[0] = deserializationFeature0;
    DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
    deserializationFeatureArray0[1] = deserializationFeature1;
    DeserializationFeature deserializationFeature2 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
    deserializationFeatureArray0[2] = deserializationFeature2;
    JsonFactory jsonFactory0 = new JsonFactory();
    char[] charArray0 = new char[2];
    charArray0[0] = 'i';
    charArray0[1] = 'L';
    JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 343, 64);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
    filteringParserDelegate0.getSchema();
    ObjectReader objectReader2 = objectReader1.with((FormatSchema) null);
    objectReader1._verifySchemaType((FormatSchema) null);
    ObjectReader objectReader3 = objectReader2.with(jsonFactory0);
    objectReader3.at(""vl ;`A6wN-oG"");
    int int0 = (-2725);
    objectReader2.readValues(byteArray0, int0, dataFormatReaders0.DEFAULT_MAX_INPUT_LOOKAHEAD);
}",0,
project,0,test5656,"public void test5656() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
    InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue(""com.fasterxml.jackson.databind.SerializerProvider"", (Object) objectMapper0);
    ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    NamedType[] namedTypeArray0 = new NamedType[2];
    Class<CollectionType> class0 = CollectionType.class;
    NamedType namedType0 = new NamedType(class0);
    namedTypeArray0[0] = namedType0;
    NamedType namedType1 = new NamedType(class0, ""Illegal character ("");
    namedTypeArray0[1] = namedType1;
    stdSubtypeResolver0.registerSubtypes(namedTypeArray0);
    jsonLocationInstantiator0.getDelegateType(deserializationConfig0);
    JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
    BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, jsonLocationInstantiator0, true);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[1];
    charArray0[0] = 'f';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-1790), 1126, true);
    readerBasedJsonParser0.getSchema();
    ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
    objectReader0._verifySchemaType((FormatSchema) null);
    ObjectReader objectReader2 = objectReader1.with(jsonFactory0);
    objectReader2.readValues(""]YxQ4,6^k=j5("");
}",0,
project,0,test5757,"public void test5757() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
    tokenFilter1.filterStartArray();
    ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
    objectReader0.getAttributes();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
    BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
    IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, true);
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3);
    iOContext0.allocReadIOBuffer();
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
    readerBasedJsonParser0.getSchema();
    objectReader0.withValueToUpdate(bufferRecycler0);
    URL uRL0 = MockURL.getFileExample();
    objectReader0.readValue(uRL0);
}",0,
project,0,test5858,"public void test5858() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
    deserializationFeatureArray0[0] = deserializationFeature0;
    DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
    deserializationFeatureArray0[1] = deserializationFeature1;
    deserializationFeatureArray0[2] = deserializationFeature0;
    ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator(""JSON"");
    MockFile mockFile0 = new MockFile((String) null, ""JSON"");
    mockFile0.setWritable(true, true);
    File file0 = MockFile.createTempFile(""JSON"", ""JSON"", (File) mockFile0);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
    jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0);
    jsonFactory1.createParser((char[]) null, 0, 0);
    ObjectReader objectReader2 = objectReader0.with((Locale) null);
    objectReader0.createArrayNode();
    objectReader2.at((JsonPointer) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    ObjectReader objectReader3 = new ObjectReader(objectReader1, tokenFilter0);
    URL uRL0 = MockURL.getFileExample();
    InputStream inputStream0 = objectReader3._inputStream(uRL0);
    objectReader0.readValues(inputStream0);
}",0,
project,0,test5959,"public void test5959() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
    ObjectReader objectReader0 = objectMapper0.reader();
    objectReader0.without((FormatFeature) null);
    String string0 = null;
    objectReader0.readValues(string0);
}",0,
