focal_method,test_prefix,docstring
"public boolean writeAsId(JsonGenerator gen, SerializerProvider provider, ObjectIdWriter w) throws IOException {
    if ((id != null) && (idWritten || w.alwaysAsId)) {
        // 03-Aug-2013, tatu: Prefer Native Object Ids if available
        if (gen.canWriteObjectId()) {
            gen.writeObjectRef(String.valueOf(id));
        } else {
            w.serializer.serialize(id, gen, provider);
        }
        return true;
    }
    return false;
}","public void test00() throws Throwable {
    ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
    WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
    JsonFactory jsonFactory0 = new JsonFactory();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
    boolean boolean0 = writableObjectId0.writeAsId(jsonGenerator0, defaultSerializerProvider_Impl0, (ObjectIdWriter) null);
    assertFalse(boolean0);
}",""
"public boolean writeAsId(JsonGenerator gen, SerializerProvider provider, ObjectIdWriter w) throws IOException {
    if ((id != null) && (idWritten || w.alwaysAsId)) {
        // 03-Aug-2013, tatu: Prefer Native Object Ids if available
        if (gen.canWriteObjectId()) {
            gen.writeObjectRef(String.valueOf(id));
        } else {
            w.serializer.serialize(id, gen, provider);
        }
        return true;
    }
    return false;
}","public void test11() throws Throwable {
    ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
    WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
    writableObjectId0.idWritten = true;
    writableObjectId0.generateId(objectIdGenerators_IntSequenceGenerator0);
    JsonFactory jsonFactory0 = new JsonFactory();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
    // Undeclared exception!
    try {
        writableObjectId0.writeAsId(jsonGenerator0, defaultSerializerProvider_Impl0, (ObjectIdWriter) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.impl.WritableObjectId"", e);
    }
}",""
"public Object generateId(Object forPojo) {
    // 04-Jun-2016, tatu: As per [databind#1255], need to consider possibility of
    //    id being generated for ""alwaysAsId"", but not being written as POJO; regardless,
    //    need to use existing id if there is one:
    id = generator.generateId(forPojo);
    return id;
}","public void test22() throws Throwable {
    ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
    WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JavaType javaType0 = TypeFactory.unknownType();
    Object object0 = writableObjectId0.generateId(javaType0);
    assertNotNull(object0);
}",""
"public boolean writeAsId(JsonGenerator gen, SerializerProvider provider, ObjectIdWriter w) throws IOException {
    if ((id != null) && (idWritten || w.alwaysAsId)) {
        // 03-Aug-2013, tatu: Prefer Native Object Ids if available
        if (gen.canWriteObjectId()) {
            gen.writeObjectRef(String.valueOf(id));
        } else {
            w.serializer.serialize(id, gen, provider);
        }
        return true;
    }
    return false;
}","public void test23() throws Throwable {
    ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
    WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JavaType javaType0 = TypeFactory.unknownType();
    Object object0 = writableObjectId0.generateId(javaType0);
    ObjectIdWriter objectIdWriter0 = new ObjectIdWriter(javaType0, (SerializableString) null, objectIdGenerators_IntSequenceGenerator0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, false);
    boolean boolean0 = writableObjectId0.writeAsId((JsonGenerator) null, defaultSerializerProvider_Impl0, objectIdWriter0);
    assertFalse(boolean0);
}",""
"public boolean writeAsId(JsonGenerator gen, SerializerProvider provider, ObjectIdWriter w) throws IOException {
    if ((id != null) && (idWritten || w.alwaysAsId)) {
        // 03-Aug-2013, tatu: Prefer Native Object Ids if available
        if (gen.canWriteObjectId()) {
            gen.writeObjectRef(String.valueOf(id));
        } else {
            w.serializer.serialize(id, gen, provider);
        }
        return true;
    }
    return false;
}","public void test34() throws Throwable {
    ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
    WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JavaType javaType0 = TypeFactory.unknownType();
    writableObjectId0.generateId(javaType0);
    ObjectIdWriter objectIdWriter0 = new ObjectIdWriter(javaType0, (SerializableString) null, objectIdGenerators_IntSequenceGenerator0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, true);
    // Undeclared exception!
    try {
        writableObjectId0.writeAsId((JsonGenerator) null, defaultSerializerProvider_Impl0, objectIdWriter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.impl.WritableObjectId"", e);
    }
}",""
"public void writeAsField(JsonGenerator gen, SerializerProvider provider, ObjectIdWriter w) throws IOException {
    idWritten = true;
    // 03-Aug-2013, tatu: Prefer Native Object Ids if available
    if (gen.canWriteObjectId()) {
        // Need to assume String(ified) ids, for now... could add 'long' variant?
        gen.writeObjectId(String.valueOf(id));
        return;
    }
    SerializableString name = w.propertyName;
    if (name != null) {
        gen.writeFieldName(name);
        w.serializer.serialize(id, gen, provider);
    }
}","public void test56() throws Throwable {
    ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
    WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
    JsonFactory jsonFactory0 = new JsonFactory();
    SerializedString serializedString0 = new SerializedString(""JSON"");
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JavaType javaType0 = TypeFactory.unknownType();
    ObjectIdWriter objectIdWriter0 = new ObjectIdWriter(javaType0, serializedString0, objectIdGenerators_IntSequenceGenerator0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, true);
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
    try {
        writableObjectId0.writeAsField(jsonGenerator0, defaultSerializerProvider_Impl0, objectIdWriter0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.impl.FailingSerializer"", e);
    }
}","/**
 * Method called to output Object Id as specified.
 */"
