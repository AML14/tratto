focal_method,test_prefix,docstring
"/*
    /**********************************************************
    /* Extended API
    /**********************************************************
     */
/**
 * Method that can be used to access the POJO this node wraps.
 */
public Object getPojo() {
    return _value;
}","public void test022() throws Throwable {
    Float float0 = Float.valueOf(0.0F);
    JSONPObject jSONPObject0 = new JSONPObject("""", float0);
    POJONode pOJONode0 = new POJONode(jSONPObject0);
    Object object0 = pOJONode0.getPojo();
    assertSame(object0, jSONPObject0);
}",""
"@Override
public int hashCode() {
    return _value.hashCode();
}","public void test033() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    POJONode pOJONode0 = new POJONode(binaryNode0);
    pOJONode0.hashCode();
}",""
"public final boolean isNumber() {
    return getNodeType() == JsonNodeType.NUMBER;
}","public void test044() throws Throwable {
    POJONode pOJONode0 = new POJONode((Object) null);
    boolean boolean0 = pOJONode0.isNumber();
    assertFalse(boolean0);
}","/**
 * @return True if this node represents a numeric JSON value
 */"
"@Override
public byte[] binaryValue() throws IOException {
    if (_value instanceof byte[]) {
        return (byte[]) _value;
    }
    return super.binaryValue();
}","public void test055() throws Throwable {
    Object object0 = new Object();
    POJONode pOJONode0 = new POJONode(object0);
    byte[] byteArray0 = pOJONode0.binaryValue();
    assertNull(byteArray0);
}","/**
 * As it is possible that some implementations embed byte[] as POJONode
 * (despite optimal being {@link BinaryNode}), let's add support for exposing
 * binary data here too.
 */"
"/* 
    /**********************************************************
    /* General type coercions
    /**********************************************************
     */
@Override
public String asText() {
    return (_value == null) ? ""null"" : _value.toString();
}","public void test066() throws Throwable {
    Object object0 = new Object();
    POJONode pOJONode0 = new POJONode(object0);
    String string0 = pOJONode0.asText();
    assertNotNull(string0);
}",""
"/* 
    /**********************************************************
    /* General type coercions
    /**********************************************************
     */
@Override
public String asText() {
    return (_value == null) ? ""null"" : _value.toString();
}","public void test077() throws Throwable {
    POJONode pOJONode0 = new POJONode((Object) null);
    String string0 = pOJONode0.asText();
    assertEquals(""null"", string0);
}",""
"@Override
public String asText(String defaultValue) {
    return (_value == null) ? defaultValue : _value.toString();
}","public void test088() throws Throwable {
    POJONode pOJONode0 = new POJONode(""cY}gW =T|?7rvyeH"");
    String string0 = pOJONode0.asText(""cY}gW =T|?7rvyeH"");
    assertNotNull(string0);
}",""
"@Override
public String asText(String defaultValue) {
    return (_value == null) ? defaultValue : _value.toString();
}","public void test099() throws Throwable {
    POJONode pOJONode0 = new POJONode((Object) null);
    String string0 = pOJONode0.asText((String) null);
    assertNull(string0);
}",""
"public boolean asBoolean() {
    return asBoolean(false);
}","public void test1010() throws Throwable {
    POJONode pOJONode0 = new POJONode((Object) null);
    boolean boolean0 = pOJONode0.asBoolean();
    assertFalse(boolean0);
}","/**
 *  Method that will try to convert value of this node to a Java <b>boolean</b>.
 *  JSON booleans map naturally; integer numbers other than 0 map to true, and
 *  0 maps to false
 *  and Strings 'true' and 'false' map to corresponding values.
 * <p>
 *  If representation cannot be converted to a boolean value (including structured types
 *  like Objects and Arrays),
 *  default value of <b>false</b> will be returned; no exceptions are thrown.
 */"
"public boolean asBoolean() {
    return asBoolean(false);
}","public void test1111() throws Throwable {
    Boolean boolean0 = Boolean.TRUE;
    POJONode pOJONode0 = new POJONode(boolean0);
    boolean boolean1 = pOJONode0.asBoolean();
    assertTrue(boolean1);
}","/**
 *  Method that will try to convert value of this node to a Java <b>boolean</b>.
 *  JSON booleans map naturally; integer numbers other than 0 map to true, and
 *  0 maps to false
 *  and Strings 'true' and 'false' map to corresponding values.
 * <p>
 *  If representation cannot be converted to a boolean value (including structured types
 *  like Objects and Arrays),
 *  default value of <b>false</b> will be returned; no exceptions are thrown.
 */"
"@Override
public boolean asBoolean(boolean defaultValue) {
    if (_value != null && _value instanceof Boolean) {
        return ((Boolean) _value).booleanValue();
    }
    return defaultValue;
}","public void test1212() throws Throwable {
    Object object0 = new Object();
    POJONode pOJONode0 = new POJONode(object0);
    boolean boolean0 = pOJONode0.asBoolean(false);
    assertFalse(boolean0);
}",""
"public int asInt() {
    return asInt(0);
}","public void test1313() throws Throwable {
    Object object0 = new Object();
    POJONode pOJONode0 = new POJONode(object0);
    int int0 = pOJONode0.asInt();
    assertEquals(0, int0);
}","/**
 *  Method that will try to convert value of this node to a Java <b>int</b>.
 *  Numbers are coerced using default Java rules; booleans convert to 0 (false)
 *  and 1 (true), and Strings are parsed using default Java language integer
 *  parsing rules.
 * <p>
 *  If representation cannot be converted to an int (including structured types
 *  like Objects and Arrays),
 *  default value of <b>0</b> will be returned; no exceptions are thrown.
 */"
"@Override
public int asInt(int defaultValue) {
    if (_value instanceof Number) {
        return ((Number) _value).intValue();
    }
    return defaultValue;
}","public void test1414() throws Throwable {
    Byte byte0 = new Byte((byte) 103);
    POJONode pOJONode0 = new POJONode(byte0);
    int int0 = pOJONode0.asInt((int) (byte) 103);
    assertEquals(103, int0);
}",""
"public long asLong() {
    return asLong(0L);
}","public void test1515() throws Throwable {
    Object object0 = new Object();
    POJONode pOJONode0 = new POJONode(object0);
    long long0 = pOJONode0.asLong();
    assertEquals(0L, long0);
}","/**
 *  Method that will try to convert value of this node to a Java <b>long</b>.
 *  Numbers are coerced using default Java rules; booleans convert to 0 (false)
 *  and 1 (true), and Strings are parsed using default Java language integer
 *  parsing rules.
 * <p>
 *  If representation cannot be converted to an long (including structured types
 *  like Objects and Arrays),
 *  default value of <b>0</b> will be returned; no exceptions are thrown.
 */"
"public long asLong() {
    return asLong(0L);
}","public void test1616() throws Throwable {
    Long long0 = new Long((-9223372036854775808L));
    POJONode pOJONode0 = new POJONode(long0);
    long long1 = pOJONode0.asLong();
    assertEquals((-9223372036854775808L), long1);
}","/**
 *  Method that will try to convert value of this node to a Java <b>long</b>.
 *  Numbers are coerced using default Java rules; booleans convert to 0 (false)
 *  and 1 (true), and Strings are parsed using default Java language integer
 *  parsing rules.
 * <p>
 *  If representation cannot be converted to an long (including structured types
 *  like Objects and Arrays),
 *  default value of <b>0</b> will be returned; no exceptions are thrown.
 */"
"public double asDouble() {
    return asDouble(0.0);
}","public void test1717() throws Throwable {
    Object object0 = new Object();
    POJONode pOJONode0 = new POJONode(object0);
    double double0 = pOJONode0.asDouble();
    assertEquals(0.0, double0, 0.01);
}","/**
 *  Method that will try to convert value of this node to a Java <b>double</b>.
 *  Numbers are coerced using default Java rules; booleans convert to 0.0 (false)
 *  and 1.0 (true), and Strings are parsed using default Java language integer
 *  parsing rules.
 * <p>
 *  If representation cannot be converted to an int (including structured types
 *  like Objects and Arrays),
 *  default value of <b>0.0</b> will be returned; no exceptions are thrown.
 */"
"public double asDouble() {
    return asDouble(0.0);
}","public void test1818() throws Throwable {
    Integer integer0 = new Integer((-2549));
    POJONode pOJONode0 = new POJONode(integer0);
    double double0 = pOJONode0.asDouble();
    assertEquals((-2549.0), double0, 0.01);
}","/**
 *  Method that will try to convert value of this node to a Java <b>double</b>.
 *  Numbers are coerced using default Java rules; booleans convert to 0.0 (false)
 *  and 1.0 (true), and Strings are parsed using default Java language integer
 *  parsing rules.
 * <p>
 *  If representation cannot be converted to an int (including structured types
 *  like Objects and Arrays),
 *  default value of <b>0.0</b> will be returned; no exceptions are thrown.
 */"
"/*
    /**********************************************************
    /* Public API, serialization
    /**********************************************************
     */
@Override
public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException {
    if (_value == null) {
        ctxt.defaultSerializeNull(gen);
    } else if (_value instanceof JsonSerializable) {
        ((JsonSerializable) _value).serialize(gen, ctxt);
    } else {
        // 25-May-2018, tatu: [databind#1991] do not call via generator but through context;
        //    this to preserve contextual information
        gen.writeObject(_value);
    }
}","public void test1919() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    POJONode pOJONode0 = new POJONode(pipedInputStream0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        pOJONode0.serialize((JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.node.POJONode"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, serialization
    /**********************************************************
     */
@Override
public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException {
    if (_value == null) {
        ctxt.defaultSerializeNull(gen);
    } else if (_value instanceof JsonSerializable) {
        ((JsonSerializable) _value).serialize(gen, ctxt);
    } else {
        // 25-May-2018, tatu: [databind#1991] do not call via generator but through context;
        //    this to preserve contextual information
        gen.writeObject(_value);
    }
}","public void test2020() throws Throwable {
    POJONode pOJONode0 = new POJONode((Object) null);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        pOJONode0.serialize((JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, serialization
    /**********************************************************
     */
@Override
public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException {
    if (_value == null) {
        ctxt.defaultSerializeNull(gen);
    } else if (_value instanceof JsonSerializable) {
        ((JsonSerializable) _value).serialize(gen, ctxt);
    } else {
        // 25-May-2018, tatu: [databind#1991] do not call via generator but through context;
        //    this to preserve contextual information
        gen.writeObject(_value);
    }
}","public void test2121() throws Throwable {
    BooleanNode booleanNode0 = BooleanNode.FALSE;
    POJONode pOJONode0 = new POJONode(booleanNode0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        pOJONode0.serialize((JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.node.BooleanNode"", e);
    }
}",""
"/*
    /**********************************************************
    /* Overridden standard methods
    /**********************************************************
     */
@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o instanceof POJONode) {
        return _pojoEquals((POJONode) o);
    }
    return false;
}","public void test2222() throws Throwable {
    POJONode pOJONode0 = new POJONode((Object) null);
    boolean boolean0 = pOJONode0.equals((Object) null);
    assertFalse(boolean0);
}",""
"/*
    /**********************************************************
    /* Overridden standard methods
    /**********************************************************
     */
@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o instanceof POJONode) {
        return _pojoEquals((POJONode) o);
    }
    return false;
}","public void test2323() throws Throwable {
    Object object0 = new Object();
    POJONode pOJONode0 = new POJONode(object0);
    boolean boolean0 = pOJONode0.equals((Object) pOJONode0);
    assertTrue(boolean0);
}",""
"protected boolean _pojoEquals(POJONode other) {
    if (_value == null) {
        return other._value == null;
    }
    return _value.equals(other._value);
}","public void test2424() throws Throwable {
    MissingNode missingNode0 = MissingNode.getInstance();
    POJONode pOJONode0 = new POJONode(missingNode0);
    POJONode pOJONode1 = new POJONode(pOJONode0);
    boolean boolean0 = pOJONode1._pojoEquals(pOJONode0);
    assertFalse(boolean0);
}","/**
 * @since 2.3
 */"
"/*
    /**********************************************************
    /* Overridden standard methods
    /**********************************************************
     */
@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o instanceof POJONode) {
        return _pojoEquals((POJONode) o);
    }
    return false;
}","public void test2525() throws Throwable {
    Object object0 = new Object();
    POJONode pOJONode0 = new POJONode(object0);
    POJONode pOJONode1 = new POJONode(pOJONode0);
    boolean boolean0 = pOJONode0.equals((Object) pOJONode1);
    assertFalse(boolean0);
}",""
"protected boolean _pojoEquals(POJONode other) {
    if (_value == null) {
        return other._value == null;
    }
    return _value.equals(other._value);
}","public void test2626() throws Throwable {
    POJONode pOJONode0 = new POJONode((Object) null);
    boolean boolean0 = pOJONode0._pojoEquals(pOJONode0);
    assertTrue(boolean0);
}","/**
 * @since 2.3
 */"
"protected boolean _pojoEquals(POJONode other) {
    if (_value == null) {
        return other._value == null;
    }
    return _value.equals(other._value);
}","public void test2727() throws Throwable {
    POJONode pOJONode0 = new POJONode((Object) null);
    POJONode pOJONode1 = new POJONode(pOJONode0);
    boolean boolean0 = pOJONode0._pojoEquals(pOJONode1);
    assertFalse(boolean0);
}","/**
 * @since 2.3
 */"
