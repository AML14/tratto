project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getDefault();
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test011,"public void test011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
    // Undeclared exception!
    try {
        stdKeySerializers_Dynamic0.serialize(objectMapper_DefaultTyping0, (JsonGenerator) null, serializerProvider0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
    StdKeySerializers.Dynamic stdKeySerializers_Dynamic1 = (StdKeySerializers.Dynamic) stdKeySerializers_Dynamic0.readResolve();
    assertFalse(stdKeySerializers_Dynamic1.usesObjectId());
}",0,assertFalse(stdKeySerializers_Dynamic1.usesObjectId())
project,0,test033,"public void test033() throws Throwable {
    StdKeySerializers.StringKeySerializer stdKeySerializers_StringKeySerializer0 = new StdKeySerializers.StringKeySerializer();
    assertFalse(stdKeySerializers_StringKeySerializer0.isUnwrappingSerializer());
}",0,assertFalse(stdKeySerializers_StringKeySerializer0.isUnwrappingSerializer())
project,0,test044,"public void test044() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    // Undeclared exception!
    try {
        stdKeySerializers_Dynamic0.serialize(""artifactId"", (JsonGenerator) null, serializerProvider0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdKeySerializers$StringKeySerializer"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, (Class<?>) null, true);
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test066,"public void test066() throws Throwable {
    Class<Object> class0 = Object.class;
    JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, false);
    assertFalse(jsonSerializer0.isUnwrappingSerializer());
}",0,
project,0,test077,"public void test077() throws Throwable {
    Class<Integer> class0 = Integer.TYPE;
    JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, true);
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test088,"public void test088() throws Throwable {
    Class<Long> class0 = Long.class;
    JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, false);
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test099,"public void test099() throws Throwable {
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    ObjectMapper objectMapper0 = new ObjectMapper();
    StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    // Undeclared exception!
    try {
        stdKeySerializers_Dynamic0.serialize(class0, (JsonGenerator) null, serializerProvider0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    UUID uUID0 = MockUUID.randomUUID();
    // Undeclared exception!
    try {
        stdKeySerializers_Dynamic0.serialize(uUID0, (JsonGenerator) null, serializerProvider0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    Class<Module> class0 = Module.class;
    JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, true);
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test1414,"public void test1414() throws Throwable {
    JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getFallbackKeySerializer((SerializationConfig) null, (Class<?>) null);
    assertFalse(jsonSerializer0.isUnwrappingSerializer());
}",0,assertTrue(jsonSerializer0.isUnwrappingSerializer())
project,0,test1515,"public void test1515() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    // Undeclared exception!
    try {
        stdKeySerializers_Dynamic0.serialize(serializerProvider0, (JsonGenerator) null, serializerProvider0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdKeySerializer"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
    Class<Date> class0 = Date.class;
    StdKeySerializers.Default stdKeySerializers_Default0 = new StdKeySerializers.Default((-20), class0);
    // Undeclared exception!
    try {
        stdKeySerializers_Default0.serialize(objectMapper_DefaultTyping0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    serializerProvider0.setDefaultKeySerializer(stdKeySerializers_Dynamic0);
    // Undeclared exception!
    try {
        stdKeySerializers_Dynamic0.serialize(serializerProvider0, (JsonGenerator) null, serializerProvider0);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
    }
}",0,
