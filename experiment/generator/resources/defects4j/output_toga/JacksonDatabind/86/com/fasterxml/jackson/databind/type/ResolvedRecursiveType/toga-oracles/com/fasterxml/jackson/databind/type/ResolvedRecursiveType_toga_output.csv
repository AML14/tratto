project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.setReference(resolvedRecursiveType0);
    ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    boolean boolean0 = resolvedRecursiveType0.equals(resolvedRecursiveType1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test011,"public void test011() throws Throwable {
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    Class<JsonFormat.Shape> class0 = JsonFormat.Shape.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    // Undeclared exception!
    try {
        resolvedRecursiveType0.getGenericSignature((StringBuilder) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ResolvedRecursiveType"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    JavaType javaType0 = resolvedRecursiveType0.withTypeHandler((Object) null);
    assertFalse(javaType0.isAbstract());
}",0,
project,0,test033,"public void test033() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    JavaType javaType0 = resolvedRecursiveType0.withContentType(resolvedRecursiveType0);
    assertFalse(javaType0.isCollectionLikeType());
}",0,assertTrue(javaType0.isCollectionLikeType())
project,0,test044,"public void test044() throws Throwable {
    Class<String> class0 = String.class;
    ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
    TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    boolean boolean0 = resolvedRecursiveType0.isContainerType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test055,"public void test055() throws Throwable {
    Class<Integer> class0 = Integer.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(resolvedRecursiveType0);
    assertFalse(javaType0.isInterface());
}",0,assertTrue(javaType0.isInterface())
project,0,test066,"public void test066() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    // Undeclared exception!
    try {
        resolvedRecursiveType0.getErasedSignature();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ResolvedRecursiveType"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    JavaType javaType0 = resolvedRecursiveType0.withValueHandler(resolvedRecursiveType0);
    assertFalse(javaType0.isCollectionLikeType());
}",0,assertTrue(javaType0.isCollectionLikeType())
project,0,test088,"public void test088() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    Class<Integer> class1 = Integer.class;
    Class<String> class2 = String.class;
    JavaType[] javaTypeArray0 = new JavaType[1];
    CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
    JavaType javaType0 = resolvedRecursiveType0.refine(class1, (TypeBindings) null, collectionType0, javaTypeArray0);
    assertNull(javaType0);
}",0,
project,0,test099,"public void test099() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
    assertFalse(javaType0.isCollectionLikeType());
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(class0);
    assertFalse(javaType0.isArrayType());
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    Class<Object> class0 = Object.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    Class<Integer> class1 = Integer.class;
    JavaType javaType0 = resolvedRecursiveType0._narrow(class1);
    assertTrue(javaType0.isConcrete());
}",0,assertFalse(javaType0.isConcrete())
project,0,test1212,"public void test1212() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.setReference(resolvedRecursiveType0);
    // Undeclared exception!
    try {
        resolvedRecursiveType0.setReference(resolvedRecursiveType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Trying to re-set self reference; old value = [recursive type; java.lang.Object, new = [recursive type; java.lang.Object
        //
        verifyException(""com.fasterxml.jackson.databind.type.ResolvedRecursiveType"", e);
    }
}",1,
project,0,test1313,"public void test1313() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    String string0 = resolvedRecursiveType0.toString();
    assertEquals(""[recursive type; UNRESOLVED"", string0);
}",0,assertNotNull(string0)
project,0,test1414,"public void test1414() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.setReference(resolvedRecursiveType0);
    ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    assertFalse(resolvedRecursiveType1.equals((Object) resolvedRecursiveType0));
}",0,
project,0,test1415,"public void test1415() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.setReference(resolvedRecursiveType0);
    ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType1.setReference(resolvedRecursiveType0);
    boolean boolean0 = resolvedRecursiveType0.equals(resolvedRecursiveType1);
    assertTrue(resolvedRecursiveType1.equals((Object) resolvedRecursiveType0));
}",0,
project,0,test1416,"public void test1416() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType0.setReference(resolvedRecursiveType0);
    ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    resolvedRecursiveType1.setReference(resolvedRecursiveType0);
    boolean boolean0 = resolvedRecursiveType0.equals(resolvedRecursiveType1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1517,"public void test1517() throws Throwable {
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    MissingNode missingNode0 = MissingNode.getInstance();
    boolean boolean0 = resolvedRecursiveType0.equals(missingNode0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1618,"public void test1618() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
    JavaType javaType0 = TypeFactory.unknownType();
    resolvedRecursiveType0.setReference(javaType0);
    MissingNode missingNode0 = MissingNode.getInstance();
    boolean boolean0 = resolvedRecursiveType0.equals(missingNode0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
