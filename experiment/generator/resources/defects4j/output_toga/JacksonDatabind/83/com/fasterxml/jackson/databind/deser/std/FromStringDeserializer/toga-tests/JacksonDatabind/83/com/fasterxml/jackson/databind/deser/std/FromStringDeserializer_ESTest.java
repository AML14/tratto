/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 07:07:18 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Currency;
import java.util.Locale;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FromStringDeserializer_ESTest extends FromStringDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        MappingIterator<CollectionLikeType> mappingIterator0 = objectMapper0.readValues((JsonParser) null, class0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        RawValue rawValue0 = new RawValue((String) null);
        Class<URI> class0 = URI.class;
        objectMapper0.convertValue((Object) rawValue0, class0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
        Object object0 = fromStringDeserializer_Std0._deserializeFromEmptyString();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<?>[] classArray0 = FromStringDeserializer.types();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<File> class0 = File.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 8);
        JsonParser jsonParser0 = arrayNode0.traverse();
        fromStringDeserializer_Std0.deserialize(jsonParser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<URL> class0 = URL.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<TimeZone> class0 = TimeZone.class;
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        IntNode intNode0 = new IntNode(3);
        Class<Currency> class0 = Currency.class;
        objectMapper0.treeToValue((TreeNode) intNode0, class0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<TimeZone> class0 = TimeZone.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<Pattern> class0 = Pattern.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        fromStringDeserializer_Std0.isCachable();
        assertTrue(fromStringDeserializer_Std0.isCachable());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Locale> class0 = Locale.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        Object object0 = fromStringDeserializer_Std0._deserializeFromEmptyString();
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Class<Charset> class0 = Charset.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<Integer> class0 = Integer.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<InetAddress> class0 = InetAddress.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Class<StringBuilder> class0 = StringBuilder.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<URI> class0 = URI.class;
        URI uRI0 = objectMapper0.convertValue((Object) "", class0);
        uRI0.getPort();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<URI> class0 = URI.class;
        URI uRI0 = objectMapper0.convertValue((Object) "Wnx8z_#Xe9/k", class0);
        uRI0.getRawPath();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        Class<URI> class0 = URI.class;
        objectMapper0.convertValue((Object) arrayNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Class<Currency> class0 = Currency.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 1);
        Object object0 = fromStringDeserializer_Std0._deserialize("", (DeserializationContext) null);
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Class<URI> class0 = URI.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 2);
        fromStringDeserializer_Std0._deserialize("[JSON", defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Class<URI> class0 = URI.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 4);
        fromStringDeserializer_Std0._deserialize("^}_t", defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Class<URL> class0 = URL.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 5);
        fromStringDeserializer_Std0._deserialize("com.fasterxml.jackson.databind.deser.std.FromStringDeserializer$Std", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Class<Locale> class0 = Locale.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 7);
        Pattern pattern0 = (Pattern) fromStringDeserializer_Std0._deserialize("TR3>mH`FyHt^3N", (DeserializationContext) null);
        pattern0.flags();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Class<Integer> class0 = Integer.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
        Object object0 = fromStringDeserializer_Std0._deserialize("]4g2_R_3_h[6PU", (DeserializationContext) null);
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Class<File> class0 = File.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
        fromStringDeserializer_Std0._deserialize("r!MH],Z", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Class<Integer> class0 = Integer.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 10);
        ZoneInfo zoneInfo0 = (ZoneInfo) fromStringDeserializer_Std0._deserialize("[[:", (DeserializationContext) null);
        zoneInfo0.getID();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Class<URI> class0 = URI.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 11);
        Object object0 = fromStringDeserializer_Std0._deserialize("j0%<q", defaultDeserializationContext_Impl0);
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Class<File> class0 = File.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        fromStringDeserializer_Std0._deserialize("[[Du*{62(]d&a]:dcf", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Class<TimeZone> class0 = TimeZone.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 13);
        Object object0 = fromStringDeserializer_Std0._deserialize("[Y!w6w9wO/$^h", (DeserializationContext) null);
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Class<Charset> class0 = Charset.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 4006);
        fromStringDeserializer_Std0._deserialize("not a valid textual representation", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Class<File> class0 = File.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
        Object object0 = fromStringDeserializer_Std0._deserialize(", problem: ", (DeserializationContext) null);
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Class<URI> class0 = URI.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
        Object object0 = fromStringDeserializer_Std0._deserialize("[FInp8a Yu2TUI-,", defaultDeserializationContext_Impl0);
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Class<URI> class0 = URI.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        fromStringDeserializer_Std0._deserialize("mL,:'mv7zV;Kq", defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Class<File> class0 = File.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        fromStringDeserializer_Std0._deserialize("[gm_p96?\"k/9a", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Class<File> class0 = File.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        MockInetSocketAddress mockInetSocketAddress0 = (MockInetSocketAddress) fromStringDeserializer_Std0._deserialize("[[D>u*{62(]da]:]dcf", (DeserializationContext) null);
        mockInetSocketAddress0.getPort();
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Class<File> class0 = File.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        MockInetSocketAddress mockInetSocketAddress0 = (MockInetSocketAddress) fromStringDeserializer_Std0._deserialize("3I9G&+", (DeserializationContext) null);
        mockInetSocketAddress0.isUnresolved();
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Class<URI> class0 = URI.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        Object object0 = fromStringDeserializer_Std0._deserialize("5>?O:Wl/:|o", defaultDeserializationContext_Impl0);
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Class<InetAddress> class0 = InetAddress.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 13);
        Object object0 = fromStringDeserializer_Std0._deserializeFromEmptyString();
        object0.toString();
    }
}
