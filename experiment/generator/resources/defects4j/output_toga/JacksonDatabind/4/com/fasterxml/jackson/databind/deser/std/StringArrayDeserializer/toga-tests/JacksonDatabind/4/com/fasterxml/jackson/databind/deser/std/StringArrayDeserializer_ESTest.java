/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:06:27 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StringArrayDeserializer_ESTest extends StringArrayDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
        JsonFactory jsonFactory0 = new JsonFactory();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        stringArrayDeserializer0.instance.deserializeWithType(jsonParser0, defaultDeserializationContext_Impl0, (TypeDeserializer) null);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        arrayNode0.insert(3880, "FeE");
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        StringArrayDeserializer stringArrayDeserializer1 = new StringArrayDeserializer(stringArrayDeserializer0);
        StringArrayDeserializer stringArrayDeserializer2 = new StringArrayDeserializer(stringArrayDeserializer1);
        stringArrayDeserializer2._deserializeCustom(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        arrayNode0.insert(3880, "FeE");
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        StringArrayDeserializer stringArrayDeserializer1 = new StringArrayDeserializer(stringArrayDeserializer0);
        stringArrayDeserializer1._deserializeCustom(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[3];
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        ArrayNode arrayNode1 = arrayNode0.add(byteArray0);
        Integer integer0 = new Integer((byte) (-107));
        ArrayNode arrayNode2 = arrayNode0.insert((int) (byte) (-107), (String) null);
        ArrayNode arrayNode3 = arrayNode2.insert((int) (byte) (-107), integer0);
        arrayNode2.add(byteArray0);
        ArrayNode arrayNode4 = arrayNode1.insert((int) (byte) (-107), integer0);
        arrayNode4.insert((int) (byte) (-107), 3845);
        arrayNode3.add(byteArray0);
        arrayNode2.addNull();
        arrayNode4.addNull();
        Double double0 = new Double((byte) (-107));
        Boolean boolean0 = new Boolean((String) null);
        arrayNode2.insert(3845, boolean0);
        arrayNode2.add(double0);
        arrayNode3.insert((int) (byte) (-107), (String) null);
        arrayNode1.insert((int) (byte) (-107), integer0);
        JsonParser jsonParser0 = arrayNode4.traverse((ObjectCodec) objectMapper0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        StringArrayDeserializer stringArrayDeserializer1 = new StringArrayDeserializer(stringArrayDeserializer0);
        stringArrayDeserializer1._deserializeCustom(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        ArrayNode arrayNode1 = arrayNode0.insert(3880, (String) null);
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser jsonParser0 = arrayNode1.traverse((ObjectCodec) objectMapper0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        StringArrayDeserializer stringArrayDeserializer1 = new StringArrayDeserializer(stringArrayDeserializer0);
        StringArrayDeserializer stringArrayDeserializer2 = new StringArrayDeserializer(stringArrayDeserializer1);
        stringArrayDeserializer2._deserializeCustom(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Module) null, (Module) null, (Module) null, (Module) null, (Module) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        doReturn((Module) null).when(jsonDeserializer0).getNullValue();
        StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer(jsonDeserializer0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        NullNode nullNode0 = NullNode.getInstance();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(nullNode0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        // Undeclared exception!
        stringArrayDeserializer0._deserializeCustom(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
        JsonFactory jsonFactory0 = new JsonFactory();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        stringArrayDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
    }
}
