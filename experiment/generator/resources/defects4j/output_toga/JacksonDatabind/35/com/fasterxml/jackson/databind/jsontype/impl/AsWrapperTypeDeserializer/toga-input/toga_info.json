{
  "test00" : {
    "methodSignature" : "public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException",
    "methodName" : "deserializeTypedFromObject",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Map> class0 = Map.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);\n    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, classNameIdResolver0, \"+\", true, class0);\n    JsonFactory jsonFactory0 = new JsonFactory();\n    JsonParser jsonParser0 = jsonFactory0.createParser(\"+\");\n    asWrapperTypeDeserializer0.deserializeTypedFromObject(jsonParser0, (DeserializationContext) null);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public Object deserializeTypedFromScalar(JsonParser jp, DeserializationContext ctxt) throws IOException",
    "methodName" : "deserializeTypedFromScalar",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Map> class0 = Map.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);\n    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, classNameIdResolver0, \"\", false, class0);\n    asWrapperTypeDeserializer0.deserializeTypedFromScalar((JsonParser) null, (DeserializationContext) null);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public As getTypeInclusion()",
    "methodName" : "getTypeInclusion",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Map> class0 = Map.class;\n    MapType mapType0 = typeFactory0.constructRawMapType(class0);\n    Class<JsonGenerator.Feature> class1 = JsonGenerator.Feature.class;\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapType0, typeFactory0);\n    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, minimalClassNameIdResolver0, \"Invalid delegate-creator definition for \", false, class1);\n    JsonTypeInfo.As jsonTypeInfo_As0 = asWrapperTypeDeserializer0.getTypeInclusion();\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public Object deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt) throws IOException",
    "methodName" : "deserializeTypedFromArray",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Map> class0 = Map.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);\n    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, classNameIdResolver0, \"\", false, class0);\n    asWrapperTypeDeserializer0.deserializeTypedFromArray((JsonParser) null, (DeserializationContext) null);\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "public Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt) throws IOException",
    "methodName" : "deserializeTypedFromAny",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Map> class0 = Map.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);\n    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, classNameIdResolver0, \"]\", false, class0);\n    asWrapperTypeDeserializer0.deserializeTypedFromAny((JsonParser) null, (DeserializationContext) null);\n}",
    "testName" : "test44"
  },
  "test55" : {
    "methodSignature" : "public boolean hasValueDeserializer()",
    "methodName" : "hasValueDeserializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Map> class0 = Map.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);\n    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, classNameIdResolver0, \"i(Q5~0\", true, class0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;\n    CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), jsonLocationInstantiator0, propertyMetadata0);\n    creatorProperty0.hasValueDeserializer();\n}",
    "testName" : "test55"
  },
  "test66" : {
    "methodSignature" : "public TypeDeserializer forProperty(BeanProperty prop)",
    "methodName" : "forProperty",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Map> class0 = Map.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);\n    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, classNameIdResolver0, \"u45zAjIXRYGJ\", false, class0);\n    TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);\n}",
    "testName" : "test66"
  }
}