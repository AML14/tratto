project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test022,"public void test022() throws Throwable {
    LongNode longNode0 = new LongNode((-9223372036854775808L));
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
    float float0 = treeTraversingParser0.getFloatValue();
    assertEquals((-9.223372E18F), float0, 0.01F);
}",0,
project,0,test033,"public void test033() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    try {
        treeTraversingParser0.getNumberValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    FloatNode floatNode0 = FloatNode.valueOf(0.0F);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
    boolean boolean0 = treeTraversingParser0.hasTextCharacters();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test066,"public void test066() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    // Undeclared exception!
    try {
        treeTraversingParser0.getTextLength();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.node.TreeTraversingParser"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TextNode textNode0 = new TextNode(""[NamedType, class "");
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0, objectMapper0);
    int int0 = treeTraversingParser0.getTextOffset();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test088,"public void test088() throws Throwable {
    DecimalNode decimalNode0 = DecimalNode.ZERO;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
    boolean boolean0 = treeTraversingParser0.isClosed();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test099,"public void test099() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    try {
        treeTraversingParser0.getBigIntegerValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    BooleanNode booleanNode0 = BooleanNode.getTrue();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
    // Undeclared exception!
    try {
        treeTraversingParser0._handleEOF();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Internal error: this code path should never get executed
        //
        verifyException(""com.fasterxml.jackson.core.util.VersionUtil"", e);
    }
}",1,
project,0,test1414,"public void test1414() throws Throwable {
    BooleanNode booleanNode0 = BooleanNode.getFalse();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
    try {
        treeTraversingParser0.getDecimalValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_FALSE) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    DecimalNode decimalNode0 = DecimalNode.ZERO;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
    long long0 = treeTraversingParser0.getLongValue();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1616,"public void test1616() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    try {
        treeTraversingParser0.getDoubleValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    treeTraversingParser0.close();
    treeTraversingParser0.nextToken();
    assertTrue(treeTraversingParser0.isClosed());
}",0,assertFalse(treeTraversingParser0.isClosed())
project,0,test2020,"public void test2020() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    treeTraversingParser0.nextLongValue((-324L));
    String string0 = treeTraversingParser0.getText();
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test2121,"public void test2121() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    TreeTraversingParser treeTraversingParser1 = (TreeTraversingParser) treeTraversingParser0.skipChildren();
    JsonToken jsonToken0 = JsonToken.START_OBJECT;
    treeTraversingParser1._nextToken = jsonToken0;
    treeTraversingParser1.nextLongValue((-324L));
    String string0 = treeTraversingParser1.getText();
    assertEquals(""{"", string0);
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    BooleanNode booleanNode0 = BooleanNode.getTrue();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
    treeTraversingParser0.close();
    String string0 = treeTraversingParser0.getText();
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test3030,"public void test3030() throws Throwable {
    BooleanNode booleanNode0 = BooleanNode.FALSE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
    JsonToken jsonToken0 = JsonToken.FIELD_NAME;
    treeTraversingParser0._nextToken = jsonToken0;
    treeTraversingParser0.nextToken();
    String string0 = treeTraversingParser0.getText();
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test3232,"public void test3232() throws Throwable {
    LongNode longNode0 = new LongNode(0L);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
    treeTraversingParser0.nextToken();
    String string0 = treeTraversingParser0.getText();
    assertEquals(""0"", string0);
}",0,assertNotNull(string0)
project,0,test3333,"public void test3333() throws Throwable {
    DecimalNode decimalNode0 = DecimalNode.ZERO;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
    treeTraversingParser0.nextValue();
    String string0 = treeTraversingParser0.getText();
    assertEquals(""0"", string0);
}",0,assertNotNull(string0)
project,0,test3434,"public void test3434() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    treeTraversingParser0.nextToken();
    treeTraversingParser0._nodeCursor = null;
    // Undeclared exception!
    try {
        treeTraversingParser0.getTextCharacters();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.node.TreeTraversingParser"", e);
    }
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
    POJONode pOJONode0 = new POJONode(textNode0);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
    treeTraversingParser0.nextToken();
    String string0 = treeTraversingParser0.getText();
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test3636,"public void test3636() throws Throwable {
    LongNode longNode0 = new LongNode((-324L));
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
    JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
    assertEquals(JsonParser.NumberType.LONG, jsonParser_NumberType0);
}",0,assertNotNull(jsonParser_NumberType0)
project,0,test3737,"public void test3737() throws Throwable {
    FloatNode floatNode0 = FloatNode.valueOf(2077.23F);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
    treeTraversingParser0.close();
    Object object0 = treeTraversingParser0.getEmbeddedObject();
    assertNull(object0);
}",1,
project,0,test3838,"public void test3838() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    SimpleModule simpleModule0 = new SimpleModule();
    ValueNode valueNode0 = jsonNodeFactory0.pojoNode(simpleModule0);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, (ObjectCodec) null);
    SimpleModule simpleModule1 = (SimpleModule) treeTraversingParser0.getEmbeddedObject();
    assertEquals(""SimpleModule-1"", simpleModule1.getModuleName());
}",0,assertNotNull(simpleModule1.getModuleName())
project,0,test3939,"public void test3939() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ArrayNode arrayNode0 = objectMapper0.createArrayNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
    Object object0 = treeTraversingParser0.getEmbeddedObject();
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test4040,"public void test4040() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    Object object0 = treeTraversingParser0.getEmbeddedObject();
    assertNotNull(object0);
}",0,assertNotNull(object0)
project,0,test4141,"public void test4141() throws Throwable {
    BooleanNode booleanNode0 = BooleanNode.getTrue();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
    Object object0 = treeTraversingParser0.getEmbeddedObject();
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test4242,"public void test4242() throws Throwable {
    FloatNode floatNode0 = FloatNode.valueOf(0.0F);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
    treeTraversingParser0.close();
    boolean boolean0 = treeTraversingParser0.isNaN();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4343,"public void test4343() throws Throwable {
    DecimalNode decimalNode0 = DecimalNode.ZERO;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
    boolean boolean0 = treeTraversingParser0.isNaN();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4444,"public void test4444() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    boolean boolean0 = treeTraversingParser0.isNaN();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4545,"public void test4545() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ArrayNode arrayNode0 = objectMapper0.createArrayNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
    byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
    assertNull(byteArray0);
}",0,assertNotNull(byteArray0)
project,0,test4949,"public void test4949() throws Throwable {
    DecimalNode decimalNode0 = DecimalNode.ZERO;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
    treeTraversingParser0.close();
    try {
        treeTraversingParser0.getNumberType();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
