focal_method,test_prefix,docstring
"@Override
public float getFloatValue() throws IOException {
    return (float) currentNumericNode().doubleValue();
}","public void test022() throws Throwable {
    LongNode longNode0 = new LongNode((-9223372036854775808L));
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
    float float0 = treeTraversingParser0.getFloatValue();
    assertEquals((-9.223372E18F), float0, 0.01F);
}",""
"@Override
public Number getNumberValue() throws IOException {
    return currentNumericNode().numberValue();
}","public void test033() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    try {
        treeTraversingParser0.getNumberValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public boolean hasTextCharacters() {
    // generally we do not have efficient access as char[], hence:
    return false;
}","public void test055() throws Throwable {
    FloatNode floatNode0 = FloatNode.valueOf(0.0F);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
    boolean boolean0 = treeTraversingParser0.hasTextCharacters();
    assertFalse(boolean0);
}",""
"@Override
public int getTextLength() throws IOException, JsonParseException {
    return getText().length();
}","public void test066() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    // Undeclared exception!
    try {
        treeTraversingParser0.getTextLength();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.node.TreeTraversingParser"", e);
    }
}",""
"@Override
public int getTextOffset() throws IOException, JsonParseException {
    return 0;
}","public void test077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TextNode textNode0 = new TextNode(""[NamedType, class "");
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0, objectMapper0);
    int int0 = treeTraversingParser0.getTextOffset();
    assertEquals(0, int0);
}",""
"@Override
public boolean isClosed() {
    return _closed;
}","public void test088() throws Throwable {
    DecimalNode decimalNode0 = DecimalNode.ZERO;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
    boolean boolean0 = treeTraversingParser0.isClosed();
    assertFalse(boolean0);
}",""
"@Override
public BigInteger getBigIntegerValue() throws IOException {
    return currentNumericNode().bigIntegerValue();
}","public void test099() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    try {
        treeTraversingParser0.getBigIntegerValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
protected void _handleEOF() throws JsonParseException {
    // should never get called
    _throwInternal();
}","public void test1111() throws Throwable {
    BooleanNode booleanNode0 = BooleanNode.getTrue();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
    // Undeclared exception!
    try {
        treeTraversingParser0._handleEOF();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Internal error: this code path should never get executed
        //
        verifyException(""com.fasterxml.jackson.core.util.VersionUtil"", e);
    }
}",""
"@Override
public BigDecimal getDecimalValue() throws IOException {
    return currentNumericNode().decimalValue();
}","public void test1414() throws Throwable {
    BooleanNode booleanNode0 = BooleanNode.getFalse();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
    try {
        treeTraversingParser0.getDecimalValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_FALSE) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public long getLongValue() throws IOException {
    final NumericNode node = (NumericNode) currentNumericNode();
    return node.longValue();
}","public void test1515() throws Throwable {
    DecimalNode decimalNode0 = DecimalNode.ZERO;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
    long long0 = treeTraversingParser0.getLongValue();
    assertEquals(0L, long0);
}",""
"@Override
public double getDoubleValue() throws IOException {
    return currentNumericNode().doubleValue();
}","public void test1616() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    try {
        treeTraversingParser0.getDoubleValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public boolean isClosed() {
    return _closed;
}","public void test1919() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    treeTraversingParser0.close();
    treeTraversingParser0.nextToken();
    assertTrue(treeTraversingParser0.isClosed());
}",""
"/*
    /**********************************************************
    /* Public API, access to textual content
    /**********************************************************
     */
@Override
public String getText() {
    if (_closed) {
        return null;
    }
    // need to separate handling a bit...
    switch(_currToken) {
        case FIELD_NAME:
            return _nodeCursor.getCurrentName();
        case VALUE_STRING:
            return currentNode().textValue();
        case VALUE_NUMBER_INT:
        case VALUE_NUMBER_FLOAT:
            return String.valueOf(currentNode().numberValue());
        case VALUE_EMBEDDED_OBJECT:
            JsonNode n = currentNode();
            if (n != null && n.isBinary()) {
                // this will convert it to base64
                return n.asText();
            }
        default:
            return (_currToken == null) ? null : _currToken.asString();
    }
}","public void test2020() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    treeTraversingParser0.nextLongValue((-324L));
    String string0 = treeTraversingParser0.getText();
    assertEquals("""", string0);
}",""
"/*
    /**********************************************************
    /* Public API, access to textual content
    /**********************************************************
     */
@Override
public String getText() {
    if (_closed) {
        return null;
    }
    // need to separate handling a bit...
    switch(_currToken) {
        case FIELD_NAME:
            return _nodeCursor.getCurrentName();
        case VALUE_STRING:
            return currentNode().textValue();
        case VALUE_NUMBER_INT:
        case VALUE_NUMBER_FLOAT:
            return String.valueOf(currentNode().numberValue());
        case VALUE_EMBEDDED_OBJECT:
            JsonNode n = currentNode();
            if (n != null && n.isBinary()) {
                // this will convert it to base64
                return n.asText();
            }
        default:
            return (_currToken == null) ? null : _currToken.asString();
    }
}","public void test2121() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    TreeTraversingParser treeTraversingParser1 = (TreeTraversingParser) treeTraversingParser0.skipChildren();
    JsonToken jsonToken0 = JsonToken.START_OBJECT;
    treeTraversingParser1._nextToken = jsonToken0;
    treeTraversingParser1.nextLongValue((-324L));
    String string0 = treeTraversingParser1.getText();
    assertEquals(""{"", string0);
}",""
"/*
    /**********************************************************
    /* Public API, access to textual content
    /**********************************************************
     */
@Override
public String getText() {
    if (_closed) {
        return null;
    }
    // need to separate handling a bit...
    switch(_currToken) {
        case FIELD_NAME:
            return _nodeCursor.getCurrentName();
        case VALUE_STRING:
            return currentNode().textValue();
        case VALUE_NUMBER_INT:
        case VALUE_NUMBER_FLOAT:
            return String.valueOf(currentNode().numberValue());
        case VALUE_EMBEDDED_OBJECT:
            JsonNode n = currentNode();
            if (n != null && n.isBinary()) {
                // this will convert it to base64
                return n.asText();
            }
        default:
            return (_currToken == null) ? null : _currToken.asString();
    }
}","public void test2929() throws Throwable {
    BooleanNode booleanNode0 = BooleanNode.getTrue();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
    treeTraversingParser0.close();
    String string0 = treeTraversingParser0.getText();
    assertNull(string0);
}",""
"/*
    /**********************************************************
    /* Public API, access to textual content
    /**********************************************************
     */
@Override
public String getText() {
    if (_closed) {
        return null;
    }
    // need to separate handling a bit...
    switch(_currToken) {
        case FIELD_NAME:
            return _nodeCursor.getCurrentName();
        case VALUE_STRING:
            return currentNode().textValue();
        case VALUE_NUMBER_INT:
        case VALUE_NUMBER_FLOAT:
            return String.valueOf(currentNode().numberValue());
        case VALUE_EMBEDDED_OBJECT:
            JsonNode n = currentNode();
            if (n != null && n.isBinary()) {
                // this will convert it to base64
                return n.asText();
            }
        default:
            return (_currToken == null) ? null : _currToken.asString();
    }
}","public void test3030() throws Throwable {
    BooleanNode booleanNode0 = BooleanNode.FALSE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
    JsonToken jsonToken0 = JsonToken.FIELD_NAME;
    treeTraversingParser0._nextToken = jsonToken0;
    treeTraversingParser0.nextToken();
    String string0 = treeTraversingParser0.getText();
    assertNull(string0);
}",""
"/*
    /**********************************************************
    /* Public API, access to textual content
    /**********************************************************
     */
@Override
public String getText() {
    if (_closed) {
        return null;
    }
    // need to separate handling a bit...
    switch(_currToken) {
        case FIELD_NAME:
            return _nodeCursor.getCurrentName();
        case VALUE_STRING:
            return currentNode().textValue();
        case VALUE_NUMBER_INT:
        case VALUE_NUMBER_FLOAT:
            return String.valueOf(currentNode().numberValue());
        case VALUE_EMBEDDED_OBJECT:
            JsonNode n = currentNode();
            if (n != null && n.isBinary()) {
                // this will convert it to base64
                return n.asText();
            }
        default:
            return (_currToken == null) ? null : _currToken.asString();
    }
}","public void test3232() throws Throwable {
    LongNode longNode0 = new LongNode(0L);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
    treeTraversingParser0.nextToken();
    String string0 = treeTraversingParser0.getText();
    assertEquals(""0"", string0);
}",""
"/*
    /**********************************************************
    /* Public API, access to textual content
    /**********************************************************
     */
@Override
public String getText() {
    if (_closed) {
        return null;
    }
    // need to separate handling a bit...
    switch(_currToken) {
        case FIELD_NAME:
            return _nodeCursor.getCurrentName();
        case VALUE_STRING:
            return currentNode().textValue();
        case VALUE_NUMBER_INT:
        case VALUE_NUMBER_FLOAT:
            return String.valueOf(currentNode().numberValue());
        case VALUE_EMBEDDED_OBJECT:
            JsonNode n = currentNode();
            if (n != null && n.isBinary()) {
                // this will convert it to base64
                return n.asText();
            }
        default:
            return (_currToken == null) ? null : _currToken.asString();
    }
}","public void test3333() throws Throwable {
    DecimalNode decimalNode0 = DecimalNode.ZERO;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
    treeTraversingParser0.nextValue();
    String string0 = treeTraversingParser0.getText();
    assertEquals(""0"", string0);
}",""
"@Override
public char[] getTextCharacters() throws IOException, JsonParseException {
    return getText().toCharArray();
}","public void test3434() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    treeTraversingParser0.nextToken();
    treeTraversingParser0._nodeCursor = null;
    // Undeclared exception!
    try {
        treeTraversingParser0.getTextCharacters();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.node.TreeTraversingParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, access to textual content
    /**********************************************************
     */
@Override
public String getText() {
    if (_closed) {
        return null;
    }
    // need to separate handling a bit...
    switch(_currToken) {
        case FIELD_NAME:
            return _nodeCursor.getCurrentName();
        case VALUE_STRING:
            return currentNode().textValue();
        case VALUE_NUMBER_INT:
        case VALUE_NUMBER_FLOAT:
            return String.valueOf(currentNode().numberValue());
        case VALUE_EMBEDDED_OBJECT:
            JsonNode n = currentNode();
            if (n != null && n.isBinary()) {
                // this will convert it to base64
                return n.asText();
            }
        default:
            return (_currToken == null) ? null : _currToken.asString();
    }
}","public void test3535() throws Throwable {
    TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
    POJONode pOJONode0 = new POJONode(textNode0);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
    treeTraversingParser0.nextToken();
    String string0 = treeTraversingParser0.getText();
    assertNull(string0);
}",""
"/*
    /**********************************************************
    /* Public API, typed non-text access
    /**********************************************************
     */
//public byte getByteValue() throws IOException
@Override
public NumberType getNumberType() throws IOException {
    JsonNode n = currentNumericNode();
    return (n == null) ? null : n.numberType();
}","public void test3636() throws Throwable {
    LongNode longNode0 = new LongNode((-324L));
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
    JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
    assertEquals(JsonParser.NumberType.LONG, jsonParser_NumberType0);
}",""
"@Override
public Object getEmbeddedObject() {
    if (!_closed) {
        JsonNode n = currentNode();
        if (n != null) {
            if (n.isPojo()) {
                return ((POJONode) n).getPojo();
            }
            if (n.isBinary()) {
                return ((BinaryNode) n).binaryValue();
            }
        }
    }
    return null;
}","public void test3737() throws Throwable {
    FloatNode floatNode0 = FloatNode.valueOf(2077.23F);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
    treeTraversingParser0.close();
    Object object0 = treeTraversingParser0.getEmbeddedObject();
    assertNull(object0);
}",""
"/*
    /**********************************************************
    /* Module impl
    /**********************************************************
     */
@Override
public String getModuleName() {
    return _name;
}","public void test3838() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    SimpleModule simpleModule0 = new SimpleModule();
    ValueNode valueNode0 = jsonNodeFactory0.pojoNode(simpleModule0);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, (ObjectCodec) null);
    SimpleModule simpleModule1 = (SimpleModule) treeTraversingParser0.getEmbeddedObject();
    assertEquals(""SimpleModule-1"", simpleModule1.getModuleName());
}",""
"@Override
public Object getEmbeddedObject() {
    if (!_closed) {
        JsonNode n = currentNode();
        if (n != null) {
            if (n.isPojo()) {
                return ((POJONode) n).getPojo();
            }
            if (n.isBinary()) {
                return ((BinaryNode) n).binaryValue();
            }
        }
    }
    return null;
}","public void test3939() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ArrayNode arrayNode0 = objectMapper0.createArrayNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
    Object object0 = treeTraversingParser0.getEmbeddedObject();
    assertNull(object0);
}",""
"@Override
public Object getEmbeddedObject() {
    if (!_closed) {
        JsonNode n = currentNode();
        if (n != null) {
            if (n.isPojo()) {
                return ((POJONode) n).getPojo();
            }
            if (n.isBinary()) {
                return ((BinaryNode) n).binaryValue();
            }
        }
    }
    return null;
}","public void test4040() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    Object object0 = treeTraversingParser0.getEmbeddedObject();
    assertNotNull(object0);
}",""
"@Override
public Object getEmbeddedObject() {
    if (!_closed) {
        JsonNode n = currentNode();
        if (n != null) {
            if (n.isPojo()) {
                return ((POJONode) n).getPojo();
            }
            if (n.isBinary()) {
                return ((BinaryNode) n).binaryValue();
            }
        }
    }
    return null;
}","public void test4141() throws Throwable {
    BooleanNode booleanNode0 = BooleanNode.getTrue();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
    Object object0 = treeTraversingParser0.getEmbeddedObject();
    assertNull(object0);
}",""
"@Override
public boolean isNaN() {
    if (!_closed) {
        JsonNode n = currentNode();
        if (n instanceof NumericNode) {
            return ((NumericNode) n).isNaN();
        }
    }
    return false;
}","public void test4242() throws Throwable {
    FloatNode floatNode0 = FloatNode.valueOf(0.0F);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
    treeTraversingParser0.close();
    boolean boolean0 = treeTraversingParser0.isNaN();
    assertFalse(boolean0);
}",""
"@Override
public boolean isNaN() {
    if (!_closed) {
        JsonNode n = currentNode();
        if (n instanceof NumericNode) {
            return ((NumericNode) n).isNaN();
        }
    }
    return false;
}","public void test4343() throws Throwable {
    DecimalNode decimalNode0 = DecimalNode.ZERO;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
    boolean boolean0 = treeTraversingParser0.isNaN();
    assertFalse(boolean0);
}",""
"@Override
public boolean isNaN() {
    if (!_closed) {
        JsonNode n = currentNode();
        if (n instanceof NumericNode) {
            return ((NumericNode) n).isNaN();
        }
    }
    return false;
}","public void test4444() throws Throwable {
    BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
    boolean boolean0 = treeTraversingParser0.isNaN();
    assertFalse(boolean0);
}",""
"/*
    /**********************************************************
    /* Public API, typed binary (base64) access
    /**********************************************************
     */
@Override
public byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException {
    // Multiple possibilities...
    JsonNode n = currentNode();
    if (n != null) {
        // [databind#2096]: although `binaryValue()` works for real binary node
        // and embedded ""POJO"" node, coercion from TextNode may require variant, so:
        if (n instanceof TextNode) {
            return ((TextNode) n).getBinaryValue(b64variant);
        }
        return n.binaryValue();
    }
    // otherwise return null to mark we have no binary content
    return null;
}","public void test4545() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ArrayNode arrayNode0 = objectMapper0.createArrayNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
    byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
    assertNull(byteArray0);
}",""
"/*
    /**********************************************************
    /* Public API, typed non-text access
    /**********************************************************
     */
//public byte getByteValue() throws IOException
@Override
public NumberType getNumberType() throws IOException {
    JsonNode n = currentNumericNode();
    return (n == null) ? null : n.numberType();
}","public void test4949() throws Throwable {
    DecimalNode decimalNode0 = DecimalNode.ZERO;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
    treeTraversingParser0.close();
    try {
        treeTraversingParser0.getNumberType();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
