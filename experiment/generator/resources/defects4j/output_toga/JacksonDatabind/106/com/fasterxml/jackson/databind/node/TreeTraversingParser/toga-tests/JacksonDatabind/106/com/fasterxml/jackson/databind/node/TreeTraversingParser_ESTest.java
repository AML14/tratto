/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 08:49:20 GMT 2024
 */
package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
        treeTraversingParser0.setCodec(objectMapper0);
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
        Version version0 = treeTraversingParser0.version();
        version0.getArtifactId();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        LongNode longNode0 = new LongNode((-9223372036854775808L));
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
        float float0 = treeTraversingParser0.getFloatValue();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.getNumberValue();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
        treeTraversingParser0.readValueAsTree();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        FloatNode floatNode0 = FloatNode.valueOf(0.0F);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
        boolean boolean0 = treeTraversingParser0.hasTextCharacters();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.getTextLength();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TextNode textNode0 = new TextNode("[NamedType, class ");
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0, objectMapper0);
        int int0 = treeTraversingParser0.getTextOffset();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        boolean boolean0 = treeTraversingParser0.isClosed();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.getBigIntegerValue();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        Object object0 = treeTraversingParser0.getCurrentValue();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
        treeTraversingParser0._handleEOF();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        FloatNode floatNode0 = FloatNode.valueOf(0.0F);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
        JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
        jsonLocation0.getByteOffset();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.getShortValue();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        BooleanNode booleanNode0 = BooleanNode.getFalse();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
        treeTraversingParser0.getDecimalValue();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        long long0 = treeTraversingParser0.getLongValue();
        assertEquals(1, long0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.getDoubleValue();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.skipChildren();
        treeTraversingParser0.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0._closed = true;
        treeTraversingParser0.close();
        treeTraversingParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.close();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.isClosed();
        assertFalse(treeTraversingParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.nextLongValue((-324L));
        String string0 = treeTraversingParser0.getText();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        TreeTraversingParser treeTraversingParser1 = (TreeTraversingParser) treeTraversingParser0.skipChildren();
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        treeTraversingParser1._nextToken = jsonToken0;
        treeTraversingParser1.nextLongValue((-324L));
        String string0 = treeTraversingParser1.getText();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0._startContainer = true;
        treeTraversingParser0.nextLongValue((-324L));
        treeTraversingParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        TreeTraversingParser treeTraversingParser1 = (TreeTraversingParser) treeTraversingParser0.skipChildren();
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        treeTraversingParser1._nextToken = jsonToken0;
        treeTraversingParser0._startContainer = true;
        treeTraversingParser1.nextLongValue((-324L));
        treeTraversingParser0.nextToken();
        treeTraversingParser0.getCurrentToken();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.nextValue();
        treeTraversingParser0.nextToken();
        String string0 = treeTraversingParser0.currentName();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0.skipChildren();
        treeTraversingParser0.isExpectedStartArrayToken();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        String string0 = treeTraversingParser0.currentName();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        LongNode longNode0 = new LongNode(0L);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
        treeTraversingParser0.nextBooleanValue();
        treeTraversingParser0.nextToken();
        treeTraversingParser0.overrideCurrentName((String) null);
        treeTraversingParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        LongNode longNode0 = new LongNode((-9223372036854775808L));
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
        treeTraversingParser0.overrideCurrentName("");
        treeTraversingParser0.currentTokenId();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
        treeTraversingParser0.close();
        String string0 = treeTraversingParser0.getText();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        BooleanNode booleanNode0 = BooleanNode.FALSE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        treeTraversingParser0._nextToken = jsonToken0;
        treeTraversingParser0.nextToken();
        String string0 = treeTraversingParser0.getText();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        JsonToken jsonToken0 = JsonToken.VALUE_STRING;
        treeTraversingParser0._nextToken = jsonToken0;
        String string0 = treeTraversingParser0.nextTextValue();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        LongNode longNode0 = new LongNode(0L);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
        treeTraversingParser0.nextToken();
        String string0 = treeTraversingParser0.getText();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.nextValue();
        String string0 = treeTraversingParser0.getText();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.nextToken();
        treeTraversingParser0._nodeCursor = null;
        treeTraversingParser0.getTextCharacters();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
        POJONode pOJONode0 = new POJONode(textNode0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
        treeTraversingParser0.nextToken();
        String string0 = treeTraversingParser0.getText();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        LongNode longNode0 = new LongNode((-324L));
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
        JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
        assertNotNull(jsonParser_NumberType0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        FloatNode floatNode0 = FloatNode.valueOf(2077.23F);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
        treeTraversingParser0.close();
        Object object0 = treeTraversingParser0.getEmbeddedObject();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        SimpleModule simpleModule0 = new SimpleModule();
        ValueNode valueNode0 = jsonNodeFactory0.pojoNode(simpleModule0);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, (ObjectCodec) null);
        SimpleModule simpleModule1 = (SimpleModule) treeTraversingParser0.getEmbeddedObject();
        simpleModule1.getModuleName();
        assertNotNull(simpleModule1.getModuleName());
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
        Object object0 = treeTraversingParser0.getEmbeddedObject();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        Object object0 = treeTraversingParser0.getEmbeddedObject();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
        Object object0 = treeTraversingParser0.getEmbeddedObject();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        FloatNode floatNode0 = FloatNode.valueOf(0.0F);
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
        treeTraversingParser0.close();
        boolean boolean0 = treeTraversingParser0.isNaN();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        boolean boolean0 = treeTraversingParser0.isNaN();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        boolean boolean0 = treeTraversingParser0.isNaN();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
        byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
        assertNotNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
        treeTraversingParser0.readBinaryValue((OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        TextNode textNode0 = new TextNode("[NamedType, class ");
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        treeTraversingParser0.readBinaryValue((OutputStream) byteArrayOutputStream0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
        int int0 = treeTraversingParser0.readBinaryValue((OutputStream) filterOutputStream0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
        treeTraversingParser0.close();
        treeTraversingParser0.getNumberType();
    }
}
