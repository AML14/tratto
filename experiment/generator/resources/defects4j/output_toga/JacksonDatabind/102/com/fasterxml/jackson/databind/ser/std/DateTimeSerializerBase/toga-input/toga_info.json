{
  "test00" : {
    "methodSignature" : "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
    "methodName" : "acceptJsonFormatVisitor",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();\n    sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException",
    "methodName" : "createContextual",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();\n    JsonSerializer<?> jsonSerializer0 = sqlDateSerializer0.createContextual(defaultSerializerProvider_Impl0, beanProperty_Bogus0);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException",
    "methodName" : "createContextual",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    JsonSerializer<?> jsonSerializer0 = sqlDateSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Boolean boolean0 = Boolean.FALSE;\n    DateFormat dateFormat0 = DateFormat.getDateTimeInstance();\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0, dateFormat0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class0 = HashMap.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);\n    JsonNode jsonNode0 = sqlDateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) mapType0, true);\n    jsonNode0.size();\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Boolean boolean0 = Boolean.valueOf(true);\n    DateFormat dateFormat0 = DateFormat.getDateTimeInstance();\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0, dateFormat0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class0 = HashMap.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);\n    JsonNode jsonNode0 = sqlDateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) mapType0, true);\n    jsonNode0.size();\n}",
    "testName" : "test44"
  },
  "test55" : {
    "methodSignature" : "protected boolean _asTimestamp(SerializerProvider serializers)",
    "methodName" : "_asTimestamp",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    sqlDateSerializer0._asTimestamp(defaultSerializerProvider_Impl0);\n}",
    "testName" : "test55"
  },
  "test66" : {
    "methodSignature" : "public boolean isUnwrappingSerializer()",
    "methodName" : "isUnwrappingSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();\n    sqlDateSerializer0._acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null, false);\n    sqlDateSerializer0.isUnwrappingSerializer();\n}",
    "testName" : "test66"
  },
  "test77" : {
    "methodSignature" : "public boolean isUnwrappingSerializer()",
    "methodName" : "isUnwrappingSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test77() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();\n    sqlDateSerializer0._acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null, true);\n    sqlDateSerializer0.isUnwrappingSerializer();\n}",
    "testName" : "test77"
  },
  "test88" : {
    "methodSignature" : "protected void _serializeAsString(Date value, JsonGenerator g, SerializerProvider provider) throws IOException",
    "methodName" : "_serializeAsString",
    "className" : "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test88() throws Throwable {\n    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    MockDate mockDate0 = new MockDate(779, 779, 779);\n    sqlDateSerializer0._serializeAsString(mockDate0, (JsonGenerator) null, defaultSerializerProvider_Impl0);\n}",
    "testName" : "test88"
  }
}