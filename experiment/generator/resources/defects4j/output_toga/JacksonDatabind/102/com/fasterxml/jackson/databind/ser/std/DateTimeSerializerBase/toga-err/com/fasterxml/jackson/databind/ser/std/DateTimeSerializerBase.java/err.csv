com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase,@Test(timeout = 4000)
public void test33() throws Throwable {
    Boolean boolean0 = Boolean.FALSE;
    DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0, dateFormat0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
    JsonNode jsonNode0 = sqlDateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) mapType0, true);
    jsonNode0.size();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase,@Test(timeout = 4000)
public void test44() throws Throwable {
    Boolean boolean0 = Boolean.valueOf(true);
    DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0, dateFormat0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
    JsonNode jsonNode0 = sqlDateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) mapType0, true);
    jsonNode0.size();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase,@Test(timeout = 4000)
public void test66() throws Throwable {
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    sqlDateSerializer0._acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null, false);
    sqlDateSerializer0.isUnwrappingSerializer();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase,@Test(timeout = 4000)
public void test77() throws Throwable {
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    sqlDateSerializer0._acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null, true);
    sqlDateSerializer0.isUnwrappingSerializer();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase,@Test(timeout = 4000)
public void test99() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer((Boolean) null, mockSimpleDateFormat0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Date date0 = new Date((-9223372036854775808L));
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    MockFile mockFile0 = new MockFile(""PHONE"", ""ull SerialierProvider passM for "");
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
    sqlDateSerializer0.serialize(date0, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
    sqlDateSerializer0.serialize(date0, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
    jsonGenerator0.getOutputBuffered();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/JacksonDatabind_102b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java
