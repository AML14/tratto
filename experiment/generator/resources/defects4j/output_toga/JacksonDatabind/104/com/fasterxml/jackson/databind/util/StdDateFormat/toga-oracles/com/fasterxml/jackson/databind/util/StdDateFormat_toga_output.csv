project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
    boolean boolean0 = stdDateFormat1.equals(stdDateFormat0);
    assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
}",0,assertFalse(stdDateFormat1.isColonIncludedInTimeZone())
project,0,test012,"public void test012() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
    boolean boolean0 = stdDateFormat1.equals(stdDateFormat0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test034,"public void test034() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    // Undeclared exception!
    try {
        stdDateFormat0.parse(""0000-00-00"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.util.StdDateFormat"", e);
    }
}",0,
project,0,test045,"public void test045() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    String string0 = stdDateFormat0.instance.toString();
    assertEquals(""DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: null, locale: en_US, lenient: null)"", string0);
}",0,
project,0,test046,"public void test046() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    String string0 = stdDateFormat0.instance.toString();
    assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
}",0,assertFalse(stdDateFormat0.isColonIncludedInTimeZone())
project,0,test057,"public void test057() throws Throwable {
    TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
    Locale locale0 = Locale.ITALIAN;
    StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
    TimeZone timeZone1 = stdDateFormat0.getTimeZone();
    assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
}",0,assertFalse(stdDateFormat0.isColonIncludedInTimeZone())
project,0,test058,"public void test058() throws Throwable {
    TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
    Locale locale0 = Locale.ITALIAN;
    StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
    TimeZone timeZone1 = stdDateFormat0.getTimeZone();
    assertNotNull(timeZone1);
}",0,
project,0,test0811,"public void test0811() throws Throwable {
    TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Boolean boolean0 = Boolean.TRUE;
    StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
    stdDateFormat0.hashCode();
    assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
}",0,assertTrue(stdDateFormat0.isColonIncludedInTimeZone())
project,0,test1013,"public void test1013() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    boolean boolean0 = stdDateFormat0.isColonIncludedInTimeZone();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1114,"public void test1114() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    ZoneInfo zoneInfo0 = (ZoneInfo) StdDateFormat.DEFAULT_TIMEZONE;
    StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(zoneInfo0);
    try {
        stdDateFormat1._parseAsISO8601(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"", (ParsePosition) null);
        fail(""Expecting exception: ParseException"");
    } catch (ParseException e) {
        //
        // Cannot parse date \""yyyy-MM-dd'T'HH:mm:ss.SSSZ\"": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
        //
        verifyException(""com.fasterxml.jackson.databind.util.StdDateFormat"", e);
    }
}",1,
project,0,test1215,"public void test1215() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
    StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone((TimeZone) null);
    assertFalse(stdDateFormat2.isColonIncludedInTimeZone());
}",0,assertFalse(stdDateFormat2.isColonIncludedInTimeZone())
project,0,test1216,"public void test1216() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
    StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone((TimeZone) null);
    assertNotSame(stdDateFormat2, stdDateFormat0);
}",0,
project,0,test1318,"public void test1318() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"");
    StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
    TimeZone timeZone1 = TimeZone.getDefault();
    StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone(timeZone1);
    assertSame(stdDateFormat2, stdDateFormat1);
}",0,
project,0,test1320,"public void test1320() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"");
    StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
    TimeZone timeZone1 = TimeZone.getDefault();
    StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone(timeZone1);
    assertFalse(stdDateFormat2.isColonIncludedInTimeZone());
}",0,assertFalse(stdDateFormat2.isColonIncludedInTimeZone())
project,0,test1421,"public void test1421() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    Locale locale0 = Locale.JAPAN;
    StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    try {
        stdDateFormat1.parse(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"");
        fail(""Expecting exception: ParseException"");
    } catch (ParseException e) {
        //
        // Cannot parse date \""yyyy-MM-dd'T'HH:mm:ss.SSSZ\"": not compatible with any of standard forms (\""yyyy-MM-dd'T'HH:mm:ss.SSSZ\"", \""yyyy-MM-dd'T'HH:mm:ss.SSS\"", \""EEE, dd MMM yyyy HH:mm:ss zzz\"", \""yyyy-MM-dd\"")
        //
        verifyException(""com.fasterxml.jackson.databind.util.StdDateFormat"", e);
    }
}",0,
project,0,test1522,"public void test1522() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    Locale locale0 = Locale.US;
    StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    assertSame(stdDateFormat1, stdDateFormat0);
}",0,
project,0,test1523,"public void test1523() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    Locale locale0 = Locale.US;
    StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
}",0,assertFalse(stdDateFormat1.isColonIncludedInTimeZone())
project,0,test1624,"public void test1624() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    Boolean boolean0 = Boolean.valueOf(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"");
    StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
    assertFalse(stdDateFormat1.isLenient());
}",0,assertTrue(stdDateFormat1.isLenient())
project,0,test1625,"public void test1625() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    Boolean boolean0 = Boolean.valueOf(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"");
    StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
    assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
}",0,assertTrue(stdDateFormat1.isColonIncludedInTimeZone())
project,0,test1828,"public void test1828() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
    assertSame(stdDateFormat1, stdDateFormat0);
}",0,
project,0,test1929,"public void test1929() throws Throwable {
    TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
    Locale locale0 = Locale.TAIWAN;
    Boolean boolean0 = Boolean.FALSE;
    StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
    stdDateFormat0.setTimeZone(timeZone0);
    assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
}",0,assertTrue(stdDateFormat0.isColonIncludedInTimeZone())
project,0,test1930,"public void test1930() throws Throwable {
    TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
    Locale locale0 = Locale.TAIWAN;
    Boolean boolean0 = Boolean.FALSE;
    StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
    stdDateFormat0.setTimeZone(timeZone0);
    assertFalse(stdDateFormat0.isLenient());
}",0,assertTrue(stdDateFormat0.isLenient())
project,0,test2031,"public void test2031() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    TimeZone timeZone0 = TimeZone.getTimeZone(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"");
    stdDateFormat0.instance.setTimeZone(timeZone0);
    assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
}",0,assertTrue(stdDateFormat0.isColonIncludedInTimeZone())
project,0,test2132,"public void test2132() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    stdDateFormat0.setLenient(false);
    assertFalse(stdDateFormat0.isLenient());
}",0,assertFalse(stdDateFormat0.isLenient())
project,0,test2233,"public void test2233() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    // Undeclared exception!
    try {
        stdDateFormat0.parse(""0000-00-00T00:00"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No match available
        //
        verifyException(""java.util.regex.Matcher"", e);
    }
}",0,
project,0,test2334,"public void test2334() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    try {
        stdDateFormat0.parse(""="");
        fail(""Expecting exception: ParseException"");
    } catch (ParseException e) {
        //
        // Cannot parse date \""=\"": not compatible with any of standard forms (\""yyyy-MM-dd'T'HH:mm:ss.SSSZ\"", \""yyyy-MM-dd'T'HH:mm:ss.SSS\"", \""EEE, dd MMM yyyy HH:mm:ss zzz\"", \""yyyy-MM-dd\"")
        //
        verifyException(""com.fasterxml.jackson.databind.util.StdDateFormat"", e);
    }
}",0,
project,0,test2839,"public void test2839() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    String string0 = stdDateFormat0.instance.toPattern();
    assertEquals(""[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]"", string0);
}",0,
project,0,test2940,"public void test2940() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
    assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
}",0,assertFalse(stdDateFormat0.isColonIncludedInTimeZone())
project,0,test2941,"public void test2941() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
    assertTrue(boolean0);
}",0,
project,0,test3042,"public void test3042() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    try {
        stdDateFormat0.parse(""00,G-00-00T00:W0"");
        fail(""Expecting exception: ParseException"");
    } catch (ParseException e) {
        //
        // Cannot parse date \""00,G-00-00T00:W0\"": not compatible with any of standard forms (\""yyyy-MM-dd'T'HH:mm:ss.SSSZ\"", \""yyyy-MM-dd'T'HH:mm:ss.SSS\"", \""EEE, dd MMM yyyy HH:mm:ss zzz\"", \""yyyy-MM-dd\"")
        //
        verifyException(""com.fasterxml.jackson.databind.util.StdDateFormat"", e);
    }
}",0,
project,0,test3143,"public void test3143() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    try {
        stdDateFormat0.parse(""2.2250738585072012e-308"");
        fail(""Expecting exception: ParseException"");
    } catch (ParseException e) {
        //
        // Cannot parse date \""2.2250738585072012e-308\"": not compatible with any of standard forms (\""yyyy-MM-dd'T'HH:mm:ss.SSSZ\"", \""yyyy-MM-dd'T'HH:mm:ss.SSS\"", \""EEE, dd MMM yyyy HH:mm:ss zzz\"", \""yyyy-MM-dd\"")
        //
        verifyException(""com.fasterxml.jackson.databind.util.StdDateFormat"", e);
    }
}",0,
project,0,test3244,"public void test3244() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    try {
        stdDateFormat0.parse(""0000-u00-00T00:00"");
        fail(""Expecting exception: ParseException"");
    } catch (ParseException e) {
        //
        // Cannot parse date \""0000-u00-00T00:00\"": not compatible with any of standard forms (\""yyyy-MM-dd'T'HH:mm:ss.SSSZ\"", \""yyyy-MM-dd'T'HH:mm:ss.SSS\"", \""EEE, dd MMM yyyy HH:mm:ss zzz\"", \""yyyy-MM-dd\"")
        //
        verifyException(""com.fasterxml.jackson.databind.util.StdDateFormat"", e);
    }
}",0,
project,0,test3345,"public void test3345() throws Throwable {
    StdDateFormat stdDateFormat0 = new StdDateFormat();
    try {
        stdDateFormat0.parse(""00=0-00-00"");
        fail(""Expecting exception: ParseException"");
    } catch (ParseException e) {
        //
        // Cannot parse date \""00=0-00-00\"": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? null)
        //
        verifyException(""com.fasterxml.jackson.databind.util.StdDateFormat"", e);
    }
}",0,
project,0,test3446,"public void test3446() throws Throwable {
    StdDateFormat stdDateFormat0 = StdDateFormat.instance;
    Locale locale0 = Locale.JAPAN;
    try {
        stdDateFormat0.parse(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"");
        fail(""Expecting exception: ParseException"");
    } catch (ParseException e) {
        //
        // Cannot parse date \""yyyy-MM-dd'T'HH:mm:ss.SSSZ\"": not compatible with any of standard forms (\""yyyy-MM-dd'T'HH:mm:ss.SSSZ\"", \""yyyy-MM-dd'T'HH:mm:ss.SSS\"", \""EEE, dd MMM yyyy HH:mm:ss zzz\"", \""yyyy-MM-dd\"")
        //
        verifyException(""com.fasterxml.jackson.databind.util.StdDateFormat"", e);
    }
}",0,
project,0,test3547,"public void test3547() throws Throwable {
    Integer integer0 = new Integer(5);
    boolean boolean0 = StdDateFormat._equals((Integer) null, integer0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
