/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 00:18:41 GMT 2024
 */
package com.fasterxml.jackson.databind.module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Type;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class SimpleAbstractTypeResolver_ESTest extends SimpleAbstractTypeResolver_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        JavaType javaType0 = simpleAbstractTypeResolver0.resolveAbstractType((DeserializationConfig) null, (JavaType) null);
        assertNotNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        Class<Object> class0 = Object.class;
        simpleAbstractTypeResolver0.addMapping(class0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        Class<Object> class0 = Object.class;
        Class<Integer> class1 = Integer.TYPE;
        simpleAbstractTypeResolver0.addMapping(class0, (Class<?>) class1);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        Class<Object> class0 = Object.class;
        Class<String> class1 = String.class;
        simpleAbstractTypeResolver0.addMapping(class0, (Class<?>) class1);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
        Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
        SimpleAbstractTypeResolver simpleAbstractTypeResolver1 = simpleAbstractTypeResolver0.addMapping(class1, (Class<? extends ObjectIdResolver>) class2);
        CollectionType collectionType0 = CollectionType.construct(class1, typeBindings0.UNBOUND);
        JavaType javaType0 = simpleAbstractTypeResolver1.findTypeMapping((DeserializationConfig) null, collectionType0);
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
        Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
        SimpleAbstractTypeResolver simpleAbstractTypeResolver1 = simpleAbstractTypeResolver0.addMapping(class1, (Class<? extends ObjectIdResolver>) class2);
        CollectionType collectionType0 = CollectionType.construct(class1, typeBindings0.UNBOUND);
        JavaType javaType0 = simpleAbstractTypeResolver1.findTypeMapping((DeserializationConfig) null, collectionType0);
        javaType0.isConcrete();
        assertFalse(javaType0.isConcrete());
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        JavaType javaType0 = typeFactory0.constructType((Type) class0, typeBindings0);
        JavaType javaType1 = simpleAbstractTypeResolver0.findTypeMapping((DeserializationConfig) null, javaType0);
    }
}
