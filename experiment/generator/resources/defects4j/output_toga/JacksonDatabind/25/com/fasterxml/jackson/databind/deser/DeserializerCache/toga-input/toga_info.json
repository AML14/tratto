{
  "test1212" : {
    "methodSignature" : "public ObjectReader readerFor(JavaType type)",
    "methodName" : "readerFor",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;\n    Class<Object> class1 = Object.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);\n    ArrayType arrayType0 = ArrayType.construct(mapType0, mapType0, class1);\n    MapLikeType mapLikeType0 = mapType0.withContentValueHandler(arrayType0);\n    objectMapper0.readerFor((JavaType) mapLikeType0);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "public ObjectReader readerFor(JavaType type)",
    "methodName" : "readerFor",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<SerializationFeature> class0 = SerializationFeature.class;\n    SimpleType simpleType0 = SimpleType.construct(class0);\n    ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public ObjectReader readerFor(JavaType type)",
    "methodName" : "readerFor",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;\n    SimpleType simpleType0 = SimpleType.construct(class0);\n    ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();\n    ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) simpleType0);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public ObjectReader readerFor(JavaType type)",
    "methodName" : "readerFor",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;\n    objectMapper0.configure(mapperFeature0, true);\n    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;\n    SimpleType simpleType0 = SimpleType.construct(class0);\n    objectMapper0.readerFor((JavaType) simpleType0);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "Object writeReplace()",
    "methodName" : "writeReplace",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    Object object0 = deserializerCache0.writeReplace();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public ObjectReader readerFor(JavaType type)",
    "methodName" : "readerFor",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);\n    ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) mapType0);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public ObjectReader readerFor(JavaType type)",
    "methodName" : "readerFor",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<MapType> class0 = MapType.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) collectionLikeType0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public boolean canDeserialize(JavaType type)",
    "methodName" : "canDeserialize",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    JavaType javaType0 = TypeFactory.unknownType();\n    objectMapper0.readerFor(javaType0);\n    boolean boolean0 = objectMapper0.canDeserialize(javaType0);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public boolean hasValueDeserializerFor(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
    "methodName" : "hasValueDeserializerFor",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    deserializerCache0.hasValueDeserializerFor(defaultDeserializationContext_Impl0, beanDeserializerFactory0, (JavaType) null);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "protected JsonDeserializer<Object> _handleUnknownValueDeserializer(JavaType type) throws JsonMappingException",
    "methodName" : "_handleUnknownValueDeserializer",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    Class<Module> class0 = Module.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    deserializerCache0._handleUnknownValueDeserializer(simpleType0);\n}",
    "testName" : "test1616"
  },
  "test1414" : {
    "methodSignature" : "public ObjectReader readerFor(JavaType type)",
    "methodName" : "readerFor",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<NullNode> class0 = NullNode.class;\n    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);\n    ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) arrayType0);\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "public ObjectReader readerFor(JavaType type)",
    "methodName" : "readerFor",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;\n    Class<MissingNode> class1 = MissingNode.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);\n    MapLikeType mapLikeType0 = mapType0.withKeyValueHandler(class0);\n    objectMapper0.readerFor((JavaType) mapLikeType0);\n}",
    "testName" : "test1515"
  },
  "test000" : {
    "methodSignature" : "public int cachedDeserializersCount()",
    "methodName" : "cachedDeserializersCount",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    int int0 = deserializerCache0.cachedDeserializersCount();\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public void flushCachedDeserializers()",
    "methodName" : "flushCachedDeserializers",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    DeserializerCache deserializerCache0 = new DeserializerCache();\n    deserializerCache0.flushCachedDeserializers();\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "public ObjectReader readerFor(JavaType type)",
    "methodName" : "readerFor",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;\n    Class<Object> class1 = Object.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);\n    ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) mapType0);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public boolean canDeserialize(JavaType type)",
    "methodName" : "canDeserialize",
    "className" : "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ShortNode> class0 = ShortNode.class;\n    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);\n    Class<CollectionType> class1 = CollectionType.class;\n    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, typeBindings0.UNBOUND, typeBindings0.UNBOUND);\n    boolean boolean0 = objectMapper0.canDeserialize((JavaType) mapLikeType0);\n}",
    "testName" : "test088"
  }
}