/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 00:13:00 GMT 2024
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BasicDeserializerFactory_ESTest extends BasicDeserializerFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        beanDeserializerFactory0.withAdditionalDeserializers((Deserializers) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        beanDeserializerFactory0.withDeserializerModifier((BeanDeserializerModifier) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DataTruncation> class0 = DataTruncation.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DeserializerFactoryConfig deserializerFactoryConfig0 = beanDeserializerFactory0.getFactoryConfig();
        deserializerFactoryConfig0.hasDeserializerModifiers();
        assertTrue(deserializerFactoryConfig0.hasDeserializerModifiers());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
        deserializerFactory0.equals((Object) beanDeserializerFactory0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
        beanDeserializerFactory0._valueInstantiatorInstance((DeserializationConfig) null, (Annotated) null, class0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        ValueInstantiator valueInstantiator0 = beanDeserializerFactory0._valueInstantiatorInstance((DeserializationConfig) null, (Annotated) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        ValueInstantiator valueInstantiator0 = beanDeserializerFactory0._valueInstantiatorInstance((DeserializationConfig) null, (Annotated) null, jsonLocationInstantiator0);
        valueInstantiator0.canCreateFromBoolean();
        assertTrue(valueInstantiator0.canCreateFromBoolean());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        beanDeserializerFactory0._valueInstantiatorInstance((DeserializationConfig) null, (Annotated) null, beanDeserializerFactory0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        AnnotatedConstructor annotatedConstructor0 = annotatedClass0.getDefaultConstructor();
        PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        boolean boolean0 = beanDeserializerFactory0._checkIfCreatorPropertyBased(annotationIntrospector0, annotatedConstructor0, pOJOPropertyBuilder0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        AnnotatedConstructor annotatedConstructor0 = annotatedClass0.getDefaultConstructor();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((PropertyName) null, annotationIntrospector0, true);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        boolean boolean0 = beanDeserializerFactory0._checkIfCreatorPropertyBased(annotationIntrospector0, annotatedConstructor0, pOJOPropertyBuilder0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        AnnotatedConstructor annotatedConstructor0 = annotatedClass0.getDefaultConstructor();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        boolean boolean0 = beanDeserializerFactory0._checkIfCreatorPropertyBased(annotationIntrospector0, annotatedConstructor0, pOJOPropertyBuilder0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Class<ArrayBlockingQueue> class0 = ArrayBlockingQueue.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonNodeFactory0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        PropertyName propertyName0 = beanDeserializerFactory0._findParamName((AnnotatedParameter) null, (AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        Class<BinaryNode> class0 = BinaryNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) sQLTransientConnectionException0, (Object) null);
        CollectionType collectionType0 = CollectionType.construct(class0, referenceType0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionType0, annotationMap0, 309);
        PropertyName propertyName0 = beanDeserializerFactory0._findParamName(annotatedParameter0, (AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        PropertyName propertyName0 = beanDeserializerFactory0._findImplicitParamName((AnnotatedParameter) null, annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        PropertyName propertyName0 = beanDeserializerFactory0._findExplicitParamName((AnnotatedParameter) null, annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (Type) null, annotationMap0, (-2));
        PropertyName propertyName0 = beanDeserializerFactory0._findExplicitParamName(annotatedParameter0, (AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (Type) null, annotationMap0, (-3712));
        PropertyName propertyName0 = beanDeserializerFactory0._findExplicitParamName(annotatedParameter0, annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        boolean boolean0 = beanDeserializerFactory0._hasExplicitParamName((AnnotatedParameter) null, annotationIntrospector0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (Type) null, annotationMap0, (-3702));
        boolean boolean0 = beanDeserializerFactory0._hasExplicitParamName(annotatedParameter0, annotationIntrospector0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (Type) null, annotationMap0, (-2594));
        boolean boolean0 = beanDeserializerFactory0._hasExplicitParamName(annotatedParameter0, (AnnotationIntrospector) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        MockIOException mockIOException0 = new MockIOException();
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.com.fasterxml.jackson.databind.node.BooleanNode", mockIOException0);
        SQLWarning sQLWarning0 = new SQLWarning("JSON", sQLSyntaxErrorException0);
        BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(batchUpdateException0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionType collectionType0 = beanDeserializerFactory0._mapAbstractCollectionType(javaType0, (DeserializationConfig) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        beanDeserializerFactory0.createCollectionLikeDeserializer(defaultDeserializationContext_Impl0, collectionType0, (BeanDescription) null);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        Class<SQLDataException> class0 = SQLDataException.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        ObjectReader objectReader1 = objectReader0.forType((JavaType) mapLikeType0);
        objectReader1.equals((Object) objectReader0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper_DefaultTyping0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
        ConcurrentHashMap<POJONode, TokenBuffer> concurrentHashMap0 = new ConcurrentHashMap<POJONode, TokenBuffer>();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(concurrentHashMap0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        ObjectReader objectReader0 = objectMapper1.readerForUpdating(jsonFactory0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(beanDeserializerFactory0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
        Class<ConcurrentSkipListMap> class1 = ConcurrentSkipListMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class1, class0, class0);
        ObjectReader objectReader1 = objectReader0.forType((JavaType) mapType0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JavaType javaType0 = TypeFactory.unknownType();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        beanDeserializerFactory1.createBeanDeserializer(defaultDeserializationContext_Impl0, javaType0, (BeanDescription) null);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        AtomicReference<NamedType> atomicReference0 = new AtomicReference<NamedType>((NamedType) null);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(atomicReference0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JavaType javaType0 = TypeFactory.unknownType();
        Class<TokenBuffer> class0 = TokenBuffer.class;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, javaType0, (Object) beanDeserializerFactory0, (Object) beanDeserializerFactory0);
        JsonDeserializer<Object> jsonDeserializer0 = beanDeserializerFactory0.createBeanDeserializer(defaultDeserializationContext_Impl0, referenceType0, (BeanDescription) null);
        jsonDeserializer0.isCachable();
        assertTrue(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        Deserializers.Base deserializers_Base0 = new Deserializers.Base();
        DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonDeserializer<Object> jsonDeserializer0 = beanDeserializerFactory0.createBeanDeserializer(defaultDeserializationContext_Impl0, simpleType0, (BeanDescription) null);
        jsonDeserializer0.isCachable();
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        Deserializers.Base deserializers_Base0 = new Deserializers.Base();
        DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        beanDeserializerFactory0.createEnumDeserializer(defaultDeserializationContext_Impl0, simpleType0, (BeanDescription) null);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        Deserializers.Base deserializers_Base0 = new Deserializers.Base();
        DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        JsonDeserializer<?> jsonDeserializer0 = beanDeserializerFactory0.createTreeDeserializer((DeserializationConfig) null, simpleType0, (BeanDescription) null);
        jsonDeserializer0.isCachable();
        assertFalse(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        ObjectReader objectReader1 = objectReader0.forType(class0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        Class<AnnotatedParameter> class0 = AnnotatedParameter.class;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
        SimpleType simpleType0 = SimpleType.construct(class0);
        beanDeserializerFactory0.resolveType(defaultDeserializationContext_Impl0, basicBeanDescription0, simpleType0, (AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LongNode> class0 = LongNode.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        beanDeserializerFactory0._findJsonValueFor((DeserializationConfig) null, javaType0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotatedMethod annotatedMethod0 = beanDeserializerFactory0._findJsonValueFor((DeserializationConfig) null, (JavaType) null);
        assertNotNull(annotatedMethod0);
    }
}
