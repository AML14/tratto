project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
    JavaType javaType0 = simpleAbstractTypeResolver0.resolveAbstractType((DeserializationConfig) null, (JavaType) null);
    assertNull(javaType0);
}",0,assertNotNull(javaType0)
project,0,test11,"public void test11() throws Throwable {
    SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
    Class<Object> class0 = Object.class;
    // Undeclared exception!
    try {
        simpleAbstractTypeResolver0.addMapping(class0, (Class<?>) class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not add mapping from class to itself
        //
        verifyException(""com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver"", e);
    }
}",0,
project,0,test22,"public void test22() throws Throwable {
    SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
    Class<Object> class0 = Object.class;
    Class<Integer> class1 = Integer.TYPE;
    // Undeclared exception!
    try {
        simpleAbstractTypeResolver0.addMapping(class0, (Class<?>) class1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not add mapping from class java.lang.Object to int, as latter is not a subtype of former
        //
        verifyException(""com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver"", e);
    }
}",0,
project,0,test33,"public void test33() throws Throwable {
    SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
    Class<Object> class0 = Object.class;
    Class<String> class1 = String.class;
    // Undeclared exception!
    try {
        simpleAbstractTypeResolver0.addMapping(class0, (Class<?>) class1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not add mapping from class java.lang.Object since it is not abstract
        //
        verifyException(""com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver"", e);
    }
}",0,
project,0,test44,"public void test44() throws Throwable {
    SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Map> class0 = Map.class;
    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
    Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
    Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
    SimpleAbstractTypeResolver simpleAbstractTypeResolver1 = simpleAbstractTypeResolver0.addMapping(class1, (Class<? extends ObjectIdResolver>) class2);
    CollectionType collectionType0 = CollectionType.construct(class1, typeBindings0.UNBOUND);
    JavaType javaType0 = simpleAbstractTypeResolver1.findTypeMapping((DeserializationConfig) null, collectionType0);
    assertNotNull(javaType0);
}",0,
project,0,test45,"public void test45() throws Throwable {
    SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Map> class0 = Map.class;
    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
    Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
    Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
    SimpleAbstractTypeResolver simpleAbstractTypeResolver1 = simpleAbstractTypeResolver0.addMapping(class1, (Class<? extends ObjectIdResolver>) class2);
    CollectionType collectionType0 = CollectionType.construct(class1, typeBindings0.UNBOUND);
    JavaType javaType0 = simpleAbstractTypeResolver1.findTypeMapping((DeserializationConfig) null, collectionType0);
    assertTrue(javaType0.isConcrete());
}",0,assertFalse(javaType0.isConcrete())
project,0,test56,"public void test56() throws Throwable {
    SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Map> class0 = Map.class;
    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
    JavaType javaType0 = typeFactory0.constructType((Type) class0, typeBindings0);
    JavaType javaType1 = simpleAbstractTypeResolver0.findTypeMapping((DeserializationConfig) null, javaType0);
    assertNull(javaType1);
}",0,
