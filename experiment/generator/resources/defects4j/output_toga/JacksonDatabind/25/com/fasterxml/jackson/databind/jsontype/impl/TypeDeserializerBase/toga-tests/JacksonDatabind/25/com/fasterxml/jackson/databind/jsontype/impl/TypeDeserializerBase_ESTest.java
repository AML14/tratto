/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 00:18:26 GMT 2024
 */
package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.time.chrono.HijrahEra;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeDeserializerBase_ESTest extends TypeDeserializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, (TypeFactory) null);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "", true, class0);
        String string0 = asPropertyTypeDeserializer0.getPropertyName();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, (TypeFactory) null);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "", false, class0);
        TypeIdResolver typeIdResolver0 = asPropertyTypeDeserializer0.getTypeIdResolver();
        typeIdResolver0.getMechanism();
        assertNotNull(typeIdResolver0.getMechanism());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, (TypeFactory) null);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "", true, class0);
        String string0 = asPropertyTypeDeserializer0.toString();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, (TypeFactory) null);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "g/", false, class0);
        String string0 = asPropertyTypeDeserializer0.baseTypeName();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "$wF7hhAG|}(X+)", true, class0);
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = null;
        asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((AsExternalTypeDeserializer) null, (BeanProperty) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "&@hi\"j,2&]Tz`7.", true, (Class<?>) null);
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, deserializationContext0, (Object) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, (TypeFactory) null);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "", true, class0);
        Class<?> class1 = asPropertyTypeDeserializer0.getDefaultImpl();
        class1.isSynthetic();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, (TypeFactory) null);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "Z", true, (Class<?>) null);
        Class<?> class1 = asPropertyTypeDeserializer0.getDefaultImpl();
        assertEquals(class0, class1);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "$wF7h<G|}(wX+)", false, class0);
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, (DeserializationContext) null, simpleType0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "$lF7h<Grc|}FwX+)", true, class0);
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, (DeserializationContext) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, (TypeFactory) null);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "'): ", false, class0);
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-8));
        asPropertyTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
        JsonDeserializer<Object> jsonDeserializer0 = asPropertyTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
        jsonDeserializer0.isCachable();
        assertFalse(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        String string0 = "c;v\\u25";
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, string0, false, class0);
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, (DeserializationContext) null, string0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, ":00.000", true, class0);
        asPropertyTypeDeserializer0._handleUnknownTypeId((DeserializationContext) null, ":00.000", (TypeIdResolver) null, simpleType0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Class<HijrahEra> class0 = HijrahEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, (TypeFactory) null);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "", false, class0);
        asPropertyTypeDeserializer0._handleUnknownTypeId((DeserializationContext) null, "", minimalClassNameIdResolver0, simpleType0);
    }
}
