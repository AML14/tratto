project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    DeserializerCache deserializerCache0 = new DeserializerCache();
    int int0 = deserializerCache0.cachedDeserializersCount();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test011,"public void test011() throws Throwable {
    DeserializerCache deserializerCache0 = new DeserializerCache();
    Object object0 = deserializerCache0.writeReplace();
    assertSame(object0, deserializerCache0);
}",1,
project,0,test022,"public void test022() throws Throwable {
    DeserializerCache deserializerCache0 = new DeserializerCache();
    deserializerCache0.flushCachedDeserializers();
}",0,
project,0,test033,"public void test033() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
    ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) mapType0);
    assertNotNull(objectReader0);
}",0,
project,0,test055,"public void test055() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<MapType> class0 = MapType.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) collectionLikeType0);
    assertNotNull(objectReader0);
}",0,
project,0,test066,"public void test066() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
    Class<Object> class1 = Object.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
    ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) mapType0);
    assertNotNull(objectReader0);
}",0,
project,0,test077,"public void test077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JavaType javaType0 = TypeFactory.unknownType();
    objectMapper0.readerFor(javaType0);
    boolean boolean0 = objectMapper0.canDeserialize(javaType0);
    assertTrue(boolean0);
}",1,
project,0,test088,"public void test088() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ShortNode> class0 = ShortNode.class;
    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
    Class<CollectionType> class1 = CollectionType.class;
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, typeBindings0.UNBOUND, typeBindings0.UNBOUND);
    boolean boolean0 = objectMapper0.canDeserialize((JavaType) mapLikeType0);
    assertFalse(boolean0);
}",1,
project,0,test099,"public void test099() throws Throwable {
    DeserializerCache deserializerCache0 = new DeserializerCache();
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        deserializerCache0.hasValueDeserializerFor(defaultDeserializationContext_Impl0, beanDeserializerFactory0, (JavaType) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null JavaType passed
        //
        verifyException(""com.fasterxml.jackson.databind.deser.DeserializerCache"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
    ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) simpleType0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test1111,"public void test1111() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
    objectMapper0.configure(mapperFeature0, true);
    Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    // Undeclared exception!
    try {
        objectMapper0.readerFor((JavaType) simpleType0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // No entry 'knownPropertyNames' found, can't replace
        //
        verifyException(""com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
    Class<Object> class1 = Object.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
    ArrayType arrayType0 = ArrayType.construct(mapType0, mapType0, class1);
    MapLikeType mapLikeType0 = mapType0.withContentValueHandler(arrayType0);
    // Undeclared exception!
    try {
        objectMapper0.readerFor((JavaType) mapLikeType0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // com.fasterxml.jackson.databind.type.ArrayType cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
        //
        verifyException(""com.fasterxml.jackson.databind.deser.BasicDeserializerFactory"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SerializationFeature> class0 = SerializationFeature.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test1414,"public void test1414() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<NullNode> class0 = NullNode.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) arrayType0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test1515,"public void test1515() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
    Class<MissingNode> class1 = MissingNode.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
    MapLikeType mapLikeType0 = mapType0.withKeyValueHandler(class0);
    // Undeclared exception!
    try {
        objectMapper0.readerFor((JavaType) mapLikeType0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Class cannot be cast to com.fasterxml.jackson.databind.KeyDeserializer
        //
        verifyException(""com.fasterxml.jackson.databind.deser.BasicDeserializerFactory"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    DeserializerCache deserializerCache0 = new DeserializerCache();
    Class<Module> class0 = Module.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    try {
        deserializerCache0._handleUnknownValueDeserializer(simpleType0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not find a Value deserializer for abstract type [simple type, class com.fasterxml.jackson.databind.Module]
        //
        verifyException(""com.fasterxml.jackson.databind.deser.DeserializerCache"", e);
    }
}",1,
