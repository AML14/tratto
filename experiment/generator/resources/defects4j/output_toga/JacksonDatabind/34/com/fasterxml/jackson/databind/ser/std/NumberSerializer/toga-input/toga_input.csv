focal_method,test_prefix,docstring
"public boolean usesObjectId() {
    return false;
}","public void test000() throws Throwable {
    Class<BigDecimal> class0 = BigDecimal.class;
    NumberSerializer numberSerializer0 = new NumberSerializer(class0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(serializerProvider0);
    numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(numberSerializer0.usesObjectId());
}","/**
 * Method that can be called to see whether this serializer instance
 * will use Object Id to handle cyclic references.
 */"
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        /* These shouldn't match (as there are more specific ones),
         * but just to be sure:
         */
    } else if (value instanceof Integer) {
        g.writeNumber(value.intValue());
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if ((value instanceof Byte) || (value instanceof Short)) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test011() throws Throwable {
    Class<BigInteger> class0 = BigInteger.class;
    NumberSerializer numberSerializer0 = new NumberSerializer(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BigDecimal bigDecimal0 = new BigDecimal((-1014));
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) bigDecimal0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        /* These shouldn't match (as there are more specific ones),
         * but just to be sure:
         */
    } else if (value instanceof Integer) {
        g.writeNumber(value.intValue());
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if ((value instanceof Byte) || (value instanceof Short)) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test022() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
    Float float0 = new Float(1134.55806);
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) float0, (JsonGenerator) null, serializerProvider0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        /* These shouldn't match (as there are more specific ones),
         * but just to be sure:
         */
    } else if (value instanceof Integer) {
        g.writeNumber(value.intValue());
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if ((value instanceof Byte) || (value instanceof Short)) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test055() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    Long long0 = new Long((-1990L));
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""L"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream0, byteArray0, 1, true);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) long0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 2
        //
        verifyException(""com.fasterxml.jackson.core.io.NumberOutput"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        /* These shouldn't match (as there are more specific ones),
         * but just to be sure:
         */
    } else if (value instanceof Integer) {
        g.writeNumber(value.intValue());
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if ((value instanceof Byte) || (value instanceof Short)) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test066() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    Double double0 = new Double(8.467680811085462);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) double0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        /* These shouldn't match (as there are more specific ones),
         * but just to be sure:
         */
    } else if (value instanceof Integer) {
        g.writeNumber(value.intValue());
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if ((value instanceof Byte) || (value instanceof Short)) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test077() throws Throwable {
    Class<BigInteger> class0 = BigInteger.class;
    NumberSerializer numberSerializer0 = new NumberSerializer(class0);
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) (byte) 0, (JsonGenerator) null, (SerializerProvider) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        /* These shouldn't match (as there are more specific ones),
         * but just to be sure:
         */
    } else if (value instanceof Integer) {
        g.writeNumber(value.intValue());
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if ((value instanceof Byte) || (value instanceof Short)) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test088() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) null, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.System"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        /* These shouldn't match (as there are more specific ones),
         * but just to be sure:
         */
    } else if (value instanceof Integer) {
        g.writeNumber(value.intValue());
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if ((value instanceof Byte) || (value instanceof Short)) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test099() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Short short0 = new Short((short) 1217);
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) short0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"/*
    /**********************************************************
    /* TreeNode implementation
    /**********************************************************
     */
//  public abstract JsonToken asToken();
//  public abstract JsonToken traverse();
//  public abstract JsonToken traverse(ObjectCodec codec);
//  public abstract JsonParser.NumberType numberType();
@Override
public int size() {
    return 0;
}","public void test1010() throws Throwable {
    Class<Double> class0 = Double.class;
    NumberSerializer numberSerializer0 = new NumberSerializer(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonNode jsonNode0 = numberSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
    assertEquals(1, jsonNode0.size());
}",""
"/*
    /**********************************************************
    /* TreeNode implementation
    /**********************************************************
     */
//  public abstract JsonToken asToken();
//  public abstract JsonToken traverse();
//  public abstract JsonToken traverse(ObjectCodec codec);
//  public abstract JsonParser.NumberType numberType();
@Override
public int size() {
    return 0;
}","public void test1111() throws Throwable {
    Class<BigInteger> class0 = BigInteger.class;
    NumberSerializer numberSerializer0 = new NumberSerializer(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonNode jsonNode0 = numberSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
    assertEquals(1, jsonNode0.size());
}",""
"public boolean isUnwrappingSerializer() {
    return false;
}","public void test1212() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(serializerProvider0);
    numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(numberSerializer0.isUnwrappingSerializer());
}","/**
 * Accessor for checking whether this serializer is an
 * ""unwrapping"" serializer; this is necessary to know since
 * it may also require caller to suppress writing of the
 * leading property name.
 */"
"public boolean isUnwrappingSerializer() {
    return false;
}","public void test1313() throws Throwable {
    Class<BigInteger> class0 = BigInteger.class;
    NumberSerializer numberSerializer0 = new NumberSerializer(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
    numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(numberSerializer0.isUnwrappingSerializer());
}","/**
 * Accessor for checking whether this serializer is an
 * ""unwrapping"" serializer; this is necessary to know since
 * it may also require caller to suppress writing of the
 * leading property name.
 */"
