/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 01:44:32 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        Object object0 = new Object();
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, object0, object0);
        StringBuilder stringBuilder0 = new StringBuilder();
        referenceType0.getGenericSignature(stringBuilder0);
        stringBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) class0);
        referenceType0.getReferencedType();
        referenceType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, (Object) null, (Object) null, false);
        boolean boolean0 = referenceType0.isReferenceType();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        String string0 = referenceType0.toString();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        String string0 = referenceType0.toString();
        referenceType0.useStaticType();
        assertFalse(referenceType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        Object object0 = new Object();
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, object0, object0);
        StringBuilder stringBuilder0 = new StringBuilder();
        referenceType0.getErasedSignature(stringBuilder0);
        stringBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        Object object0 = new Object();
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, object0, object0);
        StringBuilder stringBuilder0 = new StringBuilder();
        referenceType0.getErasedSignature(stringBuilder0);
        referenceType0.useStaticType();
        assertFalse(referenceType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Class<Integer> class0 = Integer.class;
        JavaType javaType0 = TypeFactory.unknownType();
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, javaType0, (Object) class0, (Object) javaType0);
        referenceType0.getParameterSource();
        referenceType0.useStaticType();
        assertFalse(referenceType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, class0, true);
        Class<Object> class1 = Object.class;
        JavaType javaType0 = referenceType0._narrow(class1);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Class<Integer> class0 = Integer.class;
        Object object0 = new Object();
        SimpleType simpleType0 = new SimpleType(class0, (-1), object0, object0, true);
        ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, object0, true);
        int int0 = referenceType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, (Object) null, (Object) null, false);
        ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentTypeHandler(simpleType0);
        referenceType1.useStaticType();
        assertFalse(referenceType1.useStaticType());
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentTypeHandler(simpleType0);
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        Class<Integer> class0 = Integer.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class1 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        Class<Object> class2 = Object.class;
        ReferenceType referenceType0 = new ReferenceType(class2, mapType0, class0, class2, true);
        ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler(simpleType0);
        referenceType1.useStaticType();
        assertFalse(referenceType1.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler(simpleType0);
        referenceType1.hasValueHandler();
        assertTrue(referenceType1.hasValueHandler());
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        ReferenceType referenceType1 = new ReferenceType(class0, simpleType0, simpleType0, referenceType0, false);
        ReferenceType referenceType2 = referenceType1.withValueHandler(simpleType0);
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        ReferenceType referenceType1 = new ReferenceType(class0, simpleType0, simpleType0, referenceType0, false);
        ReferenceType referenceType2 = referenceType1.withValueHandler(simpleType0);
        referenceType0.useStaticType();
        assertFalse(referenceType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentValueHandler(referenceType0);
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentValueHandler(referenceType0);
        referenceType1.useStaticType();
        assertFalse(referenceType1.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        Class<String> class0 = String.class;
        Class<Object> class1 = Object.class;
        Integer integer0 = new Integer((-2427));
        SimpleType simpleType0 = new SimpleType(class1, (-2427), class1, integer0, false);
        Object object0 = new Object();
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, object0, (Object) integer0);
        ReferenceType referenceType1 = referenceType0.withContentValueHandler(class1);
        referenceType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        Class<String> class0 = String.class;
        Class<Object> class1 = Object.class;
        Integer integer0 = new Integer((-2427));
        SimpleType simpleType0 = new SimpleType(class1, (-2427), class1, integer0, false);
        Object object0 = new Object();
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, object0, (Object) integer0);
        ReferenceType referenceType1 = referenceType0.withContentValueHandler(class1);
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        ReferenceType referenceType1 = referenceType0.withStaticTyping();
        referenceType1.useStaticType();
        assertFalse(referenceType1.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        ReferenceType referenceType1 = referenceType0.withStaticTyping();
        referenceType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        Class<Integer> class0 = Integer.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class1 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        Class<Object> class2 = Object.class;
        ReferenceType referenceType0 = new ReferenceType(class2, mapType0, class0, class2, true);
        ReferenceType referenceType1 = referenceType0.withStaticTyping();
    }

    @Test(timeout = 4000)
    public void test1725() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, class0, true);
        JavaType javaType0 = referenceType0.containedType(1536);
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, class0, true);
        JavaType javaType0 = referenceType0.containedType(0);
    }

    @Test(timeout = 4000)
    public void test1927() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, (Object) null, (Object) null, false);
        String string0 = referenceType0.containedTypeName(1300);
    }

    @Test(timeout = 4000)
    public void test2028() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) class0);
        String string0 = referenceType0.containedTypeName(0);
        referenceType0.useStaticType();
        assertFalse(referenceType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) class0);
        String string0 = referenceType0.containedTypeName(0);
    }

    @Test(timeout = 4000)
    public void test2131() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        ReferenceType referenceType1 = referenceType0.withTypeHandler(simpleType0);
        boolean boolean0 = referenceType1.equals(referenceType0);
    }

    @Test(timeout = 4000)
    public void test2132() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        ReferenceType referenceType1 = referenceType0.withTypeHandler(simpleType0);
        boolean boolean0 = referenceType1.equals(referenceType0);
        referenceType1.useStaticType();
        assertFalse(referenceType1.useStaticType());
    }

    @Test(timeout = 4000)
    public void test2234() throws Throwable {
        Class<Integer> class0 = Integer.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class1 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        Class<Object> class2 = Object.class;
        ReferenceType referenceType0 = new ReferenceType(class2, mapType0, class0, class2, true);
        boolean boolean0 = referenceType0.equals(referenceType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2335() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, class0, true);
        boolean boolean0 = referenceType0.equals((Object) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2436() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        Object object0 = new Object();
        boolean boolean0 = referenceType0.equals(object0);
        referenceType0.useStaticType();
        assertTrue(referenceType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test2437() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        Object object0 = new Object();
        boolean boolean0 = referenceType0.equals(object0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2538() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<Object> class1 = Object.class;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        Object object0 = new Object();
        ReferenceType referenceType1 = new ReferenceType(class1, referenceType0, object0, "vs.,.vy(0KEO", false);
        boolean boolean0 = referenceType0.equals(referenceType1);
        referenceType0.useStaticType();
        assertFalse(referenceType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test2539() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<Object> class1 = Object.class;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
        Object object0 = new Object();
        ReferenceType referenceType1 = new ReferenceType(class1, referenceType0, object0, "vs.,.vy(0KEO", false);
        boolean boolean0 = referenceType0.equals(referenceType1);
        assertTrue(boolean0);
    }
}
