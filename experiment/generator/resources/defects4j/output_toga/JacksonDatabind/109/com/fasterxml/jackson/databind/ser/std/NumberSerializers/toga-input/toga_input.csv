focal_method,test_prefix,docstring
"/*
    /**********************************************************
    /* TreeNode implementation
    /**********************************************************
     */
//  public abstract JsonToken asToken();
//  public abstract JsonToken traverse();
//  public abstract JsonToken traverse(ObjectCodec codec);
//  public abstract JsonParser.NumberType numberType();
@Override
public int size() {
    return 0;
}","public void test000() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Class<NioPathSerializer> class0 = NioPathSerializer.class;
    NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
    JsonNode jsonNode0 = numberSerializers_FloatSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
    assertEquals(1, jsonNode0.size());
}",""
"@Override
public void serializeWithType(T value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer) throws IOException {
    // NOTE: need not really be string; just indicates ""scalar of some kind""
    WritableTypeId typeIdDef = typeSer.writeTypePrefix(g, typeSer.typeId(value, JsonToken.VALUE_STRING));
    serialize(value, g, provider);
    typeSer.writeTypeSuffix(g, typeIdDef);
}","public void test022() throws Throwable {
    Class<Object> class0 = Object.class;
    NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
    IOContext iOContext0 = new IOContext(bufferRecycler0, coreXMLSerializers_XMLGregorianCalendarSerializer0, false);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""s"", false);
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializers_IntegerSerializer0.serializeWithType(class0, filteringGeneratorDelegate0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Class cannot be cast to java.lang.Integer
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer"", e);
    }
}","/**
 * Default implementation will write type prefix, call regular serialization
 * method (since assumption is that value itself does not need JSON
 * Array or Object start/end markers), and then write type suffix.
 * This should work for most cases; some sub-classes may want to
 * change this behavior.
 */"
"/*
    /**********************************************************
    /* Serialization
    /**********************************************************
     */
@Override
public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider) throws IOException;","public void test033() throws Throwable {
    NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializers_FloatSerializer0.serialize(defaultSerializerProvider_Impl0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl cannot be cast to java.lang.Float
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerializer"", e);
    }
}",""
"/*
    /**********************************************************
    /* Serialization
    /**********************************************************
     */
@Override
public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider) throws IOException;","public void test044() throws Throwable {
    Class<Integer> class0 = Integer.class;
    NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializers_LongSerializer0.serialize(class0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Class cannot be cast to java.lang.Long
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$LongSerializer"", e);
    }
}",""
"/*
    /**********************************************************
    /* Serialization
    /**********************************************************
     */
@Override
public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider) throws IOException;","public void test055() throws Throwable {
    Class<NioPathSerializer> class0 = NioPathSerializer.class;
    NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer(class0);
    NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = NumberSerializers.IntLikeSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializers_IntLikeSerializer0.serialize(numberSerializers_LongSerializer0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // com.fasterxml.jackson.databind.ser.std.NumberSerializers$LongSerializer cannot be cast to java.lang.Number
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer"", e);
    }
}",""
"public boolean usesObjectId() {
    return false;
}","public void test066() throws Throwable {
    NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = new NumberSerializers.IntLikeSerializer();
    assertFalse(numberSerializers_IntLikeSerializer0.usesObjectId());
}","/**
 * Method that can be called to see whether this serializer instance
 * will use Object Id to handle cyclic references.
 */"
"@Override
public void serializeWithType(T value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer) throws IOException {
    // NOTE: need not really be string; just indicates ""scalar of some kind""
    WritableTypeId typeIdDef = typeSer.writeTypePrefix(g, typeSer.typeId(value, JsonToken.VALUE_STRING));
    serialize(value, g, provider);
    typeSer.writeTypeSuffix(g, typeIdDef);
}","public void test077() throws Throwable {
    Class<Integer> class0 = Integer.class;
    NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
    DOMSerializer dOMSerializer0 = new DOMSerializer();
    JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
    JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializers_DoubleSerializer0.serializeWithType(dOMSerializer0, jsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // com.fasterxml.jackson.databind.ext.DOMSerializer cannot be cast to java.lang.Double
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer"", e);
    }
}","/**
 * Default implementation will write type prefix, call regular serialization
 * method (since assumption is that value itself does not need JSON
 * Array or Object start/end markers), and then write type suffix.
 * This should work for most cases; some sub-classes may want to
 * change this behavior.
 */"
"@Override
public int containedTypeCount() {
    return _bindings.size();
}","public void test088() throws Throwable {
    NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = new NumberSerializers.ShortSerializer();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    Class<Byte> class0 = Byte.class;
    Class<DOMSerializer> class1 = DOMSerializer.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    numberSerializers_ShortSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);
    assertEquals(0, resolvedRecursiveType0.containedTypeCount());
}",""
"/*
    /**********************************************************
    /* Serialization
    /**********************************************************
     */
@Override
public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider) throws IOException;","public void test099() throws Throwable {
    NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = NumberSerializers.ShortSerializer.instance;
    Object object0 = new Object();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializers_ShortSerializer0.serialize(object0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Object cannot be cast to java.lang.Short
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", e);
    }
}",""
"public boolean usesObjectId() {
    return false;
}","public void test1010() throws Throwable {
    NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    numberSerializers_FloatSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(numberSerializers_FloatSerializer0.usesObjectId());
}","/**
 * Method that can be called to see whether this serializer instance
 * will use Object Id to handle cyclic references.
 */"
