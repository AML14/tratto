focal_method,test_prefix,docstring
"public boolean isUnwrappingSerializer() {
    return false;
}","public void test000() throws Throwable {
    Class<BigDecimal> class0 = BigDecimal.class;
    NumberSerializer numberSerializer0 = new NumberSerializer(class0);
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(numberSerializer0.isUnwrappingSerializer());
}","/**
 * Accessor for checking whether this serializer is an
 * ""unwrapping"" serializer; this is necessary to know since
 * it may also require caller to suppress writing of the
 * leading property name.
 */"
"public final boolean isJavaLangObject() {
    return _class == Object.class;
}","public void test011() throws Throwable {
    Class<BigInteger> class0 = BigInteger.class;
    NumberSerializer numberSerializer0 = new NumberSerializer(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
    Class<Float> class1 = Float.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
    numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);
    assertFalse(resolvedRecursiveType0.isJavaLangObject());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"@Override
public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {
    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());
    if (format != null) {
        switch(format.getShape()) {
            case STRING:
                // [databind#2264]: Need special handling for `BigDecimal`
                return ToStringSerializer.instance;
            default:
        }
    }
    return this;
}","public void test022() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
    JsonSerializer<?> jsonSerializer0 = numberSerializer0.createContextual(defaultSerializerProvider_Impl0, beanProperty_Bogus0);
    assertSame(numberSerializer0, jsonSerializer0);
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        // These should not occur, as more specific methods should have been called; but
        // just in case let's cover all bases:
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test033() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Float float0 = new Float(0.0F);
    // Undeclared exception!
    try {
        numberSerializer0.instance.serialize((Number) float0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        // These should not occur, as more specific methods should have been called; but
        // just in case let's cover all bases:
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test044() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BigDecimal bigDecimal0 = BigDecimal.ONE;
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) bigDecimal0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        // These should not occur, as more specific methods should have been called; but
        // just in case let's cover all bases:
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test055() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BigInteger bigInteger0 = BigInteger.TEN;
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) bigInteger0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        // These should not occur, as more specific methods should have been called; but
        // just in case let's cover all bases:
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test066() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Long long0 = new Long(0L);
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) long0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        // These should not occur, as more specific methods should have been called; but
        // just in case let's cover all bases:
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test077() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    Double double0 = new Double(0.0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) double0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        // These should not occur, as more specific methods should have been called; but
        // just in case let's cover all bases:
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test088() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Integer integer0 = new Integer(1);
    // Undeclared exception!
    try {
        numberSerializer0.instance.serialize((Number) integer0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        // These should not occur, as more specific methods should have been called; but
        // just in case let's cover all bases:
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test099() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Byte byte0 = new Byte((byte) 1);
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) byte0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        // These should not occur, as more specific methods should have been called; but
        // just in case let's cover all bases:
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test1010() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) null, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.System"", e);
    }
}",""
"@Override
public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException {
    // should mostly come in as one of these two:
    if (value instanceof BigDecimal) {
        g.writeNumber((BigDecimal) value);
    } else if (value instanceof BigInteger) {
        g.writeNumber((BigInteger) value);
        // These should not occur, as more specific methods should have been called; but
        // just in case let's cover all bases:
    } else if (value instanceof Long) {
        g.writeNumber(value.longValue());
    } else if (value instanceof Double) {
        g.writeNumber(value.doubleValue());
    } else if (value instanceof Float) {
        g.writeNumber(value.floatValue());
    } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {
        // doesn't need to be cast to smaller numbers
        g.writeNumber(value.intValue());
    } else {
        // We'll have to use fallback ""untyped"" number write method
        g.writeNumber(value.toString());
    }
}","public void test1111() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    Short short0 = new Short((short) 0);
    // Undeclared exception!
    try {
        numberSerializer0.serialize((Number) short0, (JsonGenerator) null, serializerProvider0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", e);
    }
}",""
"/*
    /**********************************************************
    /* TreeNode implementation
    /**********************************************************
     */
//  public abstract JsonToken asToken();
//  public abstract JsonToken traverse();
//  public abstract JsonToken traverse(ObjectCodec codec);
//  public abstract JsonParser.NumberType numberType();
@Override
public int size() {
    return 0;
}","public void test1212() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonNode jsonNode0 = numberSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
    assertEquals(1, jsonNode0.size());
}",""
"/*
    /**********************************************************
    /* TreeNode implementation
    /**********************************************************
     */
//  public abstract JsonToken asToken();
//  public abstract JsonToken traverse();
//  public abstract JsonToken traverse(ObjectCodec codec);
//  public abstract JsonParser.NumberType numberType();
@Override
public int size() {
    return 0;
}","public void test1313() throws Throwable {
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Class<BigInteger> class0 = BigInteger.class;
    NumberSerializer numberSerializer0 = new NumberSerializer(class0);
    JsonNode jsonNode0 = numberSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
    assertEquals(1, jsonNode0.size());
}",""
"public boolean usesObjectId() {
    return false;
}","public void test1414() throws Throwable {
    NumberSerializer numberSerializer0 = NumberSerializer.instance;
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    assertFalse(numberSerializer0.usesObjectId());
}","/**
 * Method that can be called to see whether this serializer instance
 * will use Object Id to handle cyclic references.
 */"
