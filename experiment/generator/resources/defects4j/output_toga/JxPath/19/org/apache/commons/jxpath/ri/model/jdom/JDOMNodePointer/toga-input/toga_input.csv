focal_method,test_prefix,docstring
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test0000() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    jDOMNodePointer0.asPath();
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test0011() throws Throwable {
    Locale locale0 = Locale.CHINESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, ""org.apache.commons.jxpath.ri.compiler.NodeNameTest@0000000015"");
    jDOMNodePointer0.asPath();
}",""
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test0022() throws Throwable {
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
    jDOMNodePointer0.getRootNode();
    jDOMNodePointer0.getValue();
}",""
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        String namespaceUri = getNamespaceResolver().getNamespaceURI(prefix);
        if (namespaceUri == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        Namespace ns = Namespace.getNamespace(prefix, namespaceUri);
        Attribute attr = element.getAttribute(name.getName(), ns);
        if (attr == null) {
            element.setAttribute(name.getName(), """", ns);
        }
    } else {
        Attribute attr = element.getAttribute(name.getName());
        if (attr == null) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test0033() throws Throwable {
    Locale locale0 = Locale.FRENCH;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) ""HV._M"");
    QName qName0 = new QName(""http://www.w3.org/2000/xmlns/"", ""http://www.w3.org/2000/xmlns/"");
    jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
}",""
"public QName getName() {
    String ns = null;
    String ln = null;
    if (node instanceof Element) {
        ns = ((Element) node).getNamespacePrefix();
        if (ns != null && ns.equals("""")) {
            ns = null;
        }
        ln = ((Element) node).getName();
    } else if (node instanceof ProcessingInstruction) {
        ln = ((ProcessingInstruction) node).getTarget();
    }
    return new QName(ns, ln);
}","public void test0044() throws Throwable {
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
    jDOMNodePointer0.getName();
}",""
"public NodeIterator namespaceIterator() {
    return new JDOMNamespaceIterator(this);
}","public void test0055() throws Throwable {
    Locale locale0 = Locale.FRENCH;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, ""count"");
    jDOMNodePointer0.namespaceIterator();
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix.equals(""xml"")) {
        return Namespace.XML_NAMESPACE.getURI();
    }
    Element element = null;
    if (node instanceof Document) {
        element = ((Document) node).getRootElement();
    }
    if (node instanceof Element) {
        element = (Element) node;
    }
    if (element == null) {
        return null;
    }
    Namespace ns = element.getNamespace(prefix);
    return ns == null ? null : ns.getURI();
}","public void test0066() throws Throwable {
    String string0 = JDOMNodePointer.XML_NAMESPACE_URI;
    Locale locale0 = Locale.CANADA_FRENCH;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(""http://www.w3.org/XML/1998/namespace"", locale0, ""http://www.w3.org/XML/1998/namespace"");
    jDOMNodePointer0.getNamespaceURI(""http://www.w3.org/XML/1998/namespace"");
}",""
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test0077() throws Throwable {
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
    QName qName0 = jDOMNodePointer0.getName();
    jDOMNodePointer0.attributeIterator(qName0);
    jDOMNodePointer0.isLeaf();
}",""
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test0088() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    jDOMNodePointer0.getValue();
}",""
"public boolean isLanguage(String lang) {
    String current = getLanguage();
    return current == null ? super.isLanguage(lang) : current.toUpperCase(Locale.ENGLISH).startsWith(lang.toUpperCase(Locale.ENGLISH));
}","public void test0099() throws Throwable {
    Locale locale0 = Locale.PRC;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    jDOMNodePointer0.isLanguage(""http://www.w3.org/2000/xmlns/"");
}","/**
 * Returns true if the xml:lang attribute for the current node
 * or its parent has the specified prefix <i>lang</i>.
 * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.
 * @param lang to compare
 * @return true if this element uses the specified language.
 */"
"public int getLength() {
    return 1;
}","public void test01010() throws Throwable {
    QName qName0 = new QName(""HV._M"", ""HV._M"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeNameTest0, (Locale) null);
    jDOMNodePointer0.getLength();
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test01111() throws Throwable {
    Locale locale0 = Locale.ROOT;
    JDOMNodePointer.getPrefix(locale0);
}","/**
 * Get the prefix from a given node.
 * @param node to check
 * @return String
 */"
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test01212() throws Throwable {
    CDATA cDATA0 = new CDATA(""\""w;|Uu(SUDL9"");
    Locale locale0 = Locale.ITALIAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, ""\""w;|Uu(SUDL9"");
    jDOMNodePointer0.getValue();
}",""
"public void remove() {
    Element parent = nodeParent(node);
    if (parent == null) {
        throw new JXPathException(""Cannot remove root JDOM node"");
    }
    parent.getContent().remove(node);
}","public void test01313() throws Throwable {
    Locale locale0 = Locale.CANADA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    // Undeclared exception!
    try {
        jDOMNodePointer0.remove();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot remove root JDOM node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index) {
    if (index == WHOLE_COLLECTION) {
        index = 0;
    }
    boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);
    if (success) {
        NodeTest nodeTest;
        String prefix = name.getPrefix();
        String namespaceURI = prefix == null ? null : context.getNamespaceURI(prefix);
        nodeTest = new NodeNameTest(name, namespaceURI);
        NodeIterator it = childIterator(nodeTest, false, null);
        if (it != null && it.setPosition(index + 1)) {
            return it.getNodePointer();
        }
    }
    throw new JXPathAbstractFactoryException(""Factory could not create "" + ""a child node for path: "" + asPath() + ""/"" + name + ""["" + (index + 1) + ""]"");
}","public void test01414() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variablePointer0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, (Object) null);
    jDOMNodePointer0.createChild(jXPathContext0, (QName) null, (-2725));
}",""
"public static String getLocalName(Object node) {
    if (node instanceof Element) {
        return ((Element) node).getName();
    }
    if (node instanceof Attribute) {
        return ((Attribute) node).getName();
    }
    return null;
}","public void test01515() throws Throwable {
    Locale locale0 = Locale.TAIWAN;
    JDOMNodePointer.getLocalName(locale0);
}","/**
 * Get the local name of the specified node.
 * @param node to check
 * @return String local name
 */"
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test01616() throws Throwable {
    Locale locale0 = Locale.TAIWAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    jDOMNodePointer0.isLeaf();
}",""
"public String getNamespaceURI() {
    return getNamespaceURI(node);
}","public void test01717() throws Throwable {
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""NMLE"", ""NMLE"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, (Locale) null);
    jDOMNodePointer0.getNamespaceURI();
}",""
"public String getNamespaceURI() {
    return getNamespaceURI(node);
}","public void test01818() throws Throwable {
    Locale locale0 = Locale.FRENCH;
    Element element0 = new Element(""HV._M"", ""HV._M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.getNamespaceURI();
}",""
"public int hashCode() {
    return node.hashCode();
}","public void test01919() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    Element element0 = new Element(""HV._"", ""HV._"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.hashCode();
}",""
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof JDOMNodePointer)) {
        return false;
    }
    JDOMNodePointer other = (JDOMNodePointer) object;
    return node == other.node;
}","public void test02020() throws Throwable {
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
    jDOMNodePointer0.equals((Object) null);
}",""
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test02121() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    // Undeclared exception!
    try {
        jDOMNodePointer0.setValue(locale0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.util.Locale cannot be cast to org.jdom.Element
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public NodePointer namespacePointer(String prefix) {
    return new JDOMNamespacePointer(this, prefix);
}","public void test02222() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    jDOMNodePointer0.namespacePointer(""<<unknown namespace>>"");
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test02323() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test02424() throws Throwable {
    CDATA cDATA0 = new CDATA(""\""w;|Uu(SUDL9"");
    Locale locale0 = Locale.ITALIAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    jDOMNodePointer0.asPath();
}",""
"public boolean testNode(NodeTest test) {
    return testNode(this, node, test);
}","public void test02525() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
    jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test02626() throws Throwable {
    JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) null);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public boolean isCollection() {
    return false;
}","public void test02727() throws Throwable {
    Locale locale0 = Locale.PRC;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    jDOMNodePointer0.isCollection();
}",""
"public synchronized NamespaceResolver getNamespaceResolver() {
    if (localNamespaceResolver == null) {
        localNamespaceResolver = new NamespaceResolver(super.getNamespaceResolver());
        localNamespaceResolver.setNamespaceContextPointer(this);
    }
    return localNamespaceResolver;
}","public void test02828() throws Throwable {
    Locale locale0 = Locale.KOREA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    jDOMNodePointer0.getNamespaceResolver();
}",""
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test02929() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    Comment comment0 = new Comment(""<<unknown namespace>>"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, comment0);
    jDOMNodePointer0.getValue();
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test03030() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""<<unknown namespace>>"");
    JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) null, (NodeTest) processingInstructionTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public void remove() {
    Element parent = nodeParent(node);
    if (parent == null) {
        throw new JXPathException(""Cannot remove root JDOM node"");
    }
    parent.getContent().remove(node);
}","public void test03131() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    Comment comment0 = new Comment(""<<unknown namespace>>"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, comment0);
    jDOMNodePointer0.remove();
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test03232() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, ""<<unknown namespace>>"");
    JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) null, (NodeTest) nodeNameTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test03333() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(""f^wYf>GC6"", locale0, ""f^wYf>GC6"");
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, locale0, ""<<unknown namespace>>"");
    jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer1);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test03434() throws Throwable {
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, jDOMNodePointer0);
    jDOMNodePointer1.asPath();
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {
    NodePointer ptr = createChild(context, name, index);
    ptr.setValue(value);
    return ptr;
}","public void test03535() throws Throwable {
    QName qName0 = null;
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) ""<<unknown namespace>>"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, (Object) null);
    // Undeclared exception!
    try {
        jDOMNodePointer0.createChild(jXPathContext0, (QName) null, Integer.MIN_VALUE, (Object) variablePointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Factory is not set on the JXPathContext - cannot create path: $null
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",""
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test03636() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Element element0 = new Element(""Ha_"", ""Ha_"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.getValue();
}",""
"public void remove() {
    Element parent = nodeParent(node);
    if (parent == null) {
        throw new JXPathException(""Cannot remove root JDOM node"");
    }
    parent.getContent().remove(node);
}","public void test03737() throws Throwable {
    Locale locale0 = Locale.CHINESE;
    Element element0 = new Element(""Ha_"", ""Ha_"", ""Ha_"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
    QName qName0 = jDOMNodePointer0.getName();
    jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
    jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
    jDOMNodePointer0.remove();
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index) {
    if (index == WHOLE_COLLECTION) {
        index = 0;
    }
    boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);
    if (success) {
        NodeTest nodeTest;
        String prefix = name.getPrefix();
        String namespaceURI = prefix == null ? null : context.getNamespaceURI(prefix);
        nodeTest = new NodeNameTest(name, namespaceURI);
        NodeIterator it = childIterator(nodeTest, false, null);
        if (it != null && it.setPosition(index + 1)) {
            return it.getNodePointer();
        }
    }
    throw new JXPathAbstractFactoryException(""Factory could not create "" + ""a child node for path: "" + asPath() + ""/"" + name + ""["" + (index + 1) + ""]"");
}","public void test03838() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variablePointer0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, (Object) null);
    jDOMNodePointer0.createChild(jXPathContext0, (QName) null, Integer.MIN_VALUE);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test03939() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) locale0, (NodeTest) nodeTypeTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof JDOMNodePointer)) {
        return false;
    }
    JDOMNodePointer other = (JDOMNodePointer) object;
    return node == other.node;
}","public void test04040() throws Throwable {
    CDATA cDATA0 = new CDATA(""\""w;|Uu(SUDL9"");
    Locale locale0 = Locale.ITALIAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, locale0, ""http://www.w3.org/2000/xmlns/"");
    jDOMNodePointer1.equals(jDOMNodePointer0);
}",""
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test04141() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""NORMALIZE"", ""NORMALIZE"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
    jDOMNodePointer0.getValue();
}",""
"protected static String findEnclosingAttribute(Object n, String attrName, Namespace ns) {
    while (n != null) {
        if (n instanceof Element) {
            Element e = (Element) n;
            String attr = e.getAttributeValue(attrName, ns);
            if (attr != null && !attr.equals("""")) {
                return attr;
            }
        }
        n = nodeParent(n);
    }
    return null;
}","public void test04242() throws Throwable {
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""jaHax.namingNamingException"", ""jaHax.namingNamingException"");
    Namespace namespace0 = Namespace.XML_NAMESPACE;
    JDOMNodePointer.findEnclosingAttribute(processingInstruction0, ""jaHax.namingNamingException"", namespace0);
}","/**
 * Find the nearest occurrence of the specified attribute
 * on the specified and enclosing elements.
 * @param n current node
 * @param attrName attribute name
 * @param ns Namespace
 * @return attribute value
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof JDOMNodePointer)) {
        return false;
    }
    JDOMNodePointer other = (JDOMNodePointer) object;
    return node == other.node;
}","public void test04343() throws Throwable {
    CDATA cDATA0 = new CDATA(""\""w;|Uu(SUDL9"");
    Locale locale0 = Locale.ITALIAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    jDOMNodePointer0.equals(jDOMNodePointer0);
}",""
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test04444() throws Throwable {
    CDATA cDATA0 = new CDATA(""\""w;|Uu(SUDL9"");
    Locale locale0 = Locale.ITALIAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    jDOMNodePointer0.setValue(""\""w;|Uu(SUDL9"");
}",""
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test04545() throws Throwable {
    CDATA cDATA0 = new CDATA(""\""w;|Uu(SUDL9"");
    Locale locale0 = Locale.ITALIAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    jDOMNodePointer0.setValue((Object) null);
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix.equals(""xml"")) {
        return Namespace.XML_NAMESPACE.getURI();
    }
    Element element = null;
    if (node instanceof Document) {
        element = ((Document) node).getRootElement();
    }
    if (node instanceof Element) {
        element = (Element) node;
    }
    if (element == null) {
        return null;
    }
    Namespace ns = element.getNamespace(prefix);
    return ns == null ? null : ns.getURI();
}","public void test04646() throws Throwable {
    Element element0 = new Element(""HVyO_M"", ""HVyO_M"");
    Locale locale0 = Locale.CHINA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.getNamespaceURI(""HVyO_M"");
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix.equals(""xml"")) {
        return Namespace.XML_NAMESPACE.getURI();
    }
    Element element = null;
    if (node instanceof Document) {
        element = ((Document) node).getRootElement();
    }
    if (node instanceof Element) {
        element = (Element) node;
    }
    if (element == null) {
        return null;
    }
    Namespace ns = element.getNamespace(prefix);
    return ns == null ? null : ns.getURI();
}","public void test04747() throws Throwable {
    Locale locale0 = Locale.UK;
    Document document0 = new Document();
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
    // Undeclared exception!
    try {
        jDOMNodePointer0.getNamespaceURI(""http://www.w3.org/XML/1998/namespace"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Root element not set
        //
        verifyException(""org.jdom.Document"", e);
    }
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix.equals(""xml"")) {
        return Namespace.XML_NAMESPACE.getURI();
    }
    Element element = null;
    if (node instanceof Document) {
        element = ((Document) node).getRootElement();
    }
    if (node instanceof Element) {
        element = (Element) node;
    }
    if (element == null) {
        return null;
    }
    Namespace ns = element.getNamespace(prefix);
    return ns == null ? null : ns.getURI();
}","public void test04848() throws Throwable {
    Locale locale0 = Locale.TAIWAN;
    Locale locale1 = Locale.FRENCH;
    Object object0 = new Object();
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
    jDOMNodePointer0.getNamespaceURI(""xml"");
}",""
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test04949() throws Throwable {
    Document document0 = new Document();
    Locale locale0 = Locale.ROOT;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
    // Undeclared exception!
    try {
        jDOMNodePointer0.isLeaf();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Root element not set
        //
        verifyException(""org.jdom.Document"", e);
    }
}",""
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test05050() throws Throwable {
    Element element0 = new Element(""V._M"", ""V._M"", ""V._M"");
    Document document0 = new Document(element0);
    Locale locale0 = Locale.CHINA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
    jDOMNodePointer0.isLeaf();
}",""
"public QName getName() {
    String ns = null;
    String ln = null;
    if (node instanceof Element) {
        ns = ((Element) node).getNamespacePrefix();
        if (ns != null && ns.equals("""")) {
            ns = null;
        }
        ln = ((Element) node).getName();
    } else if (node instanceof ProcessingInstruction) {
        ln = ((ProcessingInstruction) node).getTarget();
    }
    return new QName(ns, ln);
}","public void test05151() throws Throwable {
    Locale locale0 = Locale.CHINESE;
    Element element0 = new Element(""Ha_"", ""Ha_"", ""Ha_"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.getName();
}",""
"public QName getName() {
    String ns = null;
    String ln = null;
    if (node instanceof Element) {
        ns = ((Element) node).getNamespacePrefix();
        if (ns != null && ns.equals("""")) {
            ns = null;
        }
        ln = ((Element) node).getName();
    } else if (node instanceof ProcessingInstruction) {
        ln = ((ProcessingInstruction) node).getTarget();
    }
    return new QName(ns, ln);
}","public void test05252() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Element element0 = new Element(""Ha_"", ""Ha_"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.getName();
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test05353() throws Throwable {
    Locale locale0 = Locale.KOREA;
    Element element0 = new Element(""Ha_"", ""Ha_"", ""Ha_"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.asPath();
}",""
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test05454() throws Throwable {
    Element element0 = new Element(""H._M"", ""H._M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null, ""H._M"");
    jDOMNodePointer0.setValue(""H._M"");
}",""
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test05555() throws Throwable {
    Element element0 = new Element(""MNdA"", ""MNdA"");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, ""MNdA"");
    Text text0 = new Text(""http://www.w3.org/XML/1998/namespace"");
    jDOMNodePointer0.setValue(text0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test05656() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""NORMALIZE"", ""NORMALIZE"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
    jDOMNodePointer0.asPath();
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test05757() throws Throwable {
    Element element0 = new Element(""HV._M"");
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, ""HV._M"");
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
    jDOMNodePointer1.asPath();
}",""
"public QName getName() {
    String ns = null;
    String ln = null;
    if (node instanceof Element) {
        ns = ((Element) node).getNamespacePrefix();
        if (ns != null && ns.equals("""")) {
            ns = null;
        }
        ln = ((Element) node).getName();
    } else if (node instanceof ProcessingInstruction) {
        ln = ((ProcessingInstruction) node).getTarget();
    }
    return new QName(ns, ln);
}","public void test05858() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""NORMALIZE"", ""NORMALIZE"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
    jDOMNodePointer0.getName();
}",""
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test05959() throws Throwable {
    Element element0 = new Element(""HV._M"", ""HV._M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null, ""HV._M"");
    jDOMNodePointer0.setValue((Object) null);
}",""
"public static String getLocalName(Object node) {
    if (node instanceof Element) {
        return ((Element) node).getName();
    }
    if (node instanceof Attribute) {
        return ((Attribute) node).getName();
    }
    return null;
}","public void test06060() throws Throwable {
    Element element0 = new Element(""Ha_"", ""Ha_"", ""Ha_"");
    JDOMNodePointer.getLocalName(element0);
}","/**
 * Get the local name of the specified node.
 * @param node to check
 * @return String local name
 */"
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test06161() throws Throwable {
    Element element0 = new Element(""D"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null, ""D"");
    jDOMNodePointer0.isLeaf();
}",""
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test06262() throws Throwable {
    Locale locale0 = Locale.FRENCH;
    Element element0 = new Element(""HV._M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    element0.setText(""http://www.w3.org/XML/1998/namespace"");
    jDOMNodePointer0.isLeaf();
}",""
"protected static String findEnclosingAttribute(Object n, String attrName, Namespace ns) {
    while (n != null) {
        if (n instanceof Element) {
            Element e = (Element) n;
            String attr = e.getAttributeValue(attrName, ns);
            if (attr != null && !attr.equals("""")) {
                return attr;
            }
        }
        n = nodeParent(n);
    }
    return null;
}","public void test06363() throws Throwable {
    Element element0 = new Element(""HV_M"", ""HV_M"");
    Namespace namespace0 = Namespace.XML_NAMESPACE;
    JDOMNodePointer.findEnclosingAttribute(element0, ""HV_M"", namespace0);
}","/**
 * Find the nearest occurrence of the specified attribute
 * on the specified and enclosing elements.
 * @param n current node
 * @param attrName attribute name
 * @param ns Namespace
 * @return attribute value
 */"
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        String namespaceUri = getNamespaceResolver().getNamespaceURI(prefix);
        if (namespaceUri == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        Namespace ns = Namespace.getNamespace(prefix, namespaceUri);
        Attribute attr = element.getAttribute(name.getName(), ns);
        if (attr == null) {
            element.setAttribute(name.getName(), """", ns);
        }
    } else {
        Attribute attr = element.getAttribute(name.getName());
        if (attr == null) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test06464() throws Throwable {
    Locale locale0 = Locale.CHINESE;
    Element element0 = new Element(""Ha_"", ""Ha_"", ""Ha_"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
    QName qName0 = new QName(""http://www.w3.org/2000/xmlns/"", ""http://www.w3.org/2000/xmlns/"");
    jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
}",""
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test06565() throws Throwable {
    Element element0 = new Element(""HV._M"", ""HV._M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null, ""HV._M"");
    jDOMNodePointer0.setValue(element0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test06666() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    Element element0 = new Element(""HV._M"", ""HV._M"", ""HV._M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeTypeTest0, locale0, ""<<unknown namespace>>"");
    jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test06767() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    Element element0 = new Element(""HV._M"", ""HV._M"", ""HV._M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    element0.setText(""http://www.w3.org/XML/1998/namespace"");
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeTypeTest0, locale0, ""<<unknown namespace>>"");
    jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer0);
}",""
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        String namespaceUri = getNamespaceResolver().getNamespaceURI(prefix);
        if (namespaceUri == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        Namespace ns = Namespace.getNamespace(prefix, namespaceUri);
        Attribute attr = element.getAttribute(name.getName(), ns);
        if (attr == null) {
            element.setAttribute(name.getName(), """", ns);
        }
    } else {
        Attribute attr = element.getAttribute(name.getName());
        if (attr == null) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test06868() throws Throwable {
    Locale locale0 = Locale.CHINESE;
    Element element0 = new Element(""Ha_"", ""Ha_"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
    QName qName0 = jDOMNodePointer0.getName();
    jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
    jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix.equals(""xml"")) {
        return Namespace.XML_NAMESPACE.getURI();
    }
    Element element = null;
    if (node instanceof Document) {
        element = ((Document) node).getRootElement();
    }
    if (node instanceof Element) {
        element = (Element) node;
    }
    if (element == null) {
        return null;
    }
    Namespace ns = element.getNamespace(prefix);
    return ns == null ? null : ns.getURI();
}","public void test06969() throws Throwable {
    Element element0 = new Element(""HVyO_M"", ""HVyO_M"", ""HVyO_M"");
    Locale locale0 = new Locale(""HVyO_M"", ""HVyO_M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.getNamespaceURI(""HVyO_M"");
}",""
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test07070() throws Throwable {
    Locale locale0 = Locale.ITALY;
    Element element0 = new Element(""Ha_"", ""Ha_"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.setValue(""http://www.w3.org/2000/xmlns/"");
    jDOMNodePointer0.getValue();
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test07171() throws Throwable {
    Element element0 = new Element(""HV._M"", ""HV._M"", ""HV._M"");
    JDOMNodePointer.getPrefix(element0);
}","/**
 * Get the prefix from a given node.
 * @param node to check
 * @return String
 */"
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test07272() throws Throwable {
    Element element0 = new Element(""HV._M"");
    JDOMNodePointer.getPrefix(element0);
}","/**
 * Get the prefix from a given node.
 * @param node to check
 * @return String
 */"
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test07373() throws Throwable {
    Element element0 = new Element(""HV._M"", ""HV._M"", ""HV._M"");
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, ""HV._M"");
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
    jDOMNodePointer1.asPath();
}",""
"public static JXPathContext newContext(Object contextBean) {
    return getContextFactory().newContext(null, contextBean);
}","public void test07474() throws Throwable {
    Locale locale0 = Locale.UK;
    CDATA cDATA0 = new CDATA("">ub%Y-bk]8q|YFR"");
    Comment comment0 = new Comment("">ub%Y-bk]8q|YFR"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(comment0, locale0);
    jDOMNodePointer0.equals(jDOMNodePointer1);
    JXPathContext.newContext((Object) "">ub%Y-bk]8q|YFR"");
}","/**
 * Creates a new JXPathContext with the specified object as the root node.
 * @param contextBean Object
 * @return JXPathContext
 */"
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test07575() throws Throwable {
    Element element0 = new Element(""HV._M"");
    QName qName0 = new QName(""HV._M"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test07676() throws Throwable {
    Element element0 = new Element(""HV._M"", ""HV._M"");
    QName qName0 = new QName(""HV._M"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test07777() throws Throwable {
    Element element0 = new Element(""V._L"");
    NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, ""V._L"");
    JDOMNodePointer.testNode((NodePointer) null, (Object) element0, (NodeTest) nodeNameTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test07878() throws Throwable {
    CDATA cDATA0 = new CDATA("""");
    Locale locale0 = Locale.ITALIAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, """");
    jDOMNodePointer0.setValue("""");
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test07979() throws Throwable {
    Element element0 = new Element(""HVy_M"", ""HVy_M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null, ""HVy_M"");
    QName qName0 = new QName(""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test08080() throws Throwable {
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""NORMALIZE"", ""NORMALIZE"");
    Locale locale0 = Locale.KOREAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""<<unknown namespace>>"");
    JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) processingInstruction0, (NodeTest) processingInstructionTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test08181() throws Throwable {
    Element element0 = new Element(""MdA"");
    QName qName0 = new QName(""MdA"", ""MdA"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""MdA"");
    JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test08282() throws Throwable {
    Element element0 = new Element(""HV._M"", ""HV._M"");
    QName qName0 = new QName(""HV._M"", ""HV._M"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test08383() throws Throwable {
    Locale locale0 = Locale.FRENCH;
    Element element0 = new Element(""HV._"", ""HV._"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.setValue(jDOMNodePointer0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test08484() throws Throwable {
    Element element0 = new Element(""H._M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(""H._M"", (Locale) null);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
    jDOMNodePointer1.asPath();
}",""
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test08585() throws Throwable {
    Locale locale0 = Locale.FRENCH;
    Element element0 = new Element(""ZHV._M"", ""ZHV._M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""ZHV._M"", ""http://www.w3.org/XML/1998/namespace"");
    element0.addContent((Content) processingInstruction0);
    jDOMNodePointer0.getValue();
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test08686() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
    JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) nodeTypeTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test08787() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
    JDOMNodePointer.testNode((NodePointer) null, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test08888() throws Throwable {
    Element element0 = new Element(""HV._M"", ""HV._M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null, ""HV._M"");
    Comment comment0 = new Comment(""<<unknown namespace>>"");
    jDOMNodePointer0.setValue(comment0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test08989() throws Throwable {
    Element element0 = new Element(""MdA"");
    QName qName0 = new QName(""MdA"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""MdA"");
    JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test09090() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    Element element0 = new Element(""H."");
    CDATA cDATA0 = new CDATA(""H."");
    element0.addContent((Content) cDATA0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    jDOMNodePointer0.asPath();
}",""
"public static String getLocalName(Object node) {
    if (node instanceof Element) {
        return ((Element) node).getName();
    }
    if (node instanceof Attribute) {
        return ((Attribute) node).getName();
    }
    return null;
}","public void test09191() throws Throwable {
    Attribute attribute0 = new Attribute(""HV._M"", ""HV._M"");
    JDOMNodePointer.getLocalName(attribute0);
}","/**
 * Get the local name of the specified node.
 * @param node to check
 * @return String local name
 */"
"public void remove() {
    Element parent = nodeParent(node);
    if (parent == null) {
        throw new JXPathException(""Cannot remove root JDOM node"");
    }
    parent.getContent().remove(node);
}","public void test09292() throws Throwable {
    Element element0 = new Element(""HU"", ""HU"");
    CDATA cDATA0 = new CDATA(""HU"");
    element0.addContent((Content) cDATA0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, (Locale) null);
    jDOMNodePointer0.remove();
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test09393() throws Throwable {
    Attribute attribute0 = new Attribute(""HV."", ""HV."");
    JDOMNodePointer.getPrefix(attribute0);
}","/**
 * Get the prefix from a given node.
 * @param node to check
 * @return String
 */"
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test09494() throws Throwable {
    Element element0 = new Element(""HI0_M"", ""HI0_M"");
    Document document0 = new Document(element0);
    Locale locale0 = new Locale(""HI0_M"", ""HI0_M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, ""HI0_M"");
    jDOMNodePointer0.setValue(document0);
    jDOMNodePointer0.getValue();
}",""
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test09595() throws Throwable {
    Element element0 = new Element(""HI0_M"", ""HI0_M"");
    Document document0 = new Document();
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, ""HI0_M"");
    jDOMNodePointer0.setValue(document0);
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test09696() throws Throwable {
    Attribute attribute0 = new Attribute(""HI0_M"", ""HI0_M"");
    Namespace namespace0 = Namespace.XML_NAMESPACE;
    attribute0.setNamespace(namespace0);
    JDOMNodePointer.getPrefix(attribute0);
}","/**
 * Get the prefix from a given node.
 * @param node to check
 * @return String
 */"
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test09797() throws Throwable {
    Attribute attribute0 = new Attribute(""rK6o_"", ""rK6o_"");
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
    JDOMNodePointer.testNode((NodePointer) null, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test09898() throws Throwable {
    Attribute attribute0 = new Attribute(""K6o_"", ""K6o_"");
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
    JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) nodeTypeTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test09999() throws Throwable {
    Attribute attribute0 = new Attribute(""rK6o_"", ""rK6o_"");
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
    CDATA cDATA0 = new CDATA(""rK6o_"");
    JDOMNodePointer.testNode((NodePointer) null, (Object) cDATA0, (NodeTest) nodeTypeTest0);
}","/**
 * Execute test against node on behalf of pointer.
 * @param pointer Pointer
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test100100() throws Throwable {
    Element element0 = new Element(""V._M"", ""V._M"");
    Locale locale0 = Locale.JAPANESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    HashMap<Integer, Document> hashMap0 = new HashMap<Integer, Document>();
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""V._M"", hashMap0);
    jDOMNodePointer0.setValue(processingInstruction0);
}",""
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test101101() throws Throwable {
    Element element0 = new Element(""HI0_M"", ""HI0_M"");
    Document document0 = new Document(element0);
    DocType docType0 = new DocType(""HI0_M"", ""HI0_M"", ""HI0_M"");
    document0.setDocType(docType0);
    Locale locale0 = new Locale(""HI0_M"", ""HI0_M"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, ""HI0_M"");
    jDOMNodePointer0.setValue(document0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test102102() throws Throwable {
    Attribute attribute0 = new Attribute(""rK6o_"", ""rK6o_"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(""rK6o_"", (Locale) null, ""rK6o_"");
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, ""rK6o_"");
    JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(attribute0, (Locale) null, ""f^wYf>GC6"");
    jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer2);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test103103() throws Throwable {
    Attribute attribute0 = new Attribute(""HK9a"", ""HK9a"");
    QName qName0 = new QName(""HK9a"");
    Locale locale0 = Locale.ROOT;
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, attribute0, locale0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, nodeTypeTest0);
    jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test104104() throws Throwable {
    Element element0 = new Element(""org.apache.commons.jxpath.ri.mopel.jdom.JDOMNodePointer"");
    EntityRef entityRef0 = new EntityRef(""org.apache.commons.jxpath.ri.mopel.jdom.JDOMNodePointer"");
    element0.addContent((Content) entityRef0);
    CDATA cDATA0 = new CDATA(""org.apache.commons.jxpath.ri.mopel.jdom.JDOMNodePointer"");
    element0.addContent((Content) cDATA0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, cDATA0);
    jDOMNodePointer0.asPath();
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test105105() throws Throwable {
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""yO1Mb1P"", ""yO1Mb1P"");
    Element element0 = new Element(""yO1Mb1P"", ""yO1Mb1P"", ""yO1Mb1P"");
    element0.addContent((Content) processingInstruction0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, (Locale) null);
    jDOMNodePointer0.asPath();
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByQName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        buffer.append(""/processing-instruction(\'"").append(((ProcessingInstruction) node).getTarget()).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI()).append(']');
    }
    return buffer.toString();
}","public void test106106() throws Throwable {
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""yO1Mb1P"", ""yO1Mb1P"");
    Element element0 = new Element(""yO1Mb1P"");
    element0.addContent(""yO1Mb1P"");
    element0.addContent((Content) processingInstruction0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, (Locale) null);
    jDOMNodePointer0.asPath();
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test107107() throws Throwable {
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""yO1Mb1P"", ""yO1Mb1P"");
    Element element0 = new Element(""yO1Mb1P"", ""yO1Mb1P"", ""yO1Mb1P"");
    Element element1 = element0.addContent((Content) processingInstruction0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(313);
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, ""NORMALIZE"");
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, processingInstruction0, locale0);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodePointer0, element1);
    jDOMNodePointer1.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
    JDOMNodePointer.testNode((NodePointer) jDOMNodePointer1, (Object) ""NORMALIZE"", (NodeTest) nodeTypeTest0);
    JDOMNodePointer.getPrefix(""http://www.w3.org/XML/1998/namespace"");
}","/**
 * Get the prefix from a given node.
 * @param node to check
 * @return String
 */"
