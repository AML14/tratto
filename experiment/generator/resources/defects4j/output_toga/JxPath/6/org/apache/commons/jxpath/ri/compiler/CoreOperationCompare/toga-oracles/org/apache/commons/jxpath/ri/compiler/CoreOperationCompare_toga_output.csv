project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Constant constant0 = new Constant(""8Nmlf.>\""5Zl"");
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
    Byte byte0 = new Byte((byte) 47);
    boolean boolean0 = coreOperationNotEqual0.equal(byte0, (Object) null);
    assertFalse(boolean0);
}",0,
project,0,test011,"public void test011() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction((-2979), expressionArray0);
    expressionArray0[0] = (Expression) coreFunction0;
    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
    CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationEqual0);
    boolean boolean0 = nameAttributeTest0.equal((EvalContext) null, expressionArray0[0], coreOperationEqual0);
    assertFalse(boolean0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    Constant constant0 = new Constant(""oHk"");
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
    AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, nodeNameTest0);
    Object object0 = nameAttributeTest0.computeValue(attributeContext0);
    boolean boolean0 = coreOperationNotEqual0.equal(nameAttributeTest0, object0);
    assertTrue(boolean0);
}",0,
project,0,test033,"public void test033() throws Throwable {
    QName qName0 = new QName(""My?K}U1Qxkb*%"");
    VariableReference variableReference0 = new VariableReference(qName0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);
    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
    Locale locale0 = Locale.ITALIAN;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ancestorContext0, locale0);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);
    // Undeclared exception!
    try {
        nameAttributeTest0.findMatch(rootContext0, (Iterator) null);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.axes.RootContext"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    Constant constant0 = new Constant(""8Nmlf.>\""5Zl"");
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationNotEqual0);
    // Undeclared exception!
    try {
        nameAttributeTest0.findMatch((Iterator) null, (Iterator) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreOperationCompare"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    QName qName0 = new QName(""cAr$_jcdh&,)y<e]"", (String) null);
    Expression[] expressionArray0 = new Expression[0];
    ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
    CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, extensionFunction0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationGreaterThanOrEqual0);
    EvalContext[] evalContextArray0 = new EvalContext[0];
    UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    AttributeContext attributeContext0 = new AttributeContext(unionContext0, nodeNameTest0);
    PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, true);
    nameAttributeTest0.findMatch(precedingOrFollowingContext0, unionContext0);
    // Undeclared exception!
    try {
        nameAttributeTest0.findMatch(unionContext0, precedingOrFollowingContext0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    QName qName0 = new QName(""My?K}U1Qxkb*%"", """");
    VariableReference variableReference0 = new VariableReference(qName0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);
    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
    Locale locale0 = Locale.ITALIAN;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ancestorContext0, locale0);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);
    InitialContext initialContext0 = (InitialContext) rootContext0.getVariableContext(qName0);
    // Undeclared exception!
    try {
        nameAttributeTest0.equal(initialContext0, variableReference0, coreOperationMultiply0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: My?K}U1Qxkb*%:
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    Expression[] expressionArray0 = new Expression[8];
    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
    expressionArray0[0] = (Expression) coreOperationAnd0;
    QName qName0 = new QName(""|"", ""=/T/}v8"");
    expressionArray0[6] = (Expression) coreOperationAnd0;
    CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, expressionArray0[0]);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""^v}e{-709m"");
    PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
    // Undeclared exception!
    nameAttributeTest0.equal(precedingOrFollowingContext0, expressionArray0[6], expressionArray0[7]);
}",0,
project,0,test088,"public void test088() throws Throwable {
    QName qName0 = new QName(""My?K}U1Qxkb*%"", """");
    VariableReference variableReference0 = new VariableReference(qName0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);
    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
    Locale locale0 = Locale.ITALIAN;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ancestorContext0, locale0);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);
    ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
    // Undeclared exception!
    try {
        nameAttributeTest0.equal(rootContext0, extensionFunction0, extensionFunction0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined function: My?K}U1Qxkb*%:
        //
        verifyException(""org.apache.commons.jxpath.ri.JXPathContextReferenceImpl"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction((-2979), expressionArray0);
    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
    CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, (Expression) null);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationEqual0);
    // Undeclared exception!
    try {
        coreOperationNotEqual0.equal((EvalContext) null, expressionArray0[0], nameAttributeTest0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreOperationCompare"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant("""");
    expressionArray0[0] = (Expression) constant0;
    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, expressionArray0[0]);
    coreOperationMod0.args = expressionArray0;
    // Undeclared exception!
    try {
        coreOperationNotEqual0.equal((EvalContext) null, coreOperationMod0, expressionArray0[0]);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreOperationMod"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""org.apache.commons.jxpath.ri.compiler.CoreOperationCompare"");
    expressionArray0[0] = (Expression) constant0;
    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, constant0);
    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
    // Undeclared exception!
    try {
        nameAttributeTest0.equal((EvalContext) null, coreOperationMod0, coreOperationAnd0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // / by zero
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreOperationMod"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    Double double0 = Expression.ONE;
    Constant constant0 = new Constant(double0);
    CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, constant0);
    QName qName0 = new QName(""1"", ""!="");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        coreOperationNotEqual0.equal(variablePointer0, constant0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: 1:!=
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}",1,
project,0,test1313,"public void test1313() throws Throwable {
    QName qName0 = new QName(""cAr$_jcdh&,)y<e]"");
    Expression[] expressionArray0 = new Expression[0];
    ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
    CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, extensionFunction0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationGreaterThanOrEqual0);
    EvalContext[] evalContextArray0 = new EvalContext[0];
    UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    AttributeContext attributeContext0 = new AttributeContext(unionContext0, nodeNameTest0);
    PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, true);
    nameAttributeTest0.findMatch(precedingOrFollowingContext0, unionContext0);
    // Undeclared exception!
    try {
        nameAttributeTest0.equal(""Gu;<.:`V0z2).Jj"", precedingOrFollowingContext0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    Expression[] expressionArray0 = new Expression[3];
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationMultiply0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationMultiply0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationAnd0);
    Variables variables0 = jXPathContext0.getVariables();
    QName qName0 = new QName(""!="", ""!="");
    VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
    // Undeclared exception!
    try {
        nameAttributeTest0.equal(coreOperationMultiply0, variablePointer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: '!=:!='
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, (Expression) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nameAttributeTest0);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
    // Undeclared exception!
    try {
        nameAttributeTest0.contains(rootContext0, ""7"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.axes.RootContext"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
    // Undeclared exception!
    try {
        coreOperationNotEqual0.contains((Iterator) null, ""L:4|<9 ,H| "");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreOperationCompare"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    QName qName0 = new QName(""cAr$_jcdh&,)y<e]"", (String) null);
    Expression[] expressionArray0 = new Expression[0];
    ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
    CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, extensionFunction0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationGreaterThanOrEqual0);
    EvalContext[] evalContextArray0 = new EvalContext[0];
    UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    AttributeContext attributeContext0 = new AttributeContext(unionContext0, nodeNameTest0);
    PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, true);
    nameAttributeTest0.findMatch(precedingOrFollowingContext0, unionContext0);
    // Undeclared exception!
    try {
        nameAttributeTest0.contains(precedingOrFollowingContext0, coreOperationGreaterThanOrEqual0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationEqual0);
    Expression[] expressionArray0 = new Expression[2];
    Step[] stepArray0 = new Step[7];
    ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, coreOperationEqual0);
    boolean boolean0 = coreOperationEqual0.equal((Object) null, coreOperationNotEqual0);
    assertFalse(boolean0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, expressionArray0[0]);
    boolean boolean0 = coreOperationNotEqual0.equal(coreOperationMod0, """");
    assertFalse(boolean0);
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant("""");
    expressionArray0[0] = (Expression) constant0;
    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, expressionArray0[0]);
    boolean boolean0 = coreOperationNotEqual0.equal((EvalContext) null, coreOperationMod0, expressionArray0[0]);
    assertTrue(boolean0);
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationNotEqual0);
    Integer integer0 = new Integer(1120);
    boolean boolean0 = nameAttributeTest0.equal(""="", integer0);
    assertFalse(boolean0);
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    QName qName0 = new QName(""My?K}U1Qxkb*%"", """");
    VariableReference variableReference0 = new VariableReference(qName0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);
    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
    Locale locale0 = Locale.ITALIAN;
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ancestorContext0, locale0);
    boolean boolean0 = coreOperationNotEqual0.equal(jXPathContext0, nodePointer0);
    assertFalse(boolean0);
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction((-2133), expressionArray0);
    expressionArray0[0] = (Expression) coreFunction0;
    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
    Iterator iterator0 = coreOperationAnd0.iterate((EvalContext) null);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, (Expression) null);
    boolean boolean0 = coreOperationNotEqual0.contains(iterator0, (Object) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2424,"public void test2424() throws Throwable {
    Expression[] expressionArray0 = new Expression[7];
    Step[] stepArray0 = new Step[7];
    QName qName0 = new QName(""o|"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Step step0 = new Step(0, nodeNameTest0, expressionArray0);
    stepArray0[2] = step0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, expressionArray0[6]);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, stepArray0[2], (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    boolean boolean0 = coreOperationNotEqual0.contains(evalContext0, expressionArray0[3]);
    assertEquals(2, evalContext0.getPosition());
}",0,"assertEquals(0, evalContext0.getPosition())"
project,0,test2425,"public void test2425() throws Throwable {
    Expression[] expressionArray0 = new Expression[7];
    Step[] stepArray0 = new Step[7];
    QName qName0 = new QName(""o|"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Step step0 = new Step(0, nodeNameTest0, expressionArray0);
    stepArray0[2] = step0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, expressionArray0[6]);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, stepArray0[2], (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    boolean boolean0 = coreOperationNotEqual0.contains(evalContext0, expressionArray0[3]);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2526,"public void test2526() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction((-2979), expressionArray0);
    expressionArray0[0] = (Expression) coreFunction0;
    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
    CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
    Iterator iterator0 = coreOperationAnd0.iterate((EvalContext) null);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, (Expression) null);
    boolean boolean0 = coreOperationEqual0.findMatch(iterator0, iterator0);
    boolean boolean1 = coreOperationNotEqual0.contains(iterator0, (Object) null);
    assertTrue(boolean1 == boolean0);
}",0,
project,0,test2628,"public void test2628() throws Throwable {
    QName qName0 = new QName(""My?K}U1Qxkb*%"");
    VariableReference variableReference0 = new VariableReference(qName0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);
    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
    Locale locale0 = Locale.ITALIAN;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ancestorContext0, locale0);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
    Double double0 = (Double) coreOperationMultiply0.computeValue(rootContext0);
    assertEquals(1.0, (double) double0, 0.01);
}",0,
project,0,test2729,"public void test2729() throws Throwable {
    Constant constant0 = new Constant(""0:i)V)*E>Gj;P %iGc"");
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
    CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationNotEqual0);
    QName qName0 = new QName(""0:i)V)*E>Gj;P %iGc"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""0:i)V)*E>Gj;P %iGc"");
    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
    Object object0 = coreOperationEqual0.computeValue(ancestorContext0);
    NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);
    // Undeclared exception!
    try {
        coreOperationEqual0.equal(object0, namespaceContext0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.EvalContext"", e);
    }
}",0,
