{
  "test1212" : {
    "methodSignature" : "protected boolean equal(Object l, Object r)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Double double0 = Expression.ONE;\n    Constant constant0 = new Constant(double0);\n    CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, constant0);\n    QName qName0 = new QName(\"1\", \"!=\");\n    VariablePointer variablePointer0 = new VariablePointer(qName0);\n    coreOperationNotEqual0.equal(variablePointer0, constant0);\n}",
    "testName" : "test1212"
  },
  "test2323" : {
    "methodSignature" : "protected boolean contains(Iterator it, Object value)",
    "methodName" : "contains",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    Expression[] expressionArray0 = new Expression[1];\n    CoreFunction coreFunction0 = new CoreFunction((-2133), expressionArray0);\n    expressionArray0[0] = (Expression) coreFunction0;\n    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);\n    Iterator iterator0 = coreOperationAnd0.iterate((EvalContext) null);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, (Expression) null);\n    boolean boolean0 = coreOperationNotEqual0.contains(iterator0, (Object) null);\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "protected boolean equal(Object l, Object r)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    QName qName0 = new QName(\"cAr$_jcdh&,)y<e]\");\n    Expression[] expressionArray0 = new Expression[0];\n    ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);\n    CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);\n    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, extensionFunction0);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationGreaterThanOrEqual0);\n    EvalContext[] evalContextArray0 = new EvalContext[0];\n    UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);\n    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, \"\");\n    AttributeContext attributeContext0 = new AttributeContext(unionContext0, nodeNameTest0);\n    PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, true);\n    nameAttributeTest0.findMatch(precedingOrFollowingContext0, unionContext0);\n    nameAttributeTest0.equal(\"Gu;<.:`V0z2).Jj\", precedingOrFollowingContext0);\n}",
    "testName" : "test1313"
  },
  "test2425" : {
    "methodSignature" : "protected boolean contains(Iterator it, Object value)",
    "methodName" : "contains",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2425() throws Throwable {\n    Expression[] expressionArray0 = new Expression[7];\n    Step[] stepArray0 = new Step[7];\n    QName qName0 = new QName(\"o|\");\n    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);\n    Step step0 = new Step(0, nodeNameTest0, expressionArray0);\n    stepArray0[2] = step0;\n    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, expressionArray0[6]);\n    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, stepArray0[2], (Pointer) null);\n    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();\n    boolean boolean0 = coreOperationNotEqual0.contains(evalContext0, expressionArray0[3]);\n}",
    "testName" : "test2425"
  },
  "test2424" : {
    "methodSignature" : "public int getPosition()",
    "methodName" : "getPosition",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    Expression[] expressionArray0 = new Expression[7];\n    Step[] stepArray0 = new Step[7];\n    QName qName0 = new QName(\"o|\");\n    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);\n    Step step0 = new Step(0, nodeNameTest0, expressionArray0);\n    stepArray0[2] = step0;\n    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, expressionArray0[6]);\n    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, stepArray0[2], (Pointer) null);\n    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();\n    boolean boolean0 = coreOperationNotEqual0.contains(evalContext0, expressionArray0[3]);\n    evalContext0.getPosition();\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "protected boolean equal(EvalContext context, Expression left, Expression right)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Expression[] expressionArray0 = new Expression[1];\n    Constant constant0 = new Constant(\"\");\n    expressionArray0[0] = (Expression) constant0;\n    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);\n    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, expressionArray0[0]);\n    coreOperationMod0.args = expressionArray0;\n    coreOperationNotEqual0.equal((EvalContext) null, coreOperationMod0, expressionArray0[0]);\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "protected boolean equal(Object l, Object r)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationNotEqual0);\n    Integer integer0 = new Integer(1120);\n    boolean boolean0 = nameAttributeTest0.equal(\"=\", integer0);\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "protected boolean equal(EvalContext context, Expression left, Expression right)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Expression[] expressionArray0 = new Expression[1];\n    Constant constant0 = new Constant(\"org.apache.commons.jxpath.ri.compiler.CoreOperationCompare\");\n    expressionArray0[0] = (Expression) constant0;\n    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, constant0);\n    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);\n    nameAttributeTest0.equal((EvalContext) null, coreOperationMod0, coreOperationAnd0);\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "protected boolean equal(Object l, Object r)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    QName qName0 = new QName(\"My?K}U1Qxkb*%\", \"\");\n    VariableReference variableReference0 = new VariableReference(qName0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);\n    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);\n    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);\n    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);\n    Locale locale0 = Locale.ITALIAN;\n    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ancestorContext0, locale0);\n    boolean boolean0 = coreOperationNotEqual0.equal(jXPathContext0, nodePointer0);\n}",
    "testName" : "test2222"
  },
  "test011" : {
    "methodSignature" : "protected boolean equal(EvalContext context, Expression left, Expression right)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Expression[] expressionArray0 = new Expression[1];\n    CoreFunction coreFunction0 = new CoreFunction((-2979), expressionArray0);\n    expressionArray0[0] = (Expression) coreFunction0;\n    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);\n    CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationEqual0);\n    boolean boolean0 = nameAttributeTest0.equal((EvalContext) null, expressionArray0[0], coreOperationEqual0);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "protected boolean findMatch(Iterator lit, Iterator rit)",
    "methodName" : "findMatch",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    QName qName0 = new QName(\"My?K}U1Qxkb*%\");\n    VariableReference variableReference0 = new VariableReference(qName0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);\n    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);\n    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);\n    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);\n    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);\n    Locale locale0 = Locale.ITALIAN;\n    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ancestorContext0, locale0);\n    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);\n    nameAttributeTest0.findMatch(rootContext0, (Iterator) null);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "protected boolean findMatch(Iterator lit, Iterator rit)",
    "methodName" : "findMatch",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    QName qName0 = new QName(\"cAr$_jcdh&,)y<e]\", (String) null);\n    Expression[] expressionArray0 = new Expression[0];\n    ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);\n    CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);\n    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, extensionFunction0);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationGreaterThanOrEqual0);\n    EvalContext[] evalContextArray0 = new EvalContext[0];\n    UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);\n    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, \"\");\n    AttributeContext attributeContext0 = new AttributeContext(unionContext0, nodeNameTest0);\n    PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, true);\n    nameAttributeTest0.findMatch(precedingOrFollowingContext0, unionContext0);\n    nameAttributeTest0.findMatch(unionContext0, precedingOrFollowingContext0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "protected boolean equal(EvalContext context, Expression left, Expression right)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Expression[] expressionArray0 = new Expression[8];\n    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);\n    expressionArray0[0] = (Expression) coreOperationAnd0;\n    QName qName0 = new QName(\"|\", \"=/T/}v8\");\n    expressionArray0[6] = (Expression) coreOperationAnd0;\n    CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, expressionArray0[0]);\n    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, \"^v}e{-709m\");\n    PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);\n    // Undeclared exception!\n    nameAttributeTest0.equal(precedingOrFollowingContext0, expressionArray0[6], expressionArray0[7]);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "protected boolean equal(EvalContext context, Expression left, Expression right)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Expression[] expressionArray0 = new Expression[1];\n    CoreFunction coreFunction0 = new CoreFunction((-2979), expressionArray0);\n    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);\n    CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, (Expression) null);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationEqual0);\n    coreOperationNotEqual0.equal((EvalContext) null, expressionArray0[0], nameAttributeTest0);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "protected boolean contains(Iterator it, Object value)",
    "methodName" : "contains",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);\n    coreOperationNotEqual0.contains((Iterator) null, \"L:4|<9 ,H| \");\n}",
    "testName" : "test1616"
  },
  "test2628" : {
    "methodSignature" : "public Object computeValue(EvalContext context)",
    "methodName" : "computeValue",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2628() throws Throwable {\n    QName qName0 = new QName(\"My?K}U1Qxkb*%\");\n    VariableReference variableReference0 = new VariableReference(qName0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);\n    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);\n    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);\n    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);\n    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);\n    Locale locale0 = Locale.ITALIAN;\n    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ancestorContext0, locale0);\n    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);\n    Double double0 = (Double) coreOperationMultiply0.computeValue(rootContext0);\n}",
    "testName" : "test2628"
  },
  "test1717" : {
    "methodSignature" : "protected boolean contains(Iterator it, Object value)",
    "methodName" : "contains",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    QName qName0 = new QName(\"cAr$_jcdh&,)y<e]\", (String) null);\n    Expression[] expressionArray0 = new Expression[0];\n    ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);\n    CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);\n    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, extensionFunction0);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationGreaterThanOrEqual0);\n    EvalContext[] evalContextArray0 = new EvalContext[0];\n    UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);\n    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, \"\");\n    AttributeContext attributeContext0 = new AttributeContext(unionContext0, nodeNameTest0);\n    PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, true);\n    nameAttributeTest0.findMatch(precedingOrFollowingContext0, unionContext0);\n    nameAttributeTest0.contains(precedingOrFollowingContext0, coreOperationGreaterThanOrEqual0);\n}",
    "testName" : "test1717"
  },
  "test2729" : {
    "methodSignature" : "protected boolean equal(Object l, Object r)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2729() throws Throwable {\n    Constant constant0 = new Constant(\"0:i)V)*E>Gj;P %iGc\");\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);\n    CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationNotEqual0);\n    QName qName0 = new QName(\"0:i)V)*E>Gj;P %iGc\");\n    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, \"0:i)V)*E>Gj;P %iGc\");\n    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);\n    Object object0 = coreOperationEqual0.computeValue(ancestorContext0);\n    NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);\n    coreOperationEqual0.equal(object0, namespaceContext0);\n}",
    "testName" : "test2729"
  },
  "test1414" : {
    "methodSignature" : "protected boolean equal(Object l, Object r)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Expression[] expressionArray0 = new Expression[3];\n    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);\n    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationMultiply0);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationMultiply0);\n    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationAnd0);\n    Variables variables0 = jXPathContext0.getVariables();\n    QName qName0 = new QName(\"!=\", \"!=\");\n    VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);\n    nameAttributeTest0.equal(coreOperationMultiply0, variablePointer0);\n}",
    "testName" : "test1414"
  },
  "test2526" : {
    "methodSignature" : "protected boolean contains(Iterator it, Object value)",
    "methodName" : "contains",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2526() throws Throwable {\n    Expression[] expressionArray0 = new Expression[1];\n    CoreFunction coreFunction0 = new CoreFunction((-2979), expressionArray0);\n    expressionArray0[0] = (Expression) coreFunction0;\n    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);\n    CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);\n    Iterator iterator0 = coreOperationAnd0.iterate((EvalContext) null);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, (Expression) null);\n    boolean boolean0 = coreOperationEqual0.findMatch(iterator0, iterator0);\n    boolean boolean1 = coreOperationNotEqual0.contains(iterator0, (Object) null);\n}",
    "testName" : "test2526"
  },
  "test1515" : {
    "methodSignature" : "protected boolean contains(Iterator it, Object value)",
    "methodName" : "contains",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, (Expression) null);\n    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nameAttributeTest0);\n    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);\n    nameAttributeTest0.contains(rootContext0, \"7\");\n}",
    "testName" : "test1515"
  },
  "test2020" : {
    "methodSignature" : "protected boolean equal(EvalContext context, Expression left, Expression right)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Expression[] expressionArray0 = new Expression[1];\n    Constant constant0 = new Constant(\"\");\n    expressionArray0[0] = (Expression) constant0;\n    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);\n    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, expressionArray0[0]);\n    boolean boolean0 = coreOperationNotEqual0.equal((EvalContext) null, coreOperationMod0, expressionArray0[0]);\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "protected boolean equal(Object l, Object r)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Constant constant0 = new Constant(\"8Nmlf.>\\\"5Zl\");\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);\n    Byte byte0 = new Byte((byte) 47);\n    boolean boolean0 = coreOperationNotEqual0.equal(byte0, (Object) null);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "protected boolean equal(Object l, Object r)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Constant constant0 = new Constant(\"oHk\");\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);\n    QName qName0 = new QName(\"\");\n    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);\n    PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);\n    AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, nodeNameTest0);\n    Object object0 = nameAttributeTest0.computeValue(attributeContext0);\n    boolean boolean0 = coreOperationNotEqual0.equal(nameAttributeTest0, object0);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "protected boolean findMatch(Iterator lit, Iterator rit)",
    "methodName" : "findMatch",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Constant constant0 = new Constant(\"8Nmlf.>\\\"5Zl\");\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationNotEqual0);\n    nameAttributeTest0.findMatch((Iterator) null, (Iterator) null);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "protected boolean equal(EvalContext context, Expression left, Expression right)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    QName qName0 = new QName(\"My?K}U1Qxkb*%\", \"\");\n    VariableReference variableReference0 = new VariableReference(qName0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);\n    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);\n    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);\n    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);\n    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);\n    Locale locale0 = Locale.ITALIAN;\n    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ancestorContext0, locale0);\n    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);\n    InitialContext initialContext0 = (InitialContext) rootContext0.getVariableContext(qName0);\n    nameAttributeTest0.equal(initialContext0, variableReference0, coreOperationMultiply0);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "protected boolean equal(EvalContext context, Expression left, Expression right)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    QName qName0 = new QName(\"My?K}U1Qxkb*%\", \"\");\n    VariableReference variableReference0 = new VariableReference(qName0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);\n    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);\n    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);\n    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);\n    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);\n    Locale locale0 = Locale.ITALIAN;\n    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ancestorContext0, locale0);\n    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);\n    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);\n    ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);\n    nameAttributeTest0.equal(rootContext0, extensionFunction0, extensionFunction0);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "protected boolean equal(Object l, Object r)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);\n    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationEqual0);\n    Expression[] expressionArray0 = new Expression[2];\n    Step[] stepArray0 = new Step[7];\n    ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, coreOperationEqual0);\n    boolean boolean0 = coreOperationEqual0.equal((Object) null, coreOperationNotEqual0);\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "protected boolean equal(Object l, Object r)",
    "methodName" : "equal",
    "className" : "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Expression[] expressionArray0 = new Expression[1];\n    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);\n    CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);\n    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, expressionArray0[0]);\n    boolean boolean0 = coreOperationNotEqual0.equal(coreOperationMod0, \"\");\n}",
    "testName" : "test1919"
  }
}