focal_method,test_prefix,docstring
"public boolean isCollection() {
    return false;
}","public void test000() throws Throwable {
    Locale locale0 = Locale.PRC;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    boolean boolean0 = jDOMNodePointer0.isCollection();
    assertFalse(boolean0);
}",""
"public boolean isAttribute() {
    return attribute;
}","public void test011() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer(""java.util.Locale@0000000010"");
    assertFalse(nodePointer0.isAttribute());
}","/**
 * Returns true if the pointer represents the ""attribute::"" axis.
 */"
"public boolean isLanguage(String lang) {
    String current = getLanguage();
    return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());
}","public void test022() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(""t\""OsgdY|NnV"", locale0, ""t\""OsgdY|NnV"");
    boolean boolean0 = jDOMNodePointer0.isLanguage(""7)kg ?+"");
    assertFalse(boolean0);
}","/**
 * Returns true if the xml:lang attribute for the current node
 * or its parent has the specified prefix <i>lang</i>.
 * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.
 */"
"public int getLength() {
    return 1;
}","public void test033() throws Throwable {
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    int int0 = jDOMNodePointer0.getLength();
    assertEquals(1, int0);
}",""
"public boolean testNode(NodeTest test) {
    return testNode(this, node, test);
}","public void test044() throws Throwable {
    Locale locale0 = Locale.CANADA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test055() throws Throwable {
    Element element0 = new Element(""L"", ""L"", ""L"");
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = jDOMNodePointer0.getName();
    NodePointer nodePointer0 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, nodePointer0);
    assertEquals(1, int0);
}",""
"public String toString() {
    return qualifiedName;
}","public void test056() throws Throwable {
    Element element0 = new Element(""L"", ""L"", ""L"");
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = jDOMNodePointer0.getName();
    NodePointer nodePointer0 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, nodePointer0);
    assertEquals(""L:L"", qName0.toString());
}",""
"public int hashCode() {
    return System.identityHashCode(node);
}","public void test067() throws Throwable {
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
    jDOMNodePointer0.hashCode();
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {
    NodePointer ptr = createChild(context, name, index);
    ptr.setValue(value);
    return ptr;
}","public void test078() throws Throwable {
    Locale locale0 = Locale.PRC;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
    QName qName0 = new QName(""<<unknown namespace>>"", ""http://www.w3.org/XML/1998/namespace"");
    // Undeclared exception!
    try {
        jDOMNodePointer0.createChild(jXPathContext0, qName0, 480, (Object) qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Factory is not set on the JXPathContext - cannot create path:
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public String getNamespaceURI() {
    return getNamespaceURI(node);
}","public void test089() throws Throwable {
    Locale locale0 = Locale.CANADA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    String string0 = jDOMNodePointer0.getNamespaceURI();
    assertNull(string0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test0910() throws Throwable {
    Element element0 = new Element(""g7gjdm.Ontent"");
    QName qName0 = new QName(""g7gjdm.Ontent"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
    assertTrue(boolean0);
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix.equals(""xml"")) {
        return Namespace.XML_NAMESPACE.getURI();
    }
    Element element = null;
    if (node instanceof Document) {
        element = ((Document) node).getRootElement();
    }
    if (node instanceof Element) {
        element = (Element) node;
    }
    if (element == null) {
        return null;
    }
    Namespace ns = element.getNamespace(prefix);
    return ns == null ? null : ns.getURI();
}","public void test1011() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    String string0 = jDOMNodePointer0.getNamespaceURI(""xml"");
    assertEquals(""http://www.w3.org/XML/1998/namespace"", string0);
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix.equals(""xml"")) {
        return Namespace.XML_NAMESPACE.getURI();
    }
    Element element = null;
    if (node instanceof Document) {
        element = ((Document) node).getRootElement();
    }
    if (node instanceof Element) {
        element = (Element) node;
    }
    if (element == null) {
        return null;
    }
    Namespace ns = element.getNamespace(prefix);
    return ns == null ? null : ns.getURI();
}","public void test1112() throws Throwable {
    Locale locale0 = Locale.ROOT;
    Element element0 = new Element(""rg.jdo.onteeGnt"", ""rg.jdo.onteeGnt"");
    Document document0 = new Document(element0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
    String string0 = jDOMNodePointer0.getNamespaceURI(""rg.jdo.onteeGnt"");
    assertNull(string0);
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix.equals(""xml"")) {
        return Namespace.XML_NAMESPACE.getURI();
    }
    Element element = null;
    if (node instanceof Document) {
        element = ((Document) node).getRootElement();
    }
    if (node instanceof Element) {
        element = (Element) node;
    }
    if (element == null) {
        return null;
    }
    Namespace ns = element.getNamespace(prefix);
    return ns == null ? null : ns.getURI();
}","public void test1213() throws Throwable {
    Locale locale0 = Locale.CHINA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    String string0 = jDOMNodePointer0.getNamespaceURI(""http://www.w3.org/2000/xmlns/"");
    assertNull(string0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test1314() throws Throwable {
    Element element0 = new Element(""L"", ""L"", ""L"");
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = jDOMNodePointer0.getName();
    NodePointer nodePointer0 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, nodePointer0);
    assertEquals(0, int0);
}",""
"public String toString() {
    return qualifiedName;
}","public void test1315() throws Throwable {
    Element element0 = new Element(""L"", ""L"", ""L"");
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = jDOMNodePointer0.getName();
    NodePointer nodePointer0 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, nodePointer0);
    assertEquals(""L:L"", qName0.toString());
}",""
"public String toString() {
    return qualifiedName;
}","public void test1416() throws Throwable {
    Element element0 = new Element(""XT"", ""XT"");
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    Object object0 = new Object();
    JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, object0);
    QName qName0 = jDOMNodePointer0.getName();
    assertEquals(""XT"", qName0.toString());
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test1417() throws Throwable {
    Element element0 = new Element(""XT"", ""XT"");
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    Object object0 = new Object();
    JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, object0);
    QName qName0 = jDOMNodePointer0.getName();
    NodePointer nodePointer0 = jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
    int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
    assertEquals((-1), int0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test1518() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    Locale locale0 = Locale.GERMANY;
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, (Object) locale0);
    // Undeclared exception!
    try {
        jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // JXPath internal error: compareChildNodes called for de_DE
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test1619() throws Throwable {
    Element element0 = new Element(""grgjdom.9Content"");
    element0.setText(""grgjdom.9Content"");
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = new QName(""grgjdom.9Content"", ""http://www.w3.org/XML/1998/namespace"");
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ""grgjdom.9Content"", locale0);
    int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
    assertEquals(0, int0);
}",""
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test1720() throws Throwable {
    Locale locale0 = Locale.ROOT;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, ""Nu?JC/AhYdpR(@'AW%"");
    boolean boolean0 = jDOMNodePointer0.isLeaf();
    assertTrue(boolean0);
}",""
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test1821() throws Throwable {
    Element element0 = new Element(""XT"", ""XT"", ""XT"");
    Locale locale0 = Locale.CHINESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    boolean boolean0 = jDOMNodePointer0.isLeaf();
    assertTrue(boolean0);
}",""
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test1922() throws Throwable {
    Element element0 = new Element(""XT"", ""XT"", ""XT"");
    Locale locale0 = Locale.CHINESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.setValue(""XT"");
    boolean boolean0 = jDOMNodePointer0.isLeaf();
    assertFalse(boolean0);
}",""
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test2023() throws Throwable {
    Locale locale0 = Locale.ROOT;
    Element element0 = new Element(""rg.jdo.onteeGnt"", ""rg.jdo.onteeGnt"");
    Document document0 = new Document(element0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
    boolean boolean0 = jDOMNodePointer0.isLeaf();
    assertFalse(boolean0);
}",""
"public String toString() {
    return qualifiedName;
}","public void test2124() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""y"", ""y"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
    QName qName0 = jDOMNodePointer0.getName();
    assertEquals(""y"", qName0.toString());
}",""
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        String namespaceUri = getNamespaceResolver().getNamespaceURI(prefix);
        if (namespaceUri == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        Namespace ns = Namespace.getNamespace(prefix, namespaceUri);
        Attribute attr = element.getAttribute(name.getName(), ns);
        if (attr == null) {
            element.setAttribute(name.getName(), """", ns);
        }
    } else {
        Attribute attr = element.getAttribute(name.getName());
        if (attr == null) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test2225() throws Throwable {
    Locale locale0 = Locale.CANADA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    QName qName0 = jDOMNodePointer0.getName();
    // Undeclared exception!
    try {
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot create an attribute for path /@null, operation is not allowed for this type of node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",""
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test2326() throws Throwable {
    Element element0 = new Element(""XT"", ""XT"", ""XT"");
    Locale locale0 = Locale.CHINESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.setValue(""XT"");
    Object object0 = jDOMNodePointer0.getValue();
    assertNotNull(object0);
}",""
"public Object getValue() {
    NodePointer valuePointer = getValuePointer();
    if (valuePointer != this) {
        return valuePointer.getValue();
    }
    // Default behavior is to return the same as getNode()
    return getNode();
}","public void test2529() throws Throwable {
    Locale locale0 = Locale.ITALY;
    Element element0 = new Element(""rg.jdo.ontent"", ""rg.jdo.ontent"", ""rg.jdo.ontent"");
    NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, element0, locale0);
    Comment comment0 = new Comment(""e)xJ~"");
    nodePointer0.setValue(comment0);
    Object object0 = nodePointer0.getValue();
    assertEquals("""", object0);
}","/**
 * By default, returns <code>getNode()</code>, can be overridden to
 * return a ""canonical"" value, like for instance a DOM element should
 * return its string value.
 */"
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test2631() throws Throwable {
    Comment comment0 = new Comment(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"");
    Locale locale0 = Locale.GERMAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
    Object object0 = jDOMNodePointer0.getValue();
    assertEquals(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", object0);
}",""
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test2732() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    Object object0 = jDOMNodePointer0.getValue();
    assertNull(object0);
}",""
"public Object getValue() {
    if (node instanceof Element) {
        StringBuffer buf = new StringBuffer();
        for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {
            NodePointer ptr = children.getNodePointer();
            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {
                buf.append(ptr.getValue());
            }
        }
        return buf.toString();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    String result = null;
    if (node instanceof Text) {
        result = ((Text) node).getText();
    }
    if (node instanceof ProcessingInstruction) {
        result = ((ProcessingInstruction) node).getData();
    }
    boolean trim = !""preserve"".equals(findEnclosingAttribute(node, ""space"", Namespace.XML_NAMESPACE));
    return result != null && trim ? result.trim() : result;
}","public void test2833() throws Throwable {
    Locale locale0 = Locale.PRC;
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""W-"", ""W-"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
    Object object0 = jDOMNodePointer0.getValue();
    assertEquals(""W-"", object0);
}",""
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test2934() throws Throwable {
    CDATA cDATA0 = new CDATA(""L"");
    Locale locale0 = Locale.ROOT;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    // Undeclared exception!
    try {
        jDOMNodePointer0.setValue((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public boolean isContainer() {
    return false;
}","public void test3035() throws Throwable {
    CDATA cDATA0 = new CDATA(""T"");
    Locale locale0 = Locale.CANADA_FRENCH;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    jDOMNodePointer0.setValue(cDATA0);
    assertFalse(jDOMNodePointer0.isContainer());
}","/**
 * If true, this node is axiliary and can only be used as an intermediate in
 * the chain of pointers.
 */"
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test3136() throws Throwable {
    CDATA cDATA0 = new CDATA("""");
    Locale locale0 = Locale.GERMAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    // Undeclared exception!
    try {
        jDOMNodePointer0.setValue("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public int getLength() {
    return 1;
}","public void test3237() throws Throwable {
    Element element0 = new Element(""XT"", ""XT"", ""XT"");
    Locale locale0 = Locale.ROOT;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.setValue(element0);
    assertEquals(1, jDOMNodePointer0.getLength());
}",""
"public boolean isNode() {
    return !isContainer();
}","public void test3338() throws Throwable {
    Locale locale0 = Locale.ITALY;
    Element element0 = new Element(""rg.jdo.ontent"", ""rg.jdo.ontent"");
    NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, element0, locale0);
    CDATA cDATA0 = new CDATA(""http://www.w3.org/XML/1998/namespace"");
    nodePointer0.setValue(cDATA0);
    assertTrue(nodePointer0.isNode());
}","/**
 * @deprecated Please use !isContainer()
 */"
"public boolean isNode() {
    return !isContainer();
}","public void test3439() throws Throwable {
    Element element0 = new Element(""grgjdom.9Content"", ""grgjdom.9Content"");
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""grgjdom.9Content"", ""http://www.w3.org/XML/1998/namespace"");
    jDOMNodePointer0.setValue(processingInstruction0);
    assertTrue(jDOMNodePointer0.isNode());
}","/**
 * @deprecated Please use !isContainer()
 */"
"public boolean isCollection() {
    return false;
}","public void test3540() throws Throwable {
    Element element0 = new Element(""XT"", ""XT"");
    Locale locale0 = Locale.ROOT;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    jDOMNodePointer0.setValue((Object) null);
    assertFalse(jDOMNodePointer0.isCollection());
}",""
"public int getLength() {
    return 1;
}","public void test3641() throws Throwable {
    Element element0 = new Element(""T"", ""T"", ""T"");
    Locale locale0 = Locale.US;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    jDOMNodePointer0.setValue(linkedList0);
    assertEquals(1, jDOMNodePointer0.getLength());
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test3742() throws Throwable {
    NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) nodeNameTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test3843() throws Throwable {
    Element element0 = new Element(""XT"", ""XT"");
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = new QName(""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test3944() throws Throwable {
    Element element0 = new Element(""L"", ""L"");
    QName qName0 = new QName(""L"", ""L"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""L"");
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) element0, (NodeTest) nodeNameTest0);
    assertTrue(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4045() throws Throwable {
    Element element0 = new Element(""grg.jdm.Coyntent"", ""grg.jdm.Coyntent"", ""grg.jdm.Coyntent"");
    QName qName0 = new QName(""grg.jdm.Coyntent"", ""grg.jdm.Coyntent"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4146() throws Throwable {
    Element element0 = new Element(""g7gjdm.Ontent"");
    QName qName0 = new QName(""g7gjdm.Ontent"", ""g7gjdm.Ontent"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4247() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""y"", ""y"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""<<unknown namespace>>"");
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) processingInstruction0, (NodeTest) processingInstructionTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4348() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Document document0 = new Document(linkedList0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) document0, (NodeTest) nodeTypeTest0);
    assertTrue(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4449() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
    CDATA cDATA0 = new CDATA(""java.util.Locale@0000000008"");
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) cDATA0, (NodeTest) nodeTypeTest0);
    assertTrue(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4550() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4651() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4752() throws Throwable {
    Element element0 = new Element(""L"", ""L"");
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) element0, (NodeTest) nodeTypeTest0);
    assertTrue(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4853() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4954() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test5055() throws Throwable {
    Locale locale0 = Locale.CANADA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""<<unknown namespace>>"");
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) locale0, (NodeTest) processingInstructionTest0);
    assertFalse(boolean0);
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test5156() throws Throwable {
    Attribute attribute0 = new Attribute(""L"", ""L"");
    String string0 = JDOMNodePointer.getPrefix(attribute0);
    assertNull(string0);
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test5257() throws Throwable {
    Element element0 = new Element(""grg.jdom.Content"", ""grg.jdom.Content"", ""grg.jdom.Content"");
    String string0 = JDOMNodePointer.getPrefix(element0);
    assertNotNull(string0);
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test5359() throws Throwable {
    CDATA cDATA0 = new CDATA("",pL"");
    String string0 = JDOMNodePointer.getPrefix(cDATA0);
    assertNull(string0);
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test5460() throws Throwable {
    Namespace namespace0 = Namespace.XML_NAMESPACE;
    Attribute attribute0 = new Attribute(""k"", ""k"", namespace0);
    String string0 = JDOMNodePointer.getPrefix(attribute0);
    assertEquals(""xml"", string0);
}",""
"public static String getLocalName(Object node) {
    if (node instanceof Element) {
        return ((Element) node).getName();
    }
    if (node instanceof Attribute) {
        return ((Attribute) node).getName();
    }
    return null;
}","public void test5562() throws Throwable {
    Attribute attribute0 = new Attribute(""FBLa"", ""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"");
    String string0 = JDOMNodePointer.getLocalName(attribute0);
    assertEquals(""FBLa"", string0);
}",""
"public static String getLocalName(Object node) {
    if (node instanceof Element) {
        return ((Element) node).getName();
    }
    if (node instanceof Attribute) {
        return ((Attribute) node).getName();
    }
    return null;
}","public void test5663() throws Throwable {
    String string0 = JDOMNodePointer.getLocalName(""T"");
    assertNull(string0);
}",""
"protected static String findEnclosingAttribute(Object n, String attrName, Namespace ns) {
    while (n != null) {
        if (n instanceof Element) {
            Element e = (Element) n;
            String attr = e.getAttributeValue(attrName, ns);
            if (attr != null && !attr.equals("""")) {
                return attr;
            }
        }
        n = nodeParent(n);
    }
    return null;
}","public void test5764() throws Throwable {
    Element element0 = new Element(""grjdom.9Cotent"", ""grjdom.9Cotent"");
    element0.setAttribute(""grjdom.9Cotent"", ""grjdom.9Cotent"");
    Namespace namespace0 = Namespace.NO_NAMESPACE;
    String string0 = JDOMNodePointer.findEnclosingAttribute(element0, ""grjdom.9Cotent"", namespace0);
    assertNotNull(string0);
}",""
"protected static String findEnclosingAttribute(Object n, String attrName, Namespace ns) {
    while (n != null) {
        if (n instanceof Element) {
            Element e = (Element) n;
            String attr = e.getAttributeValue(attrName, ns);
            if (attr != null && !attr.equals("""")) {
                return attr;
            }
        }
        n = nodeParent(n);
    }
    return null;
}","public void test5866() throws Throwable {
    Comment comment0 = new Comment(""*rZ!,/_0;+w_"");
    Namespace namespace0 = Namespace.NO_NAMESPACE;
    String string0 = JDOMNodePointer.findEnclosingAttribute(comment0, ""*rZ!,/_0;+w_"", namespace0);
    assertNull(string0);
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index) {
    if (index == WHOLE_COLLECTION) {
        index = 0;
    }
    boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);
    if (success) {
        NodeTest nodeTest;
        String prefix = name.getPrefix();
        String namespaceURI = prefix == null ? null : context.getNamespaceURI(prefix);
        nodeTest = new NodeNameTest(name, namespaceURI);
        NodeIterator it = childIterator(nodeTest, false, null);
        if (it != null && it.setPosition(index + 1)) {
            return it.getNodePointer();
        }
    }
    throw new JXPathAbstractFactoryException(""Factory could not create "" + ""a child node for path: "" + asPath() + ""/"" + name + ""["" + (index + 1) + ""]"");
}","public void test5967() throws Throwable {
    Locale locale0 = Locale.CANADA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
    QName qName0 = new QName(""http://www.w3.org/XML/1998/namespace"");
    // Undeclared exception!
    try {
        jDOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Factory is not set on the JXPathContext - cannot create path:
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        String namespaceUri = getNamespaceResolver().getNamespaceURI(prefix);
        if (namespaceUri == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        Namespace ns = Namespace.getNamespace(prefix, namespaceUri);
        Attribute attr = element.getAttribute(name.getName(), ns);
        if (attr == null) {
            element.setAttribute(name.getName(), """", ns);
        }
    } else {
        Attribute attr = element.getAttribute(name.getName());
        if (attr == null) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test6068() throws Throwable {
    Namespace namespace0 = Namespace.NO_NAMESPACE;
    Element element0 = new Element(""T"", namespace0);
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = new QName(""<<unknown namespace>>"", ""T"");
    // Undeclared exception!
    try {
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Unknown namespace prefix: <<unknown namespace>>
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public int getIndex() {
    return index;
}","public void test6169() throws Throwable {
    Element element0 = new Element(""T"", ""T"", ""T"");
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    Object object0 = new Object();
    JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, object0);
    QName qName0 = new QName(""T"", ""T"");
    jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
    NodePointer nodePointer0 = jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
    assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
}","/**
 * If the pointer represents a collection, the index identifies
 * an element of that collection.  The default value of <code>index</code>
 * is <code>WHOLE_COLLECTION</code>, which just means that the pointer
 * is not indexed at all.
 * Note: the index on NodePointer starts with 0, not 1.
 */"
"public abstract boolean isLeaf();","public void test6270() throws Throwable {
    Element element0 = new Element(""T"", ""T"", ""T"");
    Locale locale0 = new Locale(""T"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    Object object0 = new Object();
    JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, object0);
    QName qName0 = new QName((String) null, ""T"");
    jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
    NodePointer nodePointer0 = jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
    assertTrue(nodePointer0.isLeaf());
}","/**
 * If true, this node does not have children
 */"
"public void remove() {
    Element parent = nodeParent(node);
    if (parent == null) {
        throw new JXPathException(""Cannot remove root JDOM node"");
    }
    parent.getContent().remove(node);
}","public void test6371() throws Throwable {
    Locale locale0 = Locale.ROOT;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    // Undeclared exception!
    try {
        jDOMNodePointer0.remove();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot remove root JDOM node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test6472() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(""t\""OsgdY|NnV"", locale0, ""t\""OsgdY|NnV"");
    String string0 = jDOMNodePointer0.asPath();
    assertEquals(""id('t&quot;OsgdY|NnV')"", string0);
}",""
"public String getNamespaceURI() {
    return getNamespaceURI(node);
}","public void test6573() throws Throwable {
    Locale locale0 = Locale.UK;
    Element element0 = new Element(""rg.jdo.onteeGnt"", ""rg.jdo.onteeGnt"", ""rg.jdo.onteeGnt"");
    NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, element0, locale0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, element0);
    assertEquals(""rg.jdo.onteeGnt"", jDOMNodePointer0.getNamespaceURI());
}",""
"public String toString() {
    return asPath();
}","public void test6574() throws Throwable {
    Locale locale0 = Locale.UK;
    Element element0 = new Element(""rg.jdo.onteeGnt"", ""rg.jdo.onteeGnt"", ""rg.jdo.onteeGnt"");
    NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, element0, locale0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, element0);
    String string0 = jDOMNodePointer0.toString();
    assertEquals(""/rg.jdo.onteeGnt:rg.jdo.onteeGnt[1]"", string0);
}","/**
 * {@inheritDoc}
 */"
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test6675() throws Throwable {
    Element element0 = new Element(""grg.jdm.Content"");
    CDATA cDATA0 = new CDATA(""grg.jdm.Content"");
    Locale locale0 = new Locale(""grg.jdm.Content"", ""grg.jdm.Content"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
    String string0 = jDOMNodePointer1.asPath();
    assertEquals(""/text()[1]/grg.jdm.Content[1]"", string0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test6776() throws Throwable {
    Locale locale0 = Locale.PRC;
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""W-"", ""W-"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
    String string0 = jDOMNodePointer0.asPath();
    assertEquals(""/processing-instruction('W-')[1]"", string0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (nsURI == null) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test6877() throws Throwable {
    Locale locale0 = Locale.ROOT;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, ""Nu?JC/AhYdpR(@'AW%"");
    String string0 = jDOMNodePointer0.asPath();
    assertEquals(""id('Nu?JC/AhYdpR(@&apos;AW%')"", string0);
}",""
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof JDOMNodePointer)) {
        return false;
    }
    JDOMNodePointer other = (JDOMNodePointer) object;
    return node == other.node;
}","public void test6978() throws Throwable {
    Locale locale0 = Locale.CANADA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((NodePointer) jDOMNodePointer0, (Object) locale0);
    boolean boolean0 = jDOMNodePointer1.equals(jDOMNodePointer0);
    assertTrue(boolean0);
}",""
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof JDOMNodePointer)) {
        return false;
    }
    JDOMNodePointer other = (JDOMNodePointer) object;
    return node == other.node;
}","public void test7079() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    Object object0 = new Object();
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
    boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer0);
    assertTrue(boolean0);
}",""
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof JDOMNodePointer)) {
        return false;
    }
    JDOMNodePointer other = (JDOMNodePointer) object;
    return node == other.node;
}","public void test7180() throws Throwable {
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
    boolean boolean0 = jDOMNodePointer0.equals((Object) null);
    assertFalse(boolean0);
}",""
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof JDOMNodePointer)) {
        return false;
    }
    JDOMNodePointer other = (JDOMNodePointer) object;
    return node == other.node;
}","public void test7281() throws Throwable {
    Locale locale0 = Locale.CANADA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, (Object) null);
    boolean boolean0 = jDOMNodePointer1.equals(jDOMNodePointer0);
    assertFalse(boolean0);
}",""
