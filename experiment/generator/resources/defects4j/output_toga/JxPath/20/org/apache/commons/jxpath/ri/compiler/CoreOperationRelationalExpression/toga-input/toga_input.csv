focal_method,test_prefix,docstring
"protected final boolean isSymmetric() {
    return false;
}","public void test000() throws Throwable {
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
    CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreOperationNotEqual0);
    boolean boolean0 = coreOperationGreaterThanOrEqual0.isSymmetric();
    assertFalse(boolean0);
}",""
"protected final int getPrecedence() {
    return RELATIONAL_EXPR_PRECEDENCE;
}","public void test011() throws Throwable {
    Constant constant0 = new Constant((Number) null);
    CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract0, coreOperationSubtract0);
    CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, coreOperationMultiply0);
    int int0 = coreOperationGreaterThan0.getPrecedence();
    assertEquals(3, int0);
}",""
"public final Object computeValue(EvalContext context) {
    return compute(args[0].compute(context), args[1].compute(context)) ? Boolean.TRUE : Boolean.FALSE;
}","public void test022() throws Throwable {
    Expression[] expressionArray0 = new Expression[4];
    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
    expressionArray0[0] = (Expression) coreOperationAnd0;
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationAnd0);
    CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationMultiply0);
    // Undeclared exception!
    coreOperationGreaterThan0.computeValue((EvalContext) null);
}",""
"public final Object computeValue(EvalContext context) {
    return compute(args[0].compute(context), args[1].compute(context)) ? Boolean.TRUE : Boolean.FALSE;
}","public void test033() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((JXPathContext) null, (Object) "".1Ak)=pVPJ;z|U+dod"");
    BasicVariables basicVariables0 = new BasicVariables();
    Expression[] expressionArray0 = new Expression[3];
    CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(22);
    QName qName0 = new QName(""jsO\u0002X209)EB"");
    CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, expressionArray0[1]);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, expressionArray0[0]);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
    SelfContext selfContext0 = new SelfContext(rootContext0, nodeTypeTest0);
    // Undeclared exception!
    try {
        coreOperationLessThan0.computeValue(selfContext0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: lang(org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000007 * org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000007, null, null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public final Object computeValue(EvalContext context) {
    return compute(args[0].compute(context), args[1].compute(context)) ? Boolean.TRUE : Boolean.FALSE;
}","public void test044() throws Throwable {
    CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
    QName qName0 = new QName(""W"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
    // Undeclared exception!
    try {
        coreOperationGreaterThanOrEqual0.computeValue(ancestorContext0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression"", e);
    }
}",""
"public final Object computeValue(EvalContext context) {
    return compute(args[0].compute(context), args[1].compute(context)) ? Boolean.TRUE : Boolean.FALSE;
}","public void test055() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
    CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
    coreOperationGreaterThanOrEqual0.args = expressionArray0;
    CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
    // Undeclared exception!
    try {
        coreOperationGreaterThan0.computeValue((EvalContext) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression"", e);
    }
}",""
"public final Object computeValue(EvalContext context) {
    return compute(args[0].compute(context), args[1].compute(context)) ? Boolean.TRUE : Boolean.FALSE;
}","public void test066() throws Throwable {
    Constant constant0 = new Constant(""org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression"");
    CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
    CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, coreOperationMod0);
    CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, coreOperationMod0);
    // Undeclared exception!
    try {
        coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // / by zero
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreOperationMod"", e);
    }
}",""
"public final Object computeValue(EvalContext context) {
    return compute(args[0].compute(context), args[1].compute(context)) ? Boolean.TRUE : Boolean.FALSE;
}","public void test077() throws Throwable {
    QName qName0 = new QName(""org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression"");
    VariableReference variableReference0 = new VariableReference(qName0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
    SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) selfContext0);
    InitialContext initialContext0 = (InitialContext) jXPathContextReferenceImpl0.getAbsoluteRootContext();
    RootContext rootContext0 = initialContext0.getRootContext();
    Boolean boolean0 = (Boolean) coreOperationLessThan0.computeValue(rootContext0);
    assertFalse(boolean0);
}",""
"public Object selectSingleNode(String xpath) {
    Pointer pointer = getPointer(xpath);
    return pointer == null ? null : pointer.getNode();
}","public void test088() throws Throwable {
    JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) "".1Ak)=pVPJ;z|U+dod"");
    Object object0 = jXPathContext0.selectSingleNode(""/>g"");
    assertEquals(false, object0);
}","/**
 * Finds the first object that matches the specified XPath. It is equivalent
 * to <code>getPointer(xpath).getNode()</code>. Note that this method
 * produces the same result as <code>getValue()</code> on object models
 * like JavaBeans, but a different result for DOM/JDOM etc., because it
 * returns the Node itself, rather than its textual contents.
 *
 * @param xpath the xpath to be evaluated
 * @return the found object
 */"
"public final Object computeValue(EvalContext context) {
    return compute(args[0].compute(context), args[1].compute(context)) ? Boolean.TRUE : Boolean.FALSE;
}","public void test099() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
    CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
    Object object0 = coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
    assertEquals(true, object0);
}",""
"public Iterator iterate(EvalContext context) {
    Object result = compute(context);
    if (result instanceof EvalContext) {
        return new ValueIterator((EvalContext) result);
    }
    if (result instanceof NodeSet) {
        return new ValueIterator(((NodeSet) result).getPointers().iterator());
    }
    return ValueUtils.iterate(result);
}","public void test1010() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
    CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, coreOperationAnd0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMultiply0, coreOperationDivide0);
    CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationLessThan0);
    CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationDivide0);
    Iterator iterator0 = coreOperationGreaterThanOrEqual0.iterate((EvalContext) null);
    assertNotNull(iterator0);
}","/**
 * Iterate over the values from the specified context.
 * @param context evaluation context
 * @return value Iterator
 */"
