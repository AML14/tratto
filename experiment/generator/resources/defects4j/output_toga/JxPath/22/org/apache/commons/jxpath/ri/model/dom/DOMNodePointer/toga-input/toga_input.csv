focal_method,test_prefix,docstring
"public Object getValue() {
    if (node.getNodeType() == Node.COMMENT_NODE) {
        String text = ((Comment) node).getData();
        return text == null ? """" : text.trim();
    }
    return stringValue(node);
}","public void test000() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Node node0 = iIOMetadataNode0.removeChild(iIOMetadataNode0);
    Locale locale0 = Locale.PRC;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0);
    Object object0 = dOMNodePointer0.getValue();
    assertEquals("""", object0);
}",""
"public static String getNamespaceURI(Node node) {
    if (node instanceof Document) {
        node = ((Document) node).getDocumentElement();
    }
    Element element = (Element) node;
    String uri = element.getNamespaceURI();
    if (uri == null) {
        String prefix = getPrefix(node);
        String qname = prefix == null ? ""xmlns"" : ""xmlns:"" + prefix;
        Node aNode = node;
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(qname);
                if (attr != null) {
                    return attr.getValue();
                }
            }
            aNode = aNode.getParentNode();
        }
        return null;
    }
    return uri;
}","public void test011() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""\""descendant:"");
    Node node0 = iIOMetadataNode0.cloneNode(true);
    Node node1 = iIOMetadataNode0.insertBefore(node0, node0);
    String string0 = DOMNodePointer.getNamespaceURI(node1);
    assertNull(string0);
}","/**
 * Get the ns uri of the specified node.
 * @param node Node to check
 * @return String ns uri
 */"
"public boolean testNode(NodeTest test) {
    return testNode(node, test);
}","public void test022() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""\""descendant::\"""");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    QName qName0 = dOMNodePointer0.getName();
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
    assertTrue(boolean0);
}",""
"public String toString() {
    return qname.toString();
}","public void test023() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""\""descendant::\"""");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    QName qName0 = dOMNodePointer0.getName();
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
    assertEquals(""\""descendant::\""descendant::\"""", nodeNameTest0.toString());
}",""
"public boolean isLanguage(String lang) {
    String current = getLanguage();
    return current == null ? super.isLanguage(lang) : current.toUpperCase(Locale.ENGLISH).startsWith(lang.toUpperCase(Locale.ENGLISH));
}","public void test034() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.CANADA_FRENCH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, """");
    boolean boolean0 = dOMNodePointer0.isLanguage("""");
    assertTrue(boolean0);
}","/**
 * Returns true if the xml:lang attribute for the current node
 * or its parent has the specified prefix <i>lang</i>.
 * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.
 * @param lang ns to test
 * @return boolean
 */"
"public static String getLocalName(Node node) {
    String localName = node.getLocalName();
    if (localName != null) {
        return localName;
    }
    String name = node.getNodeName();
    int index = name.lastIndexOf(':');
    return index < 0 ? name : name.substring(index + 1);
}","public void test045() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""9D/ze,^TeRr!e"");
    String string0 = DOMNodePointer.getLocalName(iIOMetadataNode0);
    assertEquals(""9D/ze,^TeRr!e"", string0);
}","/**
 * Get the local name of the specified node.
 * @param node node to check
 * @return String local name
 */"
"protected String getLanguage() {
    return findEnclosingAttribute(node, ""xml:lang"");
}","public void test056() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    String string0 = dOMNodePointer0.getLanguage();
    assertNull(string0);
}","/**
 * Get the language attribute for this node.
 * @return String language name
 */"
"public Object getImmediateNode() {
    return node;
}","public void test067() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
    Locale locale0 = Locale.KOREAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    Object object0 = dOMNodePointer0.getImmediateNode();
    assertSame(iIOMetadataNode0, object0);
}",""
"public Object getBaseValue() {
    return node;
}","public void test078() throws Throwable {
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null);
    Object object0 = dOMNodePointer0.getBaseValue();
    assertNull(object0);
}",""
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test089() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
    // Undeclared exception!
    try {
        DOMNodePointer.testNode((Node) null, (NodeTest) nodeTypeTest0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}","/**
 * Test a Node.
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public boolean testNode(NodeTest test) {
    return testNode(node, test);
}","public void test0910() throws Throwable {
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, (Node) null);
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    // Undeclared exception!
    try {
        dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public void remove() {
    Node parent = node.getParentNode();
    if (parent == null) {
        throw new JXPathException(""Cannot remove root DOM node"");
    }
    parent.removeChild(node);
}","public void test1011() throws Throwable {
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null);
    // Undeclared exception!
    try {
        dOMNodePointer0.remove();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public NodeIterator namespaceIterator() {
    return new DOMNamespaceIterator(this);
}","public void test1112() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    // Undeclared exception!
    try {
        dOMNodePointer0.namespaceIterator();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator"", e);
    }
}",""
"public boolean isLeaf() {
    return !node.hasChildNodes();
}","public void test1213() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    // Undeclared exception!
    try {
        dOMNodePointer0.isLeaf();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public boolean isLanguage(String lang) {
    String current = getLanguage();
    return current == null ? super.isLanguage(lang) : current.toUpperCase(Locale.ENGLISH).startsWith(lang.toUpperCase(Locale.ENGLISH));
}","public void test1314() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, iIOMetadataNode0);
    // Undeclared exception!
    try {
        dOMNodePointer0.isLanguage(""<<unknown namespace>>"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}","/**
 * Returns true if the xml:lang attribute for the current node
 * or its parent has the specified prefix <i>lang</i>.
 * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.
 * @param lang ns to test
 * @return boolean
 */"
"public Object getValue() {
    if (node.getNodeType() == Node.COMMENT_NODE) {
        String text = ((Comment) node).getData();
        return text == null ? """" : text.trim();
    }
    return stringValue(node);
}","public void test1415() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Node node0 = iIOMetadataNode0.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
    Locale locale0 = Locale.PRC;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0);
    // Undeclared exception!
    dOMNodePointer0.getValue();
}",""
"public Object getValue() {
    if (node.getNodeType() == Node.COMMENT_NODE) {
        String text = ((Comment) node).getData();
        return text == null ? """" : text.trim();
    }
    return stringValue(node);
}","public void test1516() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, (String) null);
    // Undeclared exception!
    try {
        dOMNodePointer0.getValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public static String getPrefix(Node node) {
    String prefix = node.getPrefix();
    if (prefix != null) {
        return prefix;
    }
    String name = node.getNodeName();
    int index = name.lastIndexOf(':');
    return index < 0 ? null : name.substring(0, index);
}","public void test1617() throws Throwable {
    // Undeclared exception!
    try {
        DOMNodePointer.getPrefix((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}","/**
 * Get any prefix from the specified node.
 * @param node the node to check
 * @return String xml prefix
 */"
"public static String getNamespaceURI(Node node) {
    if (node instanceof Document) {
        node = ((Document) node).getDocumentElement();
    }
    Element element = (Element) node;
    String uri = element.getNamespaceURI();
    if (uri == null) {
        String prefix = getPrefix(node);
        String qname = prefix == null ? ""xmlns"" : ""xmlns:"" + prefix;
        Node aNode = node;
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(qname);
                if (attr != null) {
                    return attr.getValue();
                }
            }
            aNode = aNode.getParentNode();
        }
        return null;
    }
    return uri;
}","public void test1718() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.util.TypeUtils$1"");
    iIOMetadataNode0.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
    // Undeclared exception!
    DOMNodePointer.getNamespaceURI((Node) iIOMetadataNode0);
}","/**
 * Get the ns uri of the specified node.
 * @param node Node to check
 * @return String ns uri
 */"
"public static String getNamespaceURI(Node node) {
    if (node instanceof Document) {
        node = ((Document) node).getDocumentElement();
    }
    Element element = (Element) node;
    String uri = element.getNamespaceURI();
    if (uri == null) {
        String prefix = getPrefix(node);
        String qname = prefix == null ? ""xmlns"" : ""xmlns:"" + prefix;
        Node aNode = node;
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(qname);
                if (attr != null) {
                    return attr.getValue();
                }
            }
            aNode = aNode.getParentNode();
        }
        return null;
    }
    return uri;
}","public void test1819() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    // Undeclared exception!
    try {
        DOMNodePointer.getNamespaceURI((Node) iIOMetadataNode0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}","/**
 * Get the ns uri of the specified node.
 * @param node Node to check
 * @return String ns uri
 */"
"public String getNamespaceURI() {
    return getNamespaceURI(node);
}","public void test1920() throws Throwable {
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null, ""SR2xw+9Lr#}&r&(e^^"");
    // Undeclared exception!
    try {
        dOMNodePointer0.getNamespaceURI();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public QName getName() {
    String ln = null;
    String ns = null;
    int type = node.getNodeType();
    if (type == Node.ELEMENT_NODE) {
        ns = DOMNodePointer.getPrefix(node);
        ln = DOMNodePointer.getLocalName(node);
    } else if (type == Node.PROCESSING_INSTRUCTION_NODE) {
        ln = ((ProcessingInstruction) node).getTarget();
    }
    return new QName(ns, ln);
}","public void test2021() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, """");
    // Undeclared exception!
    try {
        dOMNodePointer0.getName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"protected static String findEnclosingAttribute(Node n, String attrName) {
    while (n != null) {
        if (n.getNodeType() == Node.ELEMENT_NODE) {
            Element e = (Element) n;
            String attr = e.getAttribute(attrName);
            if (attr != null && !attr.equals("""")) {
                return attr;
            }
        }
        n = n.getParentNode();
    }
    return null;
}","public void test2122() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    QName qName0 = dOMNodePointer0.getName();
    dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    // Undeclared exception!
    try {
        DOMNodePointer.findEnclosingAttribute(iIOMetadataNode0, (String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Find the nearest occurrence of the specified attribute
 * on the specified and enclosing elements.
 * @param n current node
 * @param attrName attribute name
 * @return attribute value
 */"
"public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {
    NodePointer ptr = createChild(context, name, index);
    ptr.setValue(value);
    return ptr;
}","public void test2223() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, iIOMetadataNode0);
    // Undeclared exception!
    try {
        dOMNodePointer0.createChild((JXPathContext) null, (QName) null, (-2157), (Object) dOMNodePointer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index) {
    if (index == WHOLE_COLLECTION) {
        index = 0;
    }
    boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);
    if (success) {
        NodeTest nodeTest;
        String prefix = name.getPrefix();
        String namespaceURI = prefix == null ? null : context.getNamespaceURI(prefix);
        nodeTest = new NodeNameTest(name, namespaceURI);
        NodeIterator it = childIterator(nodeTest, false, null);
        if (it != null && it.setPosition(index + 1)) {
            return it.getNodePointer();
        }
    }
    throw new JXPathAbstractFactoryException(""Factory could not create a child node for path: "" + asPath() + ""/"" + name + ""["" + (index + 1) + ""]"");
}","public void test2324() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
    QName qName0 = new QName(""L6EZCml!Dp ,k`njD~"");
    // Undeclared exception!
    try {
        dOMNodePointer0.createChild(jXPathContext0, qName0, (-3763));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Node node1 = (Node) pointer1.getBaseValue();
    Node node2 = (Node) pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    int t1 = node1.getNodeType();
    int t2 = node2.getNodeType();
    if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {
        return -1;
    }
    if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        return 1;
    }
    if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        NamedNodeMap map = ((Node) getNode()).getAttributes();
        int length = map.getLength();
        for (int i = 0; i < length; i++) {
            Node n = map.item(i);
            if (n == node1) {
                return -1;
            }
            if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    Node current = node.getFirstChild();
    while (current != null) {
        if (current == node1) {
            return -1;
        }
        if (current == node2) {
            return 1;
        }
        current = current.getNextSibling();
    }
    return 0;
}","public void test2425() throws Throwable {
    Locale locale0 = Locale.US;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, ""["");
    QName qName0 = new QName(""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        dOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: <<unknown namespace>>
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Node node1 = (Node) pointer1.getBaseValue();
    Node node2 = (Node) pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    int t1 = node1.getNodeType();
    int t2 = node2.getNodeType();
    if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {
        return -1;
    }
    if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        return 1;
    }
    if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        NamedNodeMap map = ((Node) getNode()).getAttributes();
        int length = map.getLength();
        for (int i = 0; i < length; i++) {
            Node n = map.item(i);
            if (n == node1) {
                return -1;
            }
            if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    Node current = node.getFirstChild();
    while (current != null) {
        if (current == node1) {
            return -1;
        }
        if (current == node2) {
            return 1;
        }
        current = current.getNextSibling();
    }
    return 0;
}","public void test2526() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    QName qName0 = dOMNodePointer0.getName();
    NodePointer nodePointer0 = dOMNodePointer0.namespacePointer(""Aau%'&Zb4%W)q7OWA"");
    NodePointer nodePointer1 = dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    // Undeclared exception!
    try {
        dOMNodePointer0.compareChildNodePointers(nodePointer0, nodePointer1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
    return new DOMNodeIterator(this, test, reverse, startWith);
}","public void test2627() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, (Node) null);
    // Undeclared exception!
    try {
        dOMNodePointer0.childIterator((NodeTest) null, true, variablePointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable:
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}",""
"public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
    return new DOMNodeIterator(this, test, reverse, startWith);
}","public void test2728() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""`"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, (Node) null);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    // Undeclared exception!
    try {
        dOMNodePointer0.childIterator(nodeTypeTest0, false, variablePointer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: '`'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",""
"public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
    return new DOMNodeIterator(this, test, reverse, startWith);
}","public void test2829() throws Throwable {
    Locale locale0 = Locale.CHINESE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, ""4"");
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""4"");
    QName qName0 = new QName(""<<unknown namespace>>"", ""0ipz]M*_C-M8E0:"");
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, processingInstructionTest0);
    // Undeclared exception!
    try {
        dOMNodePointer0.childIterator(processingInstructionTest0, false, nodePointer0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest cannot be cast to org.w3c.dom.Node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator"", e);
    }
}",""
"public NodeIterator attributeIterator(QName name) {
    return new DOMAttributeIterator(this, name);
}","public void test2930() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""xml:space"");
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    // Undeclared exception!
    try {
        dOMNodePointer0.attributeIterator((QName) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator"", e);
    }
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    switch(node.getNodeType()) {
        case Node.ELEMENT_NODE:
            // If the parent pointer is not a DOMNodePointer, it is
            // the parent's responsibility to produce the node test part
            // of the path
            if (parent instanceof DOMNodePointer) {
                if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                    buffer.append('/');
                }
                String ln = DOMNodePointer.getLocalName(node);
                String nsURI = getNamespaceURI();
                if (nsURI == null) {
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName()).append(']');
                } else {
                    String prefix = getNamespaceResolver().getPrefix(nsURI);
                    if (prefix != null) {
                        buffer.append(prefix);
                        buffer.append(':');
                        buffer.append(ln);
                        buffer.append('[');
                        buffer.append(getRelativePositionByQName());
                        buffer.append(']');
                    } else {
                        buffer.append(""node()"");
                        buffer.append('[');
                        buffer.append(getRelativePositionOfElement());
                        buffer.append(']');
                    }
                }
            }
            break;
        case Node.TEXT_NODE:
        case Node.CDATA_SECTION_NODE:
            buffer.append(""/text()"");
            buffer.append('[');
            buffer.append(getRelativePositionOfTextNode()).append(']');
            break;
        case Node.PROCESSING_INSTRUCTION_NODE:
            buffer.append(""/processing-instruction(\'"");
            buffer.append(((ProcessingInstruction) node).getTarget()).append(""')"");
            buffer.append('[');
            buffer.append(getRelativePositionOfPI()).append(']');
            break;
        case Node.DOCUMENT_NODE:
            // That'll be empty
            break;
        default:
            break;
    }
    return buffer.toString();
}","public void test3031() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.KOREAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, iIOMetadataNode0);
    // Undeclared exception!
    try {
        dOMNodePointer1.asPath();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public Object getValue() {
    if (node.getNodeType() == Node.COMMENT_NODE) {
        String text = ((Comment) node).getData();
        return text == null ? """" : text.trim();
    }
    return stringValue(node);
}","public void test3132() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""["");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    Object object0 = dOMNodePointer0.getValue();
    assertEquals("""", object0);
}",""
"public static String getLocalName(Node node) {
    String localName = node.getLocalName();
    if (localName != null) {
        return localName;
    }
    String name = node.getNodeName();
    int index = name.lastIndexOf(':');
    return index < 0 ? name : name.substring(index + 1);
}","public void test3233() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    String string0 = DOMNodePointer.getLocalName(iIOMetadataNode0);
    assertEquals("""", string0);
}","/**
 * Get the local name of the specified node.
 * @param node node to check
 * @return String local name
 */"
"public static String getLocalName(Node node) {
    String localName = node.getLocalName();
    if (localName != null) {
        return localName;
    }
    String name = node.getNodeName();
    int index = name.lastIndexOf(':');
    return index < 0 ? name : name.substring(index + 1);
}","public void test3334() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    // Undeclared exception!
    try {
        DOMNodePointer.getLocalName(iIOMetadataNode0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}","/**
 * Get the local name of the specified node.
 * @param node node to check
 * @return String local name
 */"
"public static String getPrefix(Node node) {
    String prefix = node.getPrefix();
    if (prefix != null) {
        return prefix;
    }
    String name = node.getNodeName();
    int index = name.lastIndexOf(':');
    return index < 0 ? null : name.substring(0, index);
}","public void test3435() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""xml:space"");
    String string0 = DOMNodePointer.getPrefix(iIOMetadataNode0);
    assertEquals(""xml"", string0);
}","/**
 * Get any prefix from the specified node.
 * @param node the node to check
 * @return String xml prefix
 */"
"public static String getPrefix(Node node) {
    String prefix = node.getPrefix();
    if (prefix != null) {
        return prefix;
    }
    String name = node.getNodeName();
    int index = name.lastIndexOf(':');
    return index < 0 ? null : name.substring(0, index);
}","public void test3537() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""02z<"");
    String string0 = DOMNodePointer.getPrefix(iIOMetadataNode0);
    assertNull(string0);
}","/**
 * Get any prefix from the specified node.
 * @param node the node to check
 * @return String xml prefix
 */"
"public String asPath() {
    // If the parent of this node is a container, it is responsible
    // for appended this node's part of the path.
    if (parent != null && parent.isContainer()) {
        return parent.asPath();
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
        buffer.append('/');
    }
    if (attribute) {
        buffer.append('@');
    }
    buffer.append(getName());
    if (index != WHOLE_COLLECTION && isCollection()) {
        buffer.append('[').append(index + 1).append(']');
    }
    return buffer.toString();
}","public void test3638() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(""79t<8=6$\""(>T"");
    Node node0 = iIOMetadataNode1.cloneNode(false);
    Node node1 = iIOMetadataNode0.replaceChild(node0, node0);
    Locale locale0 = Locale.GERMANY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node1, locale0);
    QName qName0 = dOMNodePointer0.getName();
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, iIOMetadataNode1);
    String string0 = nodePointer0.asPath();
    assertEquals(""/79t<8=6$\""(>T[1]"", string0);
}","/**
 * Returns an XPath that maps to this Pointer.
 * @return String xpath expression
 */"
"public String toString() {
    return qualifiedName;
}","public void test3639() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(""79t<8=6$\""(>T"");
    Node node0 = iIOMetadataNode1.cloneNode(false);
    Node node1 = iIOMetadataNode0.replaceChild(node0, node0);
    Locale locale0 = Locale.GERMANY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node1, locale0);
    QName qName0 = dOMNodePointer0.getName();
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, iIOMetadataNode1);
    String string0 = nodePointer0.asPath();
    assertEquals(""79t<8=6$\""(>T"", qName0.toString());
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    switch(node.getNodeType()) {
        case Node.ELEMENT_NODE:
            // If the parent pointer is not a DOMNodePointer, it is
            // the parent's responsibility to produce the node test part
            // of the path
            if (parent instanceof DOMNodePointer) {
                if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                    buffer.append('/');
                }
                String ln = DOMNodePointer.getLocalName(node);
                String nsURI = getNamespaceURI();
                if (nsURI == null) {
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName()).append(']');
                } else {
                    String prefix = getNamespaceResolver().getPrefix(nsURI);
                    if (prefix != null) {
                        buffer.append(prefix);
                        buffer.append(':');
                        buffer.append(ln);
                        buffer.append('[');
                        buffer.append(getRelativePositionByQName());
                        buffer.append(']');
                    } else {
                        buffer.append(""node()"");
                        buffer.append('[');
                        buffer.append(getRelativePositionOfElement());
                        buffer.append(']');
                    }
                }
            }
            break;
        case Node.TEXT_NODE:
        case Node.CDATA_SECTION_NODE:
            buffer.append(""/text()"");
            buffer.append('[');
            buffer.append(getRelativePositionOfTextNode()).append(']');
            break;
        case Node.PROCESSING_INSTRUCTION_NODE:
            buffer.append(""/processing-instruction(\'"");
            buffer.append(((ProcessingInstruction) node).getTarget()).append(""')"");
            buffer.append('[');
            buffer.append(getRelativePositionOfPI()).append(']');
            break;
        case Node.DOCUMENT_NODE:
            // That'll be empty
            break;
        default:
            break;
    }
    return buffer.toString();
}","public void test3740() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, iIOMetadataNode0);
    String string0 = dOMNodePointer0.asPath();
    assertEquals("""", string0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    switch(node.getNodeType()) {
        case Node.ELEMENT_NODE:
            // If the parent pointer is not a DOMNodePointer, it is
            // the parent's responsibility to produce the node test part
            // of the path
            if (parent instanceof DOMNodePointer) {
                if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                    buffer.append('/');
                }
                String ln = DOMNodePointer.getLocalName(node);
                String nsURI = getNamespaceURI();
                if (nsURI == null) {
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByQName()).append(']');
                } else {
                    String prefix = getNamespaceResolver().getPrefix(nsURI);
                    if (prefix != null) {
                        buffer.append(prefix);
                        buffer.append(':');
                        buffer.append(ln);
                        buffer.append('[');
                        buffer.append(getRelativePositionByQName());
                        buffer.append(']');
                    } else {
                        buffer.append(""node()"");
                        buffer.append('[');
                        buffer.append(getRelativePositionOfElement());
                        buffer.append(']');
                    }
                }
            }
            break;
        case Node.TEXT_NODE:
        case Node.CDATA_SECTION_NODE:
            buffer.append(""/text()"");
            buffer.append('[');
            buffer.append(getRelativePositionOfTextNode()).append(']');
            break;
        case Node.PROCESSING_INSTRUCTION_NODE:
            buffer.append(""/processing-instruction(\'"");
            buffer.append(((ProcessingInstruction) node).getTarget()).append(""')"");
            buffer.append('[');
            buffer.append(getRelativePositionOfPI()).append(']');
            break;
        case Node.DOCUMENT_NODE:
            // That'll be empty
            break;
        default:
            break;
    }
    return buffer.toString();
}","public void test3841() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""["");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    String string0 = dOMNodePointer0.asPath();
    assertEquals(""id(']')"", string0);
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index) {
    if (index == WHOLE_COLLECTION) {
        index = 0;
    }
    boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);
    if (success) {
        NodeTest nodeTest;
        String prefix = name.getPrefix();
        String namespaceURI = prefix == null ? null : context.getNamespaceURI(prefix);
        nodeTest = new NodeNameTest(name, namespaceURI);
        NodeIterator it = childIterator(nodeTest, false, null);
        if (it != null && it.setPosition(index + 1)) {
            return it.getNodePointer();
        }
    }
    throw new JXPathAbstractFactoryException(""Factory could not create a child node for path: "" + asPath() + ""/"" + name + ""["" + (index + 1) + ""]"");
}","public void test3942() throws Throwable {
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory"");
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, ""org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory"");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
    // Undeclared exception!
    try {
        dOMNodePointer0.createChild(jXPathContext0, (QName) null, Integer.MIN_VALUE);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Factory is not set on the JXPathContext - cannot create path: id('org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory')
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",""
"public String getDefaultNamespaceURI() {
    if (defaultNamespace == null) {
        Node aNode = node;
        if (aNode instanceof Document) {
            aNode = ((Document) aNode).getDocumentElement();
        }
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(""xmlns"");
                if (attr != null) {
                    defaultNamespace = attr.getValue();
                    break;
                }
            }
            aNode = aNode.getParentNode();
        }
    }
    if (defaultNamespace == null) {
        defaultNamespace = """";
    }
    // TBD: We are supposed to resolve relative URIs to absolute ones.
    return defaultNamespace.equals("""") ? null : defaultNamespace;
}","public void test4043() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, """");
    dOMNodePointer0.getDefaultNamespaceURI();
    String string0 = dOMNodePointer0.getDefaultNamespaceURI();
    assertNull(string0);
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix == null || prefix.equals("""")) {
        return getDefaultNamespaceURI();
    }
    if (prefix.equals(""xml"")) {
        return XML_NAMESPACE_URI;
    }
    if (prefix.equals(""xmlns"")) {
        return XMLNS_NAMESPACE_URI;
    }
    String namespace = null;
    if (namespaces == null) {
        namespaces = new HashMap();
    } else {
        namespace = (String) namespaces.get(prefix);
    }
    if (namespace == null) {
        String qname = ""xmlns:"" + prefix;
        Node aNode = node;
        if (aNode instanceof Document) {
            aNode = ((Document) aNode).getDocumentElement();
        }
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(qname);
                if (attr != null) {
                    namespace = attr.getValue();
                    break;
                }
            }
            aNode = aNode.getParentNode();
        }
        if (namespace == null || namespace.equals("""")) {
            namespace = NodePointer.UNKNOWN_NAMESPACE;
        }
    }
    namespaces.put(prefix, namespace);
    if (namespace == UNKNOWN_NAMESPACE) {
        return null;
    }
    // TBD: We are supposed to resolve relative URIs to absolute ones.
    return namespace;
}","public void test4144() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.PRC;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    String string0 = dOMNodePointer0.getNamespaceURI(""xmlns"");
    assertNotNull(string0);
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix == null || prefix.equals("""")) {
        return getDefaultNamespaceURI();
    }
    if (prefix.equals(""xml"")) {
        return XML_NAMESPACE_URI;
    }
    if (prefix.equals(""xmlns"")) {
        return XMLNS_NAMESPACE_URI;
    }
    String namespace = null;
    if (namespaces == null) {
        namespaces = new HashMap();
    } else {
        namespace = (String) namespaces.get(prefix);
    }
    if (namespace == null) {
        String qname = ""xmlns:"" + prefix;
        Node aNode = node;
        if (aNode instanceof Document) {
            aNode = ((Document) aNode).getDocumentElement();
        }
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(qname);
                if (attr != null) {
                    namespace = attr.getValue();
                    break;
                }
            }
            aNode = aNode.getParentNode();
        }
        if (namespace == null || namespace.equals("""")) {
            namespace = NodePointer.UNKNOWN_NAMESPACE;
        }
    }
    namespaces.put(prefix, namespace);
    if (namespace == UNKNOWN_NAMESPACE) {
        return null;
    }
    // TBD: We are supposed to resolve relative URIs to absolute ones.
    return namespace;
}","public void test4246() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""Lwlq8hR*hLL`$^%"");
    String string0 = dOMNodePointer0.getNamespaceURI(""org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl"");
    assertNull(string0);
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix == null || prefix.equals("""")) {
        return getDefaultNamespaceURI();
    }
    if (prefix.equals(""xml"")) {
        return XML_NAMESPACE_URI;
    }
    if (prefix.equals(""xmlns"")) {
        return XMLNS_NAMESPACE_URI;
    }
    String namespace = null;
    if (namespaces == null) {
        namespaces = new HashMap();
    } else {
        namespace = (String) namespaces.get(prefix);
    }
    if (namespace == null) {
        String qname = ""xmlns:"" + prefix;
        Node aNode = node;
        if (aNode instanceof Document) {
            aNode = ((Document) aNode).getDocumentElement();
        }
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(qname);
                if (attr != null) {
                    namespace = attr.getValue();
                    break;
                }
            }
            aNode = aNode.getParentNode();
        }
        if (namespace == null || namespace.equals("""")) {
            namespace = NodePointer.UNKNOWN_NAMESPACE;
        }
    }
    namespaces.put(prefix, namespace);
    if (namespace == UNKNOWN_NAMESPACE) {
        return null;
    }
    // TBD: We are supposed to resolve relative URIs to absolute ones.
    return namespace;
}","public void test4347() throws Throwable {
    Locale locale0 = new Locale(""java.util.concurrent.atomic.AtomicBoolean"", ""{*"", ""{*"");
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "".0"");
    String string0 = dOMNodePointer0.getNamespaceURI("""");
    assertNull(string0);
}",""
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4448() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""["");
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""http://www.w3.org/XML/1998/namespace"");
    boolean boolean0 = DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) processingInstructionTest0);
    assertFalse(boolean0);
}","/**
 * Test a Node.
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4549() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""["");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    QName qName0 = dOMNodePointer0.getName();
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    boolean boolean0 = DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) nodeNameTest0);
    assertTrue(boolean0);
}","/**
 * Test a Node.
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public String toString() {
    return qname.toString();
}","public void test4550() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""["");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    QName qName0 = dOMNodePointer0.getName();
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    boolean boolean0 = DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) nodeNameTest0);
    assertEquals(""["", nodeNameTest0.toString());
}",""
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4651() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""["");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    QName qName0 = dOMNodePointer0.getName();
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) nodeNameTest0);
    assertTrue(boolean0);
}","/**
 * Test a Node.
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public String toString() {
    return qname.toString();
}","public void test4652() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""["");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    QName qName0 = dOMNodePointer0.getName();
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) nodeNameTest0);
    assertEquals(""["", nodeNameTest0.toString());
}",""
"public Object getImmediateNode() {
    return node;
}","public void test4753() throws Throwable {
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    Object object0 = dOMNodePointer0.getImmediateNode();
    assertNull(object0);
}",""
"public Object getBaseValue() {
    return node;
}","public void test4854() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.GERMANY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    Object object0 = dOMNodePointer0.getBaseValue();
    assertSame(iIOMetadataNode0, object0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Node node1 = (Node) pointer1.getBaseValue();
    Node node2 = (Node) pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    int t1 = node1.getNodeType();
    int t2 = node2.getNodeType();
    if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {
        return -1;
    }
    if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        return 1;
    }
    if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        NamedNodeMap map = ((Node) getNode()).getAttributes();
        int length = map.getLength();
        for (int i = 0; i < length; i++) {
            Node n = map.item(i);
            if (n == node1) {
                return -1;
            }
            if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    Node current = node.getFirstChild();
    while (current != null) {
        if (current == node1) {
            return -1;
        }
        if (current == node2) {
            return 1;
        }
        current = current.getNextSibling();
    }
    return 0;
}","public void test4955() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.GERMANY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer0);
    assertEquals(0, int0);
}",""
"public Pointer getPointerByID(JXPathContext context, String id) {
    Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument();
    Element element = document.getElementById(id);
    return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id);
}","public void test5056() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, iIOMetadataNode0);
    // Undeclared exception!
    try {
        dOMNodePointer0.getPointerByID((JXPathContext) null, ""+GtYQI&%Zq2"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}","/**
 * Locates a node by ID.
 * @param context starting context
 * @param id to find
 * @return Pointer
 */"
"int getPosition();","public void test5157() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    iIOMetadataNode0.setAttribute("""", (String) null);
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, """");
    NodeIterator nodeIterator0 = dOMNodePointer0.namespaceIterator();
    assertEquals(0, nodeIterator0.getPosition());
}","/**
 * Get the current iterator position.
 * @return int position
 */"
"public boolean equals(Object object) {
    return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;
}","public void test5258() throws Throwable {
    Locale locale0 = Locale.US;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""\""floor\"""", ""http://www.w3.org/XML/1998/namespace"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    DOMNodePointer dOMNodePointer1 = new DOMNodePointer(variablePointer0, (Node) null);
    boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer1);
    assertTrue(boolean0);
}",""
"public boolean equals(Object object) {
    return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;
}","public void test5359() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.GERMANY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    boolean boolean0 = dOMNodePointer0.equals(""79t<8=6$\""(>T"");
    assertFalse(boolean0);
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {
    throw new JXPathException(""Cannot create an object for path "" + asPath() + ""/"" + name + ""["" + (index + 1) + ""]"" + "", operation is not allowed for this type of node"");
}","public void test5460() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""79t<8=6$\""(>T"");
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    QName qName0 = dOMNodePointer0.getName();
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, iIOMetadataNode0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) """");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
    // Undeclared exception!
    try {
        nodePointer0.createChild(jXPathContext0, qName0, 47, (Object) nodeNameTest0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Factory is not set on the JXPathContext - cannot create path: /79t<8=6$\""(>T[1]
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}","/**
 * Called by a child pointer if that child needs to assign the value
 * supplied in the createPath(context, value) call to a non-existent
 * node. This method may have to expand the collection in order to assign
 * the element.
 * @param context the owning JXPathCOntext
 * @param name the QName at which a child should be created
 * @param index child index.
 * @param value node value to set
 * @return created NodePointer
 */"
"public void remove() {
    Node parent = node.getParentNode();
    if (parent == null) {
        throw new JXPathException(""Cannot remove root DOM node"");
    }
    parent.removeChild(node);
}","public void test5561() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""\""descendant:"");
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, (Locale) null);
    // Undeclared exception!
    try {
        dOMNodePointer0.remove();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot remove root DOM node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public boolean isNode() {
    return !isContainer();
}","public void test5662() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Node node0 = iIOMetadataNode0.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0, """");
    dOMNodePointer0.remove();
    assertTrue(dOMNodePointer0.isNode());
}","/**
 * Learn whether this pointer is considered to be a node.
 * @return boolean
 * @deprecated Please use !isContainer()
 */"
"public String getName() {
    return name;
}","public void test5763() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    iIOMetadataNode0.setAttribute("""", (String) null);
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, """");
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""xml:space"");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstructionTest0);
    QName qName0 = dOMNodePointer0.getName();
    dOMNodePointer0.createAttribute(jXPathContext0, qName0);
    assertEquals("""", qName0.getName());
}","/**
 * Get the local name.
 * @return String
 */"
"public String toString() {
    return qualifiedName;
}","public void test5764() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    iIOMetadataNode0.setAttribute("""", (String) null);
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, """");
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""xml:space"");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstructionTest0);
    QName qName0 = dOMNodePointer0.getName();
    dOMNodePointer0.createAttribute(jXPathContext0, qName0);
    assertEquals("""", qName0.toString());
}",""
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        String ns = null;
        NamespaceResolver nsr = getNamespaceResolver();
        if (nsr != null) {
            ns = nsr.getNamespaceURI(prefix);
        }
        if (ns == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        element.setAttributeNS(ns, name.toString(), """");
    } else {
        if (!element.hasAttribute(name.getName())) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test5865() throws Throwable {
    Locale locale0 = Locale.CHINESE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
    QName qName0 = new QName(""<<unknown namespace>>"");
    // Undeclared exception!
    try {
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public boolean isNode() {
    return !isContainer();
}","public void test5966() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest@0000000003"");
    dOMNodePointer0.setValue(dOMNodePointer0);
    assertTrue(dOMNodePointer0.isNode());
}","/**
 * Learn whether this pointer is considered to be a node.
 * @return boolean
 * @deprecated Please use !isContainer()
 */"
"public boolean isActual() {
    return true;
}","public void test6067() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.ITALIAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(typeConverter0).convert(any(), any(java.lang.Class.class));
    TypeUtils.setTypeConverter(typeConverter0);
    dOMNodePointer0.setValue(dOMNodePointer0);
    assertTrue(dOMNodePointer0.isActual());
}",""
"public void setValue(Object value) {
    if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            node.setNodeValue(string);
        } else {
            node.getParentNode().removeChild(node);
        }
    } else {
        NodeList children = node.getChildNodes();
        int count = children.getLength();
        for (int i = count; --i >= 0; ) {
            Node child = children.item(i);
            node.removeChild(child);
        }
        if (value instanceof Node) {
            Node valueNode = (Node) value;
            if (valueNode instanceof Element || valueNode instanceof Document) {
                children = valueNode.getChildNodes();
                for (int i = 0; i < children.getLength(); i++) {
                    Node child = children.item(i);
                    node.appendChild(child.cloneNode(true));
                }
            } else {
                node.appendChild(valueNode.cloneNode(true));
            }
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                Node textNode = node.getOwnerDocument().createTextNode(string);
                node.appendChild(textNode);
            }
        }
    }
}","public void test6168() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, """");
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1794593710));
    // Undeclared exception!
    try {
        dOMNodePointer0.setValue(nodeTypeTest0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}","/**
 * Sets contents of the node to the specified value. If the value is
 * a String, the contents of the node are replaced with this text.
 * If the value is an Element or Document, the children of the
 * node are replaced with the children of the passed node.
 * @param value to set
 */"
"public boolean isContainer() {
    return false;
}","public void test6269() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, """");
    dOMNodePointer0.setValue(iIOMetadataNode0);
    assertFalse(dOMNodePointer0.isContainer());
}","/**
 * If true, this node is auxiliary and can only be used as an intermediate in
 * the chain of pointers.
 * @return boolean
 */"
"protected static String findEnclosingAttribute(Node n, String attrName) {
    while (n != null) {
        if (n.getNodeType() == Node.ELEMENT_NODE) {
            Element e = (Element) n;
            String attr = e.getAttribute(attrName);
            if (attr != null && !attr.equals("""")) {
                return attr;
            }
        }
        n = n.getParentNode();
    }
    return null;
}","public void test6370() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    iIOMetadataNode0.setAttribute("""", (String) null);
    String string0 = DOMNodePointer.findEnclosingAttribute(iIOMetadataNode0, """");
    assertNull(string0);
}","/**
 * Find the nearest occurrence of the specified attribute
 * on the specified and enclosing elements.
 * @param n current node
 * @param attrName attribute name
 * @return attribute value
 */"
"public boolean isLeaf() {
    return !node.hasChildNodes();
}","public void test6471() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""["");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    boolean boolean0 = dOMNodePointer0.isLeaf();
    assertTrue(boolean0);
}",""
"public boolean isLeaf() {
    return !node.hasChildNodes();
}","public void test6572() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""\""descendant:"");
    iIOMetadataNode0.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, (Locale) null);
    boolean boolean0 = dOMNodePointer0.isLeaf();
    assertFalse(boolean0);
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix == null || prefix.equals("""")) {
        return getDefaultNamespaceURI();
    }
    if (prefix.equals(""xml"")) {
        return XML_NAMESPACE_URI;
    }
    if (prefix.equals(""xmlns"")) {
        return XMLNS_NAMESPACE_URI;
    }
    String namespace = null;
    if (namespaces == null) {
        namespaces = new HashMap();
    } else {
        namespace = (String) namespaces.get(prefix);
    }
    if (namespace == null) {
        String qname = ""xmlns:"" + prefix;
        Node aNode = node;
        if (aNode instanceof Document) {
            aNode = ((Document) aNode).getDocumentElement();
        }
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(qname);
                if (attr != null) {
                    namespace = attr.getValue();
                    break;
                }
            }
            aNode = aNode.getParentNode();
        }
        if (namespace == null || namespace.equals("""")) {
            namespace = NodePointer.UNKNOWN_NAMESPACE;
        }
    }
    namespaces.put(prefix, namespace);
    if (namespace == UNKNOWN_NAMESPACE) {
        return null;
    }
    // TBD: We are supposed to resolve relative URIs to absolute ones.
    return namespace;
}","public void test6673() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, """");
    dOMNodePointer0.getDefaultNamespaceURI();
    String string0 = dOMNodePointer0.getNamespaceURI((String) null);
    assertNull(string0);
}",""
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        String ns = null;
        NamespaceResolver nsr = getNamespaceResolver();
        if (nsr != null) {
            ns = nsr.getNamespaceURI(prefix);
        }
        if (ns == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        element.setAttributeNS(ns, name.toString(), """");
    } else {
        if (!element.hasAttribute(name.getName())) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test6774() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.GERMAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    QName qName0 = new QName(""http://www.w3.org/XML/1998/namespace"");
    dOMNodePointer0.attributeIterator(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) nodeNameTest0);
    // Undeclared exception!
    try {
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Unknown namespace prefix: http
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        String ns = null;
        NamespaceResolver nsr = getNamespaceResolver();
        if (nsr != null) {
            ns = nsr.getNamespaceURI(prefix);
        }
        if (ns == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        element.setAttributeNS(ns, name.toString(), """");
    } else {
        if (!element.hasAttribute(name.getName())) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test6875() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""xml:space"");
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""xml:space"");
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""xml:space"");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstructionTest0);
    QName qName0 = dOMNodePointer0.getName();
    // Undeclared exception!
    try {
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix == null || prefix.equals("""")) {
        return getDefaultNamespaceURI();
    }
    if (prefix.equals(""xml"")) {
        return XML_NAMESPACE_URI;
    }
    if (prefix.equals(""xmlns"")) {
        return XMLNS_NAMESPACE_URI;
    }
    String namespace = null;
    if (namespaces == null) {
        namespaces = new HashMap();
    } else {
        namespace = (String) namespaces.get(prefix);
    }
    if (namespace == null) {
        String qname = ""xmlns:"" + prefix;
        Node aNode = node;
        if (aNode instanceof Document) {
            aNode = ((Document) aNode).getDocumentElement();
        }
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(qname);
                if (attr != null) {
                    namespace = attr.getValue();
                    break;
                }
            }
            aNode = aNode.getParentNode();
        }
        if (namespace == null || namespace.equals("""")) {
            namespace = NodePointer.UNKNOWN_NAMESPACE;
        }
    }
    namespaces.put(prefix, namespace);
    if (namespace == UNKNOWN_NAMESPACE) {
        return null;
    }
    // TBD: We are supposed to resolve relative URIs to absolute ones.
    return namespace;
}","public void test6976() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, """");
    QName qName0 = new QName(""http://www.w3.org/XML/1998/namespace"", """");
    dOMNodePointer0.attributeIterator(qName0);
    String string0 = dOMNodePointer0.getNamespaceURI(""xml:space"");
    assertNull(string0);
}",""
"public boolean isSealed() {
    return sealed;
}","public void test7077() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    dOMNodePointer0.getNamespaceResolver();
    NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
    assertFalse(namespaceResolver0.isSealed());
}","/**
 * Learn whether this NamespaceResolver has been sealed.
 * @return boolean
 */"
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test7178() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
    boolean boolean0 = DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}","/**
 * Test a Node.
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test7279() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
    boolean boolean0 = DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}","/**
 * Test a Node.
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test7380() throws Throwable {
    QName qName0 = new QName("" o|=cMEo\n`&rLa/ae"", "" of "");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "" o|=cMEo\n`&rLa/ae"");
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""**&lLY&Mh"");
    boolean boolean0 = DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) nodeNameTest0);
    assertFalse(boolean0);
}","/**
 * Test a Node.
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"public boolean testNode(NodeTest test) {
    return testNode(node, test);
}","public void test7481() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, """");
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""xml:space"");
    boolean boolean0 = dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS) || nodeNS == null && equalStrings(testPrefix, getPrefix(node));
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return true;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
            default:
                return false;
        }
    }
    if (test instanceof ProcessingInstructionTest && node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test7582() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    boolean boolean0 = DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) null);
    assertTrue(boolean0);
}","/**
 * Test a Node.
 * @param node to test
 * @param test to execute
 * @return true if node passes test
 */"
"int getPosition();","public void test7683() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""VcO&&zth"");
    NodeIterator nodeIterator0 = dOMNodePointer0.childIterator(processingInstructionTest0, true, dOMNodePointer0);
    assertEquals(0, nodeIterator0.getPosition());
}","/**
 * Get the current iterator position.
 * @return int position
 */"
"public boolean isActual() {
    return true;
}","public void test7784() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, iIOMetadataNode0);
    boolean boolean0 = dOMNodePointer0.isActual();
    assertTrue(boolean0);
}",""
"public int hashCode() {
    return node.hashCode();
}","public void test7885() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, """");
    dOMNodePointer0.hashCode();
}",""
"public int getLength() {
    return 1;
}","public void test7986() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""Lwlq8hR*hLL`$^%"");
    int int0 = dOMNodePointer0.getLength();
    assertEquals(1, int0);
}",""
"public String getNamespaceURI() {
    return getNamespaceURI(node);
}","public void test8087() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""["");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    String string0 = dOMNodePointer0.getNamespaceURI();
    assertNull(string0);
}",""
"public boolean isLanguage(String lang) {
    String current = getLanguage();
    return current == null ? super.isLanguage(lang) : current.toUpperCase(Locale.ENGLISH).startsWith(lang.toUpperCase(Locale.ENGLISH));
}","public void test8188() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    boolean boolean0 = dOMNodePointer0.isLanguage(""coreano"");
    assertFalse(boolean0);
}","/**
 * Returns true if the xml:lang attribute for the current node
 * or its parent has the specified prefix <i>lang</i>.
 * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.
 * @param lang ns to test
 * @return boolean
 */"
"public String toString() {
    return qualifiedName;
}","public void test8289() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""["");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    QName qName0 = dOMNodePointer0.getName();
    NodePointer nodePointer0 = dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, nodePointer0);
    assertEquals(""["", qName0.toString());
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Node node1 = (Node) pointer1.getBaseValue();
    Node node2 = (Node) pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    int t1 = node1.getNodeType();
    int t2 = node2.getNodeType();
    if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {
        return -1;
    }
    if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        return 1;
    }
    if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        NamedNodeMap map = ((Node) getNode()).getAttributes();
        int length = map.getLength();
        for (int i = 0; i < length; i++) {
            Node n = map.item(i);
            if (n == node1) {
                return -1;
            }
            if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    Node current = node.getFirstChild();
    while (current != null) {
        if (current == node1) {
            return -1;
        }
        if (current == node2) {
            return 1;
        }
        current = current.getNextSibling();
    }
    return 0;
}","public void test8290() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""["");
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""]"");
    QName qName0 = dOMNodePointer0.getName();
    NodePointer nodePointer0 = dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, nodePointer0);
    assertEquals(1, int0);
}",""
"public boolean isCollection() {
    return false;
}","public void test8391() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""Lwlq8hR*hLL`$^%"");
    boolean boolean0 = dOMNodePointer0.isCollection();
    assertFalse(boolean0);
}",""
