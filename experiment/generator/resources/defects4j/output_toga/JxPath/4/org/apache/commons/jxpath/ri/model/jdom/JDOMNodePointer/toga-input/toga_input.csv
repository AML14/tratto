focal_method,test_prefix,docstring
"public boolean isCollection() {
    return false;
}","public void test000() throws Throwable {
    Locale locale0 = Locale.US;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    boolean boolean0 = jDOMNodePointer0.isCollection();
    assertFalse(boolean0);
}",""
"public boolean isRoot() {
    return parent == null;
}","public void test011() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer(""http://www.w3.org/2000/xmlns/"");
    assertFalse(nodePointer0.isRoot());
}","/**
 * Returns true if this Pointer has no parent.
 */"
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test022() throws Throwable {
    Element element0 = new Element(""dogble"", ""dogble"", ""dogble"");
    Locale locale0 = Locale.JAPANESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = jDOMNodePointer0.getName();
    NodePointer nodePointer0 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
    assertEquals((-1), int0);
}",""
"public String toString() {
    return qualifiedName;
}","public void test023() throws Throwable {
    Element element0 = new Element(""dogble"", ""dogble"", ""dogble"");
    Locale locale0 = Locale.JAPANESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = jDOMNodePointer0.getName();
    NodePointer nodePointer0 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
    assertEquals(""dogble:dogble"", qName0.toString());
}",""
"public int getLength() {
    return 1;
}","public void test034() throws Throwable {
    Object object0 = new Object();
    Locale locale0 = Locale.ITALIAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
    int int0 = jDOMNodePointer0.getLength();
    assertEquals(1, int0);
}",""
"public boolean testNode(NodeTest test) {
    return testNode(this, node, test);
}","public void test045() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
    Locale locale0 = Locale.KOREA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
    boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}",""
"int getPosition();","public void test056() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    NodeIterator nodeIterator0 = jDOMNodePointer0.childIterator(nodeTypeTest0, true, jDOMNodePointer0);
    assertEquals(0, nodeIterator0.getPosition());
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test067() throws Throwable {
    Element element0 = new Element(""Wdogbl"", ""Wdogbl"");
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
    NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
    namespaceResolver0.setNamespaceContextPointer(jDOMNodePointer1);
    jDOMNodePointer0.setNamespaceResolver(namespaceResolver0);
    String string0 = jDOMNodePointer1.asPath();
    assertEquals(""/node()[1]"", string0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test078() throws Throwable {
    Element element0 = new Element(""dogble"", ""dogble"");
    Locale locale0 = Locale.ITALY;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer0);
    assertEquals(0, int0);
}",""
"public int hashCode() {
    return System.identityHashCode(node);
}","public void test089() throws Throwable {
    Object object0 = new Object();
    Locale locale0 = Locale.ITALIAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
    jDOMNodePointer0.hashCode();
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {
    NodePointer ptr = createChild(context, name, index);
    ptr.setValue(value);
    return ptr;
}","public void test0910() throws Throwable {
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
    // Undeclared exception!
    try {
        jDOMNodePointer0.createChild(jXPathContext0, (QName) null, Integer.MIN_VALUE, (Object) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Factory is not set on the JXPathContext - cannot create path:
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public String getNamespaceURI() {
    return getNamespaceURI(node);
}","public void test1011() throws Throwable {
    Locale locale0 = Locale.JAPANESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    String string0 = jDOMNodePointer0.getNamespaceURI();
    assertNull(string0);
}",""
"public String getNamespaceURI(String prefix) {
    if (node instanceof Document) {
        Element element = ((Document) node).getRootElement();
        Namespace ns = element.getNamespace(prefix);
        if (ns != null) {
            return ns.getURI();
        }
    } else if (node instanceof Element) {
        Element element = (Element) node;
        Namespace ns = element.getNamespace(prefix);
        if (ns != null) {
            return ns.getURI();
        }
    }
    return null;
}","public void test1112() throws Throwable {
    Element element0 = new Element(""double"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
    String string0 = jDOMNodePointer0.getNamespaceURI(""double"");
    assertNull(string0);
}",""
"public String getNamespaceURI(String prefix) {
    if (node instanceof Document) {
        Element element = ((Document) node).getRootElement();
        Namespace ns = element.getNamespace(prefix);
        if (ns != null) {
            return ns.getURI();
        }
    } else if (node instanceof Element) {
        Element element = (Element) node;
        Namespace ns = element.getNamespace(prefix);
        if (ns != null) {
            return ns.getURI();
        }
    }
    return null;
}","public void test1213() throws Throwable {
    Element element0 = new Element(""org.apache.commons.jxpath.JXPathAbsractFactoryException"", ""org.apache.commons.jxpath.JXPathAbsractFactoryException"", ""org.apache.commons.jxpath.JXPathAbsractFactoryException"");
    Document document0 = new Document(element0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, (Locale) null);
    String string0 = jDOMNodePointer0.getNamespaceURI(""org.apache.commons.jxpath.JXPathAbsractFactoryException"");
    assertEquals(""org.apache.commons.jxpath.JXPathAbsractFactoryException"", string0);
}",""
"public String getNamespaceURI(String prefix) {
    if (node instanceof Document) {
        Element element = ((Document) node).getRootElement();
        Namespace ns = element.getNamespace(prefix);
        if (ns != null) {
            return ns.getURI();
        }
    } else if (node instanceof Element) {
        Element element = (Element) node;
        Namespace ns = element.getNamespace(prefix);
        if (ns != null) {
            return ns.getURI();
        }
    }
    return null;
}","public void test1314() throws Throwable {
    Element element0 = new Element(""Tu"");
    Document document0 = new Document(element0);
    Locale locale0 = Locale.PRC;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
    String string0 = jDOMNodePointer0.getNamespaceURI(""Tu"");
    assertNull(string0);
}",""
"public String getNamespaceURI(String prefix) {
    if (node instanceof Document) {
        Element element = ((Document) node).getRootElement();
        Namespace ns = element.getNamespace(prefix);
        if (ns != null) {
            return ns.getURI();
        }
    } else if (node instanceof Element) {
        Element element = (Element) node;
        Namespace ns = element.getNamespace(prefix);
        if (ns != null) {
            return ns.getURI();
        }
    }
    return null;
}","public void test1415() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, (String) null);
    String string0 = jDOMNodePointer0.getNamespaceURI((String) null);
    assertNull(string0);
}",""
"public String getNamespaceURI(String prefix) {
    if (node instanceof Document) {
        Element element = ((Document) node).getRootElement();
        Namespace ns = element.getNamespace(prefix);
        if (ns != null) {
            return ns.getURI();
        }
    } else if (node instanceof Element) {
        Element element = (Element) node;
        Namespace ns = element.getNamespace(prefix);
        if (ns != null) {
            return ns.getURI();
        }
    }
    return null;
}","public void test1516() throws Throwable {
    Element element0 = new Element(""double"", ""double"", ""double"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
    String string0 = jDOMNodePointer0.getNamespaceURI(""double"");
    assertEquals(""double"", string0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test1617() throws Throwable {
    Attribute attribute0 = new Attribute(""gebe"", ""gebe"");
    QName qName0 = new QName(""gebe"");
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, (Locale) null);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(""<<unknown namespace>>"", (Locale) null);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, attribute0);
    int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer1);
    assertEquals(1, int0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test1718() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    QName qName0 = jDOMNodePointer0.getName();
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(jDOMNodePointer0, qName0, jDOMNodePointer0);
    // Undeclared exception!
    try {
        jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // JXPath internal error: compareChildNodes called for fr_FR
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test1819() throws Throwable {
    Element element0 = new Element(""dogble"", ""dogble"");
    Locale locale0 = Locale.ITALY;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""dogble"", ""http://www.w3.org/2000/xmlns/"");
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, processingInstruction0);
    element0.addContent((Content) processingInstruction0);
    int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer1);
    assertEquals(1, int0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test1920() throws Throwable {
    Element element0 = new Element(""dogble"");
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""dogble"", ""http://www.w3.org/2000/xmlns/"");
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, processingInstruction0);
    element0.addContent((Content) processingInstruction0);
    int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer0);
    assertEquals((-1), int0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Object node1 = pointer1.getBaseValue();
    Object node2 = pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
        return -1;
    }
    if (!(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        return 1;
    }
    if ((node1 instanceof Attribute) && (node2 instanceof Attribute)) {
        List list = ((Element) getNode()).getAttributes();
        int length = list.size();
        for (int i = 0; i < length; i++) {
            Object n = list.get(i);
            if (n == node1) {
                return -1;
            } else if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    if (!(node instanceof Element)) {
        throw new RuntimeException(""JXPath internal error: "" + ""compareChildNodes called for "" + node);
    }
    List children = ((Element) node).getContent();
    int length = children.size();
    for (int i = 0; i < length; i++) {
        Object n = children.get(i);
        if (n == node1) {
            return -1;
        }
        if (n == node2) {
            return 1;
        }
    }
    return 0;
}","public void test2021() throws Throwable {
    Element element0 = new Element(""Gl"", ""Gl"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
    jDOMNodePointer0.setValue(""Gl"");
    QName qName0 = jDOMNodePointer0.getName();
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jDOMNodePointer0, (Locale) null);
    int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, nodePointer0);
    assertEquals(0, int0);
}",""
"public String toString() {
    return qualifiedName;
}","public void test2022() throws Throwable {
    Element element0 = new Element(""Gl"", ""Gl"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
    jDOMNodePointer0.setValue(""Gl"");
    QName qName0 = jDOMNodePointer0.getName();
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jDOMNodePointer0, (Locale) null);
    int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, nodePointer0);
    assertEquals(""Gl"", qName0.toString());
}",""
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test2123() throws Throwable {
    Locale locale0 = Locale.TAIWAN;
    Element element0 = new Element(""ouble"", ""ouble"");
    Document document0 = new Document(element0);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
    boolean boolean0 = jDOMNodePointer0.isLeaf();
    assertFalse(boolean0);
}",""
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test2224() throws Throwable {
    Element element0 = new Element(""G"", ""G"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
    boolean boolean0 = jDOMNodePointer0.isLeaf();
    assertTrue(boolean0);
}",""
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test2325() throws Throwable {
    Element element0 = new Element(""G"", ""G"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
    jDOMNodePointer0.setValue(""G"");
    boolean boolean0 = jDOMNodePointer0.isLeaf();
    assertFalse(boolean0);
}",""
"public boolean isLeaf() {
    if (node instanceof Element) {
        return ((Element) node).getContent().size() == 0;
    }
    if (node instanceof Document) {
        return ((Document) node).getContent().size() == 0;
    }
    return true;
}","public void test2426() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    boolean boolean0 = jDOMNodePointer0.isLeaf();
    assertTrue(boolean0);
}",""
"public String toString() {
    return qualifiedName;
}","public void test2527() throws Throwable {
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""double"", ""double"");
    Locale locale0 = Locale.KOREAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
    QName qName0 = jDOMNodePointer0.getName();
    assertEquals(""double"", qName0.toString());
}",""
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test2628() throws Throwable {
    Locale locale0 = Locale.CHINESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    CDATA cDATA0 = new CDATA(""<<unknown namespace>>"");
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(cDATA0, locale0);
    // Undeclared exception!
    try {
        jDOMNodePointer1.setValue(jDOMNodePointer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public Object getValue() {
    if (node instanceof Element) {
        return ((Element) node).getTextTrim();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    if (node instanceof Text) {
        return ((Text) node).getTextTrim();
    }
    if (node instanceof CDATA) {
        return ((CDATA) node).getTextTrim();
    }
    if (node instanceof ProcessingInstruction) {
        String text = ((ProcessingInstruction) node).getData();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    return null;
}","public void test2729() throws Throwable {
    Locale locale0 = Locale.UK;
    Comment comment0 = new Comment(""(%cpP;zWgC/JC|]0"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
    Object object0 = jDOMNodePointer0.getValue();
    assertEquals(""(%cpP;zWgC/JC|]0"", object0);
}",""
"public Object getValue() {
    if (node instanceof Element) {
        return ((Element) node).getTextTrim();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    if (node instanceof Text) {
        return ((Text) node).getTextTrim();
    }
    if (node instanceof CDATA) {
        return ((CDATA) node).getTextTrim();
    }
    if (node instanceof ProcessingInstruction) {
        String text = ((ProcessingInstruction) node).getData();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    return null;
}","public void test2831() throws Throwable {
    CDATA cDATA0 = new CDATA(""p:+>qFT|"");
    Locale locale0 = Locale.FRENCH;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    Object object0 = jDOMNodePointer0.getValue();
    assertEquals(""p:+>qFT|"", object0);
}",""
"public Object getValue() {
    if (node instanceof Element) {
        return ((Element) node).getTextTrim();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    if (node instanceof Text) {
        return ((Text) node).getTextTrim();
    }
    if (node instanceof CDATA) {
        return ((CDATA) node).getTextTrim();
    }
    if (node instanceof ProcessingInstruction) {
        String text = ((ProcessingInstruction) node).getData();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    return null;
}","public void test2932() throws Throwable {
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""double"", ""double"");
    Locale locale0 = Locale.GERMAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
    Object object0 = jDOMNodePointer0.getValue();
    assertEquals(""double"", object0);
}",""
"public void setValue(Object value) {
    if (node instanceof Text) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            ((Text) node).setText(string);
        } else {
            nodeParent(node).removeContent((Text) node);
        }
    } else {
        Element element = (Element) node;
        element.getContent().clear();
        if (value instanceof Element) {
            Element valueElement = (Element) value;
            addContent(valueElement.getContent());
        } else if (value instanceof Document) {
            Document valueDocument = (Document) value;
            addContent(valueDocument.getContent());
        } else if (value instanceof Text || value instanceof CDATA) {
            String string = ((Text) value).getText();
            element.addContent(new Text(string));
        } else if (value instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value).clone();
            element.addContent(pi);
        } else if (value instanceof Comment) {
            Comment comment = (Comment) ((Comment) value).clone();
            element.addContent(comment);
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                element.addContent(new Text(string));
            }
        }
    }
}","public void test3034() throws Throwable {
    CDATA cDATA0 = new CDATA("""");
    Locale locale0 = Locale.PRC;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    // Undeclared exception!
    try {
        jDOMNodePointer0.setValue("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public Object getValue() {
    if (node instanceof Element) {
        return ((Element) node).getTextTrim();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    if (node instanceof Text) {
        return ((Text) node).getTextTrim();
    }
    if (node instanceof CDATA) {
        return ((CDATA) node).getTextTrim();
    }
    if (node instanceof ProcessingInstruction) {
        String text = ((ProcessingInstruction) node).getData();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    return null;
}","public void test3135() throws Throwable {
    CDATA cDATA0 = new CDATA(""double"");
    Locale locale0 = Locale.ITALIAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
    jDOMNodePointer0.setValue(""double"");
    assertEquals(""double"", cDATA0.getValue());
}",""
"public boolean isContainer() {
    return false;
}","public void test3338() throws Throwable {
    Element element0 = new Element(""doble"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
    CDATA cDATA0 = new CDATA(""<<unknown namespace>>"");
    jDOMNodePointer0.setValue(cDATA0);
    assertFalse(jDOMNodePointer0.isContainer());
}","/**
 * If true, this node is axiliary and can only be used as an intermediate in
 * the chain of pointers.
 */"
"public boolean isAttribute() {
    return attribute;
}","public void test3439() throws Throwable {
    Element element0 = new Element(""dogbl"", ""dogbl"", ""dogbl"");
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""dogbl"", ""dogbl"");
    jDOMNodePointer0.setValue(processingInstruction0);
    assertFalse(jDOMNodePointer0.isAttribute());
}","/**
 * Returns true if the pointer represents the ""attribute::"" axis.
 */"
"public Object getValue() {
    if (node instanceof Element) {
        return ((Element) node).getTextTrim();
    }
    if (node instanceof Comment) {
        String text = ((Comment) node).getText();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    if (node instanceof Text) {
        return ((Text) node).getTextTrim();
    }
    if (node instanceof CDATA) {
        return ((CDATA) node).getTextTrim();
    }
    if (node instanceof ProcessingInstruction) {
        String text = ((ProcessingInstruction) node).getData();
        if (text != null) {
            text = text.trim();
        }
        return text;
    }
    return null;
}","public void test3540() throws Throwable {
    Element element0 = new Element(""org.apache.commons.jxpath.JXPathAbstractFactoryException"", ""org.apache.commons.jxpath.JXPathAbstractFactoryException"");
    Locale locale0 = Locale.PRC;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    Comment comment0 = new Comment(""org.apache.commons.jxpath.JXPathAbstractFactoryException"");
    jDOMNodePointer0.setValue(comment0);
    assertEquals(""org.apache.commons.jxpath.JXPathAbstractFactoryException"", comment0.getValue());
}",""
"public boolean isNode() {
    return !isContainer();
}","public void test3641() throws Throwable {
    Element element0 = new Element(""doble"", ""doble"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
    jDOMNodePointer0.setValue((Object) null);
    assertTrue(jDOMNodePointer0.isNode());
}","/**
 * @deprecated Please use !isContainer()
 */"
"public boolean isAttribute() {
    return attribute;
}","public void test3742() throws Throwable {
    Element element0 = new Element(""double"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
    jDOMNodePointer0.setValue(jDOMNodePointer0);
    assertFalse(jDOMNodePointer0.isAttribute());
}","/**
 * Returns true if the pointer represents the ""attribute::"" axis.
 */"
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test3944() throws Throwable {
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) null);
    assertTrue(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4045() throws Throwable {
    NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) nodeNameTest0);
    assertFalse(boolean0);
}",""
"public boolean testNode(NodeTest test) {
    return testNode(this, node, test);
}","public void test4146() throws Throwable {
    Element element0 = new Element(""double"");
    Locale locale0 = Locale.TAIWAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = new QName(""double"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4247() throws Throwable {
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""HPorrg"", ""HPorrg"");
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""HPorrg"");
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) processingInstruction0, (NodeTest) processingInstructionTest0);
    assertTrue(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4348() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4449() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4550() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4651() throws Throwable {
    Element element0 = new Element(""dogble"", ""dogble"");
    Locale locale0 = Locale.ITALY;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) jDOMNodePointer0, (NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}",""
"public boolean testNode(NodeTest test) {
    return testNode(this, node, test);
}","public void test4752() throws Throwable {
    Element element0 = new Element(""double"");
    Locale locale0 = Locale.CANADA_FRENCH;
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, ""double"");
    boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
    assertTrue(boolean0);
}",""
"public boolean testNode(NodeTest test) {
    return testNode(this, node, test);
}","public void test4853() throws Throwable {
    Document document0 = new Document();
    Locale locale0 = Locale.CANADA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
    boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
    assertTrue(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test4954() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
    Text text0 = new Text((String) null);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) text0, (NodeTest) nodeTypeTest0);
    assertTrue(boolean0);
}",""
"public boolean testNode(NodeTest test) {
    return testNode(this, node, test);
}","public void test5055() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""http://www.w3.org/XML/1998/namespace"");
    boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (!(node instanceof Element)) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {
            String nodeNS = JDOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return (node instanceof Element) || (node instanceof Document);
            case Compiler.NODE_TYPE_TEXT:
                return (node instanceof Text) || (node instanceof CDATA);
            case Compiler.NODE_TYPE_COMMENT:
                return node instanceof Comment;
            case Compiler.NODE_TYPE_PI:
                return node instanceof ProcessingInstruction;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {
        String testPI = ((ProcessingInstructionTest) test).getTarget();
        String nodePI = ((ProcessingInstruction) node).getTarget();
        return testPI.equals(nodePI);
    }
    return false;
}","public void test5156() throws Throwable {
    Element element0 = new Element(""double"", ""double"");
    QName qName0 = new QName(""double"", ""double"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) element0, (NodeTest) nodeNameTest0);
    assertFalse(boolean0);
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test5257() throws Throwable {
    Attribute attribute0 = new Attribute(""ob"", ""ob"");
    String string0 = JDOMNodePointer.getPrefix(attribute0);
    assertNull(string0);
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test5358() throws Throwable {
    Element element0 = new Element(""double"", ""double"", ""double"");
    String string0 = JDOMNodePointer.getPrefix(element0);
    assertEquals(""double"", string0);
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test5460() throws Throwable {
    Element element0 = new Element(""double"");
    String string0 = JDOMNodePointer.getPrefix(element0);
    assertNull(string0);
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test5561() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = JDOMNodePointer.getPrefix(locale0);
    assertNull(string0);
}",""
"public static String getPrefix(Object node) {
    if (node instanceof Element) {
        String prefix = ((Element) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    if (node instanceof Attribute) {
        String prefix = ((Attribute) node).getNamespacePrefix();
        return (prefix == null || prefix.equals("""")) ? null : prefix;
    }
    return null;
}","public void test5662() throws Throwable {
    Attribute attribute0 = new Attribute(""ob"", ""ob"");
    Namespace namespace0 = Namespace.getNamespace(""ob"", ""ob"");
    attribute0.setNamespace(namespace0);
    String string0 = JDOMNodePointer.getPrefix(attribute0);
    assertNotNull(string0);
}",""
"public static String getLocalName(Object node) {
    if (node instanceof Element) {
        return ((Element) node).getName();
    }
    if (node instanceof Attribute) {
        return ((Attribute) node).getName();
    }
    return null;
}","public void test5764() throws Throwable {
    Attribute attribute0 = new Attribute(""QidoHuble"", ""QidoHuble"");
    String string0 = JDOMNodePointer.getLocalName(attribute0);
    assertEquals(""QidoHuble"", string0);
}",""
"public static String getLocalName(Object node) {
    if (node instanceof Element) {
        return ((Element) node).getName();
    }
    if (node instanceof Attribute) {
        return ((Attribute) node).getName();
    }
    return null;
}","public void test5865() throws Throwable {
    Locale locale0 = Locale.US;
    String string0 = JDOMNodePointer.getLocalName(locale0);
    assertNull(string0);
}",""
"public boolean isLanguage(String lang) {
    String current = getLanguage();
    return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());
}","public void test5966() throws Throwable {
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""double"", ""double"");
    Locale locale0 = Locale.GERMAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
    boolean boolean0 = jDOMNodePointer0.isLanguage(""double"");
    assertFalse(boolean0);
}","/**
 * Returns true if the xml:lang attribute for the current node
 * or its parent has the specified prefix <i>lang</i>.
 * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.
 */"
"public boolean isLanguage(String lang) {
    String current = getLanguage();
    return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());
}","public void test6067() throws Throwable {
    Element element0 = new Element(""double"", ""double"", ""double"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
    // Undeclared exception!
    try {
        jDOMNodePointer0.isLanguage(""double"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}","/**
 * Returns true if the xml:lang attribute for the current node
 * or its parent has the specified prefix <i>lang</i>.
 * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.
 */"
"protected String getLanguage() {
    Object n = node;
    while (n != null) {
        if (n instanceof Element) {
            Element e = (Element) n;
            String attr = e.getAttributeValue(""lang"", Namespace.XML_NAMESPACE);
            if (attr != null && !attr.equals("""")) {
                return attr;
            }
        }
        n = nodeParent(n);
    }
    return null;
}","public void test6168() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    Comment comment0 = new Comment(""(%cpP;zWgC/JC|]0"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
    String string0 = jDOMNodePointer0.getLanguage();
    assertNull(string0);
}",""
"public boolean isLanguage(String lang) {
    String current = getLanguage();
    return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());
}","public void test6269() throws Throwable {
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    boolean boolean0 = jDOMNodePointer0.isLanguage(""<<unknown namespace>>"");
    assertFalse(boolean0);
}","/**
 * Returns true if the xml:lang attribute for the current node
 * or its parent has the specified prefix <i>lang</i>.
 * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.
 */"
"public NodePointer createChild(JXPathContext context, QName name, int index) {
    if (index == WHOLE_COLLECTION) {
        index = 0;
    }
    boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);
    if (success) {
        NodeTest nodeTest;
        String prefix = name.getPrefix();
        String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();
        nodeTest = new NodeNameTest(name, namespaceURI);
        NodeIterator it = childIterator(nodeTest, false, null);
        if (it != null && it.setPosition(index + 1)) {
            return it.getNodePointer();
        }
    }
    throw new JXPathAbstractFactoryException(""Factory could not create "" + ""a child node for path: "" + asPath() + ""/"" + name + ""["" + (index + 1) + ""]"");
}","public void test6370() throws Throwable {
    Locale locale0 = Locale.CHINA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    QName qName0 = new QName(""http://www.w3.org/XML/1998/namespace"");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
    // Undeclared exception!
    try {
        jDOMNodePointer0.createChild(jXPathContext0, qName0, 10);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Factory is not set on the JXPathContext - cannot create path:
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        Namespace ns = element.getNamespace(prefix);
        if (ns == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        Attribute attr = element.getAttribute(name.getName(), ns);
        if (attr == null) {
            element.setAttribute(name.getName(), """", ns);
        }
    } else {
        Attribute attr = element.getAttribute(name.getName());
        if (attr == null) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test6471() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    QName qName0 = new QName(""http://www.w3.org/XML/1998/namespace"", ""<<unknown namespace>>"");
    // Undeclared exception!
    try {
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot create an attribute for path /@http://www.w3.org/XML/1998/namespace:<<unknown namespace>>, operation is not allowed for this type of node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",""
"public String toString() {
    return qualifiedName;
}","public void test6572() throws Throwable {
    Element element0 = new Element(""dUTNogl"");
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = jDOMNodePointer0.getName();
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
    jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
    jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
    assertEquals(""dUTNogl"", qName0.toString());
}",""
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        Namespace ns = element.getNamespace(prefix);
        if (ns == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        Attribute attr = element.getAttribute(name.getName(), ns);
        if (attr == null) {
            element.setAttribute(name.getName(), """", ns);
        }
    } else {
        Attribute attr = element.getAttribute(name.getName());
        if (attr == null) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test6673() throws Throwable {
    Element element0 = new Element(""double"");
    Locale locale0 = Locale.CANADA_FRENCH;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = new QName(""http://www.w3.org/2000/xmlns/"", ""http://www.w3.org/2000/xmlns/"");
    // Undeclared exception!
    try {
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Unknown namespace prefix: http://www.w3.org/2000/xmlns/
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public String toString() {
    return qualifiedName;
}","public void test6774() throws Throwable {
    Element element0 = new Element(""dUTNogl"", ""dUTNogl"", ""dUTNogl"");
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    QName qName0 = jDOMNodePointer0.getName();
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
    jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
    jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
    assertEquals(""dUTNogl:dUTNogl"", qName0.toString());
}",""
"public boolean isCollection() {
    return false;
}","public void test6875() throws Throwable {
    Element element0 = new Element(""Gta"", ""Gta"", ""Gta"");
    Locale locale0 = Locale.PRC;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(""Gta"", locale0, ""Gta"");
    CDATA cDATA0 = new CDATA(""<<unknown namespace>>"");
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, cDATA0);
    element0.addContent((Content) cDATA0);
    jDOMNodePointer1.remove();
    assertFalse(jDOMNodePointer1.isCollection());
}",""
"public void remove() {
    Element parent = nodeParent(node);
    if (parent == null) {
        throw new JXPathException(""Cannot remove root JDOM node"");
    }
    parent.getContent().remove(node);
}","public void test6976() throws Throwable {
    Element element0 = new Element(""double"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, (Locale) null);
    // Undeclared exception!
    try {
        jDOMNodePointer0.remove();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot remove root JDOM node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer"", e);
    }
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test7077() throws Throwable {
    Element element0 = new Element(""f"");
    Locale locale0 = Locale.CANADA;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(""f"", locale0, ""f"");
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
    NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
    jDOMNodePointer0.setNamespaceResolver(namespaceResolver0);
    String string0 = jDOMNodePointer1.asPath();
    assertEquals(""id('f')/f[1]"", string0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test7178() throws Throwable {
    Element element0 = new Element(""t3X"", ""t3X"", ""t3X"");
    Locale locale0 = Locale.JAPANESE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
    NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
    namespaceResolver0.setNamespaceContextPointer(jDOMNodePointer1);
    jDOMNodePointer1.setNamespaceResolver(namespaceResolver0);
    String string0 = jDOMNodePointer1.asPath();
    assertEquals(""/t3X:t3X[1]"", string0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test7279() throws Throwable {
    CDATA cDATA0 = new CDATA(""k3"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, cDATA0);
    String string0 = jDOMNodePointer0.asPath();
    assertEquals(""/text()[1]"", string0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test7380() throws Throwable {
    Element element0 = new Element(""dogble"", ""dogble"");
    Locale locale0 = Locale.ITALY;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""dogble"", ""http://www.w3.org/2000/xmlns/"");
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, processingInstruction0);
    String string0 = jDOMNodePointer1.asPath();
    assertEquals(""/processing-instruction('dogble')[1]"", string0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test7481() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, ""/processing-instruction('"");
    String string0 = jDOMNodePointer0.asPath();
    assertEquals(""id('/processing-instruction(&apos;')"", string0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test7582() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, ""\""lang\"""");
    String string0 = jDOMNodePointer0.asPath();
    assertEquals(""id('&quot;lang&quot;')"", string0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test7683() throws Throwable {
    Element element0 = new Element(""Wdogbl"", ""Wdogbl"");
    Locale locale0 = Locale.UK;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
    NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
    namespaceResolver0.setNamespaceContextPointer(jDOMNodePointer1);
    jDOMNodePointer0.setNamespaceResolver(namespaceResolver0);
    Document document0 = new Document(element0);
    String string0 = jDOMNodePointer1.asPath();
    assertEquals(""/node()[1]"", string0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test7784() throws Throwable {
    Element element0 = new Element(""Gtha"", ""Gtha"");
    element0.addContent(""Gtha"");
    Locale locale0 = Locale.PRC;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(""Gtha"", locale0, ""Gtha"");
    CDATA cDATA0 = new CDATA(""Gtha"");
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, cDATA0);
    element0.addContent((Content) cDATA0);
    String string0 = jDOMNodePointer1.asPath();
    assertEquals(""id('Gtha')/text()[2]"", string0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test7885() throws Throwable {
    Element element0 = new Element(""dogble"", ""dogble"");
    Locale locale0 = Locale.ITALY;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""dogble"", ""http://www.w3.org/2000/xmlns/"");
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, processingInstruction0);
    element0.addContent((Content) processingInstruction0);
    String string0 = jDOMNodePointer1.asPath();
    assertEquals(""/processing-instruction('dogble')[1]"", string0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    if (node instanceof Element) {
        // If the parent pointer is not a JDOMNodePointer, it is
        // the parent's responsibility to produce the node test part
        // of the path
        if (parent instanceof JDOMNodePointer) {
            if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                buffer.append('/');
            }
            String nsURI = getNamespaceURI();
            String ln = JDOMNodePointer.getLocalName(node);
            if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                buffer.append(ln);
                buffer.append('[');
                buffer.append(getRelativePositionByName()).append(']');
            } else {
                String prefix = getNamespaceResolver().getPrefix(nsURI);
                if (prefix != null) {
                    buffer.append(prefix);
                    buffer.append(':');
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName());
                    buffer.append(']');
                } else {
                    buffer.append(""node()"");
                    buffer.append('[');
                    buffer.append(getRelativePositionOfElement());
                    buffer.append(']');
                }
            }
        }
    } else if (node instanceof Text || node instanceof CDATA) {
        buffer.append(""/text()"");
        buffer.append('[').append(getRelativePositionOfTextNode()).append(']');
    } else if (node instanceof ProcessingInstruction) {
        String target = ((ProcessingInstruction) node).getTarget();
        buffer.append(""/processing-instruction(\'"").append(target).append(""')"");
        buffer.append('[').append(getRelativePositionOfPI(target)).append(']');
    }
    return buffer.toString();
}","public void test7986() throws Throwable {
    Element element0 = new Element(""k3"", ""k3"");
    element0.addContent(""k3"");
    ProcessingInstruction processingInstruction0 = new ProcessingInstruction(""k3"", ""k3"");
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, processingInstruction0);
    element0.addContent((Content) processingInstruction0);
    String string0 = jDOMNodePointer0.asPath();
    assertEquals(""/processing-instruction('k3')[1]"", string0);
}",""
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof JDOMNodePointer)) {
        return false;
    }
    JDOMNodePointer other = (JDOMNodePointer) object;
    return node == other.node;
}","public void test8087() throws Throwable {
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
    boolean boolean0 = jDOMNodePointer0.equals((Object) null);
    assertFalse(boolean0);
}",""
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof JDOMNodePointer)) {
        return false;
    }
    JDOMNodePointer other = (JDOMNodePointer) object;
    return node == other.node;
}","public void test8188() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer0);
    assertTrue(boolean0);
}",""
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof JDOMNodePointer)) {
        return false;
    }
    JDOMNodePointer other = (JDOMNodePointer) object;
    return node == other.node;
}","public void test8289() throws Throwable {
    Locale locale0 = Locale.TAIWAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale0, locale0);
    boolean boolean0 = jDOMNodePointer1.equals(jDOMNodePointer0);
    assertTrue(boolean0);
}",""
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof JDOMNodePointer)) {
        return false;
    }
    JDOMNodePointer other = (JDOMNodePointer) object;
    return node == other.node;
}","public void test8390() throws Throwable {
    Object object0 = new Object();
    Locale locale0 = Locale.TAIWAN;
    JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
    JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, locale0, ""http://www.w3.org/2000/xmlns/"");
    boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer1);
    assertFalse(boolean0);
}",""
