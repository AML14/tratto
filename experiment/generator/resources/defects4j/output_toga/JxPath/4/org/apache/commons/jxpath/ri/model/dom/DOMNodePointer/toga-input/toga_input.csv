focal_method,test_prefix,docstring
"public Object getValue() {
    return stringValue(node);
}","public void test000() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""mok6+f~v}qt"");
    IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
    iIOMetadataNode0.appendChild(iIOMetadataNode1);
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""xml"");
    dOMNodePointer0.getValue();
}",""
"public static String getNamespaceURI(Node node) {
    if (node instanceof Document) {
        node = ((Document) node).getDocumentElement();
    }
    Element element = (Element) node;
    String uri = element.getNamespaceURI();
    if (uri != null) {
        return uri;
    }
    String prefix = getPrefix(node);
    String qname = prefix == null ? ""xmlns"" : ""xmlns:"" + prefix;
    Node aNode = node;
    while (aNode != null) {
        if (aNode.getNodeType() == Node.ELEMENT_NODE) {
            Attr attr = ((Element) aNode).getAttributeNode(qname);
            if (attr != null) {
                return attr.getValue();
            }
        }
        aNode = aNode.getParentNode();
    }
    return null;
}","public void test011() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("""");
    Node node0 = iIOMetadataNode0.removeChild(iIOMetadataNode1);
    Node node1 = iIOMetadataNode0.insertBefore(node0, (Node) null);
    DOMNodePointer.getNamespaceURI(node1);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    switch(node.getNodeType()) {
        case Node.ELEMENT_NODE:
            // If the parent pointer is not a DOMNodePointer, it is
            // the parent's responsibility to produce the node test part
            // of the path
            if (parent instanceof DOMNodePointer) {
                if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                    buffer.append('/');
                }
                String ln = DOMNodePointer.getLocalName(node);
                String nsURI = getNamespaceURI();
                if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName()).append(']');
                } else {
                    String prefix = getNamespaceResolver().getPrefix(nsURI);
                    if (prefix != null) {
                        buffer.append(prefix);
                        buffer.append(':');
                        buffer.append(ln);
                        buffer.append('[');
                        buffer.append(getRelativePositionByName());
                        buffer.append(']');
                    } else {
                        buffer.append(""node()"");
                        buffer.append('[');
                        buffer.append(getRelativePositionOfElement());
                        buffer.append(']');
                    }
                }
            }
            break;
        case Node.TEXT_NODE:
        case Node.CDATA_SECTION_NODE:
            buffer.append(""/text()"");
            buffer.append('[');
            buffer.append(getRelativePositionOfTextNode()).append(']');
            break;
        case Node.PROCESSING_INSTRUCTION_NODE:
            String target = ((ProcessingInstruction) node).getTarget();
            buffer.append(""/processing-instruction(\'"");
            buffer.append(target).append(""')"");
            buffer.append('[');
            buffer.append(getRelativePositionOfPI(target)).append(']');
            break;
        case Node.DOCUMENT_NODE:
    }
    return buffer.toString();
}","public void test022() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""X4l{p.%u<"");
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""xml:lang"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, iIOMetadataNode0);
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, iIOMetadataNode0);
    // Undeclared exception!
    try {
        dOMNodePointer0.asPath();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public boolean isLanguage(String lang) {
    String current = getLanguage();
    return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());
}","public void test033() throws Throwable {
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, ""])=eJBK;9R%8J"");
    dOMNodePointer0.isLanguage(""^9y"");
}","/**
 * Returns true if the xml:lang attribute for the current node
 * or its parent has the specified prefix <i>lang</i>.
 * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.
 */"
"public static String getLocalName(Node node) {
    String localName = node.getLocalName();
    if (localName != null) {
        return localName;
    }
    String name = node.getNodeName();
    int index = name.lastIndexOf(':');
    return index < 0 ? name : name.substring(index + 1);
}","public void test044() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""id('"");
    DOMNodePointer.getLocalName(iIOMetadataNode0);
}",""
"protected String getLanguage() {
    Node n = node;
    while (n != null) {
        if (n.getNodeType() == Node.ELEMENT_NODE) {
            Element e = (Element) n;
            String attr = e.getAttribute(""xml:lang"");
            if (attr != null && !attr.equals("""")) {
                return attr;
            }
        }
        n = n.getParentNode();
    }
    return null;
}","public void test055() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""id('"");
    Locale locale0 = Locale.TAIWAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    dOMNodePointer0.getLanguage();
}",""
"public Object getImmediateNode() {
    return node;
}","public void test066() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, (Locale) null, ""9f/cwF/v#m05<k5"");
    dOMNodePointer0.getImmediateNode();
}",""
"public Object getBaseValue() {
    return node;
}","public void test077() throws Throwable {
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, (Node) null);
    dOMNodePointer0.getBaseValue();
}",""
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest) {
        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
            String testPI = ((ProcessingInstructionTest) test).getTarget();
            String nodePI = ((ProcessingInstruction) node).getTarget();
            return testPI.equals(nodePI);
        }
    }
    return false;
}","public void test088() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    QName qName0 = new QName(""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""QNZ"");
    // Undeclared exception!
    try {
        DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) nodeNameTest0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public boolean testNode(NodeTest test) {
    return testNode(node, test);
}","public void test099() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, ""Index is less than 1: "");
    QName qName0 = new QName(""<<unknown namespace>>"", ""("");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    // Undeclared exception!
    try {
        dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public void setValue(Object value) {
    if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            node.setNodeValue(string);
        } else {
            node.getParentNode().removeChild(node);
        }
    } else {
        NodeList children = node.getChildNodes();
        int count = children.getLength();
        for (int i = count; --i >= 0; ) {
            Node child = children.item(i);
            node.removeChild(child);
        }
        if (value instanceof Node) {
            Node valueNode = (Node) value;
            if (valueNode instanceof Element || valueNode instanceof Document) {
                children = valueNode.getChildNodes();
                for (int i = 0; i < children.getLength(); i++) {
                    Node child = children.item(i);
                    node.appendChild(child.cloneNode(true));
                }
            } else {
                node.appendChild(valueNode.cloneNode(true));
            }
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                Node textNode = node.getOwnerDocument().createTextNode(string);
                node.appendChild(textNode);
            }
        }
    }
}","public void test1010() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.GERMAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
    doReturn(iIOMetadataNode0).when(typeConverter0).convert(any(), any(java.lang.Class.class));
    TypeUtils.setTypeConverter(typeConverter0);
    // Undeclared exception!
    try {
        dOMNodePointer0.setValue("""");
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // javax.imageio.metadata.IIOMetadataNode cannot be cast to java.lang.String
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}","/**
 * Sets contents of the node to the specified value. If the value is
 * a String, the contents of the node are replaced with this text.
 * If the value is an Element or Document, the children of the
 * node are replaced with the children of the passed node.
 */"
"public void remove() {
    Node parent = node.getParentNode();
    if (parent == null) {
        throw new JXPathException(""Cannot remove root DOM node"");
    }
    parent.removeChild(node);
}","public void test1111() throws Throwable {
    Locale locale0 = new Locale(""D"", ""Cannot remove root DOM node"");
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    // Undeclared exception!
    try {
        dOMNodePointer0.remove();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public NodeIterator namespaceIterator() {
    return new DOMNamespaceIterator(this);
}","public void test1212() throws Throwable {
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, (Node) null);
    // Undeclared exception!
    try {
        dOMNodePointer0.namespaceIterator();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator"", e);
    }
}",""
"public boolean isLeaf() {
    return !node.hasChildNodes();
}","public void test1313() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, """");
    // Undeclared exception!
    try {
        dOMNodePointer0.isLeaf();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public boolean isLanguage(String lang) {
    String current = getLanguage();
    return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());
}","public void test1414() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Node node0 = iIOMetadataNode0.appendChild(iIOMetadataNode0);
    Locale locale0 = Locale.GERMAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0);
    // Undeclared exception!
    dOMNodePointer0.isLanguage(""http://www.w3.org/XML/1998/namespace"");
}","/**
 * Returns true if the xml:lang attribute for the current node
 * or its parent has the specified prefix <i>lang</i>.
 * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.
 */"
"public boolean isLanguage(String lang) {
    String current = getLanguage();
    return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());
}","public void test1515() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, (Locale) null, ""9f/cwF/v#m05<k5"");
    // Undeclared exception!
    try {
        dOMNodePointer0.isLanguage(""http://www.w3.org/2000/xmlns/"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}","/**
 * Returns true if the xml:lang attribute for the current node
 * or its parent has the specified prefix <i>lang</i>.
 * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.
 */"
"public Object getValue() {
    return stringValue(node);
}","public void test1616() throws Throwable {
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, ""q@+@<E"");
    // Undeclared exception!
    try {
        dOMNodePointer0.getValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public static String getPrefix(Node node) {
    String prefix = node.getPrefix();
    if (prefix != null) {
        return prefix;
    }
    String name = node.getNodeName();
    int index = name.lastIndexOf(':');
    return index < 0 ? null : name.substring(0, index);
}","public void test1717() throws Throwable {
    // Undeclared exception!
    try {
        DOMNodePointer.getPrefix((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public static String getNamespaceURI(Node node) {
    if (node instanceof Document) {
        node = ((Document) node).getDocumentElement();
    }
    Element element = (Element) node;
    String uri = element.getNamespaceURI();
    if (uri != null) {
        return uri;
    }
    String prefix = getPrefix(node);
    String qname = prefix == null ? ""xmlns"" : ""xmlns:"" + prefix;
    Node aNode = node;
    while (aNode != null) {
        if (aNode.getNodeType() == Node.ELEMENT_NODE) {
            Attr attr = ((Element) aNode).getAttributeNode(qname);
            if (attr != null) {
                return attr.getValue();
            }
        }
        aNode = aNode.getParentNode();
    }
    return null;
}","public void test1818() throws Throwable {
    // Undeclared exception!
    try {
        DOMNodePointer.getNamespaceURI((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public String getNamespaceURI() {
    return getNamespaceURI(node);
}","public void test1919() throws Throwable {
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    // Undeclared exception!
    try {
        dOMNodePointer0.getNamespaceURI();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public QName getName() {
    String ln = null;
    String ns = null;
    int type = node.getNodeType();
    if (type == Node.ELEMENT_NODE) {
        ns = DOMNodePointer.getPrefix(node);
        ln = DOMNodePointer.getLocalName(node);
    } else if (type == Node.PROCESSING_INSTRUCTION_NODE) {
        ln = ((ProcessingInstruction) node).getTarget();
    }
    return new QName(ns, ln);
}","public void test2020() throws Throwable {
    Locale locale0 = Locale.ROOT;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, """");
    // Undeclared exception!
    try {
        dOMNodePointer0.getName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {
    NodePointer ptr = createChild(context, name, index);
    ptr.setValue(value);
    return ptr;
}","public void test2121() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = new Locale(""R}&RQ^\""rV"", ""R}&RQ^\""rV"");
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) ""R}&RQ^\""rV"");
    QName qName0 = new QName(""g#1bj,E1){VKi=[~{)k"");
    // Undeclared exception!
    try {
        dOMNodePointer0.createChild(jXPathContext0, qName0, 0, (Object) iIOMetadataNode0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index) {
    if (index == WHOLE_COLLECTION) {
        index = 0;
    }
    boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);
    if (success) {
        NodeTest nodeTest;
        String prefix = name.getPrefix();
        String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();
        nodeTest = new NodeNameTest(name, namespaceURI);
        NodeIterator it = childIterator(nodeTest, false, null);
        if (it != null && it.setPosition(index + 1)) {
            return it.getNodePointer();
        }
    }
    throw new JXPathAbstractFactoryException(""Factory could not create a child node for path: "" + asPath() + ""/"" + name + ""["" + (index + 1) + ""]"");
}","public void test2222() throws Throwable {
    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale_FilteringMode0);
    QName qName0 = new QName(""Urx[ T4o`*nLCrUpH8{"", """");
    // Undeclared exception!
    try {
        dOMNodePointer0.createChild(jXPathContext0, qName0, 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        String ns = getNamespaceURI(prefix);
        if (ns == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        element.setAttributeNS(ns, name.toString(), """");
    } else {
        if (!element.hasAttribute(name.getName())) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test2323() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""mok6+f~v}qt"");
    iIOMetadataNode0.appendChild(iIOMetadataNode0);
    Locale locale0 = Locale.CANADA_FRENCH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""mok6+f~v}qt"");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) ""mok6+f~v}qt"");
    QName qName0 = new QName(""q?W{{_X=LUrWs#eW`xr"", ""q?W{{_X=LUrWs#eW`xr"");
    // Undeclared exception!
    dOMNodePointer0.createAttribute(jXPathContext0, qName0);
}",""
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        String ns = getNamespaceURI(prefix);
        if (ns == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        element.setAttributeNS(ns, name.toString(), """");
    } else {
        if (!element.hasAttribute(name.getName())) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test2424() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) iIOMetadataNode0);
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    // Undeclared exception!
    try {
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Node node1 = (Node) pointer1.getBaseValue();
    Node node2 = (Node) pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    int t1 = node1.getNodeType();
    int t2 = node2.getNodeType();
    if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {
        return -1;
    }
    if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        return 1;
    }
    if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        NamedNodeMap map = ((Node) getNode()).getAttributes();
        int length = map.getLength();
        for (int i = 0; i < length; i++) {
            Node n = map.item(i);
            if (n == node1) {
                return -1;
            }
            if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    Node current = node.getFirstChild();
    while (current != null) {
        if (current == node1) {
            return -1;
        }
        if (current == node2) {
            return 1;
        }
        current = current.getNextSibling();
    }
    return 0;
}","public void test2525() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""~]wH TcF1D.gv{DQk;"");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    QName qName0 = new QName(""http://www.w3.org/XML/1998/namespace"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        dOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: http://www.w3.org/XML/1998/namespace
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Node node1 = (Node) pointer1.getBaseValue();
    Node node2 = (Node) pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    int t1 = node1.getNodeType();
    int t2 = node2.getNodeType();
    if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {
        return -1;
    }
    if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        return 1;
    }
    if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        NamedNodeMap map = ((Node) getNode()).getAttributes();
        int length = map.getLength();
        for (int i = 0; i < length; i++) {
            Node n = map.item(i);
            if (n == node1) {
                return -1;
            }
            if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    Node current = node.getFirstChild();
    while (current != null) {
        if (current == node1) {
            return -1;
        }
        if (current == node2) {
            return 1;
        }
        current = current.getNextSibling();
    }
    return 0;
}","public void test2626() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""2){"");
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""QNo30};@3Y~"");
    // Undeclared exception!
    try {
        dOMNodePointer0.compareChildNodePointers((NodePointer) null, (NodePointer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Node node1 = (Node) pointer1.getBaseValue();
    Node node2 = (Node) pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    int t1 = node1.getNodeType();
    int t2 = node2.getNodeType();
    if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {
        return -1;
    }
    if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        return 1;
    }
    if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        NamedNodeMap map = ((Node) getNode()).getAttributes();
        int length = map.getLength();
        for (int i = 0; i < length; i++) {
            Node n = map.item(i);
            if (n == node1) {
                return -1;
            }
            if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    Node current = node.getFirstChild();
    while (current != null) {
        if (current == node1) {
            return -1;
        }
        if (current == node2) {
            return 1;
        }
        current = current.getNextSibling();
    }
    return 0;
}","public void test2727() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest"");
    Locale locale0 = Locale.UK;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) ""org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest"");
    Variables variables0 = jXPathContext0.getVariables();
    QName qName0 = dOMNodePointer0.getName();
    VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
    // Undeclared exception!
    try {
        dOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: 'org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Node node1 = (Node) pointer1.getBaseValue();
    Node node2 = (Node) pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    int t1 = node1.getNodeType();
    int t2 = node2.getNodeType();
    if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {
        return -1;
    }
    if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        return 1;
    }
    if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        NamedNodeMap map = ((Node) getNode()).getAttributes();
        int length = map.getLength();
        for (int i = 0; i < length; i++) {
            Node n = map.item(i);
            if (n == node1) {
                return -1;
            }
            if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    Node current = node.getFirstChild();
    while (current != null) {
        if (current == node1) {
            return -1;
        }
        if (current == node2) {
            return 1;
        }
        current = current.getNextSibling();
    }
    return 0;
}","public void test2828() throws Throwable {
    Locale locale0 = Locale.ROOT;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, ""org.apache.commons.jxpath.ri.compiler.NodeNameTest@0000000006"");
    QName qName0 = new QName("" "");
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
    // Undeclared exception!
    try {
        dOMNodePointer0.compareChildNodePointers(nodePointer0, nodePointer0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.util.Locale cannot be cast to org.w3c.dom.Node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
    return new DOMNodeIterator(this, test, reverse, startWith);
}","public void test2929() throws Throwable {
    QName qName0 = new QName(""Unknown namespace prefix: "", ""Unknown namespace prefix: "");
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""Unknown namespace prefix: "");
    Locale locale0 = Locale.CANADA_FRENCH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""JX],\""h[H|3Hk<G^"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""http://www.w3.org/XML/1998/namespace"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        dOMNodePointer0.childIterator(nodeNameTest0, true, variablePointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: Unknown namespace prefix: :Unknown namespace prefix:
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}",""
"public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
    return new DOMNodeIterator(this, test, reverse, startWith);
}","public void test3030() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, ""<<unknown namespace>>"");
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""http://www.w3.org/XML/1998/namespace"");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstructionTest0);
    Variables variables0 = jXPathContext0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(variables0, (QName) null);
    // Undeclared exception!
    try {
        dOMNodePointer0.childIterator(nodeNameTest0, true, variablePointer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",""
"public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
    return new DOMNodeIterator(this, test, reverse, startWith);
}","public void test3131() throws Throwable {
    Locale locale0 = Locale.CHINESE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1747);
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    // Undeclared exception!
    try {
        dOMNodePointer0.childIterator(nodeTypeTest0, true, variablePointer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: '<<unknown namespace>>'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",""
"public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
    return new DOMNodeIterator(this, test, reverse, startWith);
}","public void test3232() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    QName qName0 = new QName(""yHhTa{WAqL,uL["");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""*"");
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, (Locale) null);
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, dOMNodePointer0, (Locale) null);
    // Undeclared exception!
    try {
        dOMNodePointer0.childIterator(nodeNameTest0, false, nodePointer0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.apache.commons.jxpath.ri.model.dom.DOMNodePointer cannot be cast to org.w3c.dom.Node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator"", e);
    }
}",""
"public NodeIterator attributeIterator(QName name) {
    return new DOMAttributeIterator(this, name);
}","public void test3333() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, """");
    QName qName0 = new QName(""V'DgO6![}VK]5#a-w:"");
    // Undeclared exception!
    try {
        dOMNodePointer0.attributeIterator(qName0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator"", e);
    }
}",""
"public static String getLocalName(Node node) {
    String localName = node.getLocalName();
    if (localName != null) {
        return localName;
    }
    String name = node.getNodeName();
    int index = name.lastIndexOf(':');
    return index < 0 ? name : name.substring(index + 1);
}","public void test3434() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    // Undeclared exception!
    try {
        DOMNodePointer.getLocalName(iIOMetadataNode0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public static String getLocalName(Node node) {
    String localName = node.getLocalName();
    if (localName != null) {
        return localName;
    }
    String name = node.getNodeName();
    int index = name.lastIndexOf(':');
    return index < 0 ? name : name.substring(index + 1);
}","public void test3535() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    DOMNodePointer.getLocalName(iIOMetadataNode0);
}",""
"public static String getPrefix(Node node) {
    String prefix = node.getPrefix();
    if (prefix != null) {
        return prefix;
    }
    String name = node.getNodeName();
    int index = name.lastIndexOf(':');
    return index < 0 ? null : name.substring(0, index);
}","public void test3636() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest"");
    DOMNodePointer.getPrefix(iIOMetadataNode0);
}",""
"public static String getPrefix(Node node) {
    String prefix = node.getPrefix();
    if (prefix != null) {
        return prefix;
    }
    String name = node.getNodeName();
    int index = name.lastIndexOf(':');
    return index < 0 ? null : name.substring(0, index);
}","public void test3737() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""Unknown namespace prefix: "");
    DOMNodePointer.getPrefix(iIOMetadataNode0);
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    switch(node.getNodeType()) {
        case Node.ELEMENT_NODE:
            // If the parent pointer is not a DOMNodePointer, it is
            // the parent's responsibility to produce the node test part
            // of the path
            if (parent instanceof DOMNodePointer) {
                if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                    buffer.append('/');
                }
                String ln = DOMNodePointer.getLocalName(node);
                String nsURI = getNamespaceURI();
                if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName()).append(']');
                } else {
                    String prefix = getNamespaceResolver().getPrefix(nsURI);
                    if (prefix != null) {
                        buffer.append(prefix);
                        buffer.append(':');
                        buffer.append(ln);
                        buffer.append('[');
                        buffer.append(getRelativePositionByName());
                        buffer.append(']');
                    } else {
                        buffer.append(""node()"");
                        buffer.append('[');
                        buffer.append(getRelativePositionOfElement());
                        buffer.append(']');
                    }
                }
            }
            break;
        case Node.TEXT_NODE:
        case Node.CDATA_SECTION_NODE:
            buffer.append(""/text()"");
            buffer.append('[');
            buffer.append(getRelativePositionOfTextNode()).append(']');
            break;
        case Node.PROCESSING_INSTRUCTION_NODE:
            String target = ((ProcessingInstruction) node).getTarget();
            buffer.append(""/processing-instruction(\'"");
            buffer.append(target).append(""')"");
            buffer.append('[');
            buffer.append(getRelativePositionOfPI(target)).append(']');
            break;
        case Node.DOCUMENT_NODE:
    }
    return buffer.toString();
}","public void test3838() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    dOMNodePointer0.asPath();
}",""
"public String asPath() {
    if (id != null) {
        return ""id('"" + escape(id) + ""')"";
    }
    StringBuffer buffer = new StringBuffer();
    if (parent != null) {
        buffer.append(parent.asPath());
    }
    switch(node.getNodeType()) {
        case Node.ELEMENT_NODE:
            // If the parent pointer is not a DOMNodePointer, it is
            // the parent's responsibility to produce the node test part
            // of the path
            if (parent instanceof DOMNodePointer) {
                if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {
                    buffer.append('/');
                }
                String ln = DOMNodePointer.getLocalName(node);
                String nsURI = getNamespaceURI();
                if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {
                    buffer.append(ln);
                    buffer.append('[');
                    buffer.append(getRelativePositionByName()).append(']');
                } else {
                    String prefix = getNamespaceResolver().getPrefix(nsURI);
                    if (prefix != null) {
                        buffer.append(prefix);
                        buffer.append(':');
                        buffer.append(ln);
                        buffer.append('[');
                        buffer.append(getRelativePositionByName());
                        buffer.append(']');
                    } else {
                        buffer.append(""node()"");
                        buffer.append('[');
                        buffer.append(getRelativePositionOfElement());
                        buffer.append(']');
                    }
                }
            }
            break;
        case Node.TEXT_NODE:
        case Node.CDATA_SECTION_NODE:
            buffer.append(""/text()"");
            buffer.append('[');
            buffer.append(getRelativePositionOfTextNode()).append(']');
            break;
        case Node.PROCESSING_INSTRUCTION_NODE:
            String target = ((ProcessingInstruction) node).getTarget();
            buffer.append(""/processing-instruction(\'"");
            buffer.append(target).append(""')"");
            buffer.append('[');
            buffer.append(getRelativePositionOfPI(target)).append(']');
            break;
        case Node.DOCUMENT_NODE:
    }
    return buffer.toString();
}","public void test3939() throws Throwable {
    Locale locale0 = Locale.CHINA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, """");
    dOMNodePointer0.asPath();
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index) {
    if (index == WHOLE_COLLECTION) {
        index = 0;
    }
    boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);
    if (success) {
        NodeTest nodeTest;
        String prefix = name.getPrefix();
        String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();
        nodeTest = new NodeNameTest(name, namespaceURI);
        NodeIterator it = childIterator(nodeTest, false, null);
        if (it != null && it.setPosition(index + 1)) {
            return it.getNodePointer();
        }
    }
    throw new JXPathAbstractFactoryException(""Factory could not create a child node for path: "" + asPath() + ""/"" + name + ""["" + (index + 1) + ""]"");
}","public void test4040() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.forLanguageTag(""pp^Vc<WdedVE/eE5"");
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
    QName qName0 = new QName(""http://www.w3.org/2000/xmlns/"", ""http://www.w3.org/2000/xmlns/"");
    // Undeclared exception!
    try {
        dOMNodePointer0.createChild(jXPathContext0, qName0, 594);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Factory is not set on the JXPathContext - cannot create path:
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public String getDefaultNamespaceURI() {
    if (defaultNamespace == null) {
        Node aNode = node;
        if (aNode instanceof Document) {
            aNode = ((Document) aNode).getDocumentElement();
        }
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(""xmlns"");
                if (attr != null) {
                    defaultNamespace = attr.getValue();
                    break;
                }
            }
            aNode = aNode.getParentNode();
        }
    }
    if (defaultNamespace == null) {
        defaultNamespace = """";
    }
    // TBD: We are supposed to resolve relative URIs to absolute ones.
    return defaultNamespace.equals("""") ? null : defaultNamespace;
}","public void test4141() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest"");
    Locale locale0 = Locale.FRANCE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    dOMNodePointer0.getDefaultNamespaceURI();
    dOMNodePointer0.getDefaultNamespaceURI();
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix == null || prefix.equals("""")) {
        return getDefaultNamespaceURI();
    }
    if (prefix.equals(""xml"")) {
        return XML_NAMESPACE_URI;
    }
    if (prefix.equals(""xmlns"")) {
        return XMLNS_NAMESPACE_URI;
    }
    String namespace = null;
    if (namespaces == null) {
        namespaces = new HashMap();
    } else {
        namespace = (String) namespaces.get(prefix);
    }
    if (namespace == null) {
        String qname = ""xmlns:"" + prefix;
        Node aNode = node;
        if (aNode instanceof Document) {
            aNode = ((Document) aNode).getDocumentElement();
        }
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(qname);
                if (attr != null) {
                    namespace = attr.getValue();
                    break;
                }
            }
            aNode = aNode.getParentNode();
        }
        if (namespace == null || namespace.equals("""")) {
            namespace = NodePointer.UNKNOWN_NAMESPACE;
        }
    }
    namespaces.put(prefix, namespace);
    if (namespace == UNKNOWN_NAMESPACE) {
        return null;
    }
    // TBD: We are supposed to resolve relative URIs to absolute ones.
    return namespace;
}","public void test4242() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""id('"");
    Locale locale0 = Locale.TAIWAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    dOMNodePointer0.getNamespaceURI("""");
}",""
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest) {
        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
            String testPI = ((ProcessingInstructionTest) test).getTarget();
            String nodePI = ((ProcessingInstruction) node).getTarget();
            return testPI.equals(nodePI);
        }
    }
    return false;
}","public void test4343() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-50));
    DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) nodeTypeTest0);
}",""
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest) {
        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
            String testPI = ((ProcessingInstructionTest) test).getTarget();
            String nodePI = ((ProcessingInstruction) node).getTarget();
            return testPI.equals(nodePI);
        }
    }
    return false;
}","public void test4444() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest"");
    DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) null);
}",""
"public Object getImmediateNode() {
    return node;
}","public void test4545() throws Throwable {
    Locale locale0 = Locale.FRENCH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, (String) null);
    dOMNodePointer0.getImmediateNode();
}",""
"public Object getBaseValue() {
    return node;
}","public void test4646() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.GERMAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    dOMNodePointer0.getBaseValue();
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Node node1 = (Node) pointer1.getBaseValue();
    Node node2 = (Node) pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    int t1 = node1.getNodeType();
    int t2 = node2.getNodeType();
    if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {
        return -1;
    }
    if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        return 1;
    }
    if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        NamedNodeMap map = ((Node) getNode()).getAttributes();
        int length = map.getLength();
        for (int i = 0; i < length; i++) {
            Node n = map.item(i);
            if (n == node1) {
                return -1;
            }
            if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    Node current = node.getFirstChild();
    while (current != null) {
        if (current == node1) {
            return -1;
        }
        if (current == node2) {
            return 1;
        }
        current = current.getNextSibling();
    }
    return 0;
}","public void test4747() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""xmlns"");
    Locale locale0 = Locale.TAIWAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""xmlns"");
    QName qName0 = dOMNodePointer0.getName();
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) iIOMetadataNode0);
    NodePointer nodePointer0 = dOMNodePointer0.createAttribute(jXPathContext0, qName0);
    dOMNodePointer0.compareChildNodePointers(nodePointer0, dOMNodePointer0);
}",""
"public Pointer getPointerByID(JXPathContext context, String id) {
    Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument();
    Element element = document.getElementById(id);
    return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id);
}","public void test4848() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""id('"");
    Locale locale0 = Locale.TAIWAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) iIOMetadataNode0);
    // Undeclared exception!
    try {
        dOMNodePointer0.getPointerByID(jXPathContext0, ""Chinese (Taiwan)"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}","/**
 * Locates a node by ID.
 */"
"public Object getValue() {
    return stringValue(node);
}","public void test4949() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""mok6+f~v}qt"");
    iIOMetadataNode0.appendChild(iIOMetadataNode0);
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""xml"");
    dOMNodePointer0.getValue();
}",""
"public String getNamespaceURI() {
    return getNamespaceURI(node);
}","public void test5050() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""xmlns"");
    Locale locale0 = Locale.TAIWAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""xmlns"");
    QName qName0 = dOMNodePointer0.getName();
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) iIOMetadataNode0);
    dOMNodePointer0.createAttribute(jXPathContext0, qName0);
    String string0 = dOMNodePointer0.getNamespaceURI();
    assertEquals("""", string0);
}",""
"public static String getNamespaceURI(Node node) {
    if (node instanceof Document) {
        node = ((Document) node).getDocumentElement();
    }
    Element element = (Element) node;
    String uri = element.getNamespaceURI();
    if (uri != null) {
        return uri;
    }
    String prefix = getPrefix(node);
    String qname = prefix == null ? ""xmlns"" : ""xmlns:"" + prefix;
    Node aNode = node;
    while (aNode != null) {
        if (aNode.getNodeType() == Node.ELEMENT_NODE) {
            Attr attr = ((Element) aNode).getAttributeNode(qname);
            if (attr != null) {
                return attr.getValue();
            }
        }
        aNode = aNode.getParentNode();
    }
    return null;
}","public void test5151() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""http://www.w3.org/XML/1998/namespace"");
    String string0 = DOMNodePointer.getNamespaceURI((Node) iIOMetadataNode0);
    assertNull(string0);
}",""
"int getPosition();","public void test5252() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest"");
    Locale locale0 = Locale.FRANCE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    QName qName0 = new QName((String) null, """");
    dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    NodeIterator nodeIterator0 = dOMNodePointer0.namespaceIterator();
    assertEquals(0, nodeIterator0.getPosition());
}",""
"int getPosition();","public void test5353() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest"");
    Locale locale0 = Locale.FRANCE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    QName qName0 = new QName((String) null, ""http://www.w3.org/XML/1998/namespace"");
    dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    NodeIterator nodeIterator0 = dOMNodePointer0.namespaceIterator();
    assertEquals(0, nodeIterator0.getPosition());
}",""
"public boolean equals(Object object) {
    return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;
}","public void test5454() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest"");
    Node node0 = iIOMetadataNode0.cloneNode(true);
    Locale locale0 = Locale.FRANCE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0);
    DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, iIOMetadataNode0);
    boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer1);
    assertFalse(boolean0);
}",""
"public boolean equals(Object object) {
    return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;
}","public void test5555() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    DOMNodePointer dOMNodePointer1 = new DOMNodePointer(variablePointer0, iIOMetadataNode0);
    boolean boolean0 = dOMNodePointer1.equals(dOMNodePointer0);
    assertTrue(boolean0);
}",""
"public boolean equals(Object object) {
    return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;
}","public void test5656() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.GERMAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    boolean boolean0 = dOMNodePointer0.equals(iIOMetadataNode0);
    assertFalse(boolean0);
}",""
"public void remove() {
    Node parent = node.getParentNode();
    if (parent == null) {
        throw new JXPathException(""Cannot remove root DOM node"");
    }
    parent.removeChild(node);
}","public void test5757() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    // Undeclared exception!
    try {
        dOMNodePointer0.remove();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot remove root DOM node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public boolean isRoot() {
    return parent == null;
}","public void test5858() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Node node0 = iIOMetadataNode0.appendChild(iIOMetadataNode0);
    Locale locale0 = Locale.GERMAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0);
    dOMNodePointer0.remove();
    assertTrue(dOMNodePointer0.isRoot());
}","/**
 * Returns true if this Pointer has no parent.
 */"
"public boolean isNode() {
    return !isContainer();
}","public void test5959() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest"");
    Locale locale0 = Locale.FRANCE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    QName qName0 = new QName((String) null, ""<<unknown namespace>>"");
    dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    NodePointer nodePointer0 = dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    assertTrue(nodePointer0.isNode());
}","/**
 * @deprecated Please use !isContainer()
 */"
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        String ns = getNamespaceURI(prefix);
        if (ns == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        element.setAttributeNS(ns, name.toString(), """");
    } else {
        if (!element.hasAttribute(name.getName())) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test6060() throws Throwable {
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null, ""9f/cwF/v#m05<k5"");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) ""xmlns:"");
    QName qName0 = new QName("""");
    // Undeclared exception!
    try {
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot create an attribute for path id('9f/cwF/v#m05<k5')/@, operation is not allowed for this type of node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index) {
    if (index == WHOLE_COLLECTION) {
        index = 0;
    }
    boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);
    if (success) {
        NodeTest nodeTest;
        String prefix = name.getPrefix();
        String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();
        nodeTest = new NodeNameTest(name, namespaceURI);
        NodeIterator it = childIterator(nodeTest, false, null);
        if (it != null && it.setPosition(index + 1)) {
            return it.getNodePointer();
        }
    }
    throw new JXPathAbstractFactoryException(""Factory could not create a child node for path: "" + asPath() + ""/"" + name + ""["" + (index + 1) + ""]"");
}","public void test6161() throws Throwable {
    Locale locale0 = Locale.KOREA;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, ""org.apache.commons.jxpath.JXPathAbstractFactoryException"");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
    QName qName0 = new QName(""iGcmWwiIP+(Zt`S6"");
    // Undeclared exception!
    try {
        dOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Factory is not set on the JXPathContext - cannot create path: id('org.apache.commons.jxpath.JXPathAbstractFactoryException')
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public void setValue(Object value) {
    if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) {
        String string = (String) TypeUtils.convert(value, String.class);
        if (string != null && !string.equals("""")) {
            node.setNodeValue(string);
        } else {
            node.getParentNode().removeChild(node);
        }
    } else {
        NodeList children = node.getChildNodes();
        int count = children.getLength();
        for (int i = count; --i >= 0; ) {
            Node child = children.item(i);
            node.removeChild(child);
        }
        if (value instanceof Node) {
            Node valueNode = (Node) value;
            if (valueNode instanceof Element || valueNode instanceof Document) {
                children = valueNode.getChildNodes();
                for (int i = 0; i < children.getLength(); i++) {
                    Node child = children.item(i);
                    node.appendChild(child.cloneNode(true));
                }
            } else {
                node.appendChild(valueNode.cloneNode(true));
            }
        } else {
            String string = (String) TypeUtils.convert(value, String.class);
            if (string != null && !string.equals("""")) {
                Node textNode = node.getOwnerDocument().createTextNode(string);
                node.appendChild(textNode);
            }
        }
    }
}","public void test6262() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest"");
    Locale locale0 = Locale.JAPANESE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    QName qName0 = new QName((String) null, """");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
    // Undeclared exception!
    try {
        dOMNodePointer0.setValue(nodeNameTest0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}","/**
 * Sets contents of the node to the specified value. If the value is
 * a String, the contents of the node are replaced with this text.
 * If the value is an Element or Document, the children of the
 * node are replaced with the children of the passed node.
 */"
"public int getLength() {
    return 1;
}","public void test6363() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest"");
    Locale locale0 = Locale.FRANCE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    dOMNodePointer0.setValue((Object) null);
    assertEquals(1, dOMNodePointer0.getLength());
}",""
"public boolean isCollection() {
    return false;
}","public void test6464() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, iIOMetadataNode0);
    dOMNodePointer0.setValue(iIOMetadataNode0);
    assertFalse(dOMNodePointer0.isCollection());
}",""
"public int getIndex() {
    return index;
}","public void test6565() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    dOMNodePointer0.setValue("""");
    assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
}","/**
 * If the pointer represents a collection, the index identifies
 * an element of that collection.  The default value of <code>index</code>
 * is <code>WHOLE_COLLECTION</code>, which just means that the pointer
 * is not indexed at all.
 * Note: the index on NodePointer starts with 0, not 1.
 */"
"public boolean isLanguage(String lang) {
    String current = getLanguage();
    return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());
}","public void test6666() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.UK;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, "">(uA%^`1rT=G2;O"");
    boolean boolean0 = dOMNodePointer0.isLanguage("""");
    assertTrue(boolean0);
}","/**
 * Returns true if the xml:lang attribute for the current node
 * or its parent has the specified prefix <i>lang</i>.
 * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.
 */"
"public boolean isLeaf() {
    return !node.hasChildNodes();
}","public void test6767() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, iIOMetadataNode0);
    boolean boolean0 = dOMNodePointer1.isLeaf();
    assertTrue(boolean0);
}",""
"public abstract JXPathContext getRelativeContext(Pointer pointer);","public void test6868() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.UK;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""\""sum\"""");
    NodePointer nodePointer0 = dOMNodePointer0.namespacePointer("""");
    dOMNodePointer0.getDefaultNamespaceURI();
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) ""http://www.w3.org/2000/xmlns/"");
    // Undeclared exception!
    try {
        jXPathContext0.getRelativeContext(nodePointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot create a relative context for a non-existent node: id('&quot;sum&quot;')/namespace::
        //
        verifyException(""org.apache.commons.jxpath.ri.JXPathContextReferenceImpl"", e);
    }
}","/**
 * Returns a JXPathContext that is relative to the current JXPathContext.
 * The supplied pointer becomes the context pointer of the new context.
 * The relative context inherits variables, extension functions, locale etc
 * from the parent context.
 */"
"public abstract JXPathContext getRelativeContext(Pointer pointer);","public void test6969() throws Throwable {
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null, ""|mt`T_*^V`Ar@<b"");
    NodePointer nodePointer0 = dOMNodePointer0.namespacePointer(""|mt`T_*^V`Ar@<b"");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
    dOMNodePointer0.childIterator(nodeNameTest0, true, nodePointer0);
    // Undeclared exception!
    try {
        jXPathContext0.getRelativeContext(nodePointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot create a relative context for a non-existent node: id('|mt`T_*^V`Ar@<b')/namespace::|mt`T_*^V`Ar@<b
        //
        verifyException(""org.apache.commons.jxpath.ri.JXPathContextReferenceImpl"", e);
    }
}","/**
 * Returns a JXPathContext that is relative to the current JXPathContext.
 * The supplied pointer becomes the context pointer of the new context.
 * The relative context inherits variables, extension functions, locale etc
 * from the parent context.
 */"
"public NodePointer createAttribute(JXPathContext context, QName name) {
    if (!(node instanceof Element)) {
        return super.createAttribute(context, name);
    }
    Element element = (Element) node;
    String prefix = name.getPrefix();
    if (prefix != null) {
        String ns = getNamespaceURI(prefix);
        if (ns == null) {
            throw new JXPathException(""Unknown namespace prefix: "" + prefix);
        }
        element.setAttributeNS(ns, name.toString(), """");
    } else {
        if (!element.hasAttribute(name.getName())) {
            element.setAttribute(name.getName(), """");
        }
    }
    NodeIterator it = attributeIterator(name);
    it.setPosition(1);
    return it.getNodePointer();
}","public void test7070() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""mok6+f~v}qt"");
    Locale locale0 = Locale.CANADA_FRENCH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""xml"");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) ""mok6+f~v}qt"");
    QName qName0 = new QName(""q?W{{_X=LUrWs#eW`xr"", (String) null);
    dOMNodePointer0.getNamespaceURI(""<BaseChar>"");
    // Undeclared exception!
    try {
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Unknown namespace prefix: q?W{{_X=LUrWs#eW`xr
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"int getPosition();","public void test7171() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    QName qName0 = new QName(""xml:lang"");
    Locale locale0 = Locale.PRC;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    NodeIterator nodeIterator0 = dOMNodePointer0.attributeIterator(qName0);
    assertEquals(0, nodeIterator0.getPosition());
}",""
"public String getNamespaceURI(String prefix) {
    if (prefix == null || prefix.equals("""")) {
        return getDefaultNamespaceURI();
    }
    if (prefix.equals(""xml"")) {
        return XML_NAMESPACE_URI;
    }
    if (prefix.equals(""xmlns"")) {
        return XMLNS_NAMESPACE_URI;
    }
    String namespace = null;
    if (namespaces == null) {
        namespaces = new HashMap();
    } else {
        namespace = (String) namespaces.get(prefix);
    }
    if (namespace == null) {
        String qname = ""xmlns:"" + prefix;
        Node aNode = node;
        if (aNode instanceof Document) {
            aNode = ((Document) aNode).getDocumentElement();
        }
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(qname);
                if (attr != null) {
                    namespace = attr.getValue();
                    break;
                }
            }
            aNode = aNode.getParentNode();
        }
        if (namespace == null || namespace.equals("""")) {
            namespace = NodePointer.UNKNOWN_NAMESPACE;
        }
    }
    namespaces.put(prefix, namespace);
    if (namespace == UNKNOWN_NAMESPACE) {
        return null;
    }
    // TBD: We are supposed to resolve relative URIs to absolute ones.
    return namespace;
}","public void test7272() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    String string0 = dOMNodePointer0.getNamespaceURI((String) null);
    assertNull(string0);
}",""
"public String toString() {
    return qname.toString();
}","public void test7373() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, (Locale) null);
    QName qName0 = dOMNodePointer0.getName();
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
    boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
    assertEquals("""", nodeNameTest0.toString());
}",""
"public boolean testNode(NodeTest test) {
    return testNode(node, test);
}","public void test7374() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, (Locale) null);
    QName qName0 = dOMNodePointer0.getName();
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
    boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
    assertTrue(boolean0);
}",""
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest) {
        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
            String testPI = ((ProcessingInstructionTest) test).getTarget();
            String nodePI = ((ProcessingInstruction) node).getTarget();
            return testPI.equals(nodePI);
        }
    }
    return false;
}","public void test7475() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""mok6+f~v}qt"");
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
    boolean boolean0 = DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) processingInstructionTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest) {
        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
            String testPI = ((ProcessingInstructionTest) test).getTarget();
            String nodePI = ((ProcessingInstruction) node).getTarget();
            return testPI.equals(nodePI);
        }
    }
    return false;
}","public void test7576() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""*"");
    boolean boolean0 = DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) nodeNameTest0);
    assertFalse(boolean0);
}",""
"public static boolean testNode(Node node, NodeTest test) {
    if (test == null) {
        return true;
    }
    if (test instanceof NodeNameTest) {
        if (node.getNodeType() != Node.ELEMENT_NODE) {
            return false;
        }
        NodeNameTest nodeNameTest = (NodeNameTest) test;
        QName testName = nodeNameTest.getNodeName();
        String namespaceURI = nodeNameTest.getNamespaceURI();
        boolean wildcard = nodeNameTest.isWildcard();
        String testPrefix = testName.getPrefix();
        if (wildcard && testPrefix == null) {
            return true;
        }
        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
            String nodeNS = DOMNodePointer.getNamespaceURI(node);
            return equalStrings(namespaceURI, nodeNS);
        }
        return false;
    }
    if (test instanceof NodeTypeTest) {
        int nodeType = node.getNodeType();
        switch(((NodeTypeTest) test).getNodeType()) {
            case Compiler.NODE_TYPE_NODE:
                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
            case Compiler.NODE_TYPE_TEXT:
                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
            case Compiler.NODE_TYPE_COMMENT:
                return nodeType == Node.COMMENT_NODE;
            case Compiler.NODE_TYPE_PI:
                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
        }
        return false;
    }
    if (test instanceof ProcessingInstructionTest) {
        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
            String testPI = ((ProcessingInstructionTest) test).getTarget();
            String nodePI = ((ProcessingInstruction) node).getTarget();
            return testPI.equals(nodePI);
        }
    }
    return false;
}","public void test7677() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("""");
    QName qName0 = new QName(""yHhTa{WAqL,uL["");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""*"");
    boolean boolean0 = DOMNodePointer.testNode((Node) iIOMetadataNode0, (NodeTest) nodeNameTest0);
    assertFalse(boolean0);
}",""
"public String getDefaultNamespaceURI() {
    if (defaultNamespace == null) {
        Node aNode = node;
        if (aNode instanceof Document) {
            aNode = ((Document) aNode).getDocumentElement();
        }
        while (aNode != null) {
            if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                Attr attr = ((Element) aNode).getAttributeNode(""xmlns"");
                if (attr != null) {
                    defaultNamespace = attr.getValue();
                    break;
                }
            }
            aNode = aNode.getParentNode();
        }
    }
    if (defaultNamespace == null) {
        defaultNamespace = """";
    }
    // TBD: We are supposed to resolve relative URIs to absolute ones.
    return defaultNamespace.equals("""") ? null : defaultNamespace;
}","public void test7778() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""xmlns"");
    Locale locale0 = Locale.TAIWAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""xmlns"");
    QName qName0 = dOMNodePointer0.getName();
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) iIOMetadataNode0);
    dOMNodePointer0.createAttribute(jXPathContext0, qName0);
    String string0 = dOMNodePointer0.getDefaultNamespaceURI();
    assertNull(string0);
}",""
"public boolean testNode(NodeTest test) {
    return testNode(node, test);
}","public void test7879() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.UK;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, "">(uA%^`1rT=G2;O"");
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1485));
    boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
    assertFalse(boolean0);
}",""
"public boolean isActual() {
    return true;
}","public void test7980() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""<<unknown namespace>>"");
    Locale locale0 = new Locale(""<<unknown namespace>>"", "",-HymY7xiqJagA79?:g"", ""W[+9rx}gk"");
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    boolean boolean0 = dOMNodePointer0.isActual();
    assertTrue(boolean0);
}",""
"public int hashCode() {
    return System.identityHashCode(node);
}","public void test8081() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    Locale locale0 = Locale.GERMAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    dOMNodePointer0.hashCode();
}",""
"public int getLength() {
    return 1;
}","public void test8182() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""mok6+f~v}qt"");
    Locale locale0 = Locale.ITALY;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""xml"");
    int int0 = dOMNodePointer0.getLength();
    assertEquals(1, int0);
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {
    NodePointer ptr = createChild(context, name, index);
    ptr.setValue(value);
    return ptr;
}","public void test8283() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest"");
    Locale locale0 = Locale.FRANCE;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    QName qName0 = new QName((String) null, """");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) iIOMetadataNode0);
    // Undeclared exception!
    try {
        dOMNodePointer0.createChild(jXPathContext0, qName0, 1040, (Object) dOMNodePointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Factory is not set on the JXPathContext - cannot create path:
        //
        verifyException(""org.apache.commons.jxpath.ri.model.dom.DOMNodePointer"", e);
    }
}",""
"public String getNamespaceURI() {
    return getNamespaceURI(node);
}","public void test8384() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""xmlns"");
    Locale locale0 = Locale.TAIWAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0, ""xmlns"");
    String string0 = dOMNodePointer0.getNamespaceURI();
    assertNull(string0);
}",""
"public boolean isCollection() {
    return false;
}","public void test8485() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""id('"");
    Locale locale0 = Locale.TAIWAN;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer(iIOMetadataNode0, locale0);
    boolean boolean0 = dOMNodePointer0.isCollection();
    assertFalse(boolean0);
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    Node node1 = (Node) pointer1.getBaseValue();
    Node node2 = (Node) pointer2.getBaseValue();
    if (node1 == node2) {
        return 0;
    }
    int t1 = node1.getNodeType();
    int t2 = node2.getNodeType();
    if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {
        return -1;
    }
    if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        return 1;
    }
    if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {
        NamedNodeMap map = ((Node) getNode()).getAttributes();
        int length = map.getLength();
        for (int i = 0; i < length; i++) {
            Node n = map.item(i);
            if (n == node1) {
                return -1;
            }
            if (n == node2) {
                return 1;
            }
        }
        // Should not happen
        return 0;
    }
    Node current = node.getFirstChild();
    while (current != null) {
        if (current == node1) {
            return -1;
        }
        if (current == node2) {
            return 1;
        }
        current = current.getNextSibling();
    }
    return 0;
}","public void test8586() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
    int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer0);
    assertEquals(0, int0);
}",""
