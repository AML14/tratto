project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    assertNotNull(qName0);
}",0,
project,0,test0001,"public void test0001() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    assertEquals("""", qName0.getName());
}",0,
project,0,test0002,"public void test0002() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    assertEquals(""zn>.Dq;=2q0U!|^pCV"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0003,"public void test0003() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    assertEquals(""zn>.Dq;=2q0U!|^pCV:"", qName0.toString());
}",0,
project,0,test00011,"public void test00011() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertNotNull(beanPointer0);
}",0,
project,0,test00012,"public void test00012() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test00013,"public void test00013() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals(""zn>.Dq;=2q0U!|^pCV"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test00014,"public void test00014() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals(""zn>.Dq;=2q0U!|^pCV:"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test00021,"public void test00021() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test00022,"public void test00022() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test00023,"public void test00023() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test00024,"public void test00024() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertFalse(beanPointer0.isContainer());
}",0,
project,0,test00025,"public void test00025() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertTrue(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test00026,"public void test00026() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test00027,"public void test00027() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertFalse(beanPointer0.isCollection());
}",0,assertTrue(beanPointer0.isCollection())
project,0,test00028,"public void test00028() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test00029,"public void test00029() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertTrue(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test00031,"public void test00031() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) """");
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test00032,"public void test00032() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) """");
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,
project,0,test00034,"public void test00034() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) """");
    // Undeclared exception!
    try {
        beanPointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-340), (Object) jXPathContextReferenceImpl0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot create an object for path ''/zn>.Dq;=2q0U!|^pCV:[-339], operation is not allowed for this type of node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",1,
project,0,test00135,"public void test00135() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test00136,"public void test00136() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    assertEquals("", operation is not allowed for this type of node"", qName0.getName());
}",0,
project,0,test00137,"public void test00137() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    assertEquals("", operation is not allowed for this type of node"", qName0.getPrefix());
}",0,
project,0,test00138,"public void test00138() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    assertEquals("", operation is not allowed for this type of node:, operation is not allowed for this type of node"", qName0.toString());
}",0,
project,0,test00139,"public void test00139() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test00140,"public void test00140() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("", operation is not allowed for this type of node"", qName0.getName());
}",0,
project,0,test00141,"public void test00141() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("", operation is not allowed for this type of node"", qName0.getPrefix());
}",0,
project,0,test00142,"public void test00142() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("", operation is not allowed for this type of node:, operation is not allowed for this type of node"", qName0.toString());
}",0,
project,0,test00143,"public void test00143() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertFalse(variablePointer0.isAttribute())
project,0,test00144,"public void test00144() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test00145,"public void test00145() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test00146,"public void test00146() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertFalse(variablePointer0.isActual())
project,0,test00147,"public void test00147() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test00148,"public void test00148() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test00149,"public void test00149() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test00151,"public void test00151() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    assertEquals("", operation is not allowed for this type of node"", qName0.getName());
}",0,
project,0,test00152,"public void test00152() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    assertEquals("", operation is not allowed for this type of node"", qName0.getPrefix());
}",0,
project,0,test00153,"public void test00153() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    assertEquals("", operation is not allowed for this type of node:, operation is not allowed for this type of node"", qName0.toString());
}",0,
project,0,test00154,"public void test00154() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    assertFalse(variablePointer0.isAttribute());
}",0,assertFalse(variablePointer0.isAttribute())
project,0,test00155,"public void test00155() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test00156,"public void test00156() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    assertEquals(1698, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test00157,"public void test00157() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test00158,"public void test00158() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test00159,"public void test00159() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test00160,"public void test00160() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test00161,"public void test00161() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
}",0,
project,0,test00162,"public void test00162() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    int int0 = variablePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
    assertEquals(0, int0);
}",0,
project,0,test00163,"public void test00163() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    int int0 = variablePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
    assertEquals("", operation is not allowed for this type of node"", qName0.getName());
}",0,
project,0,test00164,"public void test00164() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    int int0 = variablePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
    assertEquals("", operation is not allowed for this type of node"", qName0.getPrefix());
}",0,
project,0,test00165,"public void test00165() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    int int0 = variablePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
    assertEquals("", operation is not allowed for this type of node:, operation is not allowed for this type of node"", qName0.toString());
}",0,
project,0,test00166,"public void test00166() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    int int0 = variablePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test00167,"public void test00167() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    int int0 = variablePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test00168,"public void test00168() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    int int0 = variablePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
    assertEquals(1698, variablePointer0.getIndex());
}",0,
project,0,test00169,"public void test00169() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    int int0 = variablePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test00170,"public void test00170() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    int int0 = variablePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test00171,"public void test00171() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    int int0 = variablePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test00172,"public void test00172() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(1698);
    int int0 = variablePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test00275,"public void test00275() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    assertNotNull(qName0);
}",0,
project,0,test00276,"public void test00276() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    assertEquals(""POINTER"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test00277,"public void test00277() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    assertEquals(""POINTER: "", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test00278,"public void test00278() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    assertEquals("" "", qName0.getName());
}",0,
project,0,test00279,"public void test00279() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test00280,"public void test00280() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""POINTER"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test00281,"public void test00281() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""POINTER: "", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test00282,"public void test00282() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("" "", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test00283,"public void test00283() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test00284,"public void test00284() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test00285,"public void test00285() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test00286,"public void test00286() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test00287,"public void test00287() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test00288,"public void test00288() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test00289,"public void test00289() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test00291,"public void test00291() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.remove();
    assertEquals(""POINTER"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test00292,"public void test00292() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.remove();
    assertEquals(""POINTER: "", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test00293,"public void test00293() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.remove();
    assertEquals("" "", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test00294,"public void test00294() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.remove();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test00295,"public void test00295() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.remove();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test00296,"public void test00296() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.remove();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test00297,"public void test00297() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.remove();
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test00298,"public void test00298() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.remove();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test00299,"public void test00299() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.remove();
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test002100,"public void test002100() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.remove();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test002101,"public void test002101() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""POINTER: "");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.remove();
    assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
}",0,
project,0,test003102,"public void test003102() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    assertNotNull(qName0);
}",0,
project,0,test003103,"public void test003103() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    assertEquals(""(b]\""/{"", qName0.getPrefix());
}",0,
project,0,test003104,"public void test003104() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    assertEquals(""{O%xno)(("", qName0.getName());
}",0,
project,0,test003105,"public void test003105() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    assertEquals(""(b]\""/{:{O%xno)(("", qName0.toString());
}",0,
project,0,test003106,"public void test003106() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test003107,"public void test003107() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""(b]\""/{"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test003108,"public void test003108() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""{O%xno)(("", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test003109,"public void test003109() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""(b]\""/{:{O%xno)(("", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test003110,"public void test003110() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test003111,"public void test003111() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test003112,"public void test003112() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test003113,"public void test003113() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test003114,"public void test003114() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test003115,"public void test003115() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test003116,"public void test003116() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test003118,"public void test003118() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(Integer.MIN_VALUE);
    assertEquals(""(b]\""/{"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test003119,"public void test003119() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(Integer.MIN_VALUE);
    assertEquals(""{O%xno)(("", qName0.getName());
}",0,
project,0,test003120,"public void test003120() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(Integer.MIN_VALUE);
    assertEquals(""(b]\""/{:{O%xno)(("", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test003121,"public void test003121() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(Integer.MIN_VALUE);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test003122,"public void test003122() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(Integer.MIN_VALUE);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test003123,"public void test003123() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test003124,"public void test003124() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(Integer.MIN_VALUE);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test003125,"public void test003125() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(Integer.MIN_VALUE);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test003126,"public void test003126() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(Integer.MIN_VALUE);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test003127,"public void test003127() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(Integer.MIN_VALUE);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test003128,"public void test003128() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""{O%xno)(("");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
}",0,
project,0,test004129,"public void test004129() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    assertNotNull(qName0);
}",1,
project,0,test004130,"public void test004130() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    assertEquals(""@{g}t"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test004131,"public void test004131() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    assertNull(qName0.getPrefix());
}",0,
project,0,test004132,"public void test004132() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    assertEquals(""@{g}t"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test004133,"public void test004133() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test004134,"public void test004134() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""@{g}t"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test004135,"public void test004135() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test004136,"public void test004136() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""@{g}t"", qName0.toString());
}",0,
project,0,test004137,"public void test004137() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test004138,"public void test004138() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test004139,"public void test004139() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test004140,"public void test004140() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test004141,"public void test004141() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test004142,"public void test004142() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test004143,"public void test004143() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test004145,"public void test004145() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertNotNull(nodePointer0);
}",0,assertNotNull(nodePointer0)
project,0,test004146,"public void test004146() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertEquals(""@{g}t"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test004147,"public void test004147() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test004148,"public void test004148() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertEquals(""@{g}t"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test004149,"public void test004149() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test004150,"public void test004150() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test004151,"public void test004151() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test004152,"public void test004152() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test004153,"public void test004153() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test004154,"public void test004154() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test004155,"public void test004155() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test004158,"public void test004158() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.isLeaf();
    assertTrue(boolean0);
}",0,assertFalse(boolean0)
project,0,test004159,"public void test004159() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.isLeaf();
    assertEquals(""@{g}t"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test004160,"public void test004160() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.isLeaf();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test004161,"public void test004161() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.isLeaf();
    assertEquals(""@{g}t"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test004162,"public void test004162() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.isLeaf();
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test004163,"public void test004163() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.isLeaf();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test004164,"public void test004164() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.isLeaf();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test004165,"public void test004165() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.isLeaf();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test004166,"public void test004166() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.isLeaf();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test004167,"public void test004167() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.isLeaf();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test004168,"public void test004168() throws Throwable {
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.isLeaf();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test005171,"public void test005171() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    assertNotNull(nodeTypeTest0);
}",0,
project,0,test005172,"public void test005172() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    assertEquals(749, nodeTypeTest0.getNodeType());
}",0,"assertEquals(0, nodeTypeTest0.getNodeType())"
project,0,test005173,"public void test005173() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test005174,"public void test005174() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertEquals(749, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test005175,"public void test005175() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test005177,"public void test005177() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNotNull(basicVariables0);
}",0,assertNotNull(basicVariables0)
project,0,test005178,"public void test005178() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertEquals(749, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test005179,"public void test005179() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test005181,"public void test005181() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    assertNotNull(qName0);
}",0,
project,0,test005182,"public void test005182() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    assertEquals(""@{g}t"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test005183,"public void test005183() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    assertEquals(""@{g}t"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test005184,"public void test005184() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test005185,"public void test005185() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,
project,0,test005186,"public void test005186() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(749, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test005187,"public void test005187() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test005188,"public void test005188() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""@{g}t"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test005189,"public void test005189() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""@{g}t"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test005190,"public void test005190() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test005191,"public void test005191() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test005192,"public void test005192() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test005193,"public void test005193() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test005194,"public void test005194() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test005195,"public void test005195() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test005196,"public void test005196() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test005197,"public void test005197() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test005200,"public void test005200() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertNotNull(variablePointer1);
}",0,assertNotNull(variablePointer1)
project,0,test005203,"public void test005203() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertEquals(749, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test005204,"public void test005204() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test005205,"public void test005205() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertEquals(""@{g}t"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test005206,"public void test005206() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertEquals(""@{g}t"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test005207,"public void test005207() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test005208,"public void test005208() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test005209,"public void test005209() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test005210,"public void test005210() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test005211,"public void test005211() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test005212,"public void test005212() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test005213,"public void test005213() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test005214,"public void test005214() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test005215,"public void test005215() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertFalse(variablePointer1.isNode());
}",0,assertTrue(variablePointer1.isNode())
project,0,test005216,"public void test005216() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertTrue(variablePointer1.isActual());
}",0,assertTrue(variablePointer1.isActual())
project,0,test005217,"public void test005217() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertTrue(variablePointer1.isContainer());
}",0,assertTrue(variablePointer1.isContainer())
project,0,test005218,"public void test005218() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
}",0,
project,0,test005219,"public void test005219() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertTrue(variablePointer1.isRoot());
}",0,assertTrue(variablePointer1.isRoot())
project,0,test005220,"public void test005220() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertFalse(variablePointer1.isAttribute());
}",0,assertTrue(variablePointer1.isAttribute())
project,0,test005221,"public void test005221() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    assertNull(variablePointer1.getNamespaceURI());
}",0,assertNotNull(variablePointer1.getNamespaceURI())
project,0,test005225,"public void test005225() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertNotNull(beanPointer0);
}",0,
project,0,test005227,"public void test005227() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertEquals(749, nodeTypeTest0.getNodeType());
}",0,"assertEquals(0, nodeTypeTest0.getNodeType())"
project,0,test005228,"public void test005228() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test005229,"public void test005229() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertEquals(""@{g}t"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test005230,"public void test005230() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertEquals(""@{g}t"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test005231,"public void test005231() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test005232,"public void test005232() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test005233,"public void test005233() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test005234,"public void test005234() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test005235,"public void test005235() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test005236,"public void test005236() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test005237,"public void test005237() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test005238,"public void test005238() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test005239,"public void test005239() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test005240,"public void test005240() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test005241,"public void test005241() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isContainer());
}",0,
project,0,test005242,"public void test005242() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test005243,"public void test005243() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test005244,"public void test005244() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isCollection());
}",0,
project,0,test005245,"public void test005245() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test005246,"public void test005246() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test005247,"public void test005247() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test005251,"public void test005251() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test005253,"public void test005253() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertEquals(749, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test005254,"public void test005254() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test005255,"public void test005255() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertEquals(""@{g}t"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test005256,"public void test005256() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertEquals(""@{g}t"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test005257,"public void test005257() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test005258,"public void test005258() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test005259,"public void test005259() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test005260,"public void test005260() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test005261,"public void test005261() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test005262,"public void test005262() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test005263,"public void test005263() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test005264,"public void test005264() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test005265,"public void test005265() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test005266,"public void test005266() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test005267,"public void test005267() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test005268,"public void test005268() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test005269,"public void test005269() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test005270,"public void test005270() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertFalse(beanPointer0.isCollection());
}",0,assertFalse(beanPointer0.isCollection())
project,0,test005271,"public void test005271() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertFalse(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test005272,"public void test005272() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test005273,"public void test005273() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.isLeaf();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test006277,"public void test006277() throws Throwable {
    QName qName0 = new QName("""");
    assertNotNull(qName0);
}",0,
project,0,test006278,"public void test006278() throws Throwable {
    QName qName0 = new QName("""");
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test006279,"public void test006279() throws Throwable {
    QName qName0 = new QName("""");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test006280,"public void test006280() throws Throwable {
    QName qName0 = new QName("""");
    assertEquals("""", qName0.getName());
}",0,
project,0,test006281,"public void test006281() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test006282,"public void test006282() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("""", qName0.toString());
}",0,
project,0,test006283,"public void test006283() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test006284,"public void test006284() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test006285,"public void test006285() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test006286,"public void test006286() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test006287,"public void test006287() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertFalse(variablePointer0.isActual())
project,0,test006288,"public void test006288() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test006289,"public void test006289() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test006290,"public void test006290() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test006291,"public void test006291() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test006293,"public void test006293() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test006294,"public void test006294() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
    assertEquals("""", qName0.toString());
}",0,
project,0,test006295,"public void test006295() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test006296,"public void test006296() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test006297,"public void test006297() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test006298,"public void test006298() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test006299,"public void test006299() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test006300,"public void test006300() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test006301,"public void test006301() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test006302,"public void test006302() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test006303,"public void test006303() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
    assertFalse(variablePointer0.isAttribute());
}",0,assertFalse(variablePointer0.isAttribute())
project,0,test007309,"public void test007309() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertNotNull(nodeNameTest0);
}",0,
project,0,test007310,"public void test007310() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test007311,"public void test007311() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test007312,"public void test007312() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test007313,"public void test007313() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test007314,"public void test007314() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertFalse(nodeNameTest0.isWildcard())
project,0,test007315,"public void test007315() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test007316,"public void test007316() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test007317,"public void test007317() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test007318,"public void test007318() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test007319,"public void test007319() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test007320,"public void test007320() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test007321,"public void test007321() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,
project,0,test007322,"public void test007322() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test007323,"public void test007323() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test007325,"public void test007325() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNotNull(basicVariables0);
}",0,assertNotNull(basicVariables0)
project,0,test007326,"public void test007326() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test007327,"public void test007327() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test007328,"public void test007328() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test007329,"public void test007329() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test007330,"public void test007330() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test007331,"public void test007331() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test007332,"public void test007332() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test007334,"public void test007334() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,
project,0,test007335,"public void test007335() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test007336,"public void test007336() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test007337,"public void test007337() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test007338,"public void test007338() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test007339,"public void test007339() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test007340,"public void test007340() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test007341,"public void test007341() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test007342,"public void test007342() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test007343,"public void test007343() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test007344,"public void test007344() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test007345,"public void test007345() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test007346,"public void test007346() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test007347,"public void test007347() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test007348,"public void test007348() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test007351,"public void test007351() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test007352,"public void test007352() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test007353,"public void test007353() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test007354,"public void test007354() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test007355,"public void test007355() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test007356,"public void test007356() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertFalse(nodeNameTest0.isWildcard())
project,0,test007357,"public void test007357() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test007358,"public void test007358() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test007359,"public void test007359() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test007360,"public void test007360() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test007361,"public void test007361() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test007362,"public void test007362() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test007363,"public void test007363() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test007364,"public void test007364() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test007365,"public void test007365() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isDefaultNamespace("""");
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test008369,"public void test008369() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test008370,"public void test008370() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test008371,"public void test008371() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test008372,"public void test008372() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    assertEquals("""", qName0.toString());
}",0,
project,0,test008373,"public void test008373() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test008374,"public void test008374() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test008375,"public void test008375() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test008376,"public void test008376() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test008377,"public void test008377() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test008378,"public void test008378() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test008379,"public void test008379() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test008380,"public void test008380() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test008381,"public void test008381() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test008382,"public void test008382() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test008383,"public void test008383() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test008385,"public void test008385() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isContainer();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test008386,"public void test008386() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isContainer();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test008387,"public void test008387() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isContainer();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test008388,"public void test008388() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isContainer();
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test008389,"public void test008389() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isContainer();
    assertTrue(variablePointer0.isActual());
}",0,assertFalse(variablePointer0.isActual())
project,0,test008390,"public void test008390() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isContainer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test008391,"public void test008391() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isContainer();
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test008392,"public void test008392() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isContainer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test008393,"public void test008393() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isContainer();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test008394,"public void test008394() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isContainer();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test008395,"public void test008395() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    boolean boolean0 = variablePointer0.isContainer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test009397,"public void test009397() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test009398,"public void test009398() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test009399,"public void test009399() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    assertEquals(""ZP7J6;JS@"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test009400,"public void test009400() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    assertEquals(""ZP7J6;JS@"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test009401,"public void test009401() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertNotNull(beanPointer0);
}",0,
project,0,test009402,"public void test009402() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test009403,"public void test009403() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertEquals(""ZP7J6;JS@"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test009404,"public void test009404() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertEquals(""ZP7J6;JS@"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test009405,"public void test009405() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test009406,"public void test009406() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test009407,"public void test009407() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test009408,"public void test009408() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,
project,0,test009409,"public void test009409() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertFalse(beanPointer0.isAttribute())
project,0,test009410,"public void test009410() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertFalse(beanPointer0.isCollection());
}",0,assertFalse(beanPointer0.isCollection())
project,0,test009411,"public void test009411() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test009412,"public void test009412() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertTrue(beanPointer0.isRoot());
}",0,
project,0,test009413,"public void test009413() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test009415,"public void test009415() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test009416,"public void test009416() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test009417,"public void test009417() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertEquals(""ZP7J6;JS@"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test009418,"public void test009418() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertEquals(""ZP7J6;JS@"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test009419,"public void test009419() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test009420,"public void test009420() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test009421,"public void test009421() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test009422,"public void test009422() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test009423,"public void test009423() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test009424,"public void test009424() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertFalse(beanPointer0.isCollection());
}",0,assertTrue(beanPointer0.isCollection())
project,0,test009425,"public void test009425() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test009426,"public void test009426() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertTrue(beanPointer0.isRoot());
}",0,
project,0,test009427,"public void test009427() throws Throwable {
    QName qName0 = new QName(""ZP7J6;JS@"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
    boolean boolean0 = beanPointer0.isCollection();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test010429,"public void test010429() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test010430,"public void test010430() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test010431,"public void test010431() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test010432,"public void test010432() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test010433,"public void test010433() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test010434,"public void test010434() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertNull(variablePointer0.getNamespaceURI());
}",0,
project,0,test010435,"public void test010435() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test010436,"public void test010436() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test010438,"public void test010438() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    boolean boolean0 = variablePointer0.isActual();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test010439,"public void test010439() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    boolean boolean0 = variablePointer0.isActual();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test010440,"public void test010440() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    boolean boolean0 = variablePointer0.isActual();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test010441,"public void test010441() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    boolean boolean0 = variablePointer0.isActual();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test010442,"public void test010442() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    boolean boolean0 = variablePointer0.isActual();
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test010443,"public void test010443() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    boolean boolean0 = variablePointer0.isActual();
    assertNull(variablePointer0.getNamespaceURI());
}",0,
project,0,test010444,"public void test010444() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    boolean boolean0 = variablePointer0.isActual();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test010445,"public void test010445() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    boolean boolean0 = variablePointer0.isActual();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test011447,"public void test011447() throws Throwable {
    QName qName0 = new QName("""", """");
    assertNotNull(qName0);
}",0,
project,0,test011448,"public void test011448() throws Throwable {
    QName qName0 = new QName("""", """");
    assertEquals("""", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test011449,"public void test011449() throws Throwable {
    QName qName0 = new QName("""", """");
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test011450,"public void test011450() throws Throwable {
    QName qName0 = new QName("""", """");
    assertEquals("":"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test011451,"public void test011451() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertNotNull(nullPointer0);
}",0,
project,0,test011452,"public void test011452() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertEquals("""", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test011453,"public void test011453() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test011454,"public void test011454() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertEquals("":"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test011455,"public void test011455() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertFalse(nullPointer0.isContainer());
}",0,assertTrue(nullPointer0.isContainer())
project,0,test011456,"public void test011456() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertTrue(nullPointer0.isRoot());
}",0,assertFalse(nullPointer0.isRoot())
project,0,test011457,"public void test011457() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertFalse(nullPointer0.isAttribute());
}",0,assertTrue(nullPointer0.isAttribute())
project,0,test011458,"public void test011458() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertEquals(0, nullPointer0.getLength());
}",0,"assertEquals(0, nullPointer0.getLength())"
project,0,test011459,"public void test011459() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported())
project,0,test011460,"public void test011460() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertTrue(nullPointer0.isNode());
}",0,assertTrue(nullPointer0.isNode())
project,0,test011461,"public void test011461() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertNull(nullPointer0.getNamespaceURI());
}",0,assertNotNull(nullPointer0.getNamespaceURI())
project,0,test011462,"public void test011462() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertFalse(nullPointer0.isCollection());
}",0,
project,0,test011463,"public void test011463() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
}",0,"assertEquals(0, nullPointer0.getIndex())"
project,0,test011464,"public void test011464() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertFalse(nullPointer0.isActual());
}",0,assertTrue(nullPointer0.isActual())
project,0,test011465,"public void test011465() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    assertTrue(nullPointer0.isLeaf());
}",0,assertTrue(nullPointer0.isLeaf())
project,0,test011467,"public void test011467() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertNotNull(nullPointer1);
}",0,assertNotNull(nullPointer1)
project,0,test011470,"public void test011470() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertEquals("""", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test011471,"public void test011471() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test011472,"public void test011472() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertEquals("":"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test011473,"public void test011473() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertFalse(nullPointer0.isContainer());
}",0,
project,0,test011474,"public void test011474() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertTrue(nullPointer0.isRoot());
}",0,assertFalse(nullPointer0.isRoot())
project,0,test011475,"public void test011475() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertFalse(nullPointer0.isAttribute());
}",0,assertTrue(nullPointer0.isAttribute())
project,0,test011476,"public void test011476() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertEquals(0, nullPointer0.getLength());
}",0,"assertEquals(0, nullPointer0.getLength())"
project,0,test011477,"public void test011477() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test011478,"public void test011478() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertTrue(nullPointer0.isNode());
}",0,assertTrue(nullPointer0.isNode())
project,0,test011479,"public void test011479() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertNull(nullPointer0.getNamespaceURI());
}",0,assertNotNull(nullPointer0.getNamespaceURI())
project,0,test011480,"public void test011480() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertFalse(nullPointer0.isCollection());
}",0,assertFalse(nullPointer0.isCollection())
project,0,test011481,"public void test011481() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
}",0,"assertEquals(0, nullPointer0.getIndex())"
project,0,test011482,"public void test011482() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertFalse(nullPointer0.isActual());
}",0,
project,0,test011483,"public void test011483() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertTrue(nullPointer0.isLeaf());
}",0,assertTrue(nullPointer0.isLeaf())
project,0,test011484,"public void test011484() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertFalse(nullPointer1.isContainer());
}",0,assertFalse(nullPointer1.isContainer())
project,0,test011485,"public void test011485() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertEquals(0, nullPointer1.getLength());
}",0,"assertEquals(0, nullPointer1.getLength())"
project,0,test011486,"public void test011486() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertTrue(nullPointer1.isLeaf());
}",0,assertTrue(nullPointer1.isLeaf())
project,0,test011487,"public void test011487() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertFalse(nullPointer1.isActual());
}",0,assertTrue(nullPointer1.isActual())
project,0,test011488,"public void test011488() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertFalse(nullPointer1.isAttribute());
}",0,assertTrue(nullPointer1.isAttribute())
project,0,test011489,"public void test011489() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertTrue(nullPointer1.isRoot());
}",0,assertFalse(nullPointer1.isRoot())
project,0,test011490,"public void test011490() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertEquals(Integer.MIN_VALUE, nullPointer1.getIndex());
}",0,"assertEquals(1, nullPointer1.getIndex())"
project,0,test011491,"public void test011491() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertFalse(nullPointer1.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(nullPointer1.isDynamicPropertyDeclarationSupported())
project,0,test011492,"public void test011492() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertTrue(nullPointer1.isNode());
}",0,assertTrue(nullPointer1.isNode())
project,0,test011493,"public void test011493() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertNull(nullPointer1.getNamespaceURI());
}",0,assertNotNull(nullPointer1.getNamespaceURI())
project,0,test011494,"public void test011494() throws Throwable {
    QName qName0 = new QName("""", """");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
    NullPointer nullPointer1 = (NullPointer) nullPointer0.getValuePointer();
    assertFalse(nullPointer1.isCollection());
}",0,assertFalse(nullPointer1.isCollection())
project,0,test012498,"public void test012498() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test012499,"public void test012499() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    assertEquals(""4v\""CmO@q|.~vebCE/"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test012500,"public void test012500() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    assertEquals(""4v\""CmO@q|.~vebCE/"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test012501,"public void test012501() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test012502,"public void test012502() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test012503,"public void test012503() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""4v\""CmO@q|.~vebCE/"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test012504,"public void test012504() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""4v\""CmO@q|.~vebCE/"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test012505,"public void test012505() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test012506,"public void test012506() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test012507,"public void test012507() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test012508,"public void test012508() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test012509,"public void test012509() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test012510,"public void test012510() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test012511,"public void test012511() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test012512,"public void test012512() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test012514,"public void test012514() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Object object0 = variablePointer0.getRootNode();
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test012515,"public void test012515() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Object object0 = variablePointer0.getRootNode();
    assertEquals(""4v\""CmO@q|.~vebCE/"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test012516,"public void test012516() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Object object0 = variablePointer0.getRootNode();
    assertEquals(""4v\""CmO@q|.~vebCE/"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test012517,"public void test012517() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Object object0 = variablePointer0.getRootNode();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test012518,"public void test012518() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Object object0 = variablePointer0.getRootNode();
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test012519,"public void test012519() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Object object0 = variablePointer0.getRootNode();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test012520,"public void test012520() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Object object0 = variablePointer0.getRootNode();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test012521,"public void test012521() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Object object0 = variablePointer0.getRootNode();
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test012522,"public void test012522() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Object object0 = variablePointer0.getRootNode();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test012523,"public void test012523() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Object object0 = variablePointer0.getRootNode();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test012524,"public void test012524() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""4v\""CmO@q|.~vebCE/"");
    basicVariables0.declareVariable(""4v\""CmO@q|.~vebCE/"", (Object) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Object object0 = variablePointer0.getRootNode();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test013527,"public void test013527() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    assertNotNull(qName0);
}",1,
project,0,test013528,"public void test013528() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test013529,"public void test013529() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test013530,"public void test013530() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test013531,"public void test013531() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test013532,"public void test013532() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test013533,"public void test013533() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test013534,"public void test013534() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test013535,"public void test013535() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test013536,"public void test013536() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test013537,"public void test013537() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test013538,"public void test013538() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test013539,"public void test013539() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test013540,"public void test013540() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test013541,"public void test013541() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test013543,"public void test013543() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertNotNull(nodePointer0);
}",0,assertNotNull(nodePointer0)
project,0,test013546,"public void test013546() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test013547,"public void test013547() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test013548,"public void test013548() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test013549,"public void test013549() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test013550,"public void test013550() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test013551,"public void test013551() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test013552,"public void test013552() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test013553,"public void test013553() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test013554,"public void test013554() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test013555,"public void test013555() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test013556,"public void test013556() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertNull(nodePointer0.getNamespaceURI());
}",0,assertNotNull(nodePointer0.getNamespaceURI())
project,0,test013557,"public void test013557() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertTrue(nodePointer0.isActual());
}",0,assertTrue(nodePointer0.isActual())
project,0,test013558,"public void test013558() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertTrue(nodePointer0.isContainer());
}",0,
project,0,test013559,"public void test013559() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertFalse(nodePointer0.isAttribute());
}",0,assertTrue(nodePointer0.isAttribute())
project,0,test013560,"public void test013560() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertFalse(nodePointer0.isNode());
}",0,
project,0,test013561,"public void test013561() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
}",0,"assertEquals(0, nodePointer0.getIndex())"
project,0,test013562,"public void test013562() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    assertTrue(nodePointer0.isRoot());
}",0,assertFalse(nodePointer0.isRoot())
project,0,test013565,"public void test013565() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertNotNull(object0);
}",0,assertNotNull(object0)
project,0,test013570,"public void test013570() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test013571,"public void test013571() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test013572,"public void test013572() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test013573,"public void test013573() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test013574,"public void test013574() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test013575,"public void test013575() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test013576,"public void test013576() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test013577,"public void test013577() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test013578,"public void test013578() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test013579,"public void test013579() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test013580,"public void test013580() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertNull(nodePointer0.getNamespaceURI());
}",0,assertNotNull(nodePointer0.getNamespaceURI())
project,0,test013581,"public void test013581() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertTrue(nodePointer0.isActual());
}",0,assertTrue(nodePointer0.isActual())
project,0,test013582,"public void test013582() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertTrue(nodePointer0.isContainer());
}",0,assertTrue(nodePointer0.isContainer())
project,0,test013583,"public void test013583() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertFalse(nodePointer0.isAttribute());
}",0,assertTrue(nodePointer0.isAttribute())
project,0,test013584,"public void test013584() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertFalse(nodePointer0.isNode());
}",0,assertTrue(nodePointer0.isNode())
project,0,test013585,"public void test013585() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
}",0,"assertEquals(0, nodePointer0.getIndex())"
project,0,test013586,"public void test013586() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNodeValue();
    assertTrue(nodePointer0.isRoot());
}",0,assertFalse(nodePointer0.isRoot())
project,0,test014628,"public void test014628() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertNotNull(object0);
}",0,assertNotNull(object0)
project,0,test014633,"public void test014633() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test014634,"public void test014634() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test014635,"public void test014635() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test014636,"public void test014636() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test014637,"public void test014637() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test014638,"public void test014638() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test014639,"public void test014639() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test014640,"public void test014640() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test014641,"public void test014641() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test014642,"public void test014642() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test014643,"public void test014643() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertTrue(nodePointer0.isActual());
}",0,assertFalse(nodePointer0.isActual())
project,0,test014644,"public void test014644() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertTrue(nodePointer0.isContainer());
}",0,assertFalse(nodePointer0.isContainer())
project,0,test014645,"public void test014645() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertFalse(nodePointer0.isAttribute());
}",0,assertTrue(nodePointer0.isAttribute())
project,0,test014646,"public void test014646() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertTrue(nodePointer0.isRoot());
}",0,assertFalse(nodePointer0.isRoot())
project,0,test014647,"public void test014647() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
}",0,"assertEquals(0, nodePointer0.getIndex())"
project,0,test014648,"public void test014648() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertFalse(nodePointer0.isNode());
}",0,assertFalse(nodePointer0.isNode())
project,0,test014649,"public void test014649() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
    Object object0 = nodePointer0.getNode();
    assertNull(nodePointer0.getNamespaceURI());
}",0,assertNotNull(nodePointer0.getNamespaceURI())
project,0,test015653,"public void test015653() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,
project,0,test015654,"public void test015654() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertFalse(jXPathContextReferenceImpl0.isLenient())
project,0,test015656,"public void test015656() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNotNull(basicVariables0);
}",0,assertNotNull(basicVariables0)
project,0,test015657,"public void test015657() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertFalse(jXPathContextReferenceImpl0.isLenient())
project,0,test015659,"public void test015659() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertNotNull(variablePointer0);
}",0,
project,0,test015660,"public void test015660() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test015661,"public void test015661() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertFalse(variablePointer0.isAttribute());
}",0,assertFalse(variablePointer0.isAttribute())
project,0,test015662,"public void test015662() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test015663,"public void test015663() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test015664,"public void test015664() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test015665,"public void test015665() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test015666,"public void test015666() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test015667,"public void test015667() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test015670,"public void test015670() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    QName qName0 = variablePointer0.getName();
    assertNull(qName0);
}",0,
project,0,test015671,"public void test015671() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    QName qName0 = variablePointer0.getName();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertFalse(jXPathContextReferenceImpl0.isLenient())
project,0,test015672,"public void test015672() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    QName qName0 = variablePointer0.getName();
    assertFalse(variablePointer0.isAttribute());
}",0,assertFalse(variablePointer0.isAttribute())
project,0,test015673,"public void test015673() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    QName qName0 = variablePointer0.getName();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test015674,"public void test015674() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    QName qName0 = variablePointer0.getName();
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test015675,"public void test015675() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    QName qName0 = variablePointer0.getName();
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test015676,"public void test015676() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    QName qName0 = variablePointer0.getName();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test015677,"public void test015677() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    QName qName0 = variablePointer0.getName();
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test015678,"public void test015678() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    QName qName0 = variablePointer0.getName();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test016727,"public void test016727() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertNotNull(qName1);
}",0,
project,0,test016730,"public void test016730() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test016731,"public void test016731() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test016732,"public void test016732() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test016733,"public void test016733() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test016734,"public void test016734() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test016735,"public void test016735() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test016736,"public void test016736() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test016737,"public void test016737() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test016738,"public void test016738() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test016739,"public void test016739() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test016740,"public void test016740() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test016741,"public void test016741() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test016742,"public void test016742() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test016743,"public void test016743() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test016744,"public void test016744() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertEquals("""", qName1.toString());
}",0,assertNotNull(qName1.toString())
project,0,test016745,"public void test016745() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertEquals("""", qName1.getName());
}",0,assertNotNull(qName1.getName())
project,0,test016746,"public void test016746() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    QName qName1 = variablePointer0.getName();
    assertNull(qName1.getPrefix());
}",0,assertNotNull(qName1.getPrefix())
project,0,test017765,"public void test017765() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    int int0 = variablePointer0.getLength();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test017766,"public void test017766() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    int int0 = variablePointer0.getLength();
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test017767,"public void test017767() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    int int0 = variablePointer0.getLength();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test017768,"public void test017768() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    int int0 = variablePointer0.getLength();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test017769,"public void test017769() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    int int0 = variablePointer0.getLength();
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test017770,"public void test017770() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    int int0 = variablePointer0.getLength();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test017771,"public void test017771() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    int int0 = variablePointer0.getLength();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test017772,"public void test017772() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    int int0 = variablePointer0.getLength();
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test017773,"public void test017773() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    int int0 = variablePointer0.getLength();
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test017774,"public void test017774() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    int int0 = variablePointer0.getLength();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test017775,"public void test017775() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    int int0 = variablePointer0.getLength();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test018823,"public void test018823() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertNotNull(variablePointer1);
}",0,assertNotNull(variablePointer1)
project,0,test018826,"public void test018826() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test018827,"public void test018827() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test018828,"public void test018828() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test018829,"public void test018829() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test018830,"public void test018830() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test018831,"public void test018831() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test018832,"public void test018832() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test018833,"public void test018833() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test018834,"public void test018834() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test018835,"public void test018835() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test018836,"public void test018836() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test018837,"public void test018837() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test018838,"public void test018838() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test018839,"public void test018839() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test018840,"public void test018840() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertTrue(variablePointer1.isActual());
}",0,assertTrue(variablePointer1.isActual())
project,0,test018841,"public void test018841() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertFalse(variablePointer1.isNode());
}",0,assertTrue(variablePointer1.isNode())
project,0,test018842,"public void test018842() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertNull(variablePointer1.getNamespaceURI());
}",0,assertNotNull(variablePointer1.getNamespaceURI())
project,0,test018843,"public void test018843() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertFalse(variablePointer1.isAttribute());
}",0,assertTrue(variablePointer1.isAttribute())
project,0,test018844,"public void test018844() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
}",0,
project,0,test018845,"public void test018845() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertTrue(variablePointer1.isRoot());
}",0,assertTrue(variablePointer1.isRoot())
project,0,test018846,"public void test018846() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertTrue(variablePointer1.isContainer());
}",0,assertTrue(variablePointer1.isContainer())
project,0,test018850,"public void test018850() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test018853,"public void test018853() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test018854,"public void test018854() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test018855,"public void test018855() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test018856,"public void test018856() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test018857,"public void test018857() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test018858,"public void test018858() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test018859,"public void test018859() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test018860,"public void test018860() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test018861,"public void test018861() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test018862,"public void test018862() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test018863,"public void test018863() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test018864,"public void test018864() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test018865,"public void test018865() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test018866,"public void test018866() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test018867,"public void test018867() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertTrue(variablePointer1.isActual());
}",0,assertTrue(variablePointer1.isActual())
project,0,test018868,"public void test018868() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertFalse(variablePointer1.isNode());
}",0,assertTrue(variablePointer1.isNode())
project,0,test018869,"public void test018869() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertNull(variablePointer1.getNamespaceURI());
}",0,assertNotNull(variablePointer1.getNamespaceURI())
project,0,test018870,"public void test018870() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertFalse(variablePointer1.isAttribute());
}",0,assertTrue(variablePointer1.isAttribute())
project,0,test018871,"public void test018871() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
}",0,
project,0,test018872,"public void test018872() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertTrue(variablePointer1.isRoot());
}",0,
project,0,test018873,"public void test018873() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    int int0 = variablePointer1.getLength();
    assertTrue(variablePointer1.isContainer());
}",0,assertFalse(variablePointer1.isContainer())
project,0,test019877,"public void test019877() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test019878,"public void test019878() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    assertEquals("">.Y{GXqZPc3'h>0"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test019879,"public void test019879() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    assertEquals("">.Y{GXqZPc3'h>0"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test019880,"public void test019880() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    assertEquals("">.Y{GXqZPc3'h>0:>.Y{GXqZPc3'h>0"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test019881,"public void test019881() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertNotNull(nodeNameTest0);
}",0,assertNotNull(nodeNameTest0)
project,0,test019882,"public void test019882() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("">.Y{GXqZPc3'h>0"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test019883,"public void test019883() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("">.Y{GXqZPc3'h>0"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test019884,"public void test019884() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("">.Y{GXqZPc3'h>0:>.Y{GXqZPc3'h>0"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test019885,"public void test019885() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test019886,"public void test019886() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("">.Y{GXqZPc3'h>0:>.Y{GXqZPc3'h>0"", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test019887,"public void test019887() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test019888,"public void test019888() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertNotNull(beanPointer0);
}",0,
project,0,test019889,"public void test019889() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertEquals("">.Y{GXqZPc3'h>0"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test019890,"public void test019890() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertEquals("">.Y{GXqZPc3'h>0"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test019891,"public void test019891() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertEquals("">.Y{GXqZPc3'h>0:>.Y{GXqZPc3'h>0"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test019892,"public void test019892() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test019893,"public void test019893() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertEquals("">.Y{GXqZPc3'h>0:>.Y{GXqZPc3'h>0"", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test019894,"public void test019894() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test019895,"public void test019895() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertTrue(beanPointer0.isNode());
}",0,assertFalse(beanPointer0.isNode())
project,0,test019896,"public void test019896() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test019897,"public void test019897() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertFalse(beanPointer0.isContainer());
}",0,assertFalse(beanPointer0.isContainer())
project,0,test019898,"public void test019898() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test019899,"public void test019899() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertTrue(beanPointer0.isRoot());
}",0,assertFalse(beanPointer0.isRoot())
project,0,test019900,"public void test019900() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertFalse(beanPointer0.isCollection());
}",0,
project,0,test019901,"public void test019901() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test019902,"public void test019902() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test019903,"public void test019903() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test019905,"public void test019905() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertNotNull(beanPointer1);
}",0,assertNotNull(beanPointer1)
project,0,test019908,"public void test019908() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertEquals("">.Y{GXqZPc3'h>0"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test019909,"public void test019909() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertEquals("">.Y{GXqZPc3'h>0"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test019910,"public void test019910() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertEquals("">.Y{GXqZPc3'h>0:>.Y{GXqZPc3'h>0"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test019911,"public void test019911() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test019912,"public void test019912() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertEquals("">.Y{GXqZPc3'h>0:>.Y{GXqZPc3'h>0"", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test019913,"public void test019913() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test019914,"public void test019914() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test019915,"public void test019915() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test019916,"public void test019916() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isContainer());
}",0,assertFalse(beanPointer0.isContainer())
project,0,test019917,"public void test019917() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test019918,"public void test019918() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertTrue(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test019919,"public void test019919() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isCollection());
}",0,assertFalse(beanPointer0.isCollection())
project,0,test019920,"public void test019920() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test019921,"public void test019921() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test019922,"public void test019922() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test019923,"public void test019923() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertFalse(beanPointer1.isContainer());
}",0,
project,0,test019924,"public void test019924() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertFalse(beanPointer1.isCollection());
}",0,
project,0,test019925,"public void test019925() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertFalse(beanPointer1.isAttribute());
}",0,
project,0,test019926,"public void test019926() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertEquals(1, beanPointer1.getLength());
}",0,
project,0,test019927,"public void test019927() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test019928,"public void test019928() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertTrue(beanPointer1.isNode());
}",0,assertTrue(beanPointer1.isNode())
project,0,test019929,"public void test019929() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
}",0,
project,0,test019930,"public void test019930() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertNull(beanPointer1.getNamespaceURI());
}",0,assertNotNull(beanPointer1.getNamespaceURI())
project,0,test019931,"public void test019931() throws Throwable {
    QName qName0 = new QName("">.Y{GXqZPc3'h>0"", "">.Y{GXqZPc3'h>0"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer((NodePointer) null, qName0, nodeNameTest0);
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getImmediateValuePointer();
    assertTrue(beanPointer1.isRoot());
}",0,
project,0,test020934,"public void test020934() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    assertNotNull(nodeTypeTest0);
}",0,
project,0,test020935,"public void test020935() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    assertEquals(160, nodeTypeTest0.getNodeType());
}",0,
project,0,test020936,"public void test020936() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test020937,"public void test020937() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertEquals(160, nodeTypeTest0.getNodeType());
}",0,"assertEquals(0, nodeTypeTest0.getNodeType())"
project,0,test020938,"public void test020938() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test020940,"public void test020940() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNotNull(basicVariables0);
}",0,assertNotNull(basicVariables0)
project,0,test020941,"public void test020941() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertEquals(160, nodeTypeTest0.getNodeType());
}",0,"assertEquals(0, nodeTypeTest0.getNodeType())"
project,0,test020942,"public void test020942() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test020944,"public void test020944() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test020945,"public void test020945() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    assertEquals(""J!:+~\""y|k\""vv&?kK:M"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test020946,"public void test020946() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    assertEquals(""#,7n8{Oq"", qName0.getName());
}",0,
project,0,test020947,"public void test020947() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    assertEquals(""J!:+~\""y|k\""vv&?kK:M:#,7n8{Oq"", qName0.toString());
}",0,
project,0,test020948,"public void test020948() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test020949,"public void test020949() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(160, nodeTypeTest0.getNodeType());
}",0,"assertEquals(0, nodeTypeTest0.getNodeType())"
project,0,test020950,"public void test020950() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test020951,"public void test020951() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""J!:+~\""y|k\""vv&?kK:M"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test020952,"public void test020952() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""#,7n8{Oq"", qName0.getName());
}",0,
project,0,test020953,"public void test020953() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""J!:+~\""y|k\""vv&?kK:M:#,7n8{Oq"", qName0.toString());
}",0,
project,0,test020954,"public void test020954() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test020955,"public void test020955() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test020956,"public void test020956() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test020957,"public void test020957() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test020958,"public void test020958() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test020959,"public void test020959() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test020960,"public void test020960() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test020963,"public void test020963() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertNull(nodePointer0);
}",0,assertNotNull(nodePointer0)
project,0,test020964,"public void test020964() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertEquals(160, nodeTypeTest0.getNodeType());
}",0,"assertEquals(0, nodeTypeTest0.getNodeType())"
project,0,test020965,"public void test020965() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test020966,"public void test020966() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertEquals(""J!:+~\""y|k\""vv&?kK:M"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test020967,"public void test020967() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertEquals(""#,7n8{Oq"", qName0.getName());
}",0,
project,0,test020968,"public void test020968() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertEquals(""J!:+~\""y|k\""vv&?kK:M:#,7n8{Oq"", qName0.toString());
}",0,
project,0,test020969,"public void test020969() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test020970,"public void test020970() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test020971,"public void test020971() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test020972,"public void test020972() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test020973,"public void test020973() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test020974,"public void test020974() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test020975,"public void test020975() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(160);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""J!:+~\""y|k\""vv&?kK:M"", ""#,7n8{Oq"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateParentPointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test021979,"public void test021979() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    assertNotNull(qName0);
}",0,
project,0,test021980,"public void test021980() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    assertEquals(""q"", qName0.getName());
}",0,
project,0,test021981,"public void test021981() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    assertEquals(""q"", qName0.toString());
}",0,
project,0,test021982,"public void test021982() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test021983,"public void test021983() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,
project,0,test021984,"public void test021984() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""q"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test021985,"public void test021985() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""q"", qName0.toString());
}",0,
project,0,test021986,"public void test021986() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test021987,"public void test021987() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test021988,"public void test021988() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test021989,"public void test021989() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test021990,"public void test021990() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test021991,"public void test021991() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test021992,"public void test021992() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test021993,"public void test021993() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test021995,"public void test021995() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    assertNotNull(nodeNameTest0);
}",0,
project,0,test021996,"public void test021996() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    assertEquals(""q"", qName0.getName());
}",0,
project,0,test021997,"public void test021997() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    assertEquals(""q"", qName0.toString());
}",0,
project,0,test021998,"public void test021998() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    assertNull(qName0.getPrefix());
}",0,
project,0,test021999,"public void test021999() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test0211000,"public void test0211000() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    assertEquals(""q"", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0211001,"public void test0211001() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    assertEquals(""<<unknown namespace>>"", nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0211002,"public void test0211002() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertEquals(""q"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0211003,"public void test0211003() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertEquals(""q"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0211004,"public void test0211004() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0211005,"public void test0211005() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0211006,"public void test0211006() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test0211007,"public void test0211007() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0211008,"public void test0211008() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0211009,"public void test0211009() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0211010,"public void test0211010() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertNull(variablePointer0.getNamespaceURI());
}",1,
project,0,test0211011,"public void test0211011() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0211012,"public void test0211012() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test0211013,"public void test0211013() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertEquals(""q"", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0211014,"public void test0211014() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertEquals(""<<unknown namespace>>"", nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0211015,"public void test0211015() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
}",1,
project,0,test0211016,"public void test0211016() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertNotNull(nodeNameTest1);
}",0,assertNotNull(nodeNameTest1)
project,0,test0211018,"public void test0211018() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertEquals(""q"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0211019,"public void test0211019() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertEquals(""q"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0211020,"public void test0211020() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0211021,"public void test0211021() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0211022,"public void test0211022() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0211023,"public void test0211023() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0211024,"public void test0211024() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0211025,"public void test0211025() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0211026,"public void test0211026() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0211027,"public void test0211027() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0211028,"public void test0211028() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertFalse(nodeNameTest1.isWildcard());
}",0,assertTrue(nodeNameTest1.isWildcard())
project,0,test0211029,"public void test0211029() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertEquals(""<<unknown namespace>>"", nodeNameTest1.getNamespaceURI());
}",0,assertNotNull(nodeNameTest1.getNamespaceURI())
project,0,test0211030,"public void test0211030() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""q"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""<<unknown namespace>>"");
    variablePointer0.setValue(nodeNameTest0);
    NodeNameTest nodeNameTest1 = (NodeNameTest) variablePointer0.getImmediateNode();
    assertEquals(""q"", nodeNameTest1.toString());
}",0,assertNotNull(nodeNameTest1.toString())
project,0,test0221032,"public void test0221032() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0221033,"public void test0221033() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    assertEquals(""/wHW6^NE$S"", qName0.getPrefix());
}",0,
project,0,test0221034,"public void test0221034() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    assertEquals(""/wHW6^NE$S:org.apache.commons.jxpath.ri.compiler.NameAttributeTest"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0221035,"public void test0221035() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    assertEquals(""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"", qName0.getName());
}",0,
project,0,test0221036,"public void test0221036() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,
project,0,test0221037,"public void test0221037() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""/wHW6^NE$S"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0221038,"public void test0221038() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""/wHW6^NE$S:org.apache.commons.jxpath.ri.compiler.NameAttributeTest"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0221039,"public void test0221039() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"", qName0.getName());
}",0,
project,0,test0221040,"public void test0221040() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0221041,"public void test0221041() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0221042,"public void test0221042() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test0221043,"public void test0221043() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0221044,"public void test0221044() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0221045,"public void test0221045() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0221046,"public void test0221046() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test0221048,"public void test0221048() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertNotNull(nodePointer0);
}",0,
project,0,test0221049,"public void test0221049() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals(""/wHW6^NE$S"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0221050,"public void test0221050() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals(""/wHW6^NE$S:org.apache.commons.jxpath.ri.compiler.NameAttributeTest"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0221051,"public void test0221051() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals(""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"", qName0.getName());
}",0,
project,0,test0221052,"public void test0221052() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0221053,"public void test0221053() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0221054,"public void test0221054() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0221055,"public void test0221055() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0221056,"public void test0221056() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0221057,"public void test0221057() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0221058,"public void test0221058() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test0221061,"public void test0221061() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Object object0 = nodePointer0.getBaseValue();
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test0221062,"public void test0221062() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Object object0 = nodePointer0.getBaseValue();
    assertEquals(""/wHW6^NE$S"", qName0.getPrefix());
}",0,
project,0,test0221063,"public void test0221063() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Object object0 = nodePointer0.getBaseValue();
    assertEquals(""/wHW6^NE$S:org.apache.commons.jxpath.ri.compiler.NameAttributeTest"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0221064,"public void test0221064() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Object object0 = nodePointer0.getBaseValue();
    assertEquals(""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"", qName0.getName());
}",0,
project,0,test0221065,"public void test0221065() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Object object0 = nodePointer0.getBaseValue();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0221066,"public void test0221066() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Object object0 = nodePointer0.getBaseValue();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0221067,"public void test0221067() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Object object0 = nodePointer0.getBaseValue();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0221068,"public void test0221068() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Object object0 = nodePointer0.getBaseValue();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0221069,"public void test0221069() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Object object0 = nodePointer0.getBaseValue();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0221070,"public void test0221070() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Object object0 = nodePointer0.getBaseValue();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0221071,"public void test0221071() throws Throwable {
    QName qName0 = new QName(""/wHW6^NE$S"", ""org.apache.commons.jxpath.ri.compiler.NameAttributeTest"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Object object0 = nodePointer0.getBaseValue();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0231074,"public void test0231074() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0231075,"public void test0231075() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    assertEquals(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0231076,"public void test0231076() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    assertEquals("""", qName0.getPrefix());
}",0,
project,0,test0231077,"public void test0231077() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    assertEquals("":org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0231084,"public void test0231084() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertNotNull(beanPointer0);
}",0,
project,0,test0231085,"public void test0231085() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertEquals(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0231086,"public void test0231086() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertEquals("""", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0231087,"public void test0231087() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertEquals("":org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0231093,"public void test0231093() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test0231094,"public void test0231094() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0231095,"public void test0231095() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0231096,"public void test0231096() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(1, beanPointer0.getIndex())"
project,0,test0231097,"public void test0231097() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0231098,"public void test0231098() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertFalse(beanPointer0.isCollection());
}",0,
project,0,test0231099,"public void test0231099() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertFalse(beanPointer0.isContainer());
}",0,
project,0,test0231100,"public void test0231100() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertTrue(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test0231101,"public void test0231101() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0231103,"public void test0231103() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertEquals(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", string0);
}",0,assertNotNull(string0)
project,0,test0231105,"public void test0231105() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertEquals(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0231106,"public void test0231106() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertEquals("""", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0231107,"public void test0231107() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertEquals("":org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0231113,"public void test0231113() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test0231114,"public void test0231114() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0231115,"public void test0231115() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0231116,"public void test0231116() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0231117,"public void test0231117() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0231118,"public void test0231118() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertFalse(beanPointer0.isCollection());
}",0,assertFalse(beanPointer0.isCollection())
project,0,test0231119,"public void test0231119() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0231120,"public void test0231120() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertTrue(beanPointer0.isRoot());
}",0,
project,0,test0231121,"public void test0231121() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    String string0 = (String) beanPointer0.getBaseValue();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0241123,"public void test0241123() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test0241124,"public void test0241124() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0241126,"public void test0241126() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNotNull(basicVariables0);
}",0,
project,0,test0241127,"public void test0241127() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0241129,"public void test0241129() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0241130,"public void test0241130() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    assertEquals(""<<unknown namespace>>"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0241131,"public void test0241131() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    assertEquals(""<<unknown namespace>>:<<unknown namespace>>"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0241132,"public void test0241132() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    assertEquals(""<<unknown namespace>>"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0241133,"public void test0241133() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,
project,0,test0241134,"public void test0241134() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0241135,"public void test0241135() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""<<unknown namespace>>"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0241136,"public void test0241136() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""<<unknown namespace>>:<<unknown namespace>>"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0241137,"public void test0241137() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""<<unknown namespace>>"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0241138,"public void test0241138() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0241139,"public void test0241139() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0241140,"public void test0241140() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0241141,"public void test0241141() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0241142,"public void test0241142() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test0241143,"public void test0241143() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0241144,"public void test0241144() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0241147,"public void test0241147() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    assertNotNull(nodeTypeTest0);
}",0,
project,0,test0241148,"public void test0241148() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0241149,"public void test0241149() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertNotNull(variablePointer1);
}",0,assertNotNull(variablePointer1)
project,0,test0241152,"public void test0241152() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0241153,"public void test0241153() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertEquals(""<<unknown namespace>>"", qName0.getPrefix());
}",0,
project,0,test0241154,"public void test0241154() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertEquals(""<<unknown namespace>>:<<unknown namespace>>"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0241155,"public void test0241155() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertEquals(""<<unknown namespace>>"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0241156,"public void test0241156() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0241157,"public void test0241157() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0241158,"public void test0241158() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0241159,"public void test0241159() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0241160,"public void test0241160() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test0241161,"public void test0241161() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0241162,"public void test0241162() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0241163,"public void test0241163() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0241164,"public void test0241164() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertNull(variablePointer1.getNamespaceURI());
}",0,assertNotNull(variablePointer1.getNamespaceURI())
project,0,test0241165,"public void test0241165() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
}",0,"assertEquals(1, variablePointer1.getIndex())"
project,0,test0241166,"public void test0241166() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertFalse(variablePointer1.isAttribute());
}",0,assertTrue(variablePointer1.isAttribute())
project,0,test0241167,"public void test0241167() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertTrue(variablePointer1.isRoot());
}",0,
project,0,test0241168,"public void test0241168() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertTrue(variablePointer1.isContainer());
}",0,assertFalse(variablePointer1.isContainer())
project,0,test0241169,"public void test0241169() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertFalse(variablePointer1.isNode());
}",0,assertFalse(variablePointer1.isNode())
project,0,test0241170,"public void test0241170() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    assertTrue(variablePointer1.isActual());
}",0,assertTrue(variablePointer1.isActual())
project,0,test0251175,"public void test0251175() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0251176,"public void test0251176() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    assertEquals(""0"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0251177,"public void test0251177() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    assertEquals("", operation is not allowed for this type of node"", qName0.getPrefix());
}",0,
project,0,test0251178,"public void test0251178() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    assertEquals("", operation is not allowed for this type of node:0"", qName0.toString());
}",0,
project,0,test0251179,"public void test0251179() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0251180,"public void test0251180() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""0"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0251181,"public void test0251181() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("", operation is not allowed for this type of node"", qName0.getPrefix());
}",0,
project,0,test0251182,"public void test0251182() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("", operation is not allowed for this type of node:0"", qName0.toString());
}",0,
project,0,test0251183,"public void test0251183() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0251184,"public void test0251184() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0251185,"public void test0251185() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0251186,"public void test0251186() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0251187,"public void test0251187() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0251188,"public void test0251188() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0251189,"public void test0251189() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertFalse(variablePointer0.isAttribute())
project,0,test0251191,"public void test0251191() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    assertNotNull(jXPathContextReferenceImpl0);
}",0,
project,0,test0251192,"public void test0251192() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertFalse(jXPathContextReferenceImpl0.isLenient())
project,0,test0251194,"public void test0251194() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertNotNull(variablePointer1);
}",1,
project,0,test0251197,"public void test0251197() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertEquals(""0"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0251198,"public void test0251198() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertEquals("", operation is not allowed for this type of node"", qName0.getPrefix());
}",0,
project,0,test0251199,"public void test0251199() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertEquals("", operation is not allowed for this type of node:0"", qName0.toString());
}",0,
project,0,test0251200,"public void test0251200() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0251201,"public void test0251201() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0251202,"public void test0251202() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test0251203,"public void test0251203() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0251204,"public void test0251204() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0251205,"public void test0251205() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0251206,"public void test0251206() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertFalse(variablePointer0.isAttribute())
project,0,test0251207,"public void test0251207() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertFalse(jXPathContextReferenceImpl0.isLenient())
project,0,test0251208,"public void test0251208() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertNull(variablePointer1.getNamespaceURI());
}",0,assertNotNull(variablePointer1.getNamespaceURI())
project,0,test0251209,"public void test0251209() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertTrue(variablePointer1.isActual());
}",0,assertTrue(variablePointer1.isActual())
project,0,test0251210,"public void test0251210() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertTrue(variablePointer1.isContainer());
}",0,assertFalse(variablePointer1.isContainer())
project,0,test0251211,"public void test0251211() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertFalse(variablePointer1.isAttribute());
}",0,assertFalse(variablePointer1.isAttribute())
project,0,test0251212,"public void test0251212() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertFalse(variablePointer1.isNode());
}",0,
project,0,test0251213,"public void test0251213() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertTrue(variablePointer1.isRoot());
}",0,assertFalse(variablePointer1.isRoot())
project,0,test0251214,"public void test0251214() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
    assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
}",0,
project,0,test0261219,"public void test0261219() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0261220,"public void test0261220() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    assertEquals(""[:"", qName0.toString());
}",0,
project,0,test0261221,"public void test0261221() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0261222,"public void test0261222() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    assertEquals(""["", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0261223,"public void test0261223() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0261224,"public void test0261224() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""[:"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0261225,"public void test0261225() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0261226,"public void test0261226() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""["", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0261227,"public void test0261227() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0261228,"public void test0261228() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0261229,"public void test0261229() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0261230,"public void test0261230() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0261231,"public void test0261231() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0261232,"public void test0261232() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0261233,"public void test0261233() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0261235,"public void test0261235() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertNotNull(beanPointer0);
}",0,
project,0,test0261236,"public void test0261236() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertEquals(""[:"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0261237,"public void test0261237() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0261238,"public void test0261238() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertEquals(""["", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0261239,"public void test0261239() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0261240,"public void test0261240() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0261241,"public void test0261241() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0261242,"public void test0261242() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0261243,"public void test0261243() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0261244,"public void test0261244() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0261245,"public void test0261245() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0261246,"public void test0261246() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0261247,"public void test0261247() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isRoot());
}",0,
project,0,test0261248,"public void test0261248() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isCollection());
}",0,
project,0,test0261249,"public void test0261249() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0261250,"public void test0261250() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0261251,"public void test0261251() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0261252,"public void test0261252() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test0261253,"public void test0261253() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0261254,"public void test0261254() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0261257,"public void test0261257() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertNotNull(beanAttributeIterator0);
}",0,assertNotNull(beanAttributeIterator0)
project,0,test0261258,"public void test0261258() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertEquals(""[:"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0261259,"public void test0261259() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0261260,"public void test0261260() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertEquals(""["", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0261261,"public void test0261261() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0261262,"public void test0261262() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0261263,"public void test0261263() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0261264,"public void test0261264() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0261265,"public void test0261265() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0261266,"public void test0261266() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0261267,"public void test0261267() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0261268,"public void test0261268() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0261269,"public void test0261269() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertFalse(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test0261270,"public void test0261270() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertFalse(beanPointer0.isCollection());
}",0,assertTrue(beanPointer0.isCollection())
project,0,test0261271,"public void test0261271() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0261272,"public void test0261272() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertTrue(beanPointer0.isNode());
}",0,assertFalse(beanPointer0.isNode())
project,0,test0261273,"public void test0261273() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0261274,"public void test0261274() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test0261275,"public void test0261275() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0261276,"public void test0261276() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0261277,"public void test0261277() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""["", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator) beanPointer0.attributeIterator(qName0);
    assertEquals(0, beanAttributeIterator0.getPosition());
}",0,"assertEquals(0, beanAttributeIterator0.getPosition())"
project,0,test0271298,"public void test0271298() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertNotNull(beanPointer0);
}",0,
project,0,test0271299,"public void test0271299() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0271300,"public void test0271300() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0271301,"public void test0271301() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0271302,"public void test0271302() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0271303,"public void test0271303() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0271304,"public void test0271304() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,
project,0,test0271311,"public void test0271311() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0271312,"public void test0271312() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertTrue(beanPointer0.isRoot());
}",0,assertFalse(beanPointer0.isRoot())
project,0,test0271313,"public void test0271313() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0271314,"public void test0271314() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0271315,"public void test0271315() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(1, beanPointer0.getIndex())"
project,0,test0271316,"public void test0271316() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertFalse(beanPointer0.isCollection());
}",0,assertTrue(beanPointer0.isCollection())
project,0,test0271317,"public void test0271317() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0271318,"public void test0271318() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0271319,"public void test0271319() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0271321,"public void test0271321() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertEquals(""/"", string0);
}",0,
project,0,test0271323,"public void test0271323() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0271324,"public void test0271324() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0271325,"public void test0271325() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0271326,"public void test0271326() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0271327,"public void test0271327() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0271328,"public void test0271328() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertFalse(nodeNameTest0.isWildcard());
}",0,
project,0,test0271335,"public void test0271335() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0271336,"public void test0271336() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertTrue(beanPointer0.isRoot());
}",0,
project,0,test0271337,"public void test0271337() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0271338,"public void test0271338() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0271339,"public void test0271339() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(1, beanPointer0.getIndex())"
project,0,test0271340,"public void test0271340() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertFalse(beanPointer0.isCollection());
}",0,assertTrue(beanPointer0.isCollection())
project,0,test0271341,"public void test0271341() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0271342,"public void test0271342() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0271343,"public void test0271343() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    String string0 = beanPointer0.asPath();
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test0281345,"public void test0281345() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    assertNotNull(nodeTypeTest0);
}",0,
project,0,test0281346,"public void test0281346() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    assertEquals((-1660), nodeTypeTest0.getNodeType());
}",0,"assertEquals(0, nodeTypeTest0.getNodeType())"
project,0,test0281347,"public void test0281347() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test0281348,"public void test0281348() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertEquals((-1660), nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0281349,"public void test0281349() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0281351,"public void test0281351() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNotNull(basicVariables0);
}",0,
project,0,test0281352,"public void test0281352() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertEquals((-1660), nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0281353,"public void test0281353() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0281355,"public void test0281355() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertNotNull(variablePointer0);
}",0,
project,0,test0281356,"public void test0281356() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertEquals((-1660), nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0281357,"public void test0281357() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0281358,"public void test0281358() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0281359,"public void test0281359() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0281360,"public void test0281360() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0281361,"public void test0281361() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0281362,"public void test0281362() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0281363,"public void test0281363() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0281364,"public void test0281364() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0281367,"public void test0281367() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1660));
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    // Undeclared exception!
    try {
        variablePointer0.testNode(nodeTypeTest0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0291368,"public void test0291368() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    assertNotNull(qName0);
}",1,
project,0,test0291369,"public void test0291369() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    assertEquals("": and attribute:: axes and has no context-dependent predicates"", qName0.getName());
}",0,
project,0,test0291370,"public void test0291370() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    assertEquals(""JXPath can only create a path if it uses exclusively the child"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0291371,"public void test0291371() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    assertEquals(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0291372,"public void test0291372() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,
project,0,test0291373,"public void test0291373() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("": and attribute:: axes and has no context-dependent predicates"", qName0.getName());
}",0,
project,0,test0291374,"public void test0291374() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""JXPath can only create a path if it uses exclusively the child"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0291375,"public void test0291375() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0291376,"public void test0291376() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0291377,"public void test0291377() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test0291378,"public void test0291378() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0291379,"public void test0291379() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0291380,"public void test0291380() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0291381,"public void test0291381() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0291382,"public void test0291382() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0291384,"public void test0291384() throws Throwable {
    QName qName0 = new QName(""JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        variablePointer0.setValue(qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot set undefined variable: JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",1,
project,0,test0301386,"public void test0301386() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertNotNull(variablePointer0);
}",0,
project,0,test0301387,"public void test0301387() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0301388,"public void test0301388() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0301389,"public void test0301389() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0301390,"public void test0301390() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0301391,"public void test0301391() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0301392,"public void test0301392() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0301393,"public void test0301393() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0301395,"public void test0301395() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
    assertNotNull(nodeNameTest0);
}",0,
project,0,test0301396,"public void test0301396() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0301397,"public void test0301397() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
    // Undeclared exception!
    try {
        variablePointer0.setValue(nodeNameTest0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",1,
project,0,test0311405,"public void test0311405() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertNotNull(nullPointer0);
}",0,
project,0,test0311412,"public void test0311412() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertTrue(nullPointer0.isNode());
}",0,assertFalse(nullPointer0.isNode())
project,0,test0311413,"public void test0311413() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertNull(nullPointer0.getNamespaceURI());
}",0,assertNotNull(nullPointer0.getNamespaceURI())
project,0,test0311414,"public void test0311414() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertFalse(nullPointer0.isCollection());
}",0,assertTrue(nullPointer0.isCollection())
project,0,test0311415,"public void test0311415() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertEquals(0, nullPointer0.getLength());
}",0,"assertEquals(0, nullPointer0.getLength())"
project,0,test0311416,"public void test0311416() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0311417,"public void test0311417() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertFalse(nullPointer0.isActual());
}",0,assertTrue(nullPointer0.isActual())
project,0,test0311418,"public void test0311418() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertTrue(nullPointer0.isLeaf());
}",0,assertTrue(nullPointer0.isLeaf())
project,0,test0311419,"public void test0311419() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
}",0,"assertEquals(0, nullPointer0.getIndex())"
project,0,test0311420,"public void test0311420() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertFalse(nullPointer0.isAttribute());
}",0,assertTrue(nullPointer0.isAttribute())
project,0,test0311421,"public void test0311421() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertFalse(nullPointer0.isContainer());
}",0,assertTrue(nullPointer0.isContainer())
project,0,test0311422,"public void test0311422() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertTrue(nullPointer0.isRoot());
}",0,assertFalse(nullPointer0.isRoot())
project,0,test0311424,"public void test0311424() throws Throwable {
    Locale locale0 = Locale.US;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    // Undeclared exception!
    try {
        nullPointer0.remove();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Cannot remove an object that is not some other object's property or a collection element
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer"", e);
    }
}",1,
project,0,test0321435,"public void test0321435() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    // Undeclared exception!
    try {
        variablePointer0.remove();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0331437,"public void test0331437() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    assertNotNull(qName0);
}",0,
project,0,test0331438,"public void test0331438() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0331439,"public void test0331439() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    assertEquals(""Hce<v[>5Q1"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0331440,"public void test0331440() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    assertEquals(""Hce<v[>5Q1"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0331441,"public void test0331441() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,
project,0,test0331442,"public void test0331442() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0331443,"public void test0331443() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""Hce<v[>5Q1"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0331444,"public void test0331444() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""Hce<v[>5Q1"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0331445,"public void test0331445() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0331446,"public void test0331446() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0331447,"public void test0331447() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0331448,"public void test0331448() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0331449,"public void test0331449() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0331450,"public void test0331450() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0331451,"public void test0331451() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0331453,"public void test0331453() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = (int) (byte) 38;
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0331454,"public void test0331454() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = (int) (byte) 38;
    assertEquals(""Hce<v[>5Q1"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0331455,"public void test0331455() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = (int) (byte) 38;
    assertEquals(""Hce<v[>5Q1"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0331456,"public void test0331456() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = (int) (byte) 38;
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0331457,"public void test0331457() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = (int) (byte) 38;
    assertEquals(38, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0331458,"public void test0331458() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = (int) (byte) 38;
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0331459,"public void test0331459() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = (int) (byte) 38;
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0331460,"public void test0331460() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = (int) (byte) 38;
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0331461,"public void test0331461() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = (int) (byte) 38;
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0331462,"public void test0331462() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = (int) (byte) 38;
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0331463,"public void test0331463() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = (int) (byte) 38;
    // Undeclared exception!
    try {
        variablePointer0.printPointerChain();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: 'Hce<v[>5Q1'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",0,
project,0,test0341473,"public void test0341473() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointerFactory nodePointerFactory0 = mock(NodePointerFactory.class, new ViolatedAssumptionAnswer());
    JXPathContextReferenceImpl.addNodePointerFactory(nodePointerFactory0);
    // Undeclared exception!
    try {
        NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",0,
project,0,test0351474,"public void test0351474() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    assertNotNull(qName0);
}",0,
project,0,test0351475,"public void test0351475() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    assertEquals(""<<unknown namespace>>"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0351476,"public void test0351476() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    assertEquals("""", qName0.getName());
}",0,
project,0,test0351477,"public void test0351477() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    assertEquals(""<<unknown namespace>>:"", qName0.toString());
}",0,
project,0,test0351478,"public void test0351478() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertNotNull(variablePointer0);
}",0,
project,0,test0351479,"public void test0351479() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertEquals(""<<unknown namespace>>"", qName0.getPrefix());
}",0,
project,0,test0351480,"public void test0351480() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertEquals("""", qName0.getName());
}",0,
project,0,test0351481,"public void test0351481() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertEquals(""<<unknown namespace>>:"", qName0.toString());
}",0,
project,0,test0351482,"public void test0351482() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0351483,"public void test0351483() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test0351484,"public void test0351484() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0351485,"public void test0351485() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0351486,"public void test0351486() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0351487,"public void test0351487() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0351488,"public void test0351488() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0351490,"public void test0351490() throws Throwable {
    QName qName0 = new QName(""<<unknown namespace>>"", """");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    // Undeclared exception!
    try {
        variablePointer0.namespacePointer(""  "");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0361491,"public void test0361491() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, (QName) null);
    assertNotNull(variablePointer0);
}",0,
project,0,test0361492,"public void test0361492() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, (QName) null);
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test0361493,"public void test0361493() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, (QName) null);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0361494,"public void test0361494() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, (QName) null);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0361495,"public void test0361495() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, (QName) null);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0361496,"public void test0361496() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, (QName) null);
    assertNull(variablePointer0.getNamespaceURI());
}",0,
project,0,test0361497,"public void test0361497() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, (QName) null);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0361498,"public void test0361498() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, (QName) null);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0361500,"public void test0361500() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, (QName) null);
    // Undeclared exception!
    try {
        variablePointer0.namespaceIterator();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0371501,"public void test0371501() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    assertNotNull(qName0);
}",0,
project,0,test0371502,"public void test0371502() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    assertEquals(""%"", qName0.getPrefix());
}",0,
project,0,test0371503,"public void test0371503() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    assertEquals(""%:%"", qName0.toString());
}",0,
project,0,test0371504,"public void test0371504() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    assertEquals(""%"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0371505,"public void test0371505() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0371506,"public void test0371506() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""%"", qName0.getPrefix());
}",0,
project,0,test0371507,"public void test0371507() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""%:%"", qName0.toString());
}",0,
project,0,test0371508,"public void test0371508() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""%"", qName0.getName());
}",0,
project,0,test0371509,"public void test0371509() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0371510,"public void test0371510() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0371511,"public void test0371511() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0371512,"public void test0371512() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0371513,"public void test0371513() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0371514,"public void test0371514() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0371515,"public void test0371515() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0371517,"public void test0371517() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        variablePointer0.isLeaf();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: %:%
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}",0,
project,0,test0381534,"public void test0381534() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        variablePointer0.isLanguage(""<<unknown namespace>>"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",0,
project,0,test0391535,"public void test0391535() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    assertNotNull(qName0);
}",1,
project,0,test0391536,"public void test0391536() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    assertEquals("">{Dz~nER$ 3[Z~zT"", qName0.getName());
}",0,
project,0,test0391537,"public void test0391537() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0391538,"public void test0391538() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    assertEquals("">{Dz~nER$ 3[Z~zT"", qName0.toString());
}",0,
project,0,test0391539,"public void test0391539() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0391540,"public void test0391540() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("">{Dz~nER$ 3[Z~zT"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0391541,"public void test0391541() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0391542,"public void test0391542() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("">{Dz~nER$ 3[Z~zT"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0391543,"public void test0391543() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0391544,"public void test0391544() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0391545,"public void test0391545() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0391546,"public void test0391546() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test0391547,"public void test0391547() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0391548,"public void test0391548() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0391549,"public void test0391549() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0391551,"public void test0391551() throws Throwable {
    QName qName0 = new QName("">{Dz~nER$ 3[Z~zT"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        variablePointer0.isCollection();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: >{Dz~nER$ 3[Z~zT
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0401552,"public void test0401552() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    assertNotNull(qName0);
}",0,
project,0,test0401553,"public void test0401553() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    assertEquals("" "", qName0.getName());
}",0,
project,0,test0401554,"public void test0401554() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    assertEquals("" "", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0401555,"public void test0401555() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    assertEquals("" : "", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0401557,"public void test0401557() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0401558,"public void test0401558() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("" "", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0401559,"public void test0401559() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("" "", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0401560,"public void test0401560() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("" : "", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0401561,"public void test0401561() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0401562,"public void test0401562() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0401563,"public void test0401563() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test0401564,"public void test0401564() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0401565,"public void test0401565() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0401566,"public void test0401566() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0401567,"public void test0401567() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0401569,"public void test0401569() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    // Undeclared exception!
    try {
        variablePointer0.isCollection();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: ' : '
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",0,
project,0,test0411580,"public void test0411580() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    // Undeclared exception!
    try {
        variablePointer0.getValuePointer();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0421581,"public void test0421581() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    assertNotNull(nodeTypeTest0);
}",0,assertNotNull(nodeTypeTest0)
project,0,test0421582,"public void test0421582() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    assertEquals(2474, nodeTypeTest0.getNodeType());
}",0,"assertEquals(0, nodeTypeTest0.getNodeType())"
project,0,test0421583,"public void test0421583() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test0421584,"public void test0421584() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertEquals(2474, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0421585,"public void test0421585() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0421587,"public void test0421587() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNotNull(basicVariables0);
}",0,assertNotNull(basicVariables0)
project,0,test0421588,"public void test0421588() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertEquals(2474, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0421589,"public void test0421589() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0421591,"public void test0421591() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0421592,"public void test0421592() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    assertEquals(""JXPath iterators cannot remove nodes:null"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0421593,"public void test0421593() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    assertEquals(""JXPath iterators cannot remove nodes"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0421594,"public void test0421594() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    assertNull(qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0421595,"public void test0421595() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,
project,0,test0421596,"public void test0421596() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(2474, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0421597,"public void test0421597() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0421598,"public void test0421598() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""JXPath iterators cannot remove nodes:null"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0421599,"public void test0421599() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""JXPath iterators cannot remove nodes"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0421600,"public void test0421600() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0421601,"public void test0421601() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0421602,"public void test0421602() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0421603,"public void test0421603() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0421604,"public void test0421604() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0421605,"public void test0421605() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0421606,"public void test0421606() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0421607,"public void test0421607() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0421610,"public void test0421610() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2474);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""JXPath iterators cannot remove nodes"", (String) null);
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    // Undeclared exception!
    try {
        variablePointer0.getValuePointer();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: 'JXPath iterators cannot remove nodes:null'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",0,
project,0,test0431611,"public void test0431611() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0431612,"public void test0431612() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    assertEquals(""-,_eC%Z~#X:-,_eC%Z~#X"", qName0.toString());
}",0,
project,0,test0431613,"public void test0431613() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    assertEquals(""-,_eC%Z~#X"", qName0.getPrefix());
}",0,
project,0,test0431614,"public void test0431614() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    assertEquals(""-,_eC%Z~#X"", qName0.getName());
}",0,
project,0,test0431615,"public void test0431615() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0431616,"public void test0431616() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertEquals(""-,_eC%Z~#X:-,_eC%Z~#X"", qName0.toString());
}",0,
project,0,test0431617,"public void test0431617() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertEquals(""-,_eC%Z~#X"", qName0.getPrefix());
}",0,
project,0,test0431618,"public void test0431618() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertEquals(""-,_eC%Z~#X"", qName0.getName());
}",0,
project,0,test0431619,"public void test0431619() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0431620,"public void test0431620() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0431621,"public void test0431621() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0431622,"public void test0431622() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0431623,"public void test0431623() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0431624,"public void test0431624() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0431625,"public void test0431625() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0431627,"public void test0431627() throws Throwable {
    QName qName0 = new QName(""-,_eC%Z~#X"", ""-,_eC%Z~#X"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    // Undeclared exception!
    try {
        variablePointer0.getValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0441629,"public void test0441629() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0441630,"public void test0441630() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    assertEquals("""", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0441631,"public void test0441631() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    assertEquals("":"", qName0.toString());
}",0,
project,0,test0441632,"public void test0441632() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0441633,"public void test0441633() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",1,
project,0,test0441634,"public void test0441634() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0441635,"public void test0441635() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("":"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0441636,"public void test0441636() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0441637,"public void test0441637() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0441638,"public void test0441638() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0441639,"public void test0441639() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0441640,"public void test0441640() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0441641,"public void test0441641() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0441642,"public void test0441642() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0441643,"public void test0441643() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0441645,"public void test0441645() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    // Undeclared exception!
    try {
        variablePointer0.getValue();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: ':'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",0,
project,0,test0451655,"public void test0451655() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, (QName) null);
    // Undeclared exception!
    try {
        variablePointer0.getRootNode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0461656,"public void test0461656() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0461657,"public void test0461657() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    assertEquals(""b}suu:/Feh.z"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0461658,"public void test0461658() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    assertEquals("""", qName0.getName());
}",0,
project,0,test0461659,"public void test0461659() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    assertEquals(""b}suu:/Feh.z:"", qName0.toString());
}",0,
project,0,test0461667,"public void test0461667() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertNotNull(beanPointer0);
}",0,
project,0,test0461668,"public void test0461668() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals(""b}suu:/Feh.z"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0461669,"public void test0461669() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals("""", qName0.getName());
}",0,
project,0,test0461670,"public void test0461670() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals(""b}suu:/Feh.z:"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0461677,"public void test0461677() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test0461678,"public void test0461678() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0461679,"public void test0461679() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test0461680,"public void test0461680() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertFalse(beanPointer0.isCollection());
}",0,assertFalse(beanPointer0.isCollection())
project,0,test0461681,"public void test0461681() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0461682,"public void test0461682() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0461683,"public void test0461683() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0461684,"public void test0461684() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0461685,"public void test0461685() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertTrue(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test0461687,"public void test0461687() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    // Undeclared exception!
    try {
        beanPointer0.getPointerByKey((JXPathContext) null, """", ""<<unknown namespace>>"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",0,
project,0,test0471692,"public void test0471692() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0471693,"public void test0471693() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("""", qName0.getPrefix());
}",0,
project,0,test0471694,"public void test0471694() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("":"", qName0.toString());
}",0,
project,0,test0471695,"public void test0471695() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("""", qName0.getName());
}",0,
project,0,test0471696,"public void test0471696() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0471697,"public void test0471697() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0471698,"public void test0471698() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test0471699,"public void test0471699() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0471700,"public void test0471700() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0471701,"public void test0471701() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0471702,"public void test0471702() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0471704,"public void test0471704() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        variablePointer0.getNodeValue();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: :
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}",0,
project,0,test0481778,"public void test0481778() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    NodePointerFactory nodePointerFactory0 = mock(NodePointerFactory.class, new ViolatedAssumptionAnswer());
    JXPathContextReferenceImpl.addNodePointerFactory(nodePointerFactory0);
    // Undeclared exception!
    try {
        variablePointer1.getNodeValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",0,
project,0,test0491779,"public void test0491779() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    assertNotNull(qName0);
}",0,
project,0,test0491780,"public void test0491780() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0491781,"public void test0491781() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    assertEquals(""UNKNOWN"", qName0.toString());
}",0,
project,0,test0491782,"public void test0491782() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    assertEquals(""UNKNOWN"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0491783,"public void test0491783() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0491784,"public void test0491784() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(qName0.getPrefix());
}",0,
project,0,test0491785,"public void test0491785() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""UNKNOWN"", qName0.toString());
}",0,
project,0,test0491786,"public void test0491786() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""UNKNOWN"", qName0.getName());
}",0,
project,0,test0491787,"public void test0491787() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0491788,"public void test0491788() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0491789,"public void test0491789() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0491790,"public void test0491790() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertFalse(variablePointer0.isActual())
project,0,test0491791,"public void test0491791() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",1,
project,0,test0491792,"public void test0491792() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0491793,"public void test0491793() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test0491795,"public void test0491795() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        variablePointer0.getNode();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: UNKNOWN
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}",0,
project,0,test0501800,"public void test0501800() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0501801,"public void test0501801() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertEquals("""", qName0.getName());
}",0,
project,0,test0501802,"public void test0501802() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertNull(qName0.getPrefix());
}",0,
project,0,test0501803,"public void test0501803() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertEquals("""", qName0.toString());
}",0,
project,0,test0501804,"public void test0501804() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0501805,"public void test0501805() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,
project,0,test0501806,"public void test0501806() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0501807,"public void test0501807() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0501808,"public void test0501808() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0501809,"public void test0501809() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0501810,"public void test0501810() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0501812,"public void test0501812() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    // Undeclared exception!
    try {
        variablePointer0.getNode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0511823,"public void test0511823() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    // Undeclared exception!
    try {
        variablePointer0.getLength();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0521841,"public void test0521841() throws Throwable {
    QName qName0 = new QName("" "", "" "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    // Undeclared exception!
    try {
        variablePointer0.getLength();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: ' : '
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",0,
project,0,test0531851,"public void test0531851() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, (QName) null);
    // Undeclared exception!
    try {
        variablePointer0.getImmediateValuePointer();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0541853,"public void test0541853() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0541854,"public void test0541854() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    assertEquals(""Mvl|(os?FVs1"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0541855,"public void test0541855() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0541856,"public void test0541856() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    assertEquals(""Mvl|(os?FVs1:"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0541857,"public void test0541857() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0541858,"public void test0541858() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""Mvl|(os?FVs1"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0541859,"public void test0541859() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0541860,"public void test0541860() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""Mvl|(os?FVs1:"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0541861,"public void test0541861() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0541862,"public void test0541862() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0541863,"public void test0541863() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0541864,"public void test0541864() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0541865,"public void test0541865() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0541866,"public void test0541866() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0541867,"public void test0541867() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0541869,"public void test0541869() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Mvl|(os?FVs1"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    // Undeclared exception!
    try {
        variablePointer0.getImmediateValuePointer();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: 'Mvl|(os?FVs1:'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",0,
project,0,test0551886,"public void test0551886() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        variablePointer0.getImmediateNode();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable:
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0561897,"public void test0561897() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    // Undeclared exception!
    try {
        variablePointer0.getImmediateNode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0571898,"public void test0571898() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    assertNotNull(qName0);
}",1,
project,0,test0571899,"public void test0571899() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    assertEquals(""oWmo E;9F@"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0571900,"public void test0571900() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    assertNull(qName0.getPrefix());
}",0,
project,0,test0571901,"public void test0571901() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    assertEquals(""oWmo E;9F@"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0571902,"public void test0571902() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0571903,"public void test0571903() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""oWmo E;9F@"", qName0.toString());
}",0,
project,0,test0571904,"public void test0571904() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(qName0.getPrefix());
}",0,
project,0,test0571905,"public void test0571905() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""oWmo E;9F@"", qName0.getName());
}",0,
project,0,test0571906,"public void test0571906() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0571907,"public void test0571907() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0571908,"public void test0571908() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0571909,"public void test0571909() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0571910,"public void test0571910() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0571911,"public void test0571911() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,
project,0,test0571912,"public void test0571912() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0571914,"public void test0571914() throws Throwable {
    QName qName0 = new QName(""oWmo E;9F@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        variablePointer0.getBaseValue();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: oWmo E;9F@
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",1,
project,0,test0581915,"public void test0581915() throws Throwable {
    QName qName0 = new QName((String) null, """");
    assertNotNull(qName0);
}",0,
project,0,test0581916,"public void test0581916() throws Throwable {
    QName qName0 = new QName((String) null, """");
    assertEquals("""", qName0.getName());
}",0,
project,0,test0581917,"public void test0581917() throws Throwable {
    QName qName0 = new QName((String) null, """");
    assertNull(qName0.getPrefix());
}",0,
project,0,test0581918,"public void test0581918() throws Throwable {
    QName qName0 = new QName((String) null, """");
    assertEquals("""", qName0.toString());
}",0,
project,0,test0581919,"public void test0581919() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0581920,"public void test0581920() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("""", qName0.getName());
}",0,
project,0,test0581921,"public void test0581921() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(qName0.getPrefix());
}",0,
project,0,test0581922,"public void test0581922() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("""", qName0.toString());
}",0,
project,0,test0581923,"public void test0581923() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0581924,"public void test0581924() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0581925,"public void test0581925() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0581926,"public void test0581926() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0581927,"public void test0581927() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0581928,"public void test0581928() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0581929,"public void test0581929() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0581931,"public void test0581931() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertNotNull(nodePointer0);
}",0,
project,0,test0581932,"public void test0581932() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0581933,"public void test0581933() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0581934,"public void test0581934() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0581935,"public void test0581935() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0581936,"public void test0581936() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0581937,"public void test0581937() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0581938,"public void test0581938() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0581939,"public void test0581939() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0581940,"public void test0581940() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test0581941,"public void test0581941() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0581944,"public void test0581944() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertNotNull(beanPointer0);
}",0,
project,0,test0581945,"public void test0581945() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertEquals("""", qName0.getName());
}",0,
project,0,test0581946,"public void test0581946() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0581947,"public void test0581947() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0581948,"public void test0581948() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0581949,"public void test0581949() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0581950,"public void test0581950() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0581951,"public void test0581951() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0581952,"public void test0581952() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0581953,"public void test0581953() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0581954,"public void test0581954() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0581955,"public void test0581955() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test0581956,"public void test0581956() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isRoot());
}",0,assertFalse(beanPointer0.isRoot())
project,0,test0581957,"public void test0581957() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0581958,"public void test0581958() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0581959,"public void test0581959() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isCollection());
}",0,assertFalse(beanPointer0.isCollection())
project,0,test0581960,"public void test0581960() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0581961,"public void test0581961() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test0581962,"public void test0581962() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isContainer());
}",0,assertFalse(beanPointer0.isContainer())
project,0,test0581963,"public void test0581963() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,
project,0,test0581967,"public void test0581967() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, qName0, variablePointer0);
    // Undeclared exception!
    try {
        beanPointer0.createPath((JXPathContext) null, (Object) variablePointer0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Cannot setValue of an object that is not some other object's property
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer"", e);
    }
}",0,
project,0,test0591981,"public void test0591981() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertNotNull(beanPointer0);
}",0,
project,0,test0591982,"public void test0591982() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertEquals("""", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0591983,"public void test0591983() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertEquals("":"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0591984,"public void test0591984() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertEquals("""", qName0.getName());
}",0,
project,0,test0591991,"public void test0591991() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0591992,"public void test0591992() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0591993,"public void test0591993() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test0591994,"public void test0591994() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0591995,"public void test0591995() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,
project,0,test0591996,"public void test0591996() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertFalse(beanPointer0.isCollection());
}",0,
project,0,test0591997,"public void test0591997() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0591998,"public void test0591998() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertFalse(beanPointer0.isContainer());
}",0,
project,0,test0591999,"public void test0591999() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    assertTrue(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test0592001,"public void test0592001() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) linkedList0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,
project,0,test0592003,"public void test0592003() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) linkedList0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,
project,0,test0592005,"public void test0592005() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) linkedList0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    assertNotNull(nodeTypeTest0);
}",0,assertNotNull(nodeTypeTest0)
project,0,test0592006,"public void test0592006() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) linkedList0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
}",0,
project,0,test0592007,"public void test0592007() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.KOREA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""cbsby"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) linkedList0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    // Undeclared exception!
    try {
        beanPointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer"", e);
    }
}",0,
project,0,test0602008,"public void test0602008() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    assertNotNull(nodeTypeTest0);
}",0,
project,0,test0602009,"public void test0602009() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    assertEquals(3122, nodeTypeTest0.getNodeType());
}",0,"assertEquals(0, nodeTypeTest0.getNodeType())"
project,0,test0602010,"public void test0602010() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test0602011,"public void test0602011() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertEquals(3122, nodeTypeTest0.getNodeType());
}",0,"assertEquals(0, nodeTypeTest0.getNodeType())"
project,0,test0602012,"public void test0602012() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0602014,"public void test0602014() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNotNull(basicVariables0);
}",0,
project,0,test0602015,"public void test0602015() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertEquals(3122, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0602016,"public void test0602016() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0602018,"public void test0602018() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0602019,"public void test0602019() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    assertEquals(""LPBVL"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0602020,"public void test0602020() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    assertEquals(""LPBVL:LPBVL"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0602021,"public void test0602021() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    assertEquals(""LPBVL"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0602022,"public void test0602022() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,
project,0,test0602023,"public void test0602023() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(3122, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0602024,"public void test0602024() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0602025,"public void test0602025() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""LPBVL"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0602026,"public void test0602026() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""LPBVL:LPBVL"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0602027,"public void test0602027() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""LPBVL"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0602028,"public void test0602028() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0602029,"public void test0602029() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0602030,"public void test0602030() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0602031,"public void test0602031() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0602032,"public void test0602032() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0602033,"public void test0602033() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0602034,"public void test0602034() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0602037,"public void test0602037() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    assertEquals(3122, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0602038,"public void test0602038() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0602039,"public void test0602039() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    assertEquals(""LPBVL"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0602040,"public void test0602040() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    assertEquals(""LPBVL:LPBVL"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0602041,"public void test0602041() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    assertEquals(""LPBVL"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0602042,"public void test0602042() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    assertEquals(3122, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0602043,"public void test0602043() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0602044,"public void test0602044() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0602045,"public void test0602045() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0602046,"public void test0602046() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0602047,"public void test0602047() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0602048,"public void test0602048() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0602049,"public void test0602049() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"", ""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.index = 3122;
    // Undeclared exception!
    try {
        variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) variablePointer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: 'LPBVL:LPBVL'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",0,
project,0,test0612050,"public void test0612050() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    assertNotNull(qName0);
}",0,
project,0,test0612051,"public void test0612051() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    assertNull(qName0.getName());
}",0,
project,0,test0612052,"public void test0612052() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    assertNull(qName0.toString());
}",0,
project,0,test0612053,"public void test0612053() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    assertNull(qName0.getPrefix());
}",0,
project,0,test0612054,"public void test0612054() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0612055,"public void test0612055() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(qName0.getName());
}",0,
project,0,test0612056,"public void test0612056() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(qName0.toString());
}",0,
project,0,test0612057,"public void test0612057() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(qName0.getPrefix());
}",0,
project,0,test0612058,"public void test0612058() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0612059,"public void test0612059() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,
project,0,test0612060,"public void test0612060() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0612061,"public void test0612061() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0612062,"public void test0612062() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0612063,"public void test0612063() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0612064,"public void test0612064() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0612066,"public void test0612066() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertNotNull(nullPointer0);
}",0,
project,0,test0612067,"public void test0612067() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertNull(qName0.getName());
}",0,
project,0,test0612068,"public void test0612068() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertNull(qName0.toString());
}",0,
project,0,test0612069,"public void test0612069() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertNull(qName0.getPrefix());
}",0,
project,0,test0612070,"public void test0612070() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0612071,"public void test0612071() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0612072,"public void test0612072() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0612073,"public void test0612073() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0612074,"public void test0612074() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0612075,"public void test0612075() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0612076,"public void test0612076() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0612077,"public void test0612077() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertFalse(nullPointer0.isContainer());
}",0,
project,0,test0612078,"public void test0612078() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertEquals(0, nullPointer0.getLength());
}",0,"assertEquals(0, nullPointer0.getLength())"
project,0,test0612079,"public void test0612079() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertNull(nullPointer0.getNamespaceURI());
}",0,assertNotNull(nullPointer0.getNamespaceURI())
project,0,test0612080,"public void test0612080() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertTrue(nullPointer0.isLeaf());
}",0,assertFalse(nullPointer0.isLeaf())
project,0,test0612081,"public void test0612081() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertFalse(nullPointer0.isCollection());
}",0,assertFalse(nullPointer0.isCollection())
project,0,test0612082,"public void test0612082() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0612083,"public void test0612083() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
}",0,
project,0,test0612084,"public void test0612084() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertTrue(nullPointer0.isNode());
}",0,
project,0,test0612085,"public void test0612085() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertFalse(nullPointer0.isActual());
}",0,
project,0,test0612086,"public void test0612086() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertFalse(nullPointer0.isAttribute());
}",0,assertTrue(nullPointer0.isAttribute())
project,0,test0612087,"public void test0612087() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    assertFalse(nullPointer0.isRoot());
}",0,assertFalse(nullPointer0.isRoot())
project,0,test0612090,"public void test0612090() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test0612091,"public void test0612091() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertNull(qName0.getName());
}",0,
project,0,test0612092,"public void test0612092() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertNull(qName0.toString());
}",0,
project,0,test0612093,"public void test0612093() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertNull(qName0.getPrefix());
}",0,
project,0,test0612094,"public void test0612094() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0612095,"public void test0612095() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,
project,0,test0612096,"public void test0612096() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test0612097,"public void test0612097() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0612098,"public void test0612098() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0612099,"public void test0612099() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0612100,"public void test0612100() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0612101,"public void test0612101() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertFalse(nullPointer0.isContainer());
}",0,
project,0,test0612102,"public void test0612102() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertEquals(0, nullPointer0.getLength());
}",0,"assertEquals(0, nullPointer0.getLength())"
project,0,test0612103,"public void test0612103() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertNull(nullPointer0.getNamespaceURI());
}",0,assertNotNull(nullPointer0.getNamespaceURI())
project,0,test0612104,"public void test0612104() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertTrue(nullPointer0.isLeaf());
}",0,assertTrue(nullPointer0.isLeaf())
project,0,test0612105,"public void test0612105() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertFalse(nullPointer0.isCollection());
}",0,
project,0,test0612106,"public void test0612106() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0612107,"public void test0612107() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
}",0,
project,0,test0612108,"public void test0612108() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertTrue(nullPointer0.isNode());
}",0,assertFalse(nullPointer0.isNode())
project,0,test0612109,"public void test0612109() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertFalse(nullPointer0.isActual());
}",0,assertFalse(nullPointer0.isActual())
project,0,test0612110,"public void test0612110() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertFalse(nullPointer0.isAttribute());
}",0,assertTrue(nullPointer0.isAttribute())
project,0,test0612111,"public void test0612111() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertFalse(nullPointer0.isRoot());
}",0,assertFalse(nullPointer0.isRoot())
project,0,test0612112,"public void test0612112() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertFalse(jXPathContextReferenceImpl0.isLenient())
project,0,test0612116,"public void test0612116() throws Throwable {
    QName qName0 = new QName((String) null, (String) null);
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPointer nullPointer0 = (NullPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nullPointer0);
    // Undeclared exception!
    try {
        nullPointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Factory is not set on the JXPathContext - cannot create path: $null
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",1,
project,0,test0622117,"public void test0622117() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    assertNotNull(qName0);
}",0,
project,0,test0622118,"public void test0622118() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    assertEquals("", operation is not allowed for this type of node:, "", qName0.toString());
}",0,
project,0,test0622119,"public void test0622119() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    assertEquals("", "", qName0.getName());
}",0,
project,0,test0622120,"public void test0622120() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    assertEquals("", operation is not allowed for this type of node"", qName0.getPrefix());
}",0,
project,0,test0622121,"public void test0622121() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertNotNull(nullPointer0);
}",0,
project,0,test0622122,"public void test0622122() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertEquals("", operation is not allowed for this type of node:, "", qName0.toString());
}",0,
project,0,test0622123,"public void test0622123() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertEquals("", "", qName0.getName());
}",0,
project,0,test0622124,"public void test0622124() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertEquals("", operation is not allowed for this type of node"", qName0.getPrefix());
}",0,
project,0,test0622125,"public void test0622125() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertFalse(nullPointer0.isActual());
}",0,assertTrue(nullPointer0.isActual())
project,0,test0622126,"public void test0622126() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
}",0,"assertEquals(0, nullPointer0.getIndex())"
project,0,test0622127,"public void test0622127() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertFalse(nullPointer0.isAttribute());
}",0,
project,0,test0622128,"public void test0622128() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertFalse(nullPointer0.isContainer());
}",0,assertFalse(nullPointer0.isContainer())
project,0,test0622129,"public void test0622129() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertTrue(nullPointer0.isRoot());
}",0,assertFalse(nullPointer0.isRoot())
project,0,test0622130,"public void test0622130() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertTrue(nullPointer0.isLeaf());
}",0,assertTrue(nullPointer0.isLeaf())
project,0,test0622131,"public void test0622131() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertEquals(0, nullPointer0.getLength());
}",0,"assertEquals(0, nullPointer0.getLength())"
project,0,test0622132,"public void test0622132() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertNull(nullPointer0.getNamespaceURI());
}",0,assertNotNull(nullPointer0.getNamespaceURI())
project,0,test0622133,"public void test0622133() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0622134,"public void test0622134() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertFalse(nullPointer0.isCollection());
}",0,
project,0,test0622135,"public void test0622135() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertTrue(nullPointer0.isNode());
}",0,assertFalse(nullPointer0.isNode())
project,0,test0622137,"public void test0622137() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test0622138,"public void test0622138() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertFalse(jXPathContextReferenceImpl0.isLenient())
project,0,test0622140,"public void test0622140() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", "");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    // Undeclared exception!
    try {
        nullPointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Cannot create the root object: null()
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.NullPointer"", e);
    }
}",1,
project,0,test0632157,"public void test0632157() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        variablePointer0.createPath((JXPathContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0642159,"public void test0642159() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0642160,"public void test0642160() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    assertEquals(""$1EB/;/R"", qName0.toString());
}",0,
project,0,test0642161,"public void test0642161() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    assertEquals(""$1EB/;/R"", qName0.getName());
}",0,
project,0,test0642162,"public void test0642162() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0642163,"public void test0642163() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    assertNotNull(nodeNameTest0);
}",0,assertNotNull(nodeNameTest0)
project,0,test0642164,"public void test0642164() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    assertEquals(""$1EB/;/R"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0642165,"public void test0642165() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    assertEquals(""$1EB/;/R"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0642166,"public void test0642166() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0642167,"public void test0642167() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test0642168,"public void test0642168() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    assertEquals(""' and '"", nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0642169,"public void test0642169() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    assertEquals(""$1EB/;/R"", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0642170,"public void test0642170() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    assertEquals(""$1EB/;/R"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0642171,"public void test0642171() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    assertEquals(""$1EB/;/R"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0642172,"public void test0642172() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0642173,"public void test0642173() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test0642174,"public void test0642174() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    assertEquals(""' and '"", nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0642175,"public void test0642175() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    assertEquals(""$1EB/;/R"", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0642176,"public void test0642176() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    assertNotNull(qName1);
}",0,
project,0,test0642177,"public void test0642177() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    assertFalse(qName1.equals((Object) qName0));
}",0,
project,0,test0642178,"public void test0642178() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    assertEquals(""e%p@XtA`N856w{D<X"", qName1.toString());
}",0,assertNotNull(qName1.toString())
project,0,test0642179,"public void test0642179() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    assertEquals(""e%p@XtA`N856w{D<X"", qName1.getName());
}",0,assertNotNull(qName1.getName())
project,0,test0642180,"public void test0642180() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    assertNull(qName1.getPrefix());
}",0,assertNotNull(qName1.getPrefix())
project,0,test0642181,"public void test0642181() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    assertNotNull(variablePointer0);
}",0,
project,0,test0642182,"public void test0642182() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    assertFalse(qName1.equals((Object) qName0));
}",0,
project,0,test0642183,"public void test0642183() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    assertEquals(""e%p@XtA`N856w{D<X"", qName1.toString());
}",0,assertNotNull(qName1.toString())
project,0,test0642184,"public void test0642184() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    assertEquals(""e%p@XtA`N856w{D<X"", qName1.getName());
}",0,assertNotNull(qName1.getName())
project,0,test0642185,"public void test0642185() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    assertNull(qName1.getPrefix());
}",0,assertNotNull(qName1.getPrefix())
project,0,test0642186,"public void test0642186() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0642187,"public void test0642187() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0642188,"public void test0642188() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0642189,"public void test0642189() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0642190,"public void test0642190() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0642191,"public void test0642191() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0642192,"public void test0642192() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0642194,"public void test0642194() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test0642195,"public void test0642195() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertFalse(qName0.equals((Object) qName1));
}",0,
project,0,test0642197,"public void test0642197() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertEquals(""$1EB/;/R"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0642198,"public void test0642198() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertEquals(""$1EB/;/R"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0642199,"public void test0642199() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0642200,"public void test0642200() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test0642201,"public void test0642201() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertEquals(""' and '"", nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0642202,"public void test0642202() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertEquals(""$1EB/;/R"", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0642203,"public void test0642203() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertFalse(jXPathContextReferenceImpl0.isLenient())
project,0,test0642205,"public void test0642205() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName((String) null, ""$1EB/;/R"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""' and '"");
    basicVariables0.declareVariable(""e%p@XtA`N856w{D<X"", nodeNameTest0);
    QName qName1 = new QName(""e%p@XtA`N856w{D<X"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    // Undeclared exception!
    try {
        variablePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-3515), (Object) qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Index is less than 1: $e%p@XtA`N856w{D<X
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0652206,"public void test0652206() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0652207,"public void test0652207() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    assertEquals(""5QL%\""K4%S`U,tzlM-^:fI 8@w!\""*W9FO]G"", qName0.toString());
}",0,
project,0,test0652208,"public void test0652208() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    assertEquals(""fI 8@w!\""*W9FO]G"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0652209,"public void test0652209() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    assertEquals(""5QL%\""K4%S`U,tzlM-^"", qName0.getPrefix());
}",0,
project,0,test0652217,"public void test0652217() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertNotNull(nullPointer0);
}",0,
project,0,test0652218,"public void test0652218() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertEquals(""5QL%\""K4%S`U,tzlM-^:fI 8@w!\""*W9FO]G"", qName0.toString());
}",0,
project,0,test0652219,"public void test0652219() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertEquals(""fI 8@w!\""*W9FO]G"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0652220,"public void test0652220() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertEquals(""5QL%\""K4%S`U,tzlM-^"", qName0.getPrefix());
}",0,
project,0,test0652227,"public void test0652227() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertTrue(nullPointer0.isNode());
}",0,assertTrue(nullPointer0.isNode())
project,0,test0652228,"public void test0652228() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertTrue(nullPointer0.isLeaf());
}",1,
project,0,test0652229,"public void test0652229() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
}",0,
project,0,test0652230,"public void test0652230() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertNull(nullPointer0.getNamespaceURI());
}",0,assertNotNull(nullPointer0.getNamespaceURI())
project,0,test0652231,"public void test0652231() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertFalse(nullPointer0.isCollection());
}",0,assertFalse(nullPointer0.isCollection())
project,0,test0652232,"public void test0652232() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertFalse(nullPointer0.isContainer());
}",0,
project,0,test0652233,"public void test0652233() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertTrue(nullPointer0.isRoot());
}",0,assertTrue(nullPointer0.isRoot())
project,0,test0652234,"public void test0652234() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertFalse(nullPointer0.isActual());
}",0,assertTrue(nullPointer0.isActual())
project,0,test0652235,"public void test0652235() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertFalse(nullPointer0.isAttribute());
}",0,assertTrue(nullPointer0.isAttribute())
project,0,test0652236,"public void test0652236() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertEquals(0, nullPointer0.getLength());
}",0,"assertEquals(0, nullPointer0.getLength())"
project,0,test0652237,"public void test0652237() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertTrue(nullPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0652240,"public void test0652240() throws Throwable {
    QName qName0 = new QName(""5QL%\""K4%S`U,tzlM-^"", ""fI 8@w!\""*W9FO]G"");
    Locale locale0 = Locale.ROOT;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, locale0);
    Object object0 = new Object();
    // Undeclared exception!
    try {
        nullPointer0.createChild((JXPathContext) null, qName0, 2937, object0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Cannot create the root object: null()
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.NullPointer"", e);
    }
}",0,
project,0,test0662257,"public void test0662257() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""<<unknown namespace>>"");
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test0662258,"public void test0662258() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""<<unknown namespace>>"");
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0662261,"public void test0662261() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""<<unknown namespace>>"");
    Object object0 = new Object();
    // Undeclared exception!
    try {
        variablePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, object0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0672263,"public void test0672263() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0672264,"public void test0672264() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    assertEquals(""Bn9pK:Bn9pK"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0672265,"public void test0672265() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    assertEquals(""Bn9pK"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0672266,"public void test0672266() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    assertEquals(""Bn9pK"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0672267,"public void test0672267() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0672268,"public void test0672268() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""Bn9pK:Bn9pK"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0672269,"public void test0672269() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""Bn9pK"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0672270,"public void test0672270() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""Bn9pK"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0672271,"public void test0672271() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0672272,"public void test0672272() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0672273,"public void test0672273() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0672274,"public void test0672274() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0672275,"public void test0672275() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test0672276,"public void test0672276() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0672277,"public void test0672277() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0672279,"public void test0672279() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Bn9pK"", ""Bn9pK"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContext jXPathContext0 = mock(JXPathContext.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        variablePointer0.createChild(jXPathContext0, qName0, 5, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: 'Bn9pK:Bn9pK'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",0,
project,0,test0682280,"public void test0682280() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    assertNotNull(qName0);
}",0,
project,0,test0682281,"public void test0682281() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    assertEquals("")d-]P't~)(E"", qName0.getName());
}",0,
project,0,test0682282,"public void test0682282() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    assertEquals("")d-]P't~)(E"", qName0.toString());
}",0,
project,0,test0682283,"public void test0682283() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0682284,"public void test0682284() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0682285,"public void test0682285() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("")d-]P't~)(E"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0682286,"public void test0682286() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("")d-]P't~)(E"", qName0.toString());
}",0,
project,0,test0682287,"public void test0682287() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0682288,"public void test0682288() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0682289,"public void test0682289() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0682290,"public void test0682290() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0682291,"public void test0682291() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0682292,"public void test0682292() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test0682293,"public void test0682293() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0682294,"public void test0682294() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0682296,"public void test0682296() throws Throwable {
    QName qName0 = new QName((String) null, "")d-]P't~)(E"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        variablePointer0.createChild((JXPathContext) null, qName0, 45);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0692317,"public void test0692317() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("", operation is not allowed for this type of node"", ""0"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) "", operation is not allowed for this type of node"");
    // Undeclared exception!
    try {
        variablePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-1634));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: ', operation is not allowed for this type of node:0'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",0,
project,0,test0702335,"public void test0702335() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    // Undeclared exception!
    try {
        variablePointer0.compareTo((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",0,
project,0,test0712337,"public void test0712337() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0712338,"public void test0712338() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    assertEquals(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0712339,"public void test0712339() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    assertEquals(""Simultaneous operations: should not request pointer list while iterating over an EvalContext:"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0712340,"public void test0712340() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0712341,"public void test0712341() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0712342,"public void test0712342() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0712343,"public void test0712343() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""Simultaneous operations: should not request pointer list while iterating over an EvalContext:"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0712344,"public void test0712344() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0712345,"public void test0712345() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0712346,"public void test0712346() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test0712347,"public void test0712347() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0712348,"public void test0712348() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0712349,"public void test0712349() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0712350,"public void test0712350() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0712351,"public void test0712351() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0712353,"public void test0712353() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Simultaneous operations: should not request pointer list while iterating over an EvalContext"", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    // Undeclared exception!
    try {
        variablePointer0.compareTo("""");
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.String cannot be cast to org.apache.commons.jxpath.ri.model.NodePointer
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",0,
project,0,test0722363,"public void test0722363() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertNotNull(beanPointer0);
}",0,
project,0,test0722364,"public void test0722364() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0722365,"public void test0722365() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0722366,"public void test0722366() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test0722367,"public void test0722367() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0722368,"public void test0722368() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0722369,"public void test0722369() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0722370,"public void test0722370() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0722371,"public void test0722371() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0722372,"public void test0722372() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertFalse(beanPointer0.isCollection());
}",0,
project,0,test0722373,"public void test0722373() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0722374,"public void test0722374() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0722375,"public void test0722375() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertFalse(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test0722376,"public void test0722376() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0722377,"public void test0722377() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0722378,"public void test0722378() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test0722379,"public void test0722379() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0722382,"public void test0722382() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, (QName) null, variablePointer0);
    // Undeclared exception!
    try {
        beanPointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer"", e);
    }
}",0,
project,0,test0732456,"public void test0732456() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    // Undeclared exception!
    try {
        variablePointer0.childIterator(nodeNameTest0, false, variablePointer1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // PropertyIerator startWith parameter is not a child of the supplied parent
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.PropertyIterator"", e);
    }
}",0,
project,0,test0742461,"public void test0742461() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    assertNotNull(nodeNameTest0);
}",0,assertNotNull(nodeNameTest0)
project,0,test0742462,"public void test0742462() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0742463,"public void test0742463() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0742464,"public void test0742464() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0742465,"public void test0742465() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0742466,"public void test0742466() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    assertEquals("""", nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0742467,"public void test0742467() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertFalse(nodeNameTest0.isWildcard())
project,0,test0742468,"public void test0742468() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,
project,0,test0742469,"public void test0742469() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0742470,"public void test0742470() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0742471,"public void test0742471() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0742472,"public void test0742472() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0742473,"public void test0742473() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertEquals("""", nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0742474,"public void test0742474() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test0742475,"public void test0742475() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0742477,"public void test0742477() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNotNull(basicVariables0);
}",0,
project,0,test0742478,"public void test0742478() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0742479,"public void test0742479() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0742480,"public void test0742480() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0742481,"public void test0742481() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0742482,"public void test0742482() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertEquals("""", nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0742483,"public void test0742483() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test0742484,"public void test0742484() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0742486,"public void test0742486() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0742487,"public void test0742487() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0742488,"public void test0742488() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0742489,"public void test0742489() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0742490,"public void test0742490() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0742491,"public void test0742491() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals("""", nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0742492,"public void test0742492() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test0742493,"public void test0742493() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0742494,"public void test0742494() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0742495,"public void test0742495() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0742496,"public void test0742496() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0742497,"public void test0742497() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0742498,"public void test0742498() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test0742499,"public void test0742499() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test0742500,"public void test0742500() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0742503,"public void test0742503() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertNotNull(variablePointer1);
}",0,assertNotNull(variablePointer1)
project,0,test0742506,"public void test0742506() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0742507,"public void test0742507() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0742508,"public void test0742508() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0742509,"public void test0742509() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0742510,"public void test0742510() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertEquals("""", nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0742511,"public void test0742511() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test0742512,"public void test0742512() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0742513,"public void test0742513() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0742514,"public void test0742514() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0742515,"public void test0742515() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0742516,"public void test0742516() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0742517,"public void test0742517() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test0742518,"public void test0742518() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0742519,"public void test0742519() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0742520,"public void test0742520() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertTrue(variablePointer1.isRoot());
}",0,assertTrue(variablePointer1.isRoot())
project,0,test0742521,"public void test0742521() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertFalse(variablePointer1.isNode());
}",0,assertTrue(variablePointer1.isNode())
project,0,test0742522,"public void test0742522() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertFalse(variablePointer1.isAttribute());
}",0,assertTrue(variablePointer1.isAttribute())
project,0,test0742523,"public void test0742523() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertTrue(variablePointer1.isContainer());
}",0,assertTrue(variablePointer1.isContainer())
project,0,test0742524,"public void test0742524() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertTrue(variablePointer1.isActual());
}",0,assertTrue(variablePointer1.isActual())
project,0,test0742525,"public void test0742525() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertNull(variablePointer1.getNamespaceURI());
}",0,assertNotNull(variablePointer1.getNamespaceURI())
project,0,test0742526,"public void test0742526() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
}",0,
project,0,test0742530,"public void test0742530() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, """");
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeNameTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeNameTest0);
    NodePointerFactory nodePointerFactory0 = mock(NodePointerFactory.class, new ViolatedAssumptionAnswer());
    JXPathContextReferenceImpl.addNodePointerFactory(nodePointerFactory0);
    // Undeclared exception!
    try {
        variablePointer1.childIterator(nodeNameTest0, false, variablePointer1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",0,
project,0,test0752538,"public void test0752538() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertNotNull(nullPointer0);
}",0,
project,0,test0752545,"public void test0752545() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertFalse(nullPointer0.isContainer());
}",0,assertTrue(nullPointer0.isContainer())
project,0,test0752546,"public void test0752546() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertFalse(nullPointer0.isActual());
}",0,assertTrue(nullPointer0.isActual())
project,0,test0752547,"public void test0752547() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertEquals(0, nullPointer0.getLength());
}",0,"assertEquals(0, nullPointer0.getLength())"
project,0,test0752548,"public void test0752548() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertFalse(nullPointer0.isAttribute());
}",0,assertTrue(nullPointer0.isAttribute())
project,0,test0752549,"public void test0752549() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0752550,"public void test0752550() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertFalse(nullPointer0.isCollection());
}",0,assertTrue(nullPointer0.isCollection())
project,0,test0752551,"public void test0752551() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertTrue(nullPointer0.isNode());
}",0,
project,0,test0752552,"public void test0752552() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertTrue(nullPointer0.isLeaf());
}",0,assertTrue(nullPointer0.isLeaf())
project,0,test0752553,"public void test0752553() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
}",0,"assertEquals(0, nullPointer0.getIndex())"
project,0,test0752554,"public void test0752554() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertTrue(nullPointer0.isRoot());
}",0,assertFalse(nullPointer0.isRoot())
project,0,test0752555,"public void test0752555() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    assertNull(nullPointer0.getNamespaceURI());
}",0,assertNotNull(nullPointer0.getNamespaceURI())
project,0,test0752557,"public void test0752557() throws Throwable {
    Locale locale0 = Locale.PRC;
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer((QName) null, (Object) null, locale0);
    // Undeclared exception!
    try {
        nullPointer0.attributeIterator((QName) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator"", e);
    }
}",0,
project,0,test0762558,"public void test0762558() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test0762559,"public void test0762559() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0762561,"public void test0762561() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertNotNull(basicVariables0);
}",0,
project,0,test0762562,"public void test0762562() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0762564,"public void test0762564() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    assertNotNull(qName0);
}",0,
project,0,test0762565,"public void test0762565() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0762566,"public void test0762566() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    assertEquals(""(F"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0762567,"public void test0762567() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    assertEquals(""(F"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0762568,"public void test0762568() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,
project,0,test0762569,"public void test0762569() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0762570,"public void test0762570() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(qName0.getPrefix());
}",0,
project,0,test0762571,"public void test0762571() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""(F"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0762572,"public void test0762572() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""(F"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0762573,"public void test0762573() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0762574,"public void test0762574() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test0762575,"public void test0762575() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0762576,"public void test0762576() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0762577,"public void test0762577() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0762578,"public void test0762578() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0762579,"public void test0762579() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0762582,"public void test0762582() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) ""substring-before"");
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    // Undeclared exception!
    try {
        variablePointer0.attributeIterator(qName0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: '(F'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",0,
project,0,test0772634,"public void test0772634() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertNotNull(beanPointer0);
}",0,
project,0,test0772636,"public void test0772636() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0772637,"public void test0772637() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertEquals(""<<unknown namespace>>"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0772638,"public void test0772638() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertEquals(""<<unknown namespace>>:<<unknown namespace>>"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0772639,"public void test0772639() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertEquals(""<<unknown namespace>>"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0772640,"public void test0772640() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0772641,"public void test0772641() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0772642,"public void test0772642() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0772643,"public void test0772643() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0772644,"public void test0772644() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test0772645,"public void test0772645() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0772646,"public void test0772646() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test0772647,"public void test0772647() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0772648,"public void test0772648() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test0772649,"public void test0772649() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0772650,"public void test0772650() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0772651,"public void test0772651() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0772652,"public void test0772652() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isCollection());
}",0,assertFalse(beanPointer0.isCollection())
project,0,test0772653,"public void test0772653() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(1, beanPointer0.getIndex())"
project,0,test0772654,"public void test0772654() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0772655,"public void test0772655() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0772659,"public void test0772659() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertNotNull(beanPointer1);
}",0,assertNotNull(beanPointer1)
project,0,test0772660,"public void test0772660() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertTrue(beanPointer1.equals((Object) beanPointer0));
}",0,
project,0,test0772664,"public void test0772664() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0772665,"public void test0772665() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertEquals(""<<unknown namespace>>"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0772666,"public void test0772666() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertEquals(""<<unknown namespace>>:<<unknown namespace>>"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0772667,"public void test0772667() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertEquals(""<<unknown namespace>>"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0772668,"public void test0772668() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0772669,"public void test0772669() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0772670,"public void test0772670() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0772671,"public void test0772671() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test0772672,"public void test0772672() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test0772673,"public void test0772673() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0772674,"public void test0772674() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test0772675,"public void test0772675() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0772676,"public void test0772676() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(beanPointer0.isRoot());
}",0,assertFalse(beanPointer0.isRoot())
project,0,test0772677,"public void test0772677() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0772678,"public void test0772678() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0772679,"public void test0772679() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0772680,"public void test0772680() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(beanPointer0.isCollection());
}",0,
project,0,test0772681,"public void test0772681() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,
project,0,test0772682,"public void test0772682() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0772683,"public void test0772683() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0772684,"public void test0772684() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(beanPointer1.isAttribute());
}",0,
project,0,test0772685,"public void test0772685() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(beanPointer1.isCollection());
}",0,
project,0,test0772686,"public void test0772686() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertTrue(beanPointer1.isNode());
}",0,assertFalse(beanPointer1.isNode())
project,0,test0772687,"public void test0772687() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0772688,"public void test0772688() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertNull(beanPointer1.getNamespaceURI());
}",0,assertNotNull(beanPointer1.getNamespaceURI())
project,0,test0772689,"public void test0772689() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(beanPointer1.isRoot());
}",0,assertFalse(beanPointer1.isRoot())
project,0,test0772690,"public void test0772690() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
}",0,"assertEquals(0, beanPointer1.getIndex())"
project,0,test0772691,"public void test0772691() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertEquals(1, beanPointer1.getLength());
}",0,"assertEquals(1, beanPointer1.getLength())"
project,0,test0772692,"public void test0772692() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.clone();
    assertFalse(beanPointer1.isContainer());
}",0,assertTrue(beanPointer1.isContainer())
project,0,test0782714,"public void test0782714() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertNotNull(variablePointer1);
}",0,assertNotNull(variablePointer1)
project,0,test0782715,"public void test0782715() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertTrue(variablePointer1.equals((Object) variablePointer0));
}",0,
project,0,test0782718,"public void test0782718() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0782719,"public void test0782719() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0782720,"public void test0782720() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0782721,"public void test0782721() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0782722,"public void test0782722() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0782723,"public void test0782723() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0782724,"public void test0782724() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0782725,"public void test0782725() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test0782726,"public void test0782726() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0782727,"public void test0782727() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0782728,"public void test0782728() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertTrue(variablePointer1.isActual());
}",0,assertTrue(variablePointer1.isActual())
project,0,test0782729,"public void test0782729() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertNull(variablePointer1.getNamespaceURI());
}",0,assertNotNull(variablePointer1.getNamespaceURI())
project,0,test0782730,"public void test0782730() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertTrue(variablePointer1.isContainer());
}",0,assertTrue(variablePointer1.isContainer())
project,0,test0782731,"public void test0782731() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertTrue(variablePointer1.isRoot());
}",0,
project,0,test0782732,"public void test0782732() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertFalse(variablePointer1.isNode());
}",0,
project,0,test0782733,"public void test0782733() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertFalse(variablePointer1.isAttribute());
}",0,assertTrue(variablePointer1.isAttribute())
project,0,test0782734,"public void test0782734() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.clone();
    assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
}",0,
project,0,test0792760,"public void test0792760() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0792761,"public void test0792761() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0792762,"public void test0792762() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0792763,"public void test0792763() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0792764,"public void test0792764() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0792765,"public void test0792765() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0792766,"public void test0792766() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0792767,"public void test0792767() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0792768,"public void test0792768() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0792769,"public void test0792769() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0792782,"public void test0792782() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    Locale locale1 = variablePointer0.getLocale();
    assertNotNull(locale1);
}",0,
project,0,test0792784,"public void test0792784() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    Locale locale1 = variablePointer0.getLocale();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0792785,"public void test0792785() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    Locale locale1 = variablePointer0.getLocale();
    assertEquals("""", qName0.toString());
}",0,
project,0,test0792786,"public void test0792786() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    Locale locale1 = variablePointer0.getLocale();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0792787,"public void test0792787() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    Locale locale1 = variablePointer0.getLocale();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0792788,"public void test0792788() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    Locale locale1 = variablePointer0.getLocale();
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0792789,"public void test0792789() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    Locale locale1 = variablePointer0.getLocale();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0792790,"public void test0792790() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    Locale locale1 = variablePointer0.getLocale();
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0792791,"public void test0792791() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    Locale locale1 = variablePointer0.getLocale();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0792792,"public void test0792792() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    Locale locale1 = variablePointer0.getLocale();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0792793,"public void test0792793() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.GERMANY;
    variablePointer0.locale = locale0;
    Locale locale1 = variablePointer0.getLocale();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0802801,"public void test0802801() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    assertNotNull(qName0);
}",0,
project,0,test0802802,"public void test0802802() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    assertEquals(""h"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0802803,"public void test0802803() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    assertEquals(""h:h"", qName0.toString());
}",0,
project,0,test0802804,"public void test0802804() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    assertEquals(""h"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0802805,"public void test0802805() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0802806,"public void test0802806() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""h"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0802807,"public void test0802807() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""h:h"", qName0.toString());
}",0,
project,0,test0802808,"public void test0802808() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""h"", qName0.getPrefix());
}",0,
project,0,test0802809,"public void test0802809() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0802810,"public void test0802810() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0802811,"public void test0802811() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0802812,"public void test0802812() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0802813,"public void test0802813() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0802814,"public void test0802814() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0802815,"public void test0802815() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0802817,"public void test0802817() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertNotNull(nodePointer0);
}",0,assertNotNull(nodePointer0)
project,0,test0802818,"public void test0802818() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals(""h"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0802819,"public void test0802819() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals(""h:h"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0802820,"public void test0802820() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals(""h"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0802821,"public void test0802821() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0802822,"public void test0802822() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0802823,"public void test0802823() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0802824,"public void test0802824() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0802825,"public void test0802825() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0802826,"public void test0802826() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0802827,"public void test0802827() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0802830,"public void test0802830() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    assertNotNull(processingInstructionTest0);
}",0,assertNotNull(processingInstructionTest0)
project,0,test0802831,"public void test0802831() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    assertEquals(""h"", processingInstructionTest0.getTarget());
}",0,assertNotNull(processingInstructionTest0.getTarget())
project,0,test0802832,"public void test0802832() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    boolean boolean0 = nodePointer0.testNode(processingInstructionTest0);
    assertFalse(boolean0);
}",0,
project,0,test0802833,"public void test0802833() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    boolean boolean0 = nodePointer0.testNode(processingInstructionTest0);
    assertEquals(""h"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0802834,"public void test0802834() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    boolean boolean0 = nodePointer0.testNode(processingInstructionTest0);
    assertEquals(""h:h"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0802835,"public void test0802835() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    boolean boolean0 = nodePointer0.testNode(processingInstructionTest0);
    assertEquals(""h"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0802836,"public void test0802836() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    boolean boolean0 = nodePointer0.testNode(processingInstructionTest0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0802837,"public void test0802837() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    boolean boolean0 = nodePointer0.testNode(processingInstructionTest0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0802838,"public void test0802838() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    boolean boolean0 = nodePointer0.testNode(processingInstructionTest0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0802839,"public void test0802839() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    boolean boolean0 = nodePointer0.testNode(processingInstructionTest0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0802840,"public void test0802840() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    boolean boolean0 = nodePointer0.testNode(processingInstructionTest0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0802841,"public void test0802841() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    boolean boolean0 = nodePointer0.testNode(processingInstructionTest0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0802842,"public void test0802842() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    boolean boolean0 = nodePointer0.testNode(processingInstructionTest0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0802843,"public void test0802843() throws Throwable {
    QName qName0 = new QName(""h"", ""h"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""h"");
    boolean boolean0 = nodePointer0.testNode(processingInstructionTest0);
    assertEquals(""h"", processingInstructionTest0.getTarget());
}",0,assertNotNull(processingInstructionTest0.getTarget())
project,0,test0812862,"public void test0812862() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    assertNotNull(qName1);
}",0,
project,0,test0812863,"public void test0812863() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    assertFalse(qName1.equals((Object) qName0));
}",0,
project,0,test0812864,"public void test0812864() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    assertEquals(""<<unknown namespace>>"", qName1.getName());
}",0,assertNotNull(qName1.getName())
project,0,test0812865,"public void test0812865() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    assertEquals(""Was expecting one of:"", qName1.getPrefix());
}",0,assertNotNull(qName1.getPrefix())
project,0,test0812866,"public void test0812866() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    assertEquals(""Was expecting one of::<<unknown namespace>>"", qName1.toString());
}",0,assertNotNull(qName1.toString())
project,0,test0812867,"public void test0812867() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    assertNotNull(nodeNameTest0);
}",0,assertNotNull(nodeNameTest0)
project,0,test0812868,"public void test0812868() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    assertFalse(qName1.equals((Object) qName0));
}",0,
project,0,test0812869,"public void test0812869() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    assertEquals(""<<unknown namespace>>"", qName1.getName());
}",0,assertNotNull(qName1.getName())
project,0,test0812870,"public void test0812870() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    assertEquals(""Was expecting one of:"", qName1.getPrefix());
}",0,assertNotNull(qName1.getPrefix())
project,0,test0812871,"public void test0812871() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    assertEquals(""Was expecting one of::<<unknown namespace>>"", qName1.toString());
}",0,assertNotNull(qName1.toString())
project,0,test0812872,"public void test0812872() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    assertEquals(""Was expecting one of::<<unknown namespace>>"", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0812873,"public void test0812873() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0812874,"public void test0812874() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    assertFalse(nodeNameTest0.isWildcard());
}",0,
project,0,test0812875,"public void test0812875() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertNotNull(nodePointer0);
}",0,assertNotNull(nodePointer0)
project,0,test0812876,"public void test0812876() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(qName0.equals((Object) qName1));
}",0,
project,0,test0812878,"public void test0812878() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0812879,"public void test0812879() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0812880,"public void test0812880() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0812881,"public void test0812881() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0812882,"public void test0812882() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test0812883,"public void test0812883() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0812884,"public void test0812884() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0812885,"public void test0812885() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test0812886,"public void test0812886() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0812887,"public void test0812887() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0812890,"public void test0812890() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertFalse(boolean0);
}",0,
project,0,test0812891,"public void test0812891() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertFalse(qName0.equals((Object) qName1));
}",0,
project,0,test0812892,"public void test0812892() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertFalse(qName1.equals((Object) qName0));
}",0,
project,0,test0812895,"public void test0812895() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0812896,"public void test0812896() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0812897,"public void test0812897() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0812898,"public void test0812898() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0812899,"public void test0812899() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test0812900,"public void test0812900() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0812901,"public void test0812901() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0812902,"public void test0812902() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0812903,"public void test0812903() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0812904,"public void test0812904() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0812905,"public void test0812905() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertEquals(""<<unknown namespace>>"", qName1.getName());
}",0,assertNotNull(qName1.getName())
project,0,test0812906,"public void test0812906() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertEquals(""Was expecting one of:"", qName1.getPrefix());
}",0,assertNotNull(qName1.getPrefix())
project,0,test0812907,"public void test0812907() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertEquals(""Was expecting one of::<<unknown namespace>>"", qName1.toString());
}",0,assertNotNull(qName1.toString())
project,0,test0812908,"public void test0812908() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertEquals(""Was expecting one of::<<unknown namespace>>"", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0812909,"public void test0812909() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0812910,"public void test0812910() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertTrue(nodeNameTest0.isWildcard())
project,0,test0822929,"public void test0822929() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertNotNull(nodeNameTest0);
}",0,assertNotNull(nodeNameTest0)
project,0,test0822930,"public void test0822930() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0822931,"public void test0822931() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0822932,"public void test0822932() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0822933,"public void test0822933() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0822934,"public void test0822934() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertFalse(nodeNameTest0.isWildcard())
project,0,test0822935,"public void test0822935() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0822936,"public void test0822936() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertNotNull(nodePointer0);
}",0,assertNotNull(nodePointer0)
project,0,test0822937,"public void test0822937() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0822938,"public void test0822938() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0822939,"public void test0822939() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0822940,"public void test0822940() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0822941,"public void test0822941() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test0822942,"public void test0822942() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0822943,"public void test0822943() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0822944,"public void test0822944() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0822945,"public void test0822945() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0822946,"public void test0822946() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0822949,"public void test0822949() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertTrue(boolean0);
}",0,
project,0,test0822950,"public void test0822950() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0822951,"public void test0822951() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0822952,"public void test0822952() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0822953,"public void test0822953() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0822954,"public void test0822954() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0822955,"public void test0822955() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0822956,"public void test0822956() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0822957,"public void test0822957() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0822958,"public void test0822958() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0822959,"public void test0822959() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0822960,"public void test0822960() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0822961,"public void test0822961() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,assertFalse(nodeNameTest0.isWildcard())
project,0,test0822962,"public void test0822962() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    boolean boolean0 = nodePointer0.testNode(nodeNameTest0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0833041,"public void test0833041() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertFalse(boolean0);
}",0,
project,0,test0833043,"public void test0833043() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0833044,"public void test0833044() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertEquals(""<<unknown namespace>>"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0833045,"public void test0833045() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertEquals(""<<unknown namespace>>"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0833046,"public void test0833046() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertEquals(""<<unknown namespace>>:<<unknown namespace>>"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0833047,"public void test0833047() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0833048,"public void test0833048() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0833049,"public void test0833049() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0833050,"public void test0833050() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test0833051,"public void test0833051() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test0833052,"public void test0833052() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0833053,"public void test0833053() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0833054,"public void test0833054() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0833055,"public void test0833055() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test0833056,"public void test0833056() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertFalse(beanPointer0.isRoot());
}",0,assertFalse(beanPointer0.isRoot())
project,0,test0833057,"public void test0833057() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0833058,"public void test0833058() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0833059,"public void test0833059() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertFalse(beanPointer0.isCollection());
}",0,
project,0,test0833060,"public void test0833060() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0833061,"public void test0833061() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test0833062,"public void test0833062() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(1, beanPointer0.getIndex())"
project,0,test0833063,"public void test0833063() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""<<unknown namespace>>"", ""<<unknown namespace>>"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) nodeTypeTest0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    boolean boolean0 = beanPointer0.testNode(nodeTypeTest0);
    assertFalse(beanPointer0.isContainer());
}",0,
project,0,test0843083,"public void test0843083() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertNotNull(nodePointer0);
}",0,assertNotNull(nodePointer0)
project,0,test0843084,"public void test0843084() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0843085,"public void test0843085() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0843086,"public void test0843086() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0843087,"public void test0843087() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0843088,"public void test0843088() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0843089,"public void test0843089() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0843090,"public void test0843090() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0843091,"public void test0843091() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0843092,"public void test0843092() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0843093,"public void test0843093() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0843096,"public void test0843096() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    // Undeclared exception!
    try {
        nodePointer0.getRootNode();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable:
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test0853177,"public void test0853177() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertNotNull(beanPointer1);
}",0,assertNotNull(beanPointer1)
project,0,test0853181,"public void test0853181() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertEquals(749, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0853182,"public void test0853182() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0853183,"public void test0853183() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0853184,"public void test0853184() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertEquals(""@{g}t"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0853185,"public void test0853185() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertEquals(""@{g}t"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0853186,"public void test0853186() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0853187,"public void test0853187() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0853188,"public void test0853188() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0853189,"public void test0853189() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0853190,"public void test0853190() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0853191,"public void test0853191() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0853192,"public void test0853192() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0853193,"public void test0853193() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(beanPointer0.isRoot());
}",0,
project,0,test0853194,"public void test0853194() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertTrue(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0853195,"public void test0853195() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test0853196,"public void test0853196() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0853197,"public void test0853197() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(1, beanPointer0.getIndex())"
project,0,test0853198,"public void test0853198() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0853199,"public void test0853199() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(beanPointer0.isContainer());
}",0,
project,0,test0853200,"public void test0853200() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(beanPointer0.isCollection());
}",0,
project,0,test0853201,"public void test0853201() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0853202,"public void test0853202() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
}",0,"assertEquals(0, beanPointer1.getIndex())"
project,0,test0853203,"public void test0853203() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(beanPointer1.isAttribute());
}",0,assertTrue(beanPointer1.isAttribute())
project,0,test0853204,"public void test0853204() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
}",0,assertTrue(beanPointer1.isDynamicPropertyDeclarationSupported())
project,0,test0853205,"public void test0853205() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(beanPointer1.isRoot());
}",0,
project,0,test0853206,"public void test0853206() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(beanPointer1.isCollection());
}",0,assertTrue(beanPointer1.isCollection())
project,0,test0853207,"public void test0853207() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertTrue(beanPointer1.isNode());
}",0,
project,0,test0853208,"public void test0853208() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertNull(beanPointer1.getNamespaceURI());
}",0,assertNotNull(beanPointer1.getNamespaceURI())
project,0,test0853209,"public void test0853209() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertEquals(1, beanPointer1.getLength());
}",0,"assertEquals(1, beanPointer1.getLength())"
project,0,test0853210,"public void test0853210() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(749);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""@{g}t"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    VariablePointer variablePointer1 = (VariablePointer) variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
    BeanPointer beanPointer0 = (BeanPointer) variablePointer0.getImmediateValuePointer();
    BeanPointer beanPointer1 = (BeanPointer) beanPointer0.getValuePointer();
    assertFalse(beanPointer1.isContainer());
}",0,
project,0,test0863246,"public void test0863246() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test0863248,"public void test0863248() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertEquals(""zn>.Dq;=2q0U!|^pCV:"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0863249,"public void test0863249() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertEquals(""zn>.Dq;=2q0U!|^pCV"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0863250,"public void test0863250() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0863257,"public void test0863257() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertTrue(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test0863258,"public void test0863258() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertFalse(beanPointer0.isCollection());
}",0,assertFalse(beanPointer0.isCollection())
project,0,test0863259,"public void test0863259() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0863260,"public void test0863260() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0863261,"public void test0863261() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0863262,"public void test0863262() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test0863263,"public void test0863263() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test0863264,"public void test0863264() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0863265,"public void test0863265() throws Throwable {
    QName qName0 = new QName(""zn>.Dq;=2q0U!|^pCV"", """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    String string0 = (String) beanPointer0.getValue();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0873267,"public void test0873267() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    assertNotNull(qName0);
}",1,
project,0,test0873268,"public void test0873268() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    assertNull(qName0.getPrefix());
}",0,
project,0,test0873269,"public void test0873269() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    assertEquals(""$;g;e"", qName0.toString());
}",0,
project,0,test0873270,"public void test0873270() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    assertEquals(""$;g;e"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0873271,"public void test0873271() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertNotNull(nullPointer0);
}",0,
project,0,test0873272,"public void test0873272() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0873273,"public void test0873273() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertEquals(""$;g;e"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0873274,"public void test0873274() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertEquals(""$;g;e"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0873275,"public void test0873275() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertFalse(nullPointer0.isAttribute());
}",0,assertTrue(nullPointer0.isAttribute())
project,0,test0873276,"public void test0873276() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
}",0,"assertEquals(0, nullPointer0.getIndex())"
project,0,test0873277,"public void test0873277() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertFalse(nullPointer0.isContainer());
}",0,assertTrue(nullPointer0.isContainer())
project,0,test0873278,"public void test0873278() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertTrue(nullPointer0.isRoot());
}",0,
project,0,test0873279,"public void test0873279() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertFalse(nullPointer0.isActual());
}",0,assertTrue(nullPointer0.isActual())
project,0,test0873280,"public void test0873280() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertTrue(nullPointer0.isLeaf());
}",0,assertTrue(nullPointer0.isLeaf())
project,0,test0873281,"public void test0873281() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertTrue(nullPointer0.isNode());
}",0,
project,0,test0873282,"public void test0873282() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertNull(nullPointer0.getNamespaceURI());
}",0,assertNotNull(nullPointer0.getNamespaceURI())
project,0,test0873283,"public void test0873283() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertFalse(nullPointer0.isCollection());
}",0,assertTrue(nullPointer0.isCollection())
project,0,test0873284,"public void test0873284() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertEquals(0, nullPointer0.getLength());
}",0,"assertEquals(0, nullPointer0.getLength())"
project,0,test0873285,"public void test0873285() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0873287,"public void test0873287() throws Throwable {
    QName qName0 = new QName(""$;g;e"");
    NullPointer nullPointer0 = (NullPointer) NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
    // Undeclared exception!
    try {
        nullPointer0.getPointerByID((JXPathContext) null, ""/"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",0,
project,0,test0883299,"public void test0883299() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertNotNull(beanPointer0);
}",0,
project,0,test0883300,"public void test0883300() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals("":"", qName0.toString());
}",0,
project,0,test0883301,"public void test0883301() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals("""", qName0.getName());
}",0,
project,0,test0883302,"public void test0883302() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals("""", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0883309,"public void test0883309() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertFalse(beanPointer0.isContainer());
}",0,
project,0,test0883310,"public void test0883310() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertTrue(beanPointer0.isRoot());
}",0,
project,0,test0883311,"public void test0883311() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,
project,0,test0883312,"public void test0883312() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0883313,"public void test0883313() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertFalse(beanPointer0.isCollection());
}",0,
project,0,test0883314,"public void test0883314() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0883315,"public void test0883315() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0883316,"public void test0883316() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0883317,"public void test0883317() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertTrue(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0883319,"public void test0883319() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertEquals(Integer.MIN_VALUE, int0);
}",0,"assertEquals(0, int0)"
project,0,test0883320,"public void test0883320() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertEquals("":"", qName0.toString());
}",0,
project,0,test0883321,"public void test0883321() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertEquals("""", qName0.getName());
}",0,
project,0,test0883322,"public void test0883322() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertEquals("""", qName0.getPrefix());
}",0,
project,0,test0883329,"public void test0883329() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertFalse(beanPointer0.isContainer());
}",0,
project,0,test0883330,"public void test0883330() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertTrue(beanPointer0.isRoot());
}",0,
project,0,test0883331,"public void test0883331() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,
project,0,test0883332,"public void test0883332() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0883333,"public void test0883333() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertFalse(beanPointer0.isCollection());
}",0,assertFalse(beanPointer0.isCollection())
project,0,test0883334,"public void test0883334() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0883335,"public void test0883335() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0883336,"public void test0883336() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test0883337,"public void test0883337() throws Throwable {
    QName qName0 = new QName("""", """");
    Locale locale0 = Locale.GERMANY;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    int int0 = beanPointer0.getIndex();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertTrue(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0893356,"public void test0893356() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    // Undeclared exception!
    try {
        variablePointer0.getNode();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: 'Vzm&]`p9tkIVzH'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}",0,
project,0,test0903366,"public void test0903366() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertNotNull(nodePointer0);
}",0,
project,0,test0903367,"public void test0903367() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0903368,"public void test0903368() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0903369,"public void test0903369() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0903370,"public void test0903370() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0903371,"public void test0903371() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0903372,"public void test0903372() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0903373,"public void test0903373() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0903376,"public void test0903376() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    boolean boolean0 = nodePointer0.isContainer();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test0903377,"public void test0903377() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    boolean boolean0 = nodePointer0.isContainer();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0903378,"public void test0903378() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    boolean boolean0 = nodePointer0.isContainer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0903379,"public void test0903379() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    boolean boolean0 = nodePointer0.isContainer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0903380,"public void test0903380() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    boolean boolean0 = nodePointer0.isContainer();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0903381,"public void test0903381() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    boolean boolean0 = nodePointer0.isContainer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0903382,"public void test0903382() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    boolean boolean0 = nodePointer0.isContainer();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0903383,"public void test0903383() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    boolean boolean0 = nodePointer0.isContainer();
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0913386,"public void test0913386() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    assertNotNull(qName0);
}",1,
project,0,test0913387,"public void test0913387() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0913388,"public void test0913388() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    assertEquals("",e2Z#_fstZ9RYK_*"", qName0.toString());
}",0,
project,0,test0913389,"public void test0913389() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    assertEquals("",e2Z#_fstZ9RYK_*"", qName0.getName());
}",0,
project,0,test0913390,"public void test0913390() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0913391,"public void test0913391() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0913392,"public void test0913392() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("",e2Z#_fstZ9RYK_*"", qName0.toString());
}",0,
project,0,test0913393,"public void test0913393() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals("",e2Z#_fstZ9RYK_*"", qName0.getName());
}",0,
project,0,test0913394,"public void test0913394() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0913395,"public void test0913395() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0913396,"public void test0913396() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0913397,"public void test0913397() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0913398,"public void test0913398() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0913399,"public void test0913399() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0913400,"public void test0913400() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0913402,"public void test0913402() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    String string0 = variablePointer0.getNamespaceURI((String) null);
    assertNull(string0);
}",0,
project,0,test0913403,"public void test0913403() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    String string0 = variablePointer0.getNamespaceURI((String) null);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0913404,"public void test0913404() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    String string0 = variablePointer0.getNamespaceURI((String) null);
    assertEquals("",e2Z#_fstZ9RYK_*"", qName0.toString());
}",0,
project,0,test0913405,"public void test0913405() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    String string0 = variablePointer0.getNamespaceURI((String) null);
    assertEquals("",e2Z#_fstZ9RYK_*"", qName0.getName());
}",0,
project,0,test0913406,"public void test0913406() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    String string0 = variablePointer0.getNamespaceURI((String) null);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0913407,"public void test0913407() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    String string0 = variablePointer0.getNamespaceURI((String) null);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0913408,"public void test0913408() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    String string0 = variablePointer0.getNamespaceURI((String) null);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0913409,"public void test0913409() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    String string0 = variablePointer0.getNamespaceURI((String) null);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test0913410,"public void test0913410() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    String string0 = variablePointer0.getNamespaceURI((String) null);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0913411,"public void test0913411() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    String string0 = variablePointer0.getNamespaceURI((String) null);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0913412,"public void test0913412() throws Throwable {
    QName qName0 = new QName("",e2Z#_fstZ9RYK_*"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    String string0 = variablePointer0.getNamespaceURI((String) null);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0923455,"public void test0923455() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertNull(nodeIterator0);
}",0,assertNotNull(nodeIterator0)
project,0,test0923456,"public void test0923456() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0923457,"public void test0923457() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0923458,"public void test0923458() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0923459,"public void test0923459() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test0923460,"public void test0923460() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0923461,"public void test0923461() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertFalse(nodeNameTest0.isWildcard());
}",0,
project,0,test0923468,"public void test0923468() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0923469,"public void test0923469() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test0923470,"public void test0923470() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertTrue(beanPointer0.isRoot());
}",0,
project,0,test0923471,"public void test0923471() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0923472,"public void test0923472() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertFalse(beanPointer0.isCollection());
}",0,assertFalse(beanPointer0.isCollection())
project,0,test0923473,"public void test0923473() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0923474,"public void test0923474() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0923475,"public void test0923475() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0923476,"public void test0923476() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
    NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(1, beanPointer0.getIndex())"
project,0,test0933495,"public void test0933495() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertNotNull(beanPointer0);
}",0,
project,0,test0933496,"public void test0933496() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0933497,"public void test0933497() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0933498,"public void test0933498() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0933499,"public void test0933499() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0933500,"public void test0933500() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0933501,"public void test0933501() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0933502,"public void test0933502() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0933503,"public void test0933503() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0933504,"public void test0933504() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0933505,"public void test0933505() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0933506,"public void test0933506() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0933507,"public void test0933507() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isCollection());
}",0,assertTrue(beanPointer0.isCollection())
project,0,test0933508,"public void test0933508() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0933509,"public void test0933509() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0933510,"public void test0933510() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0933511,"public void test0933511() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0933512,"public void test0933512() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isRoot());
}",0,
project,0,test0933513,"public void test0933513() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0933514,"public void test0933514() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0933517,"public void test0933517() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertNotNull(variablePointer1);
}",0,assertNotNull(variablePointer1)
project,0,test0933520,"public void test0933520() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0933521,"public void test0933521() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0933522,"public void test0933522() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertEquals(""Vzm&]`p9tkIVzH"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0933523,"public void test0933523() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0933524,"public void test0933524() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0933525,"public void test0933525() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0933526,"public void test0933526() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0933527,"public void test0933527() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0933528,"public void test0933528() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0933529,"public void test0933529() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0933530,"public void test0933530() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0933531,"public void test0933531() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertFalse(beanPointer0.isCollection());
}",0,assertTrue(beanPointer0.isCollection())
project,0,test0933532,"public void test0933532() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0933533,"public void test0933533() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0933534,"public void test0933534() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0933535,"public void test0933535() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0933536,"public void test0933536() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertFalse(beanPointer0.isRoot());
}",0,assertFalse(beanPointer0.isRoot())
project,0,test0933537,"public void test0933537() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0933538,"public void test0933538() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0933539,"public void test0933539() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertTrue(variablePointer1.isContainer());
}",0,assertTrue(variablePointer1.isContainer())
project,0,test0933540,"public void test0933540() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertFalse(variablePointer1.isAttribute());
}",0,assertTrue(variablePointer1.isAttribute())
project,0,test0933541,"public void test0933541() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertTrue(variablePointer1.isActual());
}",0,assertTrue(variablePointer1.isActual())
project,0,test0933542,"public void test0933542() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertNull(variablePointer1.getNamespaceURI());
}",0,assertNotNull(variablePointer1.getNamespaceURI())
project,0,test0933543,"public void test0933543() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertFalse(variablePointer1.isNode());
}",0,
project,0,test0933544,"public void test0933544() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertTrue(variablePointer1.isRoot());
}",0,assertFalse(variablePointer1.isRoot())
project,0,test0933545,"public void test0933545() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    VariablePointer variablePointer1 = (VariablePointer) beanPointer0.getImmediateParentPointer();
    assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
}",0,
project,0,test0943567,"public void test0943567() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    String string0 = variablePointer0.toString();
    assertEquals(""$null"", string0);
}",0,assertNotNull(string0)
project,0,test0943569,"public void test0943569() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    String string0 = variablePointer0.toString();
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0943570,"public void test0943570() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    String string0 = variablePointer0.toString();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0943571,"public void test0943571() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    String string0 = variablePointer0.toString();
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0943572,"public void test0943572() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    String string0 = variablePointer0.toString();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0943573,"public void test0943573() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    String string0 = variablePointer0.toString();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0943574,"public void test0943574() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    String string0 = variablePointer0.toString();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0943575,"public void test0943575() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    String string0 = variablePointer0.toString();
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test0943576,"public void test0943576() throws Throwable {
    Object object0 = new Object();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext(object0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    String string0 = variablePointer0.toString();
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test0953580,"public void test0953580() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0953581,"public void test0953581() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    assertEquals(""ffkD7dzT"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0953582,"public void test0953582() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    assertEquals(""false()"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0953583,"public void test0953583() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    assertEquals(""false():ffkD7dzT"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0953584,"public void test0953584() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0953585,"public void test0953585() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""ffkD7dzT"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0953586,"public void test0953586() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""false()"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0953587,"public void test0953587() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""false():ffkD7dzT"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0953588,"public void test0953588() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0953589,"public void test0953589() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0953590,"public void test0953590() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0953591,"public void test0953591() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0953592,"public void test0953592() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0953593,"public void test0953593() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0953594,"public void test0953594() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0953596,"public void test0953596() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertNotNull(beanPointer0);
}",0,
project,0,test0953597,"public void test0953597() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertEquals(""ffkD7dzT"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0953598,"public void test0953598() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertEquals(""false()"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0953599,"public void test0953599() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertEquals(""false():ffkD7dzT"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0953600,"public void test0953600() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0953601,"public void test0953601() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0953602,"public void test0953602() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0953603,"public void test0953603() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertTrue(variablePointer0.isActual());
}",0,assertFalse(variablePointer0.isActual())
project,0,test0953604,"public void test0953604() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0953605,"public void test0953605() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0953606,"public void test0953606() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0953607,"public void test0953607() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0953608,"public void test0953608() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test0953609,"public void test0953609() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0953610,"public void test0953610() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0953611,"public void test0953611() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertFalse(beanPointer0.isRoot());
}",0,
project,0,test0953612,"public void test0953612() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertFalse(beanPointer0.isCollection());
}",0,assertFalse(beanPointer0.isCollection())
project,0,test0953613,"public void test0953613() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0953614,"public void test0953614() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0953615,"public void test0953615() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0953618,"public void test0953618() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertEquals(""ffkD7dzT"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0953619,"public void test0953619() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertEquals(""false()"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0953620,"public void test0953620() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertEquals(""false():ffkD7dzT"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0953621,"public void test0953621() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0953622,"public void test0953622() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0953623,"public void test0953623() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0953624,"public void test0953624() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0953625,"public void test0953625() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0953626,"public void test0953626() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0953627,"public void test0953627() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertTrue(variablePointer0.isContainer());
}",0,
project,0,test0953628,"public void test0953628() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0953629,"public void test0953629() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0953630,"public void test0953630() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0953631,"public void test0953631() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0953632,"public void test0953632() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertFalse(beanPointer0.isRoot());
}",0,
project,0,test0953633,"public void test0953633() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertFalse(beanPointer0.isCollection());
}",0,assertFalse(beanPointer0.isCollection())
project,0,test0953634,"public void test0953634() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0953635,"public void test0953635() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported())
project,0,test0953636,"public void test0953636() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0953637,"public void test0953637() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""false()"", ""ffkD7dzT"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(variablePointer0, qName0, ""ffkD7dzT"");
    beanPointer0.setNamespaceResolver((NamespaceResolver) null);
    assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
}",0,
project,0,test0963649,"public void test0963649() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    assertNotNull(qName0);
}",0,
project,0,test0963650,"public void test0963650() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0963651,"public void test0963651() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    assertEquals(""LPBVL"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0963652,"public void test0963652() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    assertEquals(""LPBVL"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0963653,"public void test0963653() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNotNull(variablePointer0);
}",0,
project,0,test0963654,"public void test0963654() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(3122, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0963655,"public void test0963655() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0963656,"public void test0963656() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0963657,"public void test0963657() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""LPBVL"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0963658,"public void test0963658() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(""LPBVL"", qName0.getName());
}",0,
project,0,test0963659,"public void test0963659() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0963660,"public void test0963660() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0963661,"public void test0963661() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test0963662,"public void test0963662() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0963663,"public void test0963663() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0963664,"public void test0963664() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test0963665,"public void test0963665() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0963668,"public void test0963668() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test0963669,"public void test0963669() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertEquals(3122, nodeTypeTest0.getNodeType());
}",0,"assertEquals(1, nodeTypeTest0.getNodeType())"
project,0,test0963670,"public void test0963670() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0963671,"public void test0963671() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0963672,"public void test0963672() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertEquals(""LPBVL"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0963673,"public void test0963673() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertEquals(""LPBVL"", qName0.getName());
}",0,
project,0,test0963674,"public void test0963674() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertTrue(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0963675,"public void test0963675() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0963676,"public void test0963676() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test0963677,"public void test0963677() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0963678,"public void test0963678() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0963679,"public void test0963679() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0963680,"public void test0963680() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nodeTypeTest0);
    BasicVariables basicVariables0 = (BasicVariables) jXPathContextReferenceImpl0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    int int0 = variablePointer0.compareTo(variablePointer0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0973692,"public void test0973692() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertNotNull(nodePointer0);
}",0,assertNotNull(nodePointer0)
project,0,test0973693,"public void test0973693() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0973694,"public void test0973694() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0973695,"public void test0973695() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test0973696,"public void test0973696() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0973697,"public void test0973697() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0973698,"public void test0973698() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0973699,"public void test0973699() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0973702,"public void test0973702() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertNotNull(beanPointer0);
}",0,
project,0,test0973703,"public void test0973703() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0973704,"public void test0973704() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0973705,"public void test0973705() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0973706,"public void test0973706() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0973707,"public void test0973707() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0973708,"public void test0973708() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0973709,"public void test0973709() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0973710,"public void test0973710() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0973711,"public void test0973711() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test0973712,"public void test0973712() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0973713,"public void test0973713() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test0973714,"public void test0973714() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0973715,"public void test0973715() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertFalse(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test0973716,"public void test0973716() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertFalse(beanPointer0.isCollection());
}",0,assertTrue(beanPointer0.isCollection())
project,0,test0973717,"public void test0973717() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0973718,"public void test0973718() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0973722,"public void test0973722() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,assertNotNull(jXPathContextReferenceImpl0)
project,0,test0973723,"public void test0973723() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test0973724,"public void test0973724() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0973725,"public void test0973725() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test0973726,"public void test0973726() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0973727,"public void test0973727() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0973728,"public void test0973728() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0973729,"public void test0973729() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0973730,"public void test0973730() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0973733,"public void test0973733() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    QName qName0 = new QName(""<<unknown namespace>>"");
    assertNotNull(qName0);
}",0,
project,0,test0973734,"public void test0973734() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    QName qName0 = new QName(""<<unknown namespace>>"");
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0973735,"public void test0973735() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    QName qName0 = new QName(""<<unknown namespace>>"");
    assertEquals(""<<unknown namespace>>"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0973736,"public void test0973736() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    QName qName0 = new QName(""<<unknown namespace>>"");
    assertEquals(""<<unknown namespace>>"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0973737,"public void test0973737() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newChildNodePointer(nodePointer0, (QName) null, variablePointer0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) variablePointer0);
    QName qName0 = new QName(""<<unknown namespace>>"");
    // Undeclared exception!
    try {
        beanPointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot create an attribute for path $null/null/@<<unknown namespace>>, operation is not allowed for this type of node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",1,
project,0,test0983738,"public void test0983738() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    assertNotNull(qName0);
}",0,assertNotNull(qName0)
project,0,test0983739,"public void test0983739() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    assertEquals(""T-9'|*M(xF["", qName0.getName());
}",0,
project,0,test0983740,"public void test0983740() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    assertEquals(""T-9'|*M(xF["", qName0.getPrefix());
}",0,
project,0,test0983741,"public void test0983741() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    assertEquals(""T-9'|*M(xF[:T-9'|*M(xF["", qName0.toString());
}",0,
project,0,test0983742,"public void test0983742() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test0983743,"public void test0983743() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""T-9'|*M(xF["", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0983744,"public void test0983744() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""T-9'|*M(xF["", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0983745,"public void test0983745() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(""T-9'|*M(xF[:T-9'|*M(xF["", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0983746,"public void test0983746() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0983747,"public void test0983747() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0983748,"public void test0983748() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0983749,"public void test0983749() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0983750,"public void test0983750() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0983751,"public void test0983751() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0983752,"public void test0983752() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0983761,"public void test0983761() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertNotNull(beanPointer0);
}",0,
project,0,test0983762,"public void test0983762() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertEquals(""T-9'|*M(xF["", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0983763,"public void test0983763() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertEquals(""T-9'|*M(xF["", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0983764,"public void test0983764() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertEquals(""T-9'|*M(xF[:T-9'|*M(xF["", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0983765,"public void test0983765() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0983766,"public void test0983766() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test0983767,"public void test0983767() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0983768,"public void test0983768() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0983769,"public void test0983769() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0983770,"public void test0983770() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0983771,"public void test0983771() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test0983778,"public void test0983778() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0983779,"public void test0983779() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0983780,"public void test0983780() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0983781,"public void test0983781() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0983782,"public void test0983782() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertFalse(beanPointer0.isCollection());
}",0,assertTrue(beanPointer0.isCollection())
project,0,test0983783,"public void test0983783() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0983784,"public void test0983784() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0983785,"public void test0983785() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0983786,"public void test0983786() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    assertTrue(beanPointer0.isRoot());
}",0,assertFalse(beanPointer0.isRoot())
project,0,test0983789,"public void test0983789() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertNotNull(beanPointer1);
}",0,
project,0,test0983790,"public void test0983790() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(beanPointer1.equals((Object) beanPointer0));
}",0,
project,0,test0983793,"public void test0983793() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertEquals(""T-9'|*M(xF["", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0983794,"public void test0983794() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertEquals(""T-9'|*M(xF["", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0983795,"public void test0983795() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertEquals(""T-9'|*M(xF[:T-9'|*M(xF["", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0983796,"public void test0983796() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test0983797,"public void test0983797() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(1, variablePointer0.getIndex())"
project,0,test0983798,"public void test0983798() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test0983799,"public void test0983799() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0983800,"public void test0983800() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0983801,"public void test0983801() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test0983802,"public void test0983802() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0983809,"public void test0983809() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test0983810,"public void test0983810() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test0983811,"public void test0983811() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test0983812,"public void test0983812() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test0983813,"public void test0983813() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(beanPointer0.isCollection());
}",0,assertTrue(beanPointer0.isCollection())
project,0,test0983814,"public void test0983814() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertEquals(1, beanPointer0.getLength());
}",0,"assertEquals(1, beanPointer0.getLength())"
project,0,test0983815,"public void test0983815() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test0983816,"public void test0983816() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test0983817,"public void test0983817() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertTrue(beanPointer0.isRoot());
}",0,assertFalse(beanPointer0.isRoot())
project,0,test0983818,"public void test0983818() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(beanPointer1.isRoot());
}",0,assertTrue(beanPointer1.isRoot())
project,0,test0983819,"public void test0983819() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
}",0,assertTrue(beanPointer1.isDynamicPropertyDeclarationSupported())
project,0,test0983820,"public void test0983820() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertTrue(beanPointer1.isNode());
}",0,
project,0,test0983821,"public void test0983821() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(beanPointer1.isCollection());
}",0,assertTrue(beanPointer1.isCollection())
project,0,test0983822,"public void test0983822() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(beanPointer1.isAttribute());
}",0,assertTrue(beanPointer1.isAttribute())
project,0,test0983823,"public void test0983823() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
}",0,
project,0,test0983824,"public void test0983824() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertFalse(beanPointer1.isContainer());
}",0,assertTrue(beanPointer1.isContainer())
project,0,test0983825,"public void test0983825() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertEquals(1, beanPointer1.getLength());
}",0,"assertEquals(0, beanPointer1.getLength())"
project,0,test0983826,"public void test0983826() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    assertNull(beanPointer1.getNamespaceURI());
}",0,assertNotNull(beanPointer1.getNamespaceURI())
project,0,test0983830,"public void test0983830() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,
project,0,test0983831,"public void test0983831() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertTrue(jXPathContextReferenceImpl0.isLenient())
project,0,test0983833,"public void test0983833() throws Throwable {
    QName qName0 = new QName(""T-9'|*M(xF["", ""T-9'|*M(xF["");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, variablePointer0, locale0);
    BeanPointer beanPointer1 = (BeanPointer) NodePointer.newChildNodePointer(beanPointer0, qName0, qName0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
    // Undeclared exception!
    try {
        beanPointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, (Object) variablePointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot create an object for path /T-9'|*M(xF[:T-9'|*M(xF[/T-9'|*M(xF[:T-9'|*M(xF[[-2147483647], operation is not allowed for this type of node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",1,
project,0,test0993863,"public void test0993863() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertNull(nodeIterator0);
}",0,
project,0,test0993864,"public void test0993864() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertFalse(qName0.equals((Object) qName1));
}",0,
project,0,test0993865,"public void test0993865() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertFalse(qName1.equals((Object) qName0));
}",0,
project,0,test0993868,"public void test0993868() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test0993869,"public void test0993869() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test0993870,"public void test0993870() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test0993871,"public void test0993871() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test0993872,"public void test0993872() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test0993873,"public void test0993873() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test0993874,"public void test0993874() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test0993875,"public void test0993875() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test0993876,"public void test0993876() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test0993877,"public void test0993877() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test0993878,"public void test0993878() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertEquals(""<<unknown namespace>>"", qName1.getName());
}",0,assertNotNull(qName1.getName())
project,0,test0993879,"public void test0993879() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertEquals(""Was expecting one of::<<unknown namespace>>"", qName1.toString());
}",0,assertNotNull(qName1.toString())
project,0,test0993880,"public void test0993880() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertEquals(""Was expecting one of:"", qName1.getPrefix());
}",0,assertNotNull(qName1.getPrefix())
project,0,test0993881,"public void test0993881() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,
project,0,test0993882,"public void test0993882() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test0993883,"public void test0993883() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName(""Was expecting one of:"", ""<<unknown namespace>>"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    NodeIterator nodeIterator0 = variablePointer0.childIterator(nodeNameTest0, false, variablePointer0);
    assertEquals(""Was expecting one of::<<unknown namespace>>"", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test1003904,"public void test1003904() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Locale locale0 = nodePointer0.getLocale();
    assertNull(locale0);
}",0,
project,0,test1003905,"public void test1003905() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Locale locale0 = nodePointer0.getLocale();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test1003906,"public void test1003906() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Locale locale0 = nodePointer0.getLocale();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test1003907,"public void test1003907() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Locale locale0 = nodePointer0.getLocale();
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test1003908,"public void test1003908() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Locale locale0 = nodePointer0.getLocale();
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test1003909,"public void test1003909() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Locale locale0 = nodePointer0.getLocale();
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test1003910,"public void test1003910() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Locale locale0 = nodePointer0.getLocale();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test1003911,"public void test1003911() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    Locale locale0 = nodePointer0.getLocale();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1013930,"public void test1013930() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = variablePointer0.getLocale();
    assertNull(locale0);
}",0,assertNotNull(locale0)
project,0,test1013931,"public void test1013931() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = variablePointer0.getLocale();
    assertEquals("", operation is not allowed for this type of node"", qName0.getName());
}",0,
project,0,test1013932,"public void test1013932() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = variablePointer0.getLocale();
    assertEquals("", operation is not allowed for this type of node"", qName0.getPrefix());
}",0,
project,0,test1013933,"public void test1013933() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = variablePointer0.getLocale();
    assertEquals("", operation is not allowed for this type of node:, operation is not allowed for this type of node"", qName0.toString());
}",0,
project,0,test1013934,"public void test1013934() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = variablePointer0.getLocale();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test1013935,"public void test1013935() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = variablePointer0.getLocale();
    assertFalse(variablePointer0.isNode());
}",0,assertFalse(variablePointer0.isNode())
project,0,test1013936,"public void test1013936() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = variablePointer0.getLocale();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1013937,"public void test1013937() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = variablePointer0.getLocale();
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test1013938,"public void test1013938() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = variablePointer0.getLocale();
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test1013939,"public void test1013939() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = variablePointer0.getLocale();
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test1013940,"public void test1013940() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Locale locale0 = variablePointer0.getLocale();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test1023946,"public void test1023946() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertNotNull(variablePointer0);
}",0,assertNotNull(variablePointer0)
project,0,test1023947,"public void test1023947() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test1023948,"public void test1023948() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test1023949,"public void test1023949() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test1023950,"public void test1023950() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test1023951,"public void test1023951() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test1023952,"public void test1023952() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test1023953,"public void test1023953() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    assertFalse(variablePointer0.isAttribute());
}",0,assertFalse(variablePointer0.isAttribute())
project,0,test1023955,"public void test1023955() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertNotNull(nodeNameTest0);
}",0,assertNotNull(nodeNameTest0)
project,0,test1023956,"public void test1023956() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test1023957,"public void test1023957() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test1023958,"public void test1023958() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test1023959,"public void test1023959() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test1023960,"public void test1023960() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,
project,0,test1023961,"public void test1023961() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test1023962,"public void test1023962() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1023963,"public void test1023963() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertEquals("""", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test1023964,"public void test1023964() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertEquals("""", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test1023965,"public void test1023965() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertNull(qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test1023966,"public void test1023966() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertTrue(variablePointer0.isContainer());
}",0,assertTrue(variablePointer0.isContainer())
project,0,test1023967,"public void test1023967() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test1023968,"public void test1023968() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test1023969,"public void test1023969() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertFalse(variablePointer0.isNode());
}",0,assertTrue(variablePointer0.isNode())
project,0,test1023970,"public void test1023970() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test1023971,"public void test1023971() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test1023972,"public void test1023972() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1023973,"public void test1023973() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertNull(nodeNameTest0.getNamespaceURI());
}",0,assertNotNull(nodeNameTest0.getNamespaceURI())
project,0,test1023974,"public void test1023974() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertFalse(nodeNameTest0.isWildcard());
}",0,
project,0,test1023975,"public void test1023975() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertEquals("""", nodeNameTest0.toString());
}",0,assertNotNull(nodeNameTest0.toString())
project,0,test1033993,"public void test1033993() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.testNode((NodeTest) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1033994,"public void test1033994() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.testNode((NodeTest) null);
    assertEquals(""%:%"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test1033995,"public void test1033995() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.testNode((NodeTest) null);
    assertEquals(""%"", qName0.getPrefix());
}",0,assertNotNull(qName0.getPrefix())
project,0,test1033996,"public void test1033996() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.testNode((NodeTest) null);
    assertEquals(""%"", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test1033997,"public void test1033997() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.testNode((NodeTest) null);
    assertFalse(variablePointer0.isNode());
}",0,
project,0,test1033998,"public void test1033998() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.testNode((NodeTest) null);
    assertFalse(variablePointer0.isActual());
}",0,assertTrue(variablePointer0.isActual())
project,0,test1033999,"public void test1033999() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.testNode((NodeTest) null);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1034000,"public void test1034000() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.testNode((NodeTest) null);
    assertTrue(variablePointer0.isContainer());
}",0,assertFalse(variablePointer0.isContainer())
project,0,test1034001,"public void test1034001() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.testNode((NodeTest) null);
    assertNull(variablePointer0.getNamespaceURI());
}",0,assertNotNull(variablePointer0.getNamespaceURI())
project,0,test1034002,"public void test1034002() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.testNode((NodeTest) null);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,
project,0,test1034003,"public void test1034003() throws Throwable {
    QName qName0 = new QName(""%"", ""%"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.testNode((NodeTest) null);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test1044005,"public void test1044005() throws Throwable {
    QName qName0 = new QName(""("");
    assertNotNull(qName0);
}",0,
project,0,test1044006,"public void test1044006() throws Throwable {
    QName qName0 = new QName(""("");
    assertEquals(""("", qName0.getName());
}",0,
project,0,test1044007,"public void test1044007() throws Throwable {
    QName qName0 = new QName(""("");
    assertEquals(""("", qName0.toString());
}",0,
project,0,test1044008,"public void test1044008() throws Throwable {
    QName qName0 = new QName(""("");
    assertNull(qName0.getPrefix());
}",0,
project,0,test1044014,"public void test1044014() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertNotNull(beanPointer0);
}",0,
project,0,test1044015,"public void test1044015() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertEquals(""("", qName0.getName());
}",0,assertNotNull(qName0.getName())
project,0,test1044016,"public void test1044016() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertEquals(""("", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test1044017,"public void test1044017() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertNull(qName0.getPrefix());
}",0,
project,0,test1044022,"public void test1044022() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertTrue(beanPointer0.isNode());
}",0,
project,0,test1044023,"public void test1044023() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test1044024,"public void test1044024() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test1044025,"public void test1044025() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test1044026,"public void test1044026() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test1044027,"public void test1044027() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test1044028,"public void test1044028() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertTrue(beanPointer0.isRoot());
}",0,
project,0,test1044029,"public void test1044029() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test1044030,"public void test1044030() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    assertFalse(beanPointer0.isCollection());
}",0,assertTrue(beanPointer0.isCollection())
project,0,test1044032,"public void test1044032() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    assertNotNull(jXPathContextReferenceImpl0);
}",0,
project,0,test1044037,"public void test1044037() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertFalse(jXPathContextReferenceImpl0.isLenient())
project,0,test1044039,"public void test1044039() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertNotNull(jXPathContextReferenceImpl1);
}",1,
project,0,test1044043,"public void test1044043() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertEquals(""("", qName0.getName());
}",0,
project,0,test1044044,"public void test1044044() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertEquals(""("", qName0.toString());
}",0,
project,0,test1044045,"public void test1044045() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertNull(qName0.getPrefix());
}",0,
project,0,test1044050,"public void test1044050() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test1044051,"public void test1044051() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test1044052,"public void test1044052() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test1044053,"public void test1044053() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test1044054,"public void test1044054() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test1044055,"public void test1044055() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertFalse(beanPointer0.isContainer());
}",0,
project,0,test1044056,"public void test1044056() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertTrue(beanPointer0.isRoot());
}",0,
project,0,test1044057,"public void test1044057() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test1044058,"public void test1044058() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertFalse(beanPointer0.isCollection());
}",0,
project,0,test1044059,"public void test1044059() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertFalse(jXPathContextReferenceImpl0.isLenient());
}",0,assertFalse(jXPathContextReferenceImpl0.isLenient())
project,0,test1044060,"public void test1044060() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    assertFalse(jXPathContextReferenceImpl1.isLenient());
}",0,assertFalse(jXPathContextReferenceImpl1.isLenient())
project,0,test1044064,"public void test1044064() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertEquals(""yj"", string0);
}",0,
project,0,test1044066,"public void test1044066() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertEquals(""("", qName0.getName());
}",0,
project,0,test1044067,"public void test1044067() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertEquals(""("", qName0.toString());
}",0,
project,0,test1044068,"public void test1044068() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertNull(qName0.getPrefix());
}",0,
project,0,test1044073,"public void test1044073() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertTrue(beanPointer0.isNode());
}",0,assertFalse(beanPointer0.isNode())
project,0,test1044074,"public void test1044074() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test1044075,"public void test1044075() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test1044076,"public void test1044076() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test1044077,"public void test1044077() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test1044078,"public void test1044078() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertFalse(beanPointer0.isContainer());
}",0,
project,0,test1044079,"public void test1044079() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertTrue(beanPointer0.isRoot());
}",0,assertTrue(beanPointer0.isRoot())
project,0,test1044080,"public void test1044080() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test1044081,"public void test1044081() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl) jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
    String string0 = (String) beanPointer0.getRootNode();
    assertFalse(beanPointer0.isCollection());
}",0,assertTrue(beanPointer0.isCollection())
project,0,test1054114,"public void test1054114() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1054115,"public void test1054115() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertEquals(""b}suu:/Feh.z:"", qName0.toString());
}",0,assertNotNull(qName0.toString())
project,0,test1054116,"public void test1054116() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertEquals("""", qName0.getName());
}",0,
project,0,test1054117,"public void test1054117() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertEquals(""b}suu:/Feh.z"", qName0.getPrefix());
}",0,
project,0,test1054124,"public void test1054124() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertFalse(beanPointer0.isContainer());
}",0,assertTrue(beanPointer0.isContainer())
project,0,test1054125,"public void test1054125() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertTrue(beanPointer0.isRoot());
}",0,
project,0,test1054126,"public void test1054126() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertNull(beanPointer0.getNamespaceURI());
}",0,assertNotNull(beanPointer0.getNamespaceURI())
project,0,test1054127,"public void test1054127() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertEquals(1, beanPointer0.getLength());
}",0,
project,0,test1054128,"public void test1054128() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
}",0,"assertEquals(0, beanPointer0.getIndex())"
project,0,test1054129,"public void test1054129() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
}",0,
project,0,test1054130,"public void test1054130() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertTrue(beanPointer0.isNode());
}",0,assertTrue(beanPointer0.isNode())
project,0,test1054131,"public void test1054131() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertFalse(beanPointer0.isAttribute());
}",0,assertTrue(beanPointer0.isAttribute())
project,0,test1054132,"public void test1054132() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = beanPointer0.isActual();
    assertFalse(beanPointer0.isCollection());
}",0,
project,0,test1064134,"public void test1064134() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""(b]\""/{"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    // Undeclared exception!
    try {
        variablePointer0.getValue();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: (b]\""/{:(b]\""/{
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}",0,
project,0,test1074135,"public void test1074135() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    boolean boolean0 = nodePointer0.isNode();
    assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
}",0,"assertEquals(1, nodePointer0.getIndex())"
project,0,test1074136,"public void test1074136() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    boolean boolean0 = nodePointer0.isNode();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1074137,"public void test1074137() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    boolean boolean0 = nodePointer0.isNode();
    assertFalse(nodePointer0.isAttribute());
}",0,assertTrue(nodePointer0.isAttribute())
project,0,test1074138,"public void test1074138() throws Throwable {
    QName qName0 = new QName("""", ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"");
    Locale locale0 = new Locale(""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", """", """");
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ""org.apache.commons.jxpath.ri.compiler.NodeTypeTest"", locale0);
    boolean boolean0 = nodePointer0.isNode();
    assertTrue(nodePointer0.isRoot());
}",0,
project,0,test1084139,"public void test1084139() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeNameTest0);
    Variables variables0 = jXPathContext0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
    boolean boolean0 = variablePointer0.isNode();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1084140,"public void test1084140() throws Throwable {
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeNameTest0);
    Variables variables0 = jXPathContext0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
    boolean boolean0 = variablePointer0.isNode();
    assertFalse(boolean0);
}",0,
project,0,test1094141,"public void test1094141() throws Throwable {
    QName qName0 = new QName(""hV21"", ""/@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isRoot();
    assertTrue(boolean0);
}",0,
project,0,test1094142,"public void test1094142() throws Throwable {
    QName qName0 = new QName(""hV21"", ""/@"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isRoot();
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test1104143,"public void test1104143() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, (Object) null);
    boolean boolean0 = nodePointer0.isRoot();
    assertFalse(nodePointer0.isAttribute());
}",0,assertTrue(nodePointer0.isAttribute())
project,0,test1104144,"public void test1104144() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, (QName) null, (Object) null);
    boolean boolean0 = nodePointer0.isRoot();
    assertFalse(boolean0);
}",0,
project,0,test1114145,"public void test1114145() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""(b]\""/{"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    NodePointer nodePointer1 = nodePointer0.getParent();
    assertNull(nodePointer1);
}",1,
project,0,test1114146,"public void test1114146() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""(b]\""/{"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    NodePointer nodePointer1 = nodePointer0.getParent();
    assertFalse(variablePointer0.isAttribute());
}",0,
project,0,test1124147,"public void test1124147() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test1124148,"public void test1124148() throws Throwable {
    QName qName0 = new QName(""UNKNOWN"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = variablePointer0.getValuePointer();
    nodePointer0.getNamespaceResolver();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1134149,"public void test1134149() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
    Variables variables0 = jXPathContext0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test1134150,"public void test1134150() throws Throwable {
    NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3122);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
    Variables variables0 = jXPathContext0.getVariables();
    QName qName0 = new QName(""LPBVL"");
    VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
    variablePointer0.getNamespaceResolver();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1144151,"public void test1144151() throws Throwable {
    QName qName0 = new QName(""Was expecting one of"", (String) null);
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""Z6|_I{3LQ)~T,$OSBZH-TW"");
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeNameTest0);
    Variables variables0 = jXPathContext0.getVariables();
    VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
    // Undeclared exception!
    try {
        variablePointer0.getPointerByID(jXPathContext0, (String) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot find an element by ID - no IdentityManager has been specified
        //
        verifyException(""org.apache.commons.jxpath.JXPathContext"", e);
    }
}",0,
project,0,test1154152,"public void test1154152() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName("""", ""A"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1154153,"public void test1154153() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName("""", ""A"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test1154154,"public void test1154154() throws Throwable {
    QName qName0 = new QName("", operation is not allowed for this type of node"", "", operation is not allowed for this type of node"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    QName qName1 = new QName("""", ""A"");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
    boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1164155,"public void test1164155() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, variablePointer0, (Locale) null);
    nodePointer0.namespacePointer(""<<unknown namespace>>"");
    assertTrue(nodePointer0.isRoot());
}",0,assertTrue(nodePointer0.isRoot())
project,0,test1164156,"public void test1164156() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, variablePointer0, (Locale) null);
    nodePointer0.namespacePointer(""<<unknown namespace>>"");
    assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
}",0,"assertEquals(1, nodePointer0.getIndex())"
project,0,test1164157,"public void test1164157() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, variablePointer0, (Locale) null);
    nodePointer0.namespacePointer(""<<unknown namespace>>"");
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test1164158,"public void test1164158() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, variablePointer0, (Locale) null);
    nodePointer0.namespacePointer(""<<unknown namespace>>"");
    assertFalse(nodePointer0.isAttribute());
}",0,assertTrue(nodePointer0.isAttribute())
project,0,test1164159,"public void test1164159() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, variablePointer0, (Locale) null);
    nodePointer0.namespacePointer(""<<unknown namespace>>"");
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1174160,"public void test1174160() throws Throwable {
    QName qName0 = new QName(""hV21"", ""' and '"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.getNamespaceURI();
    assertTrue(variablePointer0.isRoot());
}",0,
project,0,test1174161,"public void test1174161() throws Throwable {
    QName qName0 = new QName(""hV21"", ""' and '"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.getNamespaceURI();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1184162,"public void test1184162() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    assertNotNull(nodePointer0);
}",0,
project,0,test1184163,"public void test1184163() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    NodePointer nodePointer1 = nodePointer0.createPath((JXPathContext) null);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test1184164,"public void test1184164() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    NodePointer nodePointer1 = nodePointer0.createPath((JXPathContext) null);
    assertFalse(nodePointer1.isRoot());
}",0,assertTrue(nodePointer1.isRoot())
project,0,test1184165,"public void test1184165() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Vzm&]`p9tkIVzH"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    NodePointer nodePointer1 = nodePointer0.createPath((JXPathContext) null);
    assertFalse(nodePointer1.isAttribute());
}",0,assertTrue(nodePointer1.isAttribute())
project,0,test1194166,"public void test1194166() throws Throwable {
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) ""substring-before"");
    Variables variables0 = jXPathContext0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
    variablePointer0.getDefaultNamespaceURI();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1194167,"public void test1194167() throws Throwable {
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) ""substring-before"");
    Variables variables0 = jXPathContext0.getVariables();
    QName qName0 = new QName(""(F"");
    VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
    variablePointer0.getDefaultNamespaceURI();
    assertTrue(variablePointer0.isRoot());
}",0,assertTrue(variablePointer0.isRoot())
project,0,test1204168,"public void test1204168() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, """", locale0);
    assertNotNull(nodePointer0);
}",0,
project,0,test1204169,"public void test1204169() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = nodePointer0.isLanguage(""Was expecting one of"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1204170,"public void test1204170() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = nodePointer0.isLanguage(""Was expecting one of"");
    assertFalse(nodePointer0.isAttribute());
}",0,assertTrue(nodePointer0.isAttribute())
project,0,test1204171,"public void test1204171() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = nodePointer0.isLanguage(""Was expecting one of"");
    assertTrue(nodePointer0.isRoot());
}",0,
project,0,test1204172,"public void test1204172() throws Throwable {
    QName qName0 = new QName(""b}suu:/Feh.z"", """");
    Locale locale0 = Locale.CANADA_FRENCH;
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, """", locale0);
    boolean boolean0 = nodePointer0.isLanguage(""Was expecting one of"");
    assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
}",0,"assertEquals(0, nodePointer0.getIndex())"
project,0,test1214173,"public void test1214173() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
    // Undeclared exception!
    try {
        nodePointer0.createPath((JXPathContext) null, (Object) variablePointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot set undefined variable:
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}",0,
project,0,test1224176,"public void test1224176() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""Hce<v[>5Q1"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    variablePointer0.printPointerChain();
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1234177,"public void test1234177() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isAttribute();
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test1234178,"public void test1234178() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isAttribute();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1234179,"public void test1234179() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    boolean boolean0 = variablePointer0.isAttribute();
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test1244180,"public void test1244180() throws Throwable {
    QName qName0 = new QName(""("");
    Locale locale0 = new Locale(""yj"", ""yj"");
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ""yj"", locale0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
    // Undeclared exception!
    try {
        nodePointer0.createChild(jXPathContext0, qName0, 6);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot create an object for path 'yj'/([7], operation is not allowed for this type of node
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",1,
project,0,test1254181,"public void test1254181() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""(b]\""/{"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setAttribute(false);
    assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
}",0,"assertEquals(0, variablePointer0.getIndex())"
project,0,test1254182,"public void test1254182() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""(b]\""/{"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setAttribute(false);
    assertFalse(variablePointer0.isAttribute());
}",0,assertTrue(variablePointer0.isAttribute())
project,0,test1254183,"public void test1254183() throws Throwable {
    QName qName0 = new QName(""(b]\""/{"", ""(b]\""/{"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setAttribute(false);
    assertTrue(variablePointer0.isRoot());
}",0,assertFalse(variablePointer0.isRoot())
project,0,test1264184,"public void test1264184() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""'"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    JXPathContext jXPathContext0 = JXPathContext.newContext((Object) ""'"");
    // Undeclared exception!
    try {
        variablePointer0.getPointerByKey(jXPathContext0, ""'"", ""'"");
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot find an element by key - no KeyManager has been specified
        //
        verifyException(""org.apache.commons.jxpath.JXPathContext"", e);
    }
}",0,
