focal_method,test_prefix,docstring
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test000() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"", ""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setIndex((-5));
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    boolean boolean0 = nullPropertyPointer0.equals(beanPropertyPointer0);
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof PropertyPointer)) {
        return false;
    }
    PropertyPointer other = (PropertyPointer) object;
    if (parent != other.parent && (parent == null || !parent.equals(other.parent))) {
        return false;
    }
    if (getPropertyIndex() != other.getPropertyIndex() || !getPropertyName().equals(other.getPropertyName())) {
        return false;
    }
    int iThis = (index == WHOLE_COLLECTION ? 0 : index);
    int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
    return iThis == iOther;
}","public void test001() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"", ""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setIndex((-5));
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    boolean boolean0 = nullPropertyPointer0.equals(beanPropertyPointer0);
    assertFalse(boolean0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test012() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    nullPropertyPointer0.propertyIndex = 1383;
    boolean boolean0 = nullPropertyPointer0.equals(beanPropertyPointer0);
    assertEquals(1383, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof PropertyPointer)) {
        return false;
    }
    PropertyPointer other = (PropertyPointer) object;
    if (parent != other.parent && (parent == null || !parent.equals(other.parent))) {
        return false;
    }
    if (getPropertyIndex() != other.getPropertyIndex() || !getPropertyName().equals(other.getPropertyName())) {
        return false;
    }
    int iThis = (index == WHOLE_COLLECTION ? 0 : index);
    int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
    return iThis == iOther;
}","public void test013() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    nullPropertyPointer0.propertyIndex = 1383;
    boolean boolean0 = nullPropertyPointer0.equals(beanPropertyPointer0);
    assertFalse(boolean0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test024() throws Throwable {
    Class<Integer> class0 = Integer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex((-279));
    beanPropertyPointer0.hashCode();
    assertEquals((-279), beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {
    PropertyPointer prop = (PropertyPointer) clone();
    if (name != null) {
        prop.setPropertyName(name.toString());
    }
    prop.setIndex(index);
    return prop.createPath(context, value);
}","public void test035() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    // Undeclared exception!
    try {
        beanPropertyPointer0.createChild((JXPathContext) null, qName0, 23, (Object) nullPropertyPointer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test046() throws Throwable {
    Class<Integer> class0 = Integer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex((-279));
    beanPropertyPointer0.setPropertyIndex((-693));
    assertEquals((-693), beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getIndex() {
    return index;
}","public void test057() throws Throwable {
    VariablePointer variablePointer0 = new VariablePointer((QName) null);
    Class<Object> class0 = Object.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyName("""");
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
}","/**
 * If the pointer represents a collection, the index identifies
 * an element of that collection.  The default value of <code>index</code>
 * is <code>WHOLE_COLLECTION</code>, which just means that the pointer
 * is not indexed at all.
 * Note: the index on NodePointer starts with 0, not 1.
 * @return int
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test068() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"", ""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    boolean boolean0 = nullPropertyPointer0.equals(nullPropertyPointer0);
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof PropertyPointer)) {
        return false;
    }
    PropertyPointer other = (PropertyPointer) object;
    if (parent != other.parent && (parent == null || !parent.equals(other.parent))) {
        return false;
    }
    if (getPropertyIndex() != other.getPropertyIndex() || !getPropertyName().equals(other.getPropertyName())) {
        return false;
    }
    int iThis = (index == WHOLE_COLLECTION ? 0 : index);
    int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
    return iThis == iOther;
}","public void test069() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"", ""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    boolean boolean0 = nullPropertyPointer0.equals(nullPropertyPointer0);
    assertTrue(boolean0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test0710() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<VariablePointer> class0 = VariablePointer.class;
    Class<String> class1 = String.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(beanPropertyPointer0);
    nullPropertyPointer0.isLeaf();
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test0811() throws Throwable {
    Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    beanPropertyPointer0.isCollection();
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test0912() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.getPropertyNames();
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test1013() throws Throwable {
    QName qName0 = new QName(""$+us1Ux#T$.U"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    nullPropertyPointer0.getPropertyNames();
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test1114() throws Throwable {
    Class<String> class0 = String.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    beanPropertyPointer0.getPropertyName();
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test1215() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex(0);
    int int0 = beanPropertyPointer0.getPropertyIndex();
    assertEquals(0, int0);
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test1316() throws Throwable {
    QName qName0 = new QName(""_zmtFtx8\""S1!s2]c"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex(2316);
    int int0 = beanPropertyPointer0.getPropertyIndex();
    assertEquals(2316, int0);
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test1417() throws Throwable {
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer((NodePointer) null);
    nullPropertyPointer0.getPropertyCount();
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test1518() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"", ""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.getPropertyCount();
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test1619() throws Throwable {
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer((NodePointer) null);
    nullPropertyPointer0.getLength();
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test1720() throws Throwable {
    Class<String> class0 = String.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    beanPropertyPointer0.getLength();
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test1821() throws Throwable {
    QName qName0 = new QName("""", ""; "");
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    Class<Integer> class0 = Integer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(nullPropertyPointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.getImmediateNode();
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test1922() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(nullPropertyPointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.getBean();
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    return getValuePointer().compareChildNodePointers(pointer1, pointer2);
}","public void test2023() throws Throwable {
    QName qName0 = new QName(""_zmtFtx8\""S1!s2]c"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
    Class<Object> class1 = Object.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(beanPropertyPointer0);
    int int0 = nullPropertyPointer0.compareChildNodePointers(variablePointer0, beanPropertyPointer0);
    assertEquals(53, int0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test2024() throws Throwable {
    QName qName0 = new QName(""_zmtFtx8\""S1!s2]c"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
    Class<Object> class1 = Object.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(beanPropertyPointer0);
    int int0 = nullPropertyPointer0.compareChildNodePointers(variablePointer0, beanPropertyPointer0);
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    return getValuePointer().compareChildNodePointers(pointer1, pointer2);
}","public void test2125() throws Throwable {
    QName qName0 = new QName(""$+us1Ux#T$.U"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(196);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(nodePointer0);
    int int0 = nullPropertyPointer0.compareChildNodePointers(variablePointer0, nodePointer0);
    assertEquals((-2147483452), int0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test2126() throws Throwable {
    QName qName0 = new QName(""$+us1Ux#T$.U"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    variablePointer0.setIndex(196);
    NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(nodePointer0);
    int int0 = nullPropertyPointer0.compareChildNodePointers(variablePointer0, nodePointer0);
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean isLeaf() {
    Object value = getNode();
    return value == null || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();
}","public void test2227() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex(1);
    // Undeclared exception!
    try {
        beanPropertyPointer0.isLeaf();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: {-X-Di2
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}",""
"public boolean isLeaf() {
    Object value = getNode();
    return value == null || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();
}","public void test2328() throws Throwable {
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, (JXPathBeanInfo) null);
    // Undeclared exception!
    try {
        beanPropertyPointer0.isLeaf();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer"", e);
    }
}",""
"public boolean isLeaf() {
    Object value = getNode();
    return value == null || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();
}","public void test2429() throws Throwable {
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer((NodePointer) null);
    QName qName0 = nullPropertyPointer0.getName();
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    boolean boolean0 = beanPropertyPointer0.isLeaf();
    assertTrue(boolean0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test2430() throws Throwable {
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer((NodePointer) null);
    QName qName0 = nullPropertyPointer0.getName();
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    boolean boolean0 = beanPropertyPointer0.isLeaf();
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean isActual() {
    if (!isActualProperty()) {
        return false;
    }
    return super.isActual();
}","public void test2531() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, (JXPathBeanInfo) null);
    // Undeclared exception!
    try {
        beanPropertyPointer0.isActual();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer"", e);
    }
}",""
"public String[] getPropertyNames() {
    if (names == null) {
        PropertyDescriptor[] pds = getPropertyDescriptors();
        names = new String[pds.length];
        for (int i = 0; i < names.length; i++) {
            names[i] = pds[i].getName();
        }
    }
    return names;
}","public void test2632() throws Throwable {
    QName qName0 = new QName((String) null, """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, (JXPathBeanInfo) null);
    // Undeclared exception!
    try {
        beanPropertyPointer0.getPropertyNames();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer"", e);
    }
}","/**
 * Get the names of all properties, sorted alphabetically
 * @return String[]
 */"
"public String getPropertyName() {
    if (propertyName == null) {
        PropertyDescriptor pd = getPropertyDescriptor();
        if (pd != null) {
            propertyName = pd.getName();
        }
    }
    return propertyName != null ? propertyName : ""*"";
}","public void test2733() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName(""g~\""O5mpgGQ-gf=Us"");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, (JXPathBeanInfo) null);
    // Undeclared exception!
    try {
        beanPropertyPointer0.getPropertyName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer"", e);
    }
}","/**
 * Get the name of the currently selected property.
 * @return String property name
 */"
"public int getPropertyCount() {
    if (beanInfo.isAtomic()) {
        return 0;
    }
    return getPropertyDescriptors().length;
}","public void test2834() throws Throwable {
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, (JXPathBeanInfo) null);
    // Undeclared exception!
    try {
        beanPropertyPointer0.getPropertyCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer"", e);
    }
}",""
"public QName getName() {
    return new QName(null, getPropertyName());
}","public void test2935() throws Throwable {
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, (JXPathBeanInfo) null);
    // Undeclared exception!
    try {
        beanPropertyPointer0.getName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer"", e);
    }
}",""
"public int getLength() {
    PropertyDescriptor pd = getPropertyDescriptor();
    if (pd == null) {
        return 1;
    }
    if (pd instanceof IndexedPropertyDescriptor) {
        return ValueUtils.getIndexedPropertyLength(getBean(), (IndexedPropertyDescriptor) pd);
    }
    int hint = ValueUtils.getCollectionHint(pd.getPropertyType());
    if (hint == -1) {
        return 1;
    }
    return super.getLength();
}","public void test3036() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"", ""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex(18);
    // Undeclared exception!
    try {
        beanPropertyPointer0.getLength();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: {-X-Di2:{-X-Di2
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}","/**
 * If the property contains a collection, then the length of that
 * collection, otherwise - 1.
 * @return int length
 */"
"public NodePointer getImmediateValuePointer() {
    return NodePointer.newChildNodePointer((NodePointer) this.clone(), getName(), getImmediateNode());
}","public void test3137() throws Throwable {
    Class<VariablePointer> class0 = VariablePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    beanPropertyPointer0.propertyIndex = 0;
    // Undeclared exception!
    try {
        beanPropertyPointer0.getImmediateValuePointer();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.PropertyPointer"", e);
    }
}","/**
 * Returns a NodePointer that can be used to access the currently
 * selected property value.
 * @return NodePointer
 */"
"public Object getImmediateNode() {
    if (value == UNINITIALIZED) {
        if (index == WHOLE_COLLECTION) {
            value = ValueUtils.getValue(getBaseValue());
        } else {
            PropertyDescriptor pd = getPropertyDescriptor();
            if (pd == null) {
                value = null;
            } else {
                value = ValueUtils.getValue(getBean(), pd, index);
            }
        }
    }
    return value;
}","public void test3238() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex(1);
    // Undeclared exception!
    try {
        beanPropertyPointer0.getImmediateNode();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: {-X-Di2
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}","/**
 * If index == WHOLE_COLLECTION, the value of the property, otherwise
 * the value of the index'th element of the collection represented by the
 * property. If the property is not a collection, index should be zero
 * and the value will be the property itself.
 * @return Object
 */"
"public Object getImmediateNode() {
    if (value == UNINITIALIZED) {
        if (index == WHOLE_COLLECTION) {
            value = ValueUtils.getValue(getBaseValue());
        } else {
            PropertyDescriptor pd = getPropertyDescriptor();
            if (pd == null) {
                value = null;
            } else {
                value = ValueUtils.getValue(getBean(), pd, index);
            }
        }
    }
    return value;
}","public void test3339() throws Throwable {
    QName qName0 = new QName(""L/VJlI["");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, (JXPathBeanInfo) null);
    // Undeclared exception!
    try {
        beanPropertyPointer0.getImmediateNode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer"", e);
    }
}","/**
 * If index == WHOLE_COLLECTION, the value of the property, otherwise
 * the value of the index'th element of the collection represented by the
 * property. If the property is not a collection, index should be zero
 * and the value will be the property itself.
 * @return Object
 */"
"public Object getBean() {
    if (bean == null) {
        bean = getImmediateParentPointer().getNode();
    }
    return bean;
}","public void test3440() throws Throwable {
    QName qName0 = new QName(""i"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    // Undeclared exception!
    try {
        nullPropertyPointer0.getBean();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: i
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}","/**
 * Get the parent bean.
 * @return Object
 */"
"public Object getBean() {
    if (bean == null) {
        bean = getImmediateParentPointer().getNode();
    }
    return bean;
}","public void test3541() throws Throwable {
    QName qName0 = new QName(""zjDqX/f&PJ1.MlGf`"", ""zjDqX/f&PJ1.MlGf`"");
    VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    // Undeclared exception!
    try {
        nullPropertyPointer0.getBean();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer"", e);
    }
}","/**
 * Get the parent bean.
 * @return Object
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test3642() throws Throwable {
    QName qName0 = new QName(""_zmtFtx8\""S1!s2]c"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
    Class<Object> class1 = Object.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(beanPropertyPointer0);
    nullPropertyPointer0.getBean();
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof PropertyPointer)) {
        return false;
    }
    PropertyPointer other = (PropertyPointer) object;
    if (parent != other.parent && (parent == null || !parent.equals(other.parent))) {
        return false;
    }
    if (getPropertyIndex() != other.getPropertyIndex() || !getPropertyName().equals(other.getPropertyName())) {
        return false;
    }
    int iThis = (index == WHOLE_COLLECTION ? 0 : index);
    int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
    return iThis == iOther;
}","public void test3743() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"", ""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    nullPropertyPointer0.setNameAttributeValue((String) null);
    // Undeclared exception!
    try {
        nullPropertyPointer0.equals(beanPropertyPointer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"public NodePointer createPath(JXPathContext context, Object value) {
    // If neccessary, expand collection
    if (index != WHOLE_COLLECTION && index >= getLength()) {
        createPath(context);
    }
    setValue(value);
    return this;
}","public void test3844() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex(1);
    // Undeclared exception!
    try {
        beanPropertyPointer0.createPath((JXPathContext) null, (Object) qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: {-X-Di2
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}",""
"public NodePointer createPath(JXPathContext context, Object value) {
    NodePointer newParent = parent.createPath(context);
    if (isAttribute()) {
        NodePointer pointer = newParent.createAttribute(context, getName());
        pointer.setValue(value);
        return pointer;
    }
    if (parent instanceof NullPointer && parent.equals(newParent)) {
        throw createBadFactoryException(context.getFactory());
    }
    if (newParent instanceof PropertyOwnerPointer) {
        PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent;
        newParent = pop.getPropertyPointer();
    }
    return newParent.createChild(context, getName(), index, value);
}","public void test3945() throws Throwable {
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer((NodePointer) null);
    // Undeclared exception!
    try {
        nullPropertyPointer0.createPath((JXPathContext) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer"", e);
    }
}",""
"public NodePointer createPath(JXPathContext context) {
    if (getImmediateNode() == null) {
        super.createPath(context);
        baseValue = UNINITIALIZED;
        value = UNINITIALIZED;
    }
    return this;
}","public void test4046() throws Throwable {
    Class<Object> class0 = Object.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    // Undeclared exception!
    try {
        beanPropertyPointer0.createPath((JXPathContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    return getValuePointer().compareChildNodePointers(pointer1, pointer2);
}","public void test4147() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex(1);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    // Undeclared exception!
    try {
        beanPropertyPointer0.compareChildNodePointers(variablePointer0, nullPropertyPointer0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: {-X-Di2
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}",""
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    return getValuePointer().compareChildNodePointers(pointer1, pointer2);
}","public void test4248() throws Throwable {
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer((NodePointer) null);
    Class<VariablePointer> class0 = VariablePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    // Undeclared exception!
    try {
        nullPropertyPointer0.compareChildNodePointers(beanPropertyPointer0, (NodePointer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer"", e);
    }
}",""
"public Object getBean() {
    if (bean == null) {
        bean = getImmediateParentPointer().getNode();
    }
    return bean;
}","public void test4349() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""", """");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    // Undeclared exception!
    try {
        nullPropertyPointer0.getBean();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No such variable: ':'
        //
        verifyException(""org.apache.commons.jxpath.BasicVariables"", e);
    }
}","/**
 * Get the parent bean.
 * @return Object
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test4450() throws Throwable {
    Class<Integer> class0 = Integer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    beanPropertyPointer0.getName();
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test4551() throws Throwable {
    Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    int int0 = beanPropertyPointer0.getPropertyIndex();
    assertEquals(Integer.MIN_VALUE, int0);
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test4652() throws Throwable {
    Class<VariablePointer> class0 = VariablePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
    beanPropertyPointer0.getImmediateValuePointer();
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test4753() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"", ""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setIndex(1);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    boolean boolean0 = nullPropertyPointer0.equals(beanPropertyPointer0);
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof PropertyPointer)) {
        return false;
    }
    PropertyPointer other = (PropertyPointer) object;
    if (parent != other.parent && (parent == null || !parent.equals(other.parent))) {
        return false;
    }
    if (getPropertyIndex() != other.getPropertyIndex() || !getPropertyName().equals(other.getPropertyName())) {
        return false;
    }
    int iThis = (index == WHOLE_COLLECTION ? 0 : index);
    int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
    return iThis == iOther;
}","public void test4754() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"", ""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setIndex(1);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    boolean boolean0 = nullPropertyPointer0.equals(beanPropertyPointer0);
    assertFalse(boolean0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test4855() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    nullPropertyPointer0.setNameAttributeValue(""<<unknown namespace>>"");
    NullPropertyPointer nullPropertyPointer1 = new NullPropertyPointer(variablePointer0);
    boolean boolean0 = nullPropertyPointer0.equals(nullPropertyPointer1);
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer1.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof PropertyPointer)) {
        return false;
    }
    PropertyPointer other = (PropertyPointer) object;
    if (parent != other.parent && (parent == null || !parent.equals(other.parent))) {
        return false;
    }
    if (getPropertyIndex() != other.getPropertyIndex() || !getPropertyName().equals(other.getPropertyName())) {
        return false;
    }
    int iThis = (index == WHOLE_COLLECTION ? 0 : index);
    int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
    return iThis == iOther;
}","public void test4856() throws Throwable {
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    nullPropertyPointer0.setNameAttributeValue(""<<unknown namespace>>"");
    NullPropertyPointer nullPropertyPointer1 = new NullPropertyPointer(variablePointer0);
    boolean boolean0 = nullPropertyPointer0.equals(nullPropertyPointer1);
    assertFalse(boolean0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test4957() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"", ""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    NullPropertyPointer nullPropertyPointer1 = (NullPropertyPointer) nullPropertyPointer0.clone();
    boolean boolean0 = nullPropertyPointer0.equals(nullPropertyPointer1);
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer1.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof PropertyPointer)) {
        return false;
    }
    PropertyPointer other = (PropertyPointer) object;
    if (parent != other.parent && (parent == null || !parent.equals(other.parent))) {
        return false;
    }
    if (getPropertyIndex() != other.getPropertyIndex() || !getPropertyName().equals(other.getPropertyName())) {
        return false;
    }
    int iThis = (index == WHOLE_COLLECTION ? 0 : index);
    int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
    return iThis == iOther;
}","public void test4958() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"", ""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    NullPropertyPointer nullPropertyPointer1 = (NullPropertyPointer) nullPropertyPointer0.clone();
    boolean boolean0 = nullPropertyPointer0.equals(nullPropertyPointer1);
    assertTrue(boolean0);
}",""
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof PropertyPointer)) {
        return false;
    }
    PropertyPointer other = (PropertyPointer) object;
    if (parent != other.parent && (parent == null || !parent.equals(other.parent))) {
        return false;
    }
    if (getPropertyIndex() != other.getPropertyIndex() || !getPropertyName().equals(other.getPropertyName())) {
        return false;
    }
    int iThis = (index == WHOLE_COLLECTION ? 0 : index);
    int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
    return iThis == iOther;
}","public void test5059() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer((NodePointer) null);
    boolean boolean0 = nullPropertyPointer0.equals(beanPropertyPointer0);
    assertFalse(boolean0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test5060() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer((NodePointer) null);
    boolean boolean0 = nullPropertyPointer0.equals(beanPropertyPointer0);
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof PropertyPointer)) {
        return false;
    }
    PropertyPointer other = (PropertyPointer) object;
    if (parent != other.parent && (parent == null || !parent.equals(other.parent))) {
        return false;
    }
    if (getPropertyIndex() != other.getPropertyIndex() || !getPropertyName().equals(other.getPropertyName())) {
        return false;
    }
    int iThis = (index == WHOLE_COLLECTION ? 0 : index);
    int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
    return iThis == iOther;
}","public void test5161() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(nullPropertyPointer0, jXPathBasicBeanInfo0);
    boolean boolean0 = nullPropertyPointer0.equals(beanPropertyPointer0);
    assertFalse(boolean0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test5162() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(nullPropertyPointer0, jXPathBasicBeanInfo0);
    boolean boolean0 = nullPropertyPointer0.equals(beanPropertyPointer0);
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof PropertyPointer)) {
        return false;
    }
    PropertyPointer other = (PropertyPointer) object;
    if (parent != other.parent && (parent == null || !parent.equals(other.parent))) {
        return false;
    }
    if (getPropertyIndex() != other.getPropertyIndex() || !getPropertyName().equals(other.getPropertyName())) {
        return false;
    }
    int iThis = (index == WHOLE_COLLECTION ? 0 : index);
    int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
    return iThis == iOther;
}","public void test5263() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    boolean boolean0 = beanPropertyPointer0.equals(""<<unknown namespace>>"");
    assertFalse(boolean0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test5264() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    boolean boolean0 = beanPropertyPointer0.equals(""<<unknown namespace>>"");
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test5365() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex(1);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    boolean boolean0 = nullPropertyPointer0.equals(beanPropertyPointer0);
    assertEquals(1, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof PropertyPointer)) {
        return false;
    }
    PropertyPointer other = (PropertyPointer) object;
    if (parent != other.parent && (parent == null || !parent.equals(other.parent))) {
        return false;
    }
    if (getPropertyIndex() != other.getPropertyIndex() || !getPropertyName().equals(other.getPropertyName())) {
        return false;
    }
    int iThis = (index == WHOLE_COLLECTION ? 0 : index);
    int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
    return iThis == iOther;
}","public void test5366() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex(1);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    boolean boolean0 = nullPropertyPointer0.equals(beanPropertyPointer0);
    assertFalse(boolean0);
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index) {
    PropertyPointer prop = (PropertyPointer) clone();
    if (name != null) {
        prop.setPropertyName(name.toString());
    }
    prop.setIndex(index);
    return prop.createPath(context);
}","public void test5467() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    // Undeclared exception!
    try {
        beanPropertyPointer0.createChild((JXPathContext) null, qName0, (-1));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {
    PropertyPointer prop = (PropertyPointer) clone();
    if (name != null) {
        prop.setPropertyName(name.toString());
    }
    prop.setIndex(index);
    return prop.createPath(context, value);
}","public void test5568() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"", ""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    // Undeclared exception!
    try {
        beanPropertyPointer0.createChild((JXPathContext) null, (QName) null, (-3277), (Object) ""<<unknown namespace>>"");
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot set property: ${-X-Di2:{-X-Di2 - no such property
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer"", e);
    }
}",""
"public NodePointer createPath(JXPathContext context, Object value) {
    // If neccessary, expand collection
    if (index != WHOLE_COLLECTION && index >= getLength()) {
        createPath(context);
    }
    setValue(value);
    return this;
}","public void test5669() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    // Undeclared exception!
    try {
        beanPropertyPointer0.createPath((JXPathContext) null, (Object) qName0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot set property: ${-X-Di2 - no such property
        //
        verifyException(""org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer"", e);
    }
}",""
"public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {
    PropertyPointer prop = (PropertyPointer) clone();
    if (name != null) {
        prop.setPropertyName(name.toString());
    }
    prop.setIndex(index);
    return prop.createPath(context, value);
}","public void test5770() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    // Undeclared exception!
    try {
        beanPropertyPointer0.createChild((JXPathContext) null, qName0, 1, (Object) nullPropertyPointer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.model.NodePointer"", e);
    }
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test5871() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Class<Object> class0 = Object.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    boolean boolean0 = beanPropertyPointer0.isActual();
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean isActual() {
    if (!isActualProperty()) {
        return false;
    }
    return super.isActual();
}","public void test5872() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    Class<Object> class0 = Object.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    boolean boolean0 = beanPropertyPointer0.isActual();
    assertFalse(boolean0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test5973() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex(1);
    boolean boolean0 = beanPropertyPointer0.isActual();
    assertEquals(1, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public boolean isActual() {
    if (!isActualProperty()) {
        return false;
    }
    return super.isActual();
}","public void test5974() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex(1);
    boolean boolean0 = beanPropertyPointer0.isActual();
    assertTrue(boolean0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test6075() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    int int0 = beanPropertyPointer0.compareChildNodePointers(variablePointer0, nullPropertyPointer0);
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
    return getValuePointer().compareChildNodePointers(pointer1, pointer2);
}","public void test6076() throws Throwable {
    QName qName0 = new QName(""{-X-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    int int0 = beanPropertyPointer0.compareChildNodePointers(variablePointer0, nullPropertyPointer0);
    assertEquals(81, int0);
}",""
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test6177() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    Class<Object> class0 = Object.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    nullPropertyPointer0.compareChildNodePointers(beanPropertyPointer0, beanPropertyPointer0);
    assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public int getPropertyIndex() {
    return propertyIndex;
}","public void test6178() throws Throwable {
    BasicVariables basicVariables0 = new BasicVariables();
    QName qName0 = new QName("""");
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
    NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
    Class<Object> class0 = Object.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    nullPropertyPointer0.compareChildNodePointers(beanPropertyPointer0, beanPropertyPointer0);
    assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
}","/**
 * Get the property index.
 * @return int index
 */"
"public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {
    PropertyPointer prop = (PropertyPointer) clone();
    if (name != null) {
        prop.setPropertyName(name.toString());
    }
    prop.setIndex(index);
    return prop.createPath(context, value);
}","public void test6279() throws Throwable {
    QName qName0 = new QName(""{-BX-Di2"", ""{-BX-Di2"");
    VariablePointer variablePointer0 = new VariablePointer(qName0);
    Class<NodePointer> class0 = NodePointer.class;
    JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
    BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(variablePointer0, jXPathBasicBeanInfo0);
    beanPropertyPointer0.setPropertyIndex(18);
    // Undeclared exception!
    try {
        beanPropertyPointer0.createChild((JXPathContext) null, (QName) null, 23, (Object) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Undefined variable: {-BX-Di2:{-BX-Di2
        //
        verifyException(""org.apache.commons.jxpath.ri.model.VariablePointer$1"", e);
    }
}",""
