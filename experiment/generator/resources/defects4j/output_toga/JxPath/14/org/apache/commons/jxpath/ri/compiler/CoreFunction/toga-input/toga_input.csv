focal_method,test_prefix,docstring
"public int getFunctionCode() {
    return functionCode;
}","public void test0000() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    CoreFunction coreFunction0 = new CoreFunction(95, expressionArray0);
    int int0 = coreFunction0.getFunctionCode();
    assertEquals(95, int0);
}",""
"public Iterator iteratePointers(EvalContext context) {
    Object result = compute(context);
    if (result == null) {
        return Collections.EMPTY_LIST.iterator();
    }
    if (result instanceof EvalContext) {
        return (EvalContext) result;
    }
    if (result instanceof NodeSet) {
        return new PointerIterator(((NodeSet) result).getPointers().iterator(), new QName(null, ""value""), context.getRootContext().getCurrentNodePointer().getLocale());
    }
    return new PointerIterator(ValueUtils.iterate(result), new QName(null, ""value""), context.getRootContext().getCurrentNodePointer().getLocale());
}","public void test0011() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.iteratePointers((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: id()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test0022() throws Throwable {
    Expression[] expressionArray0 = new Expression[15];
    CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: floor(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test0033() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: round()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public int getArgumentCount() {
    if (args == null) {
        return 0;
    }
    return args.length;
}","public void test0044() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
    assertEquals(0, coreFunction0.getArgumentCount());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test0045() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
    coreFunction0.computeValue((EvalContext) null);
    assertEquals(28, coreFunction0.getFunctionCode());
}",""
"public Iterator iteratePointers(EvalContext context) {
    Object result = compute(context);
    if (result == null) {
        return Collections.EMPTY_LIST.iterator();
    }
    if (result instanceof EvalContext) {
        return (EvalContext) result;
    }
    if (result instanceof NodeSet) {
        return new PointerIterator(((NodeSet) result).getPointers().iterator(), new QName(null, ""value""), context.getRootContext().getCurrentNodePointer().getLocale());
    }
    return new PointerIterator(ValueUtils.iterate(result), new QName(null, ""value""), context.getRootContext().getCurrentNodePointer().getLocale());
}","public void test0056() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.iteratePointers((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: false(null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test0067() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: position(null, null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test0078() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: ceiling()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test0089() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
    Object object0 = coreFunction0.computeValue((EvalContext) null);
    assertNotNull(object0);
}","/**
 * Computes a built-in function
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test00810() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
    Object object0 = coreFunction0.computeValue((EvalContext) null);
    assertEquals(20, coreFunction0.getFunctionCode());
}",""
"protected String getFunctionName() {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return ""last"";
        case Compiler.FUNCTION_POSITION:
            return ""position"";
        case Compiler.FUNCTION_COUNT:
            return ""count"";
        case Compiler.FUNCTION_ID:
            return ""id"";
        case Compiler.FUNCTION_LOCAL_NAME:
            return ""local-name"";
        case Compiler.FUNCTION_NAMESPACE_URI:
            return ""namespace-uri"";
        case Compiler.FUNCTION_NAME:
            return ""name"";
        case Compiler.FUNCTION_STRING:
            return ""string"";
        case Compiler.FUNCTION_CONCAT:
            return ""concat"";
        case Compiler.FUNCTION_STARTS_WITH:
            return ""starts-with"";
        case Compiler.FUNCTION_CONTAINS:
            return ""contains"";
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return ""substring-before"";
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return ""substring-after"";
        case Compiler.FUNCTION_SUBSTRING:
            return ""substring"";
        case Compiler.FUNCTION_STRING_LENGTH:
            return ""string-length"";
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return ""normalize-space"";
        case Compiler.FUNCTION_TRANSLATE:
            return ""translate"";
        case Compiler.FUNCTION_BOOLEAN:
            return ""boolean"";
        case Compiler.FUNCTION_NOT:
            return ""not"";
        case Compiler.FUNCTION_TRUE:
            return ""true"";
        case Compiler.FUNCTION_FALSE:
            return ""false"";
        case Compiler.FUNCTION_LANG:
            return ""lang"";
        case Compiler.FUNCTION_NUMBER:
            return ""number"";
        case Compiler.FUNCTION_SUM:
            return ""sum"";
        case Compiler.FUNCTION_FLOOR:
            return ""floor"";
        case Compiler.FUNCTION_CEILING:
            return ""ceiling"";
        case Compiler.FUNCTION_ROUND:
            return ""round"";
        case Compiler.FUNCTION_KEY:
            return ""key"";
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return ""format-number"";
    }
    return ""unknownFunction"" + functionCode + ""()"";
}","public void test00911() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
    String string0 = coreFunction0.getFunctionName();
    assertEquals(""last"", string0);
}",""
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test01012() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: count()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"protected Object functionSubstringBefore(EvalContext context) {
    assertArgCount(2);
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
    int index = s1.indexOf(s2);
    if (index == -1) {
        return """";
    }
    return s1.substring(0, index);
}","public void test01113() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: local-name(null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"protected Object functionKey(EvalContext context) {
    assertArgCount(2);
    String key = InfoSetUtil.stringValue(getArg1().computeValue(context));
    Object value = getArg2().compute(context);
    EvalContext ec = null;
    if (value instanceof EvalContext) {
        ec = (EvalContext) value;
        if (ec.hasNext()) {
            value = ((NodePointer) ec.next()).getValue();
        } else {
            // empty context -> empty results
            return new BasicNodeSet();
        }
    }
    JXPathContext jxpathContext = context.getJXPathContext();
    NodeSet nodeSet = jxpathContext.getNodeSetByKey(key, value);
    if (ec != null && ec.hasNext()) {
        BasicNodeSet accum = new BasicNodeSet();
        accum.add(nodeSet);
        while (ec.hasNext()) {
            value = ((NodePointer) ec.next()).getValue();
            accum.add(jxpathContext.getNodeSetByKey(key, value));
        }
        nodeSet = accum;
    }
    return new NodeSetContext(context, nodeSet);
}","public void test01214() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.functionKey((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: namespace-uri()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"protected String getFunctionName() {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return ""last"";
        case Compiler.FUNCTION_POSITION:
            return ""position"";
        case Compiler.FUNCTION_COUNT:
            return ""count"";
        case Compiler.FUNCTION_ID:
            return ""id"";
        case Compiler.FUNCTION_LOCAL_NAME:
            return ""local-name"";
        case Compiler.FUNCTION_NAMESPACE_URI:
            return ""namespace-uri"";
        case Compiler.FUNCTION_NAME:
            return ""name"";
        case Compiler.FUNCTION_STRING:
            return ""string"";
        case Compiler.FUNCTION_CONCAT:
            return ""concat"";
        case Compiler.FUNCTION_STARTS_WITH:
            return ""starts-with"";
        case Compiler.FUNCTION_CONTAINS:
            return ""contains"";
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return ""substring-before"";
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return ""substring-after"";
        case Compiler.FUNCTION_SUBSTRING:
            return ""substring"";
        case Compiler.FUNCTION_STRING_LENGTH:
            return ""string-length"";
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return ""normalize-space"";
        case Compiler.FUNCTION_TRANSLATE:
            return ""translate"";
        case Compiler.FUNCTION_BOOLEAN:
            return ""boolean"";
        case Compiler.FUNCTION_NOT:
            return ""not"";
        case Compiler.FUNCTION_TRUE:
            return ""true"";
        case Compiler.FUNCTION_FALSE:
            return ""false"";
        case Compiler.FUNCTION_LANG:
            return ""lang"";
        case Compiler.FUNCTION_NUMBER:
            return ""number"";
        case Compiler.FUNCTION_SUM:
            return ""sum"";
        case Compiler.FUNCTION_FLOOR:
            return ""floor"";
        case Compiler.FUNCTION_CEILING:
            return ""ceiling"";
        case Compiler.FUNCTION_ROUND:
            return ""round"";
        case Compiler.FUNCTION_KEY:
            return ""key"";
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return ""format-number"";
    }
    return ""unknownFunction"" + functionCode + ""()"";
}","public void test01315() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
    String string0 = coreFunction0.getFunctionName();
    assertEquals(""name"", string0);
}",""
"protected Object functionContains(EvalContext context) {
    assertArgCount(2);
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
    return s1.indexOf(s2) != -1 ? Boolean.TRUE : Boolean.FALSE;
}","public void test01416() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.functionContains((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: string()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test01517() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: concat()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test01618() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: contains()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test01719() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: substring-before()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test01820() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: substring-after()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public String toString() {
    StringBuffer buffer = new StringBuffer();
    buffer.append(getFunctionName());
    buffer.append('(');
    Expression[] args = getArguments();
    if (args != null) {
        for (int i = 0; i < args.length; i++) {
            if (i > 0) {
                buffer.append("", "");
            }
            buffer.append(args[i]);
        }
    }
    buffer.append(')');
    return buffer.toString();
}","public void test01921() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
    String string0 = coreFunction0.toString();
    assertEquals(""string-length()"", string0);
}",""
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test02022() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: normalize-space()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test02123() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: translate()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test02224() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: boolean()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test02325() throws Throwable {
    Expression[] expressionArray0 = new Expression[3];
    CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: not(null, null, null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"protected Object functionSubstring(EvalContext context) {
    int ac = getArgumentCount();
    if (ac != 2 && ac != 3) {
        assertArgCount(2);
    }
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));
    if (Double.isNaN(from)) {
        return """";
    }
    from = Math.round(from);
    if (from > s1.length() + 1) {
        return """";
    }
    if (ac == 2) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    double length = InfoSetUtil.doubleValue(getArg3().computeValue(context));
    length = Math.round(length);
    if (length < 0) {
        return """";
    }
    double to = from + length;
    if (to < 1) {
        return """";
    }
    if (to > s1.length() + 1) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    if (from < 1) {
        from = 1;
    }
    return s1.substring((int) from - 1, (int) (to - 1));
}","public void test02426() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.functionSubstring((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: true(null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test02527() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: lang()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"protected Object functionSubstringBefore(EvalContext context) {
    assertArgCount(2);
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
    int index = s1.indexOf(s2);
    if (index == -1) {
        return """";
    }
    return s1.substring(0, index);
}","public void test02628() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: number()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public Object compute(EvalContext context) {
    return computeValue(context);
}","public void test02729() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.compute((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: sum()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"protected String getFunctionName() {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return ""last"";
        case Compiler.FUNCTION_POSITION:
            return ""position"";
        case Compiler.FUNCTION_COUNT:
            return ""count"";
        case Compiler.FUNCTION_ID:
            return ""id"";
        case Compiler.FUNCTION_LOCAL_NAME:
            return ""local-name"";
        case Compiler.FUNCTION_NAMESPACE_URI:
            return ""namespace-uri"";
        case Compiler.FUNCTION_NAME:
            return ""name"";
        case Compiler.FUNCTION_STRING:
            return ""string"";
        case Compiler.FUNCTION_CONCAT:
            return ""concat"";
        case Compiler.FUNCTION_STARTS_WITH:
            return ""starts-with"";
        case Compiler.FUNCTION_CONTAINS:
            return ""contains"";
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return ""substring-before"";
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return ""substring-after"";
        case Compiler.FUNCTION_SUBSTRING:
            return ""substring"";
        case Compiler.FUNCTION_STRING_LENGTH:
            return ""string-length"";
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return ""normalize-space"";
        case Compiler.FUNCTION_TRANSLATE:
            return ""translate"";
        case Compiler.FUNCTION_BOOLEAN:
            return ""boolean"";
        case Compiler.FUNCTION_NOT:
            return ""not"";
        case Compiler.FUNCTION_TRUE:
            return ""true"";
        case Compiler.FUNCTION_FALSE:
            return ""false"";
        case Compiler.FUNCTION_LANG:
            return ""lang"";
        case Compiler.FUNCTION_NUMBER:
            return ""number"";
        case Compiler.FUNCTION_SUM:
            return ""sum"";
        case Compiler.FUNCTION_FLOOR:
            return ""floor"";
        case Compiler.FUNCTION_CEILING:
            return ""ceiling"";
        case Compiler.FUNCTION_ROUND:
            return ""round"";
        case Compiler.FUNCTION_KEY:
            return ""key"";
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return ""format-number"";
    }
    return ""unknownFunction"" + functionCode + ""()"";
}","public void test02830() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
    String string0 = coreFunction0.getFunctionName();
    assertEquals(""unknownFunction28()"", string0);
}",""
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test02931() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: key(null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test03032() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test03133() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals((-271), coreFunction0.getFunctionCode());
}",""
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test03134() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test03235() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test03236() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(15, coreFunction0.getFunctionCode());
}",""
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test03337() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test03438() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(3, coreFunction0.getFunctionCode());
}",""
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test03439() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test03540() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(4, coreFunction0.getFunctionCode());
}",""
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test03541() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test03642() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(5, coreFunction0.getFunctionCode());
}",""
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test03643() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test03744() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test03845() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test03946() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertTrue(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test04047() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test04048() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(9, coreFunction0.getFunctionCode());
}",""
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test04149() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test04150() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(10, coreFunction0.getFunctionCode());
}",""
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test04251() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test04252() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(11, coreFunction0.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test04353() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(12, coreFunction0.getFunctionCode());
}",""
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test04354() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test04455() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(13, coreFunction0.getFunctionCode());
}",""
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test04456() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test04557() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(14, coreFunction0.getFunctionCode());
}",""
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test04558() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test04659() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(16, coreFunction0.getFunctionCode());
}",""
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test04660() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test04761() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(17, coreFunction0.getFunctionCode());
}",""
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test04762() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test04863() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test04964() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test04965() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(19, coreFunction0.getFunctionCode());
}",""
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test05066() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test05067() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(20, coreFunction0.getFunctionCode());
}",""
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test05168() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test05169() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(21, coreFunction0.getFunctionCode());
}",""
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test05270() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertTrue(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test05371() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test05472() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test05473() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(24, coreFunction0.getFunctionCode());
}",""
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test05574() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test05575() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(25, coreFunction0.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test05676() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(26, coreFunction0.getFunctionCode());
}",""
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test05677() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test05778() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test05779() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(27, coreFunction0.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test05880() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(28, coreFunction0.getFunctionCode());
}",""
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test05881() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test05982() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(29, coreFunction0.getFunctionCode());
}",""
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test05983() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public boolean isContextDependent() {
    if (!contextDependencyKnown) {
        contextDependent = computeContextDependent();
        contextDependencyKnown = true;
    }
    return contextDependent;
}","public void test06084() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}","/**
 * Returns true if this expression should be re-evaluated
 * each time the current position in the context changes.
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test06185() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction((-312), (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals((-312), coreFunction0.getFunctionCode());
}",""
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test06186() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction((-312), (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test06287() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test06288() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(30, coreFunction0.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test06389() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(30, coreFunction0.getFunctionCode());
}",""
"public boolean computeContextDependent() {
    if (super.computeContextDependent()) {
        return true;
    }
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
        case Compiler.FUNCTION_POSITION:
            return true;
        case Compiler.FUNCTION_BOOLEAN:
        case Compiler.FUNCTION_LOCAL_NAME:
        case Compiler.FUNCTION_NAME:
        case Compiler.FUNCTION_NAMESPACE_URI:
        case Compiler.FUNCTION_STRING:
        case Compiler.FUNCTION_LANG:
        case Compiler.FUNCTION_NUMBER:
            return args == null || args.length == 0;
        case Compiler.FUNCTION_COUNT:
        case Compiler.FUNCTION_ID:
        case Compiler.FUNCTION_CONCAT:
        case Compiler.FUNCTION_STARTS_WITH:
        case Compiler.FUNCTION_CONTAINS:
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
        case Compiler.FUNCTION_SUBSTRING_AFTER:
        case Compiler.FUNCTION_SUBSTRING:
        case Compiler.FUNCTION_STRING_LENGTH:
        case Compiler.FUNCTION_NORMALIZE_SPACE:
        case Compiler.FUNCTION_TRANSLATE:
        case Compiler.FUNCTION_NOT:
        case Compiler.FUNCTION_TRUE:
        case Compiler.FUNCTION_FALSE:
        case Compiler.FUNCTION_SUM:
        case Compiler.FUNCTION_FLOOR:
        case Compiler.FUNCTION_CEILING:
        case Compiler.FUNCTION_ROUND:
            return false;
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return args != null && args.length == 2;
    }
    return false;
}","public void test06390() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}","/**
 * Returns true if any argument is context dependent or if
 * the function is last(), position(), boolean(), local-name(),
 * name(), string(), lang(), number().
 */"
"public int getFunctionCode() {
    return functionCode;
}","public void test06491() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) coreFunction0);
    CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
    Class<Object> class0 = Object.class;
    jXPathContextReferenceImpl0.getValue(""last"", (Expression) coreOperationGreaterThan0, (Class) class0);
    assertEquals(1, coreFunction0.getFunctionCode());
}",""
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test06592() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object compute(EvalContext context) {
    return computeValue(context);
}","public void test06693() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.compute((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test06794() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test06895() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test06996() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: starts-with()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test07097() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: substring(null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Iterator iteratePointers(EvalContext context) {
    Object result = compute(context);
    if (result == null) {
        return Collections.EMPTY_LIST.iterator();
    }
    if (result instanceof EvalContext) {
        return (EvalContext) result;
    }
    if (result instanceof NodeSet) {
        return new PointerIterator(((NodeSet) result).getPointers().iterator(), new QName(null, ""value""), context.getRootContext().getCurrentNodePointer().getLocale());
    }
    return new PointerIterator(ValueUtils.iterate(result), new QName(null, ""value""), context.getRootContext().getCurrentNodePointer().getLocale());
}","public void test07198() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.iteratePointers((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test07299() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test073100() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: format-number()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"protected Object functionCount(EvalContext context) {
    assertArgCount(1);
    Expression arg1 = getArg1();
    int count = 0;
    Object value = arg1.compute(context);
    if (value instanceof NodePointer) {
        value = ((NodePointer) value).getValue();
    }
    if (value instanceof EvalContext) {
        EvalContext ctx = (EvalContext) value;
        while (ctx.hasNext()) {
            ctx.next();
            count++;
        }
    } else if (value instanceof Collection) {
        count = ((Collection) value).size();
    } else if (value == null) {
        count = 0;
    } else {
        count = 1;
    }
    return new Double(count);
}","public void test074101() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""'&"");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionCount(evalContext0);
    assertEquals(1.0, object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test074102() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""'&"");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionCount(evalContext0);
    assertEquals(10, coreFunction0.getFunctionCode());
}",""
"protected Object functionCount(EvalContext context) {
    assertArgCount(1);
    Expression arg1 = getArg1();
    int count = 0;
    Object value = arg1.compute(context);
    if (value instanceof NodePointer) {
        value = ((NodePointer) value).getValue();
    }
    if (value instanceof EvalContext) {
        EvalContext ctx = (EvalContext) value;
        while (ctx.hasNext()) {
            ctx.next();
            count++;
        }
    } else if (value instanceof Collection) {
        count = ((Collection) value).size();
    } else if (value == null) {
        count = 0;
    } else {
        count = 1;
    }
    return new Double(count);
}","public void test075103() throws Throwable {
    Constant constant0 = new Constant((String) null);
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(87, expressionArray0);
    Object object0 = coreFunction0.functionCount((EvalContext) null);
    assertEquals(0.0, object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test075104() throws Throwable {
    Constant constant0 = new Constant((String) null);
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(87, expressionArray0);
    Object object0 = coreFunction0.functionCount((EvalContext) null);
    assertEquals(87, coreFunction0.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test076105() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""i"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionCount((EvalContext) null);
    assertEquals(1074, coreFunction0.getFunctionCode());
}",""
"protected Object functionCount(EvalContext context) {
    assertArgCount(1);
    Expression arg1 = getArg1();
    int count = 0;
    Object value = arg1.compute(context);
    if (value instanceof NodePointer) {
        value = ((NodePointer) value).getValue();
    }
    if (value instanceof EvalContext) {
        EvalContext ctx = (EvalContext) value;
        while (ctx.hasNext()) {
            ctx.next();
            count++;
        }
    } else if (value instanceof Collection) {
        count = ((Collection) value).size();
    } else if (value == null) {
        count = 0;
    } else {
        count = 1;
    }
    return new Double(count);
}","public void test076106() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""i"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionCount((EvalContext) null);
    assertEquals(1.0, object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test077107() throws Throwable {
    Constant constant0 = new Constant((String) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, ""Lxicaleerr at line "", (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(2013265920, expressionArray0);
    Object object0 = coreFunction0.functionLang(evalContext0);
    assertEquals(2013265920, coreFunction0.getFunctionCode());
}",""
"protected Object functionLang(EvalContext context) {
    assertArgCount(1);
    String lang = InfoSetUtil.stringValue(getArg1().computeValue(context));
    NodePointer pointer = (NodePointer) context.getSingleNodePointer();
    if (pointer == null) {
        return Boolean.FALSE;
    }
    return pointer.isLanguage(lang) ? Boolean.TRUE : Boolean.FALSE;
}","public void test077108() throws Throwable {
    Constant constant0 = new Constant((String) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, ""Lxicaleerr at line "", (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(2013265920, expressionArray0);
    Object object0 = coreFunction0.functionLang(evalContext0);
    assertEquals(true, object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test078109() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""true"");
    expressionArray0[0] = (Expression) constant0;
    BasicNodeSet basicNodeSet0 = new BasicNodeSet();
    NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
    CoreFunction coreFunction0 = new CoreFunction((-1375), expressionArray0);
    coreFunction0.functionLang(nodeSetContext0);
    assertEquals((-1375), coreFunction0.getFunctionCode());
}",""
"protected Object functionLang(EvalContext context) {
    assertArgCount(1);
    String lang = InfoSetUtil.stringValue(getArg1().computeValue(context));
    NodePointer pointer = (NodePointer) context.getSingleNodePointer();
    if (pointer == null) {
        return Boolean.FALSE;
    }
    return pointer.isLanguage(lang) ? Boolean.TRUE : Boolean.FALSE;
}","public void test079110() throws Throwable {
    DecimalFormat decimalFormat0 = new DecimalFormat();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, decimalFormat0, (Pointer) null);
    Locale locale0 = Locale.CHINESE;
    NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, jXPathContextReferenceImpl0, locale0);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
    EvalContext evalContext0 = rootContext0.getAbsoluteRootContext();
    Constant constant0 = new Constant(""<<unknown namespace>>"");
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
    Object object0 = coreFunction0.functionLang(evalContext0);
    assertEquals(false, object0);
}",""
"protected Object functionKey(EvalContext context) {
    assertArgCount(2);
    String key = InfoSetUtil.stringValue(getArg1().computeValue(context));
    Object value = getArg2().compute(context);
    EvalContext ec = null;
    if (value instanceof EvalContext) {
        ec = (EvalContext) value;
        if (ec.hasNext()) {
            value = ((NodePointer) ec.next()).getValue();
        } else {
            // empty context -> empty results
            return new BasicNodeSet();
        }
    }
    JXPathContext jxpathContext = context.getJXPathContext();
    NodeSet nodeSet = jxpathContext.getNodeSetByKey(key, value);
    if (ec != null && ec.hasNext()) {
        BasicNodeSet accum = new BasicNodeSet();
        accum.add(nodeSet);
        while (ec.hasNext()) {
            value = ((NodePointer) ec.next()).getValue();
            accum.add(jxpathContext.getNodeSetByKey(key, value));
        }
        nodeSet = accum;
    }
    return new NodeSetContext(context, nodeSet);
}","public void test080111() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(291, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.functionKey((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test081112() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant((String) null);
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[2];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    expressionArray1[1] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction((-832), expressionArray1);
    coreFunction0.functionKey(evalContext0);
    assertEquals((-832), coreFunction0.getFunctionCode());
}",""
"public int getPosition() {
    return position;
}","public void test081113() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant((String) null);
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[2];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    expressionArray1[1] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction((-832), expressionArray1);
    coreFunction0.functionKey(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",""
"protected Object functionKey(EvalContext context) {
    assertArgCount(2);
    String key = InfoSetUtil.stringValue(getArg1().computeValue(context));
    Object value = getArg2().compute(context);
    EvalContext ec = null;
    if (value instanceof EvalContext) {
        ec = (EvalContext) value;
        if (ec.hasNext()) {
            value = ((NodePointer) ec.next()).getValue();
        } else {
            // empty context -> empty results
            return new BasicNodeSet();
        }
    }
    JXPathContext jxpathContext = context.getJXPathContext();
    NodeSet nodeSet = jxpathContext.getNodeSetByKey(key, value);
    if (ec != null && ec.hasNext()) {
        BasicNodeSet accum = new BasicNodeSet();
        accum.add(nodeSet);
        while (ec.hasNext()) {
            value = ((NodePointer) ec.next()).getValue();
            accum.add(jxpathContext.getNodeSetByKey(key, value));
        }
        nodeSet = accum;
    }
    return new NodeSetContext(context, nodeSet);
}","public void test082114() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""bSO^7fOHE}7N-aycB1"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[2];
    expressionArray1[0] = (Expression) coreFunction0;
    expressionArray1[1] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction1 = new CoreFunction(60, expressionArray1);
    // Undeclared exception!
    try {
        coreFunction1.functionKey(evalContext0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot find an element by key - no KeyManager has been specified
        //
        verifyException(""org.apache.commons.jxpath.JXPathContext"", e);
    }
}",""
"protected Object functionNamespaceURI(EvalContext context) {
    if (getArgumentCount() == 0) {
        NodePointer ptr = context.getCurrentNodePointer();
        String str = ptr.getNamespaceURI();
        return str == null ? """" : str;
    }
    assertArgCount(1);
    Object set = getArg1().compute(context);
    if (set instanceof EvalContext) {
        EvalContext ctx = (EvalContext) set;
        if (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            String str = ptr.getNamespaceURI();
            return str == null ? """" : str;
        }
    }
    return """";
}","public void test083115() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) coreFunction0);
    InitialContext initialContext0 = (InitialContext) jXPathContextReferenceImpl0.getAbsoluteRootContext();
    String string0 = (String) coreFunction0.functionNamespaceURI(initialContext0);
    assertNotNull(string0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test083116() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) coreFunction0);
    InitialContext initialContext0 = (InitialContext) jXPathContextReferenceImpl0.getAbsoluteRootContext();
    String string0 = (String) coreFunction0.functionNamespaceURI(initialContext0);
    assertEquals(1, coreFunction0.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test084117() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    coreFunction0.functionNamespaceURI((EvalContext) null);
    assertEquals(1074, coreFunction0.getFunctionCode());
}",""
"public int getPosition() {
    return position;
}","public void test085118() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[1];
    QName qName0 = new QName(""org.apache.commons.jxpath.ri.axes.SelfContext"");
    VariableReference variableReference0 = new VariableReference(qName0);
    expressionArray0[0] = (Expression) variableReference0;
    CoreFunction coreFunction0 = new CoreFunction(214, expressionArray0);
    coreFunction0.functionNamespaceURI(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test085119() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[1];
    QName qName0 = new QName(""org.apache.commons.jxpath.ri.axes.SelfContext"");
    VariableReference variableReference0 = new VariableReference(qName0);
    expressionArray0[0] = (Expression) variableReference0;
    CoreFunction coreFunction0 = new CoreFunction(214, expressionArray0);
    coreFunction0.functionNamespaceURI(evalContext0);
    assertEquals(214, coreFunction0.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test086120() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""'&"");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
    assertEquals(10, coreFunction0.getFunctionCode());
}",""
"protected Object functionNamespaceURI(EvalContext context) {
    if (getArgumentCount() == 0) {
        NodePointer ptr = context.getCurrentNodePointer();
        String str = ptr.getNamespaceURI();
        return str == null ? """" : str;
    }
    assertArgCount(1);
    Object set = getArg1().compute(context);
    if (set instanceof EvalContext) {
        EvalContext ctx = (EvalContext) set;
        if (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            String str = ptr.getNamespaceURI();
            return str == null ? """" : str;
        }
    }
    return """";
}","public void test086121() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""'&"");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
    assertNotNull(object0);
}",""
"public int getPosition() {
    return position;
}","public void test086122() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""'&"");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test087123() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    coreFunction0.functionLocalName((EvalContext) null);
    assertEquals(1074, coreFunction0.getFunctionCode());
}",""
"public int getPosition() {
    return position;
}","public void test088124() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""..Y."");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(3227, expressionArray1);
    coreFunction0.functionLocalName(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test088125() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""..Y."");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(3227, expressionArray1);
    coreFunction0.functionLocalName(evalContext0);
    assertEquals(3227, coreFunction0.getFunctionCode());
}",""
"public int getPosition() {
    return position;
}","public void test089126() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(2260, expressionArray1);
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
    EvalContext evalContext0 = rootContext0.getConstantContext((Object) null);
    coreFunction0.functionLocalName(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test089127() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(2260, expressionArray1);
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
    EvalContext evalContext0 = rootContext0.getConstantContext((Object) null);
    coreFunction0.functionLocalName(evalContext0);
    assertEquals(2260, coreFunction0.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test090128() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
    coreFunction0.functionName((EvalContext) null);
    assertEquals(5, coreFunction0.getFunctionCode());
}",""
"public int getPosition() {
    return position;
}","public void test091129() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""..."");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(3214, expressionArray1);
    coreFunction0.functionName(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test091130() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""..."");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(3214, expressionArray1);
    coreFunction0.functionName(evalContext0);
    assertEquals(3214, coreFunction0.getFunctionCode());
}",""
"public int getPosition() {
    return position;
}","public void test092131() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(116, expressionArray1);
    coreFunction0.functionName(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test092132() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(116, expressionArray1);
    coreFunction0.functionName(evalContext0);
    assertEquals(116, coreFunction0.getFunctionCode());
}",""
"public Object computeValue(EvalContext context) {
    switch(functionCode) {
        case Compiler.FUNCTION_LAST:
            return functionLast(context);
        case Compiler.FUNCTION_POSITION:
            return functionPosition(context);
        case Compiler.FUNCTION_COUNT:
            return functionCount(context);
        case Compiler.FUNCTION_LANG:
            return functionLang(context);
        case Compiler.FUNCTION_ID:
            return functionID(context);
        case Compiler.FUNCTION_LOCAL_NAME:
            return functionLocalName(context);
        case Compiler.FUNCTION_NAMESPACE_URI:
            return functionNamespaceURI(context);
        case Compiler.FUNCTION_NAME:
            return functionName(context);
        case Compiler.FUNCTION_STRING:
            return functionString(context);
        case Compiler.FUNCTION_CONCAT:
            return functionConcat(context);
        case Compiler.FUNCTION_STARTS_WITH:
            return functionStartsWith(context);
        case Compiler.FUNCTION_CONTAINS:
            return functionContains(context);
        case Compiler.FUNCTION_SUBSTRING_BEFORE:
            return functionSubstringBefore(context);
        case Compiler.FUNCTION_SUBSTRING_AFTER:
            return functionSubstringAfter(context);
        case Compiler.FUNCTION_SUBSTRING:
            return functionSubstring(context);
        case Compiler.FUNCTION_STRING_LENGTH:
            return functionStringLength(context);
        case Compiler.FUNCTION_NORMALIZE_SPACE:
            return functionNormalizeSpace(context);
        case Compiler.FUNCTION_TRANSLATE:
            return functionTranslate(context);
        case Compiler.FUNCTION_BOOLEAN:
            return functionBoolean(context);
        case Compiler.FUNCTION_NOT:
            return functionNot(context);
        case Compiler.FUNCTION_TRUE:
            return functionTrue(context);
        case Compiler.FUNCTION_FALSE:
            return functionFalse(context);
        case Compiler.FUNCTION_NULL:
            return functionNull(context);
        case Compiler.FUNCTION_NUMBER:
            return functionNumber(context);
        case Compiler.FUNCTION_SUM:
            return functionSum(context);
        case Compiler.FUNCTION_FLOOR:
            return functionFloor(context);
        case Compiler.FUNCTION_CEILING:
            return functionCeiling(context);
        case Compiler.FUNCTION_ROUND:
            return functionRound(context);
        case Compiler.FUNCTION_KEY:
            return functionKey(context);
        case Compiler.FUNCTION_FORMAT_NUMBER:
            return functionFormatNumber(context);
    }
    return null;
}","public void test093133() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}","/**
 * Computes a built-in function
 */"
"public Object compute(EvalContext context) {
    return computeValue(context);
}","public void test094134() throws Throwable {
    Constant constant0 = new Constant(""Te etym refer5ne\"""");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
    Object object0 = coreFunction0.compute((EvalContext) null);
    assertEquals(""Te etym refer5ne\""Te etym refer5ne\"""", object0);
}",""
"protected Object functionStartsWith(EvalContext context) {
    assertArgCount(2);
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
    return s1.startsWith(s2) ? Boolean.TRUE : Boolean.FALSE;
}","public void test095136() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-287));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-287), expressionArray0);
    Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
    assertEquals(false, object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test095137() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-287));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-287), expressionArray0);
    Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
    assertEquals((-287), coreFunction0.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test096138() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionContains((EvalContext) null);
    assertEquals((-271), coreFunction0.getFunctionCode());
}",""
"protected Object functionContains(EvalContext context) {
    assertArgCount(2);
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
    return s1.indexOf(s2) != -1 ? Boolean.TRUE : Boolean.FALSE;
}","public void test096139() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionContains((EvalContext) null);
    assertEquals(false, object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test097140() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
    Object object0 = coreFunction0.functionContains((EvalContext) null);
    assertEquals(40, coreFunction0.getFunctionCode());
}",""
"protected Object functionContains(EvalContext context) {
    assertArgCount(2);
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
    return s1.indexOf(s2) != -1 ? Boolean.TRUE : Boolean.FALSE;
}","public void test097141() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
    Object object0 = coreFunction0.functionContains((EvalContext) null);
    assertEquals(true, object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test098142() throws Throwable {
    Constant constant0 = new Constant(""The enttym refernce\"""");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(92, expressionArray0);
    Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
    assertEquals(92, coreFunction0.getFunctionCode());
}",""
"protected Object functionSubstringBefore(EvalContext context) {
    assertArgCount(2);
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
    int index = s1.indexOf(s2);
    if (index == -1) {
        return """";
    }
    return s1.substring(0, index);
}","public void test098143() throws Throwable {
    Constant constant0 = new Constant(""The enttym refernce\"""");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(92, expressionArray0);
    Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
    assertEquals("""", object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test099144() throws Throwable {
    Constant constant0 = new Constant(""Lexicaleerr at linq "");
    Expression[] expressionArray0 = new Expression[2];
    CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(923, expressionArray0);
    coreFunction0.functionSubstringBefore((EvalContext) null);
    assertEquals(923, coreFunction0.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test100145() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(291, expressionArray0);
    Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
    assertEquals(291, coreFunction0.getFunctionCode());
}",""
"protected Object functionSubstringAfter(EvalContext context) {
    assertArgCount(2);
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
    int index = s1.indexOf(s2);
    if (index == -1) {
        return """";
    }
    return s1.substring(index + s2.length());
}","public void test100146() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(291, expressionArray0);
    Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
    assertEquals("""", object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test101147() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-287));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-287), expressionArray0);
    Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
    assertEquals((-287), coreFunction0.getFunctionCode());
}",""
"protected Object functionSubstringAfter(EvalContext context) {
    assertArgCount(2);
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
    int index = s1.indexOf(s2);
    if (index == -1) {
        return """";
    }
    return s1.substring(index + s2.length());
}","public void test101148() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-287));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-287), expressionArray0);
    Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
    assertEquals("""", object0);
}",""
"protected Object functionSubstring(EvalContext context) {
    int ac = getArgumentCount();
    if (ac != 2 && ac != 3) {
        assertArgCount(2);
    }
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));
    if (Double.isNaN(from)) {
        return """";
    }
    from = Math.round(from);
    if (from > s1.length() + 1) {
        return """";
    }
    if (ac == 2) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    double length = InfoSetUtil.doubleValue(getArg3().computeValue(context));
    length = Math.round(length);
    if (length < 0) {
        return """";
    }
    double to = from + length;
    if (to < 1) {
        return """";
    }
    if (to > s1.length() + 1) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    if (from < 1) {
        from = 1;
    }
    return s1.substring((int) from - 1, (int) (to - 1));
}","public void test102149() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(848, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals("""", object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test102150() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(848, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(848, coreFunction0.getFunctionCode());
}",""
"protected Object functionSubstring(EvalContext context) {
    int ac = getArgumentCount();
    if (ac != 2 && ac != 3) {
        assertArgCount(2);
    }
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));
    if (Double.isNaN(from)) {
        return """";
    }
    from = Math.round(from);
    if (from > s1.length() + 1) {
        return """";
    }
    if (ac == 2) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    double length = InfoSetUtil.doubleValue(getArg3().computeValue(context));
    length = Math.round(length);
    if (length < 0) {
        return """";
    }
    double to = from + length;
    if (to < 1) {
        return """";
    }
    if (to > s1.length() + 1) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    if (from < 1) {
        from = 1;
    }
    return s1.substring((int) from - 1, (int) (to - 1));
}","public void test103151() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals("""", object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test103152() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(30, coreFunction0.getFunctionCode());
}",""
"protected Object functionSubstring(EvalContext context) {
    int ac = getArgumentCount();
    if (ac != 2 && ac != 3) {
        assertArgCount(2);
    }
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));
    if (Double.isNaN(from)) {
        return """";
    }
    from = Math.round(from);
    if (from > s1.length() + 1) {
        return """";
    }
    if (ac == 2) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    double length = InfoSetUtil.doubleValue(getArg3().computeValue(context));
    length = Math.round(length);
    if (length < 0) {
        return """";
    }
    double to = from + length;
    if (to < 1) {
        return """";
    }
    if (to > s1.length() + 1) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    if (from < 1) {
        from = 1;
    }
    return s1.substring((int) from - 1, (int) (to - 1));
}","public void test104153() throws Throwable {
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationLessThan0);
    Expression[] expressionArray0 = new Expression[2];
    CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, nameAttributeTest0);
    expressionArray0[0] = (Expression) coreOperationDivide0;
    expressionArray0[1] = (Expression) coreOperationLessThan0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(""Infinity"", object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test104154() throws Throwable {
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationLessThan0);
    Expression[] expressionArray0 = new Expression[2];
    CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, nameAttributeTest0);
    expressionArray0[0] = (Expression) coreOperationDivide0;
    expressionArray0[1] = (Expression) coreOperationLessThan0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals((-271), coreFunction0.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test105155() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals((-271), coreFunction0.getFunctionCode());
}",""
"protected Object functionSubstring(EvalContext context) {
    int ac = getArgumentCount();
    if (ac != 2 && ac != 3) {
        assertArgCount(2);
    }
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));
    if (Double.isNaN(from)) {
        return """";
    }
    from = Math.round(from);
    if (from > s1.length() + 1) {
        return """";
    }
    if (ac == 2) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    double length = InfoSetUtil.doubleValue(getArg3().computeValue(context));
    length = Math.round(length);
    if (length < 0) {
        return """";
    }
    double to = from + length;
    if (to < 1) {
        return """";
    }
    if (to > s1.length() + 1) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    if (from < 1) {
        from = 1;
    }
    return s1.substring((int) from - 1, (int) (to - 1));
}","public void test105156() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(""false"", object0);
}",""
"protected Object functionSubstring(EvalContext context) {
    int ac = getArgumentCount();
    if (ac != 2 && ac != 3) {
        assertArgCount(2);
    }
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));
    if (Double.isNaN(from)) {
        return """";
    }
    from = Math.round(from);
    if (from > s1.length() + 1) {
        return """";
    }
    if (ac == 2) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    double length = InfoSetUtil.doubleValue(getArg3().computeValue(context));
    length = Math.round(length);
    if (length < 0) {
        return """";
    }
    double to = from + length;
    if (to < 1) {
        return """";
    }
    if (to > s1.length() + 1) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    if (from < 1) {
        from = 1;
    }
    return s1.substring((int) from - 1, (int) (to - 1));
}","public void test106157() throws Throwable {
    Float float0 = new Float((double) (-4136));
    Constant constant0 = new Constant(float0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(3830, expressionArray0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreFunction0);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    expressionArray0[2] = (Expression) coreOperationMultiply0;
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""keS,*=9|*j}u20"");
    SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
    Object object0 = coreFunction0.functionSubstring(selfContext0);
    assertEquals(""-4136"", object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test106158() throws Throwable {
    Float float0 = new Float((double) (-4136));
    Constant constant0 = new Constant(float0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(3830, expressionArray0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreFunction0);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    expressionArray0[2] = (Expression) coreOperationMultiply0;
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""keS,*=9|*j}u20"");
    SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
    Object object0 = coreFunction0.functionSubstring(selfContext0);
    assertEquals(3830, coreFunction0.getFunctionCode());
}",""
"protected Object functionSubstring(EvalContext context) {
    int ac = getArgumentCount();
    if (ac != 2 && ac != 3) {
        assertArgCount(2);
    }
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));
    if (Double.isNaN(from)) {
        return """";
    }
    from = Math.round(from);
    if (from > s1.length() + 1) {
        return """";
    }
    if (ac == 2) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    double length = InfoSetUtil.doubleValue(getArg3().computeValue(context));
    length = Math.round(length);
    if (length < 0) {
        return """";
    }
    double to = from + length;
    if (to < 1) {
        return """";
    }
    if (to > s1.length() + 1) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    if (from < 1) {
        from = 1;
    }
    return s1.substring((int) from - 1, (int) (to - 1));
}","public void test107159() throws Throwable {
    Float float0 = new Float((double) (-257));
    Constant constant0 = new Constant(float0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction((-257), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals("""", object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test107160() throws Throwable {
    Float float0 = new Float((double) (-257));
    Constant constant0 = new Constant(float0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction((-257), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals((-257), coreFunction0.getFunctionCode());
}",""
"protected Object functionSubstring(EvalContext context) {
    int ac = getArgumentCount();
    if (ac != 2 && ac != 3) {
        assertArgCount(2);
    }
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));
    if (Double.isNaN(from)) {
        return """";
    }
    from = Math.round(from);
    if (from > s1.length() + 1) {
        return """";
    }
    if (ac == 2) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    double length = InfoSetUtil.doubleValue(getArg3().computeValue(context));
    length = Math.round(length);
    if (length < 0) {
        return """";
    }
    double to = from + length;
    if (to < 1) {
        return """";
    }
    if (to > s1.length() + 1) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    if (from < 1) {
        from = 1;
    }
    return s1.substring((int) from - 1, (int) (to - 1));
}","public void test108161() throws Throwable {
    Constant constant0 = new Constant((Number) null);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) coreOperationMultiply0;
    CoreFunction coreFunction0 = new CoreFunction((-257), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals("""", object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test108162() throws Throwable {
    Constant constant0 = new Constant((Number) null);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) coreOperationMultiply0;
    CoreFunction coreFunction0 = new CoreFunction((-257), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals((-257), coreFunction0.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test109163() throws Throwable {
    Long long0 = new Long(0L);
    Constant constant0 = new Constant(long0);
    CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, coreOperationGreaterThan0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) coreOperationGreaterThan0;
    CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(108, coreFunction0.getFunctionCode());
}",""
"protected Object functionSubstring(EvalContext context) {
    int ac = getArgumentCount();
    if (ac != 2 && ac != 3) {
        assertArgCount(2);
    }
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));
    if (Double.isNaN(from)) {
        return """";
    }
    from = Math.round(from);
    if (from > s1.length() + 1) {
        return """";
    }
    if (ac == 2) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    double length = InfoSetUtil.doubleValue(getArg3().computeValue(context));
    length = Math.round(length);
    if (length < 0) {
        return """";
    }
    double to = from + length;
    if (to < 1) {
        return """";
    }
    if (to > s1.length() + 1) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    if (from < 1) {
        from = 1;
    }
    return s1.substring((int) from - 1, (int) (to - 1));
}","public void test109164() throws Throwable {
    Long long0 = new Long(0L);
    Constant constant0 = new Constant(long0);
    CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, coreOperationGreaterThan0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) coreOperationGreaterThan0;
    CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals("""", object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test110165() throws Throwable {
    Float float0 = new Float((double) (-236));
    Constant constant0 = new Constant(float0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) coreOperationMultiply0;
    CoreFunction coreFunction0 = new CoreFunction((-236), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals((-236), coreFunction0.getFunctionCode());
}",""
"protected Object functionSubstring(EvalContext context) {
    int ac = getArgumentCount();
    if (ac != 2 && ac != 3) {
        assertArgCount(2);
    }
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));
    if (Double.isNaN(from)) {
        return """";
    }
    from = Math.round(from);
    if (from > s1.length() + 1) {
        return """";
    }
    if (ac == 2) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    double length = InfoSetUtil.doubleValue(getArg3().computeValue(context));
    length = Math.round(length);
    if (length < 0) {
        return """";
    }
    double to = from + length;
    if (to < 1) {
        return """";
    }
    if (to > s1.length() + 1) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    if (from < 1) {
        from = 1;
    }
    return s1.substring((int) from - 1, (int) (to - 1));
}","public void test110166() throws Throwable {
    Float float0 = new Float((double) (-236));
    Constant constant0 = new Constant(float0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) coreOperationMultiply0;
    CoreFunction coreFunction0 = new CoreFunction((-236), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(""55696"", object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test111167() throws Throwable {
    Double double0 = Expression.ONE;
    Constant constant0 = new Constant(double0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) coreOperationMultiply0;
    expressionArray0[2] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(2, coreFunction0.getFunctionCode());
}",""
"protected Object functionSubstring(EvalContext context) {
    int ac = getArgumentCount();
    if (ac != 2 && ac != 3) {
        assertArgCount(2);
    }
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));
    if (Double.isNaN(from)) {
        return """";
    }
    from = Math.round(from);
    if (from > s1.length() + 1) {
        return """";
    }
    if (ac == 2) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    double length = InfoSetUtil.doubleValue(getArg3().computeValue(context));
    length = Math.round(length);
    if (length < 0) {
        return """";
    }
    double to = from + length;
    if (to < 1) {
        return """";
    }
    if (to > s1.length() + 1) {
        if (from < 1) {
            from = 1;
        }
        return s1.substring((int) from - 1);
    }
    if (from < 1) {
        from = 1;
    }
    return s1.substring((int) from - 1, (int) (to - 1));
}","public void test111168() throws Throwable {
    Double double0 = Expression.ONE;
    Constant constant0 = new Constant(double0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) coreOperationMultiply0;
    expressionArray0[2] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(""1"", object0);
}",""
"protected Object functionStringLength(EvalContext context) {
    String s;
    if (getArgumentCount() == 0) {
        s = InfoSetUtil.stringValue(context.getCurrentNodePointer());
    } else {
        assertArgCount(1);
        s = InfoSetUtil.stringValue(getArg1().computeValue(context));
    }
    return new Double(s.length());
}","public void test112169() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.functionStringLength((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test113170() throws Throwable {
    Constant constant0 = new Constant("" CB"");
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(2320, expressionArray0);
    Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
    assertEquals(2320, coreFunction0.getFunctionCode());
}",""
"protected Object functionNormalizeSpace(EvalContext context) {
    assertArgCount(1);
    String s = InfoSetUtil.stringValue(getArg1().computeValue(context));
    char[] chars = s.toCharArray();
    int out = 0;
    int phase = 0;
    for (int in = 0; in < chars.length; in++) {
        switch(chars[in]) {
            case 0x20:
            case 0x9:
            case 0xD:
            case 0xA:
                if (phase == 0) {
                    // beginning
                    ;
                } else if (phase == 1) {
                    // non-space
                    phase = 2;
                    chars[out++] = ' ';
                }
                break;
            default:
                chars[out++] = chars[in];
                phase = 1;
        }
    }
    if (phase == 2) {
        // trailing-space
        out--;
    }
    return new String(chars, 0, out);
}","public void test113171() throws Throwable {
    Constant constant0 = new Constant("" CB"");
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(2320, expressionArray0);
    Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
    assertEquals(""CB"", object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test114172() throws Throwable {
    Constant constant0 = new Constant("".  Encountered: "");
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction((-2200), expressionArray0);
    Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
    assertEquals((-2200), coreFunction0.getFunctionCode());
}",""
"protected Object functionNormalizeSpace(EvalContext context) {
    assertArgCount(1);
    String s = InfoSetUtil.stringValue(getArg1().computeValue(context));
    char[] chars = s.toCharArray();
    int out = 0;
    int phase = 0;
    for (int in = 0; in < chars.length; in++) {
        switch(chars[in]) {
            case 0x20:
            case 0x9:
            case 0xD:
            case 0xA:
                if (phase == 0) {
                    // beginning
                    ;
                } else if (phase == 1) {
                    // non-space
                    phase = 2;
                    chars[out++] = ' ';
                }
                break;
            default:
                chars[out++] = chars[in];
                phase = 1;
        }
    }
    if (phase == 2) {
        // trailing-space
        out--;
    }
    return new String(chars, 0, out);
}","public void test114173() throws Throwable {
    Constant constant0 = new Constant("".  Encountered: "");
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction((-2200), expressionArray0);
    Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
    assertEquals("". Encountered:"", object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test115174() throws Throwable {
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) coreOperationMultiply0;
    expressionArray0[2] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionTranslate((EvalContext) null);
    assertEquals((-271), coreFunction0.getFunctionCode());
}",""
"protected Object functionTranslate(EvalContext context) {
    assertArgCount(3);
    String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
    String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
    String s3 = InfoSetUtil.stringValue(getArg3().computeValue(context));
    char[] chars = s1.toCharArray();
    int out = 0;
    for (int in = 0; in < chars.length; in++) {
        char c = chars[in];
        int inx = s2.indexOf(c);
        if (inx != -1) {
            if (inx < s3.length()) {
                chars[out++] = s3.charAt(inx);
            }
        } else {
            chars[out++] = c;
        }
    }
    return new String(chars, 0, out);
}","public void test115175() throws Throwable {
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) coreOperationMultiply0;
    expressionArray0[2] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionTranslate((EvalContext) null);
    assertEquals(""-2-"", object0);
}",""
"protected Object functionBoolean(EvalContext context) {
    assertArgCount(1);
    return InfoSetUtil.booleanValue(getArg1().computeValue(context)) ? Boolean.TRUE : Boolean.FALSE;
}","public void test116176() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction((-1971), (Expression[]) null);
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) coreFunction0;
    CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
    Object object0 = coreFunction1.functionBoolean((EvalContext) null);
    assertEquals(false, object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test116177() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction((-1971), (Expression[]) null);
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) coreFunction0;
    CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
    Object object0 = coreFunction1.functionBoolean((EvalContext) null);
    assertEquals(7, coreFunction1.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test117178() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""Pzm<\u0006-\""W"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionBoolean((EvalContext) null);
    assertEquals(1074, coreFunction0.getFunctionCode());
}",""
"protected Object functionBoolean(EvalContext context) {
    assertArgCount(1);
    return InfoSetUtil.booleanValue(getArg1().computeValue(context)) ? Boolean.TRUE : Boolean.FALSE;
}","public void test117179() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""Pzm<\u0006-\""W"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionBoolean((EvalContext) null);
    assertEquals(true, object0);
}",""
"protected Object functionNot(EvalContext context) {
    assertArgCount(1);
    return InfoSetUtil.booleanValue(getArg1().computeValue(context)) ? Boolean.FALSE : Boolean.TRUE;
}","public void test118180() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction((-1971), (Expression[]) null);
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) coreFunction0;
    CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
    Object object0 = coreFunction1.functionNot((EvalContext) null);
    assertEquals(true, object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test118181() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction((-1971), (Expression[]) null);
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) coreFunction0;
    CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
    Object object0 = coreFunction1.functionNot((EvalContext) null);
    assertEquals(7, coreFunction1.getFunctionCode());
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test119182() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionNot((EvalContext) null);
    assertEquals(1074, coreFunction0.getFunctionCode());
}",""
"protected Object functionNot(EvalContext context) {
    assertArgCount(1);
    return InfoSetUtil.booleanValue(getArg1().computeValue(context)) ? Boolean.FALSE : Boolean.TRUE;
}","public void test119183() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionNot((EvalContext) null);
    assertEquals(false, object0);
}",""
"protected Object functionNumber(EvalContext context) {
    if (getArgumentCount() == 0) {
        return InfoSetUtil.number(context.getCurrentNodePointer());
    }
    assertArgCount(1);
    return InfoSetUtil.number(getArg1().computeValue(context));
}","public void test120184() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    CoreFunction coreFunction0 = new CoreFunction(232, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.functionNumber((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: unknownFunction232()(null, null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test121185() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""..."");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionSum(evalContext0);
    assertEquals(10, coreFunction0.getFunctionCode());
}",""
"protected Object functionSum(EvalContext context) {
    assertArgCount(1);
    Object v = getArg1().compute(context);
    if (v == null) {
        return ZERO;
    }
    if (v instanceof EvalContext) {
        double sum = 0.0;
        EvalContext ctx = (EvalContext) v;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        return new Double(sum);
    }
    throw new JXPathException(""Invalid argument type for 'sum': "" + v.getClass().getName());
}","public void test121186() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""..."");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionSum(evalContext0);
    assertEquals(Double.NaN, object0);
}",""
"public int getFunctionCode() {
    return functionCode;
}","public void test122187() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant((String) null);
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionSum((EvalContext) null);
    assertEquals(1074, coreFunction0.getFunctionCode());
}",""
"protected Object functionSum(EvalContext context) {
    assertArgCount(1);
    Object v = getArg1().compute(context);
    if (v == null) {
        return ZERO;
    }
    if (v instanceof EvalContext) {
        double sum = 0.0;
        EvalContext ctx = (EvalContext) v;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        return new Double(sum);
    }
    throw new JXPathException(""Invalid argument type for 'sum': "" + v.getClass().getName());
}","public void test122188() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant((String) null);
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionSum((EvalContext) null);
    assertEquals(0.0, object0);
}",""
"protected Object functionSum(EvalContext context) {
    assertArgCount(1);
    Object v = getArg1().compute(context);
    if (v == null) {
        return ZERO;
    }
    if (v instanceof EvalContext) {
        double sum = 0.0;
        EvalContext ctx = (EvalContext) v;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        return new Double(sum);
    }
    throw new JXPathException(""Invalid argument type for 'sum': "" + v.getClass().getName());
}","public void test123189() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.functionSum((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Invalid argument type for 'sum': java.lang.String
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public Object compute(EvalContext context) {
    return computeValue(context);
}","public void test124190() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
    QName qName0 = new QName(""3030"", ""drUmJYs`u)/hhsg"");
    Locale locale0 = Locale.KOREAN;
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, predicateContext0, nodePointer0);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
    Object object0 = coreFunction0.compute(rootContext0);
    assertEquals(""330"", object0);
}",""
"public Object compute(EvalContext context) {
    return computeValue(context);
}","public void test125192() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) coreOperationMultiply0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.compute((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",""
"public Object compute(EvalContext context) {
    return computeValue(context);
}","public void test126193() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""F-n:F>WB"");
    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
    // Undeclared exception!
    try {
        coreFunction0.compute(ancestorContext0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.EvalContext"", e);
    }
}",""
