{
  "test1212" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Currency> class0 = Currency.class;\n    TypeToken<Currency> typeToken0 = TypeToken.get(class0);\n    Type type0 = typeToken0.getType();\n    gson0.fromJson(\"duplicate\", type0);\n}",
    "testName" : "test1212"
  },
  "test3434" : {
    "methodSignature" : "public boolean isJsonPrimitive()",
    "methodName" : "isJsonPrimitive",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    Gson gson0 = new Gson();\n    StringBuilder stringBuilder0 = new StringBuilder();\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuilder0);\n    jsonElement0.isJsonPrimitive();\n}",
    "testName" : "test3434"
  },
  "test5656" : {
    "methodSignature" : "public boolean isJsonNull()",
    "methodName" : "isJsonNull",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5656() throws Throwable {\n    Gson gson0 = new Gson();\n    JsonNull jsonNull0 = JsonNull.INSTANCE;\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) jsonNull0);\n    jsonElement0.isJsonNull();\n}",
    "testName" : "test5656"
  },
  "test2424" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    Gson gson0 = new Gson();\n    int[] intArray0 = new int[1];\n    AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);\n    JsonArray jsonArray0 = (JsonArray) gson0.toJsonTree((Object) atomicIntegerArray0);\n    jsonArray0.size();\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "public boolean isJsonObject()",
    "methodName" : "isJsonObject",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Gson gson0 = new Gson();\n    AtomicInteger atomicInteger0 = new AtomicInteger(267);\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicInteger0);\n    jsonElement0.isJsonObject();\n}",
    "testName" : "test1010"
  },
  "test4444" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4444() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<GregorianCalendar> class0 = GregorianCalendar.class;\n    Long long0 = gson0.fromJson(\"null\", (Type) class0);\n}",
    "testName" : "test4444"
  },
  "test3232" : {
    "methodSignature" : "public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    Gson gson0 = new Gson();\n    StringReader stringReader0 = new StringReader(\"wz4v\");\n    Class<String> class0 = String.class;\n    String string0 = gson0.fromJson((Reader) stringReader0, class0);\n}",
    "testName" : "test3232"
  },
  "test5454" : {
    "methodSignature" : "public final T fromJson(String json) throws IOException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5454() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<GregorianCalendar> class0 = GregorianCalendar.class;\n    Class<BitSet> class1 = BitSet.class;\n    TypeToken<BitSet> typeToken0 = TypeToken.get(class1);\n    JsonDeserializer<BitSet> jsonDeserializer0 = (JsonDeserializer<BitSet>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    TreeTypeAdapter<BitSet> treeTypeAdapter0 = new TreeTypeAdapter<BitSet>((JsonSerializer<BitSet>) null, jsonDeserializer0, gson0, typeToken0, (TypeAdapterFactory) null);\n    TypeAdapterRuntimeTypeWrapper<BitSet> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<BitSet>(gson0, treeTypeAdapter0, class0);\n    BitSet bitSet0 = typeAdapterRuntimeTypeWrapper0.fromJson(\"null\");\n}",
    "testName" : "test5454"
  },
  "test2222" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Short> class0 = Short.TYPE;\n    gson0.fromJson(\"com.google.gson.internal.LinkedTreeMap$Node\", (Type) class0);\n}",
    "testName" : "test2222"
  },
  "test033" : {
    "methodSignature" : "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter)",
    "methodName" : "newTypeHierarchyFactory",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Class<Character> class0 = Character.class;\n    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<Character>) null);\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "public boolean isBoolean()",
    "methodName" : "isBoolean",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Gson gson0 = new Gson();\n    Byte byte0 = new Byte((byte) 9);\n    JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) byte0);\n    jsonPrimitive0.isBoolean();\n}",
    "testName" : "test077"
  },
  "test1616" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Gson gson0 = new Gson();\n    byte[] byteArray0 = new byte[2];\n    byteArray0[0] = (byte) 57;\n    BitSet bitSet0 = BitSet.valueOf(byteArray0);\n    JsonArray jsonArray0 = (JsonArray) gson0.toJsonTree((Object) bitSet0);\n    jsonArray0.size();\n}",
    "testName" : "test1616"
  },
  "test3838" : {
    "methodSignature" : "public <T> T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<URI> class0 = URI.class;\n    gson0.fromJson(\">X\", class0);\n}",
    "testName" : "test3838"
  },
  "test2828" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Character> class0 = Character.TYPE;\n    Long long0 = gson0.fromJson(\"null\", (Type) class0);\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public final T fromJson(String json) throws IOException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<BitSet> class0 = BitSet.class;\n    TypeAdapter<BitSet> typeAdapter0 = gson0.getAdapter(class0);\n    TypeAdapterRuntimeTypeWrapper<BitSet> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<BitSet>(gson0, typeAdapter0, class0);\n    BitSet bitSet0 = typeAdapterRuntimeTypeWrapper0.fromJson(\"null\");\n}",
    "testName" : "test1414"
  },
  "test4848" : {
    "methodSignature" : "public <T> T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4848() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Locale> class0 = Locale.class;\n    gson0.fromJson(\"(#U[\\\"@6Z~.2\", class0);\n}",
    "testName" : "test4848"
  },
  "test3636" : {
    "methodSignature" : "public <T> T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3636() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<URL> class0 = URL.class;\n    URL uRL0 = gson0.fromJson(\"null\", class0);\n}",
    "testName" : "test3636"
  },
  "test5858" : {
    "methodSignature" : "public JsonElement toJsonTree(Object src)",
    "methodName" : "toJsonTree",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5858() throws Throwable {\n    ObjectConstructor<Short> objectConstructor0 = (ObjectConstructor<Short>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());\n    Gson gson0 = new Gson();\n    gson0.toJsonTree((Object) objectConstructor0);\n}",
    "testName" : "test5858"
  },
  "test2626" : {
    "methodSignature" : "public <T> T fromJson(JsonReader reader, Type typeOfT) throws JsonIOException, JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    Class<Long> class0 = Long.class;\n    Gson gson0 = new Gson();\n    StringReader stringReader0 = new StringReader(\"null\");\n    JsonReader jsonReader0 = new JsonReader(stringReader0);\n    GregorianCalendar gregorianCalendar0 = gson0.fromJson(jsonReader0, (Type) class0);\n}",
    "testName" : "test2626"
  },
  "test4242" : {
    "methodSignature" : "public <T> T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4242() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<InetAddress> class0 = InetAddress.class;\n    InetAddress inetAddress0 = gson0.fromJson(\"null\", class0);\n}",
    "testName" : "test4242"
  },
  "test3030" : {
    "methodSignature" : "public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    Gson gson0 = new Gson();\n    Character character0 = Character.valueOf('2');\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) character0);\n    Class<GregorianCalendar> class0 = GregorianCalendar.class;\n    gson0.fromJson(jsonElement0, class0);\n}",
    "testName" : "test3030"
  },
  "test5252" : {
    "methodSignature" : "public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5252() throws Throwable {\n    Gson gson0 = new Gson();\n    JsonObject jsonObject0 = new JsonObject();\n    Class<JsonPrimitive> class0 = JsonPrimitive.class;\n    gson0.fromJson((JsonElement) jsonObject0, class0);\n}",
    "testName" : "test5252"
  },
  "test2020" : {
    "methodSignature" : "public String toJson(Object src, Type typeOfSrc)",
    "methodName" : "toJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Boolean> class0 = Boolean.TYPE;\n    String string0 = gson0.toJson((Object) null, (Type) class0);\n}",
    "testName" : "test2020"
  },
  "test4040" : {
    "methodSignature" : "public boolean isJsonObject()",
    "methodName" : "isJsonObject",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4040() throws Throwable {\n    Gson gson0 = new Gson();\n    URI uRI0 = MockURI.aHttpURI;\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) uRI0);\n    jsonElement0.isJsonObject();\n}",
    "testName" : "test4040"
  },
  "test5050" : {
    "methodSignature" : "public boolean isString()",
    "methodName" : "isString",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5050() throws Throwable {\n    Gson gson0 = new Gson();\n    Locale locale0 = Locale.UK;\n    JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) locale0);\n    jsonPrimitive0.isString();\n}",
    "testName" : "test5050"
  },
  "test022" : {
    "methodSignature" : "public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base, final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter)",
    "methodName" : "newFactoryForMultipleTypes",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Class<Boolean> class0 = Boolean.class;\n    Gson gson0 = new Gson();\n    TypeAdapter<Boolean> typeAdapter0 = TypeAdapters.BOOLEAN_AS_STRING;\n    TypeAdapterRuntimeTypeWrapper<Boolean> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Boolean>(gson0, typeAdapter0, class0);\n    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Boolean>) class0, (TypeAdapter<? super Boolean>) typeAdapterRuntimeTypeWrapper0);\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "public boolean isJsonArray()",
    "methodName" : "isJsonArray",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Gson gson0 = new Gson();\n    InetAddress inetAddress0 = MockInetAddress.getByName(\"BEGIN_OBJECT\");\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) inetAddress0);\n    jsonElement0.isJsonArray();\n}",
    "testName" : "test066"
  },
  "test1818" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Boolean> class0 = Boolean.TYPE;\n    Long long0 = gson0.fromJson(\"null\", (Type) class0);\n}",
    "testName" : "test1818"
  },
  "test5757" : {
    "methodSignature" : "public boolean isJsonPrimitive()",
    "methodName" : "isJsonPrimitive",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5757() throws Throwable {\n    Gson gson0 = new Gson();\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);\n    jsonElement0.isJsonPrimitive();\n}",
    "testName" : "test5757"
  },
  "test2323" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Integer> class0 = Integer.TYPE;\n    gson0.fromJson(\"Error\", (Type) class0);\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Class<BitSet> class0 = BitSet.class;\n    Gson gson0 = new Gson();\n    gson0.fromJson(\"[hMu]=\", (Type) class0);\n}",
    "testName" : "test1313"
  },
  "test4545" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4545() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<GregorianCalendar> class0 = GregorianCalendar.class;\n    TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);\n    Class<? super GregorianCalendar> class1 = typeToken0.getRawType();\n    gson0.fromJson(\"{NM%K}.T\\\"]\", (Type) class1);\n}",
    "testName" : "test4545"
  },
  "test3535" : {
    "methodSignature" : "public boolean isString()",
    "methodName" : "isString",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    Gson gson0 = new Gson();\n    StringBuffer stringBuffer0 = new StringBuffer();\n    JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) stringBuffer0);\n    jsonPrimitive0.isString();\n}",
    "testName" : "test3535"
  },
  "test5555" : {
    "methodSignature" : "public String toJson(JsonElement jsonElement)",
    "methodName" : "toJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5555() throws Throwable {\n    Gson gson0 = new Gson();\n    String string0 = gson0.toJson((JsonElement) null);\n}",
    "testName" : "test5555"
  },
  "test2121" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Byte> class0 = Byte.TYPE;\n    gson0.fromJson(\"'wDTS'Xdd\", (Type) class0);\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "public boolean isJsonNull()",
    "methodName" : "isJsonNull",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Gson gson0 = new Gson();\n    Locale locale0 = Locale.CHINA;\n    Currency currency0 = Currency.getInstance(locale0);\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) currency0);\n    jsonElement0.isJsonNull();\n}",
    "testName" : "test1111"
  },
  "test4343" : {
    "methodSignature" : "public boolean isNumber()",
    "methodName" : "isNumber",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4343() throws Throwable {\n    Gson gson0 = new Gson();\n    UUID uUID0 = MockUUID.randomUUID();\n    JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) uUID0);\n    jsonPrimitive0.isNumber();\n}",
    "testName" : "test4343"
  },
  "test3333" : {
    "methodSignature" : "public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    Gson gson0 = new Gson();\n    StringReader stringReader0 = new StringReader(\"null\");\n    Class<String> class0 = String.class;\n    String string0 = gson0.fromJson((Reader) stringReader0, class0);\n}",
    "testName" : "test3333"
  },
  "test011" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Gson gson0 = new Gson();\n    String string0 = gson0.toString();\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "public boolean isString()",
    "methodName" : "isString",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Gson gson0 = new Gson();\n    Short short0 = new Short((short) 1);\n    JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) short0);\n    jsonPrimitive0.isString();\n}",
    "testName" : "test055"
  },
  "test099" : {
    "methodSignature" : "public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Gson gson0 = new Gson();\n    JsonArray jsonArray0 = new JsonArray();\n    Class<AtomicInteger> class0 = AtomicInteger.class;\n    gson0.fromJson((JsonElement) jsonArray0, class0);\n}",
    "testName" : "test099"
  },
  "test2727" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Character> class0 = Character.TYPE;\n    gson0.fromJson(\"H#L[a|Yce5}9{$~+j\", (Type) class0);\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public <T> T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Gson gson0 = new Gson();\n    JsonArray jsonArray0 = new JsonArray();\n    Class<Boolean> class0 = Boolean.TYPE;\n    gson0.fromJson((JsonElement) jsonArray0, (Type) class0);\n}",
    "testName" : "test1717"
  },
  "test4949" : {
    "methodSignature" : "public <T> T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4949() throws Throwable {\n    Class<Locale> class0 = Locale.class;\n    Gson gson0 = new Gson();\n    gson0.fromJson(\"_\", class0);\n}",
    "testName" : "test4949"
  },
  "test3939" : {
    "methodSignature" : "public <T> T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3939() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<URI> class0 = URI.class;\n    URI uRI0 = gson0.fromJson(\"null\", class0);\n}",
    "testName" : "test3939"
  },
  "test5959" : {
    "methodSignature" : "public <T> TypeAdapter<T> getAdapter(Class<T> type)",
    "methodName" : "getAdapter",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5959() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Calendar> class0 = Calendar.class;\n    TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(class0);\n}",
    "testName" : "test5959"
  },
  "test2525" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Long> class0 = Long.TYPE;\n    gson0.fromJson(\"Error: Expecting: bitset number value (1, 0), Found: \", (Type) class0);\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public String toJson(Object src, Type typeOfSrc)",
    "methodName" : "toJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<BitSet> class0 = BitSet.class;\n    String string0 = gson0.toJson((Object) null, (Type) class0);\n}",
    "testName" : "test1515"
  },
  "test4747" : {
    "methodSignature" : "public boolean isJsonNull()",
    "methodName" : "isJsonNull",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4747() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<GregorianCalendar> class0 = GregorianCalendar.class;\n    TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);\n    Class<? super GregorianCalendar> class1 = typeToken0.getRawType();\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class1);\n    jsonElement0.isJsonNull();\n}",
    "testName" : "test4747"
  },
  "test3737" : {
    "methodSignature" : "public boolean isBoolean()",
    "methodName" : "isBoolean",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3737() throws Throwable {\n    Gson gson0 = new Gson();\n    URL uRL0 = MockURL.getFileExample();\n    JsonPrimitive jsonPrimitive0 = (JsonPrimitive) gson0.toJsonTree((Object) uRL0);\n    jsonPrimitive0.isBoolean();\n}",
    "testName" : "test3737"
  },
  "test5353" : {
    "methodSignature" : "public boolean isBoolean()",
    "methodName" : "isBoolean",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5353() throws Throwable {\n    Gson gson0 = new Gson();\n    Character character0 = Character.valueOf('_');\n    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);\n    Class<JsonPrimitive> class0 = JsonPrimitive.class;\n    JsonPrimitive jsonPrimitive1 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);\n    jsonPrimitive1.isBoolean();\n}",
    "testName" : "test5353"
  },
  "test4141" : {
    "methodSignature" : "public <T> T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4141() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<InetAddress> class0 = InetAddress.class;\n    gson0.fromJson(\"yOvN cannTthn:udle\", class0);\n}",
    "testName" : "test4141"
  },
  "test3131" : {
    "methodSignature" : "public boolean isJsonNull()",
    "methodName" : "isJsonNull",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Character> class0 = Character.TYPE;\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);\n    jsonElement0.isJsonNull();\n}",
    "testName" : "test3131"
  },
  "test5151" : {
    "methodSignature" : "public final T fromJson(String json) throws IOException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5151() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<BitSet> class0 = BitSet.class;\n    TypeToken<BitSet> typeToken0 = TypeToken.get(class0);\n    JsonDeserializer<BitSet> jsonDeserializer0 = (JsonDeserializer<BitSet>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class), any(java.lang.reflect.Type.class), any(com.google.gson.JsonDeserializationContext.class));\n    TreeTypeAdapter<BitSet> treeTypeAdapter0 = new TreeTypeAdapter<BitSet>((JsonSerializer<BitSet>) null, jsonDeserializer0, gson0, typeToken0, (TypeAdapterFactory) null);\n    TypeAdapterRuntimeTypeWrapper<BitSet> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<BitSet>(gson0, treeTypeAdapter0, class0);\n    BitSet bitSet0 = typeAdapterRuntimeTypeWrapper0.fromJson(\"6}UK%^^[\\\"Ku\");\n}",
    "testName" : "test5151"
  },
  "test000" : {
    "methodSignature" : "public String toJson(JsonElement jsonElement)",
    "methodName" : "toJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Gson gson0 = new Gson();\n    ZoneOffset zoneOffset0 = ZoneOffset.MAX;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.ITALIAN;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) mockGregorianCalendar0);\n    String string0 = gson0.toJson(jsonElement0);\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "public static <TT> TypeAdapterFactory newFactory(final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter)",
    "methodName" : "newFactory",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeToken<Object> typeToken0 = TypeToken.get(class0);\n    Gson gson0 = new Gson();\n    TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);\n    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, typeAdapter0);\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Gson gson0 = new Gson();\n    AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicBoolean0);\n    Class<JsonPrimitive> class0 = JsonPrimitive.class;\n    JsonPrimitive jsonPrimitive0 = gson0.fromJson(jsonElement0, class0);\n}",
    "testName" : "test088"
  },
  "test2929" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Character> class0 = Character.TYPE;\n    gson0.fromJson(\"yOvN cannTthn:udle\", (Type) class0);\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Boolean> class0 = Boolean.TYPE;\n    gson0.fromJson(\"Error: Expecting: bitset number value (1, 0), Found: \", (Type) class0);\n}",
    "testName" : "test1919"
  }
}