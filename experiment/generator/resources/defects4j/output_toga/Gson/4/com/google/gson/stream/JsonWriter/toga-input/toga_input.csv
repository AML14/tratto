focal_method,test_prefix,docstring
"public boolean isLenient() {
    return lenient;
}","public void test011() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    jsonWriter0.setLenient(true);
    assertTrue(jsonWriter0.isLenient());
}","/**
 * Returns true if this writer has relaxed syntax rules.
 */"
"public final boolean getSerializeNulls() {
    return serializeNulls;
}","public void test012() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    jsonWriter0.setLenient(true);
    Byte byte0 = new Byte((byte) (-112));
    jsonWriter0.value((Number) byte0);
    assertTrue(jsonWriter0.getSerializeNulls());
}","/**
 * Returns true if object members are serialized when their value is null.
 * This has no impact on array elements. The default is true.
 */"
"public final boolean getSerializeNulls() {
    return serializeNulls;
}","public void test023() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    jsonWriter0.isHtmlSafe();
    assertTrue(jsonWriter0.getSerializeNulls());
}","/**
 * Returns true if object members are serialized when their value is null.
 * This has no impact on array elements. The default is true.
 */"
"public final boolean getSerializeNulls() {
    return serializeNulls;
}","public void test045() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    jsonWriter0.isLenient();
    assertTrue(jsonWriter0.getSerializeNulls());
}","/**
 * Returns true if object members are serialized when their value is null.
 * This has no impact on array elements. The default is true.
 */"
"public final boolean getSerializeNulls() {
    return serializeNulls;
}","public void test056() throws Throwable {
    StringWriter stringWriter0 = new StringWriter(38);
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    boolean boolean0 = jsonWriter0.getSerializeNulls();
    assertTrue(boolean0);
}","/**
 * Returns true if object members are serialized when their value is null.
 * This has no impact on array elements. The default is true.
 */"
"public JsonWriter value(long value) throws IOException {
    writeDeferredName();
    beforeValue(false);
    out.write(Long.toString(value));
    return this;
}","public void test067() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    // Undeclared exception!
    try {
        jsonWriter0.value((-4334L));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JSON must start with an array or an object.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Encodes {@code value}.
 *
 * @return this writer.
 */"
"public JsonWriter endObject() throws IOException {
    return close(EMPTY_OBJECT, NONEMPTY_OBJECT, ""}"");
}","public void test078() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    // Undeclared exception!
    try {
        jsonWriter0.endObject();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Nesting problem.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Ends encoding the current object.
 *
 * @return this writer.
 */"
"public JsonWriter endObject() throws IOException {
    return close(EMPTY_OBJECT, NONEMPTY_OBJECT, ""}"");
}","public void test089() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    JsonWriter jsonWriter1 = jsonWriter0.beginObject();
    jsonWriter1.name(""Q#F[!zn<"");
    // Undeclared exception!
    try {
        jsonWriter1.endObject();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Dangling name: Q#F[!zn<
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Ends encoding the current object.
 *
 * @return this writer.
 */"
"public JsonWriter(Writer out) {
    if (out == null) {
        throw new NullPointerException(""out == null"");
    }
    this.out = out;
}","public void test0910() throws Throwable {
    JsonWriter jsonWriter0 = null;
    try {
        jsonWriter0 = new JsonWriter((Writer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // out == null
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Creates a new instance that writes a JSON-encoded stream to {@code out}.
 * For best performance, ensure {@link Writer} is buffered; wrapping in
 * {@link java.io.BufferedWriter BufferedWriter} if necessary.
 */"
"public final boolean getSerializeNulls() {
    return serializeNulls;
}","public void test1011() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    jsonWriter0.setIndent("""");
    assertTrue(jsonWriter0.getSerializeNulls());
}","/**
 * Returns true if object members are serialized when their value is null.
 * This has no impact on array elements. The default is true.
 */"
"public JsonWriter value(Number value) throws IOException {
    if (value == null) {
        return nullValue();
    }
    writeDeferredName();
    String string = value.toString();
    if (!lenient && (string.equals(""-Infinity"") || string.equals(""Infinity"") || string.equals(""NaN""))) {
        throw new IllegalArgumentException(""Numeric values must be finite, but was "" + value);
    }
    beforeValue(false);
    out.append(string);
    return this;
}","public void test1112() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    JsonWriter jsonWriter1 = jsonWriter0.beginArray();
    jsonWriter1.endArray();
    jsonWriter1.close();
    Integer integer0 = new Integer(897);
    // Undeclared exception!
    try {
        jsonWriter0.value((Number) integer0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JsonWriter is closed.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Encodes {@code value}.
 *
 * @param value a finite value. May not be {@link Double#isNaN() NaNs} or
 *     {@link Double#isInfinite() infinities}.
 * @return this writer.
 */"
"public JsonWriter name(String name) throws IOException {
    if (name == null) {
        throw new NullPointerException(""name == null"");
    }
    if (deferredName != null) {
        throw new IllegalStateException();
    }
    if (stackSize == 0) {
        throw new IllegalStateException(""JsonWriter is closed."");
    }
    deferredName = name;
    return this;
}","public void test1314() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    // Undeclared exception!
    try {
        jsonWriter0.name((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // name == null
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Encodes the property name.
 *
 * @param name the name of the forthcoming value. May not be null.
 * @return this writer.
 */"
"public JsonWriter name(String name) throws IOException {
    if (name == null) {
        throw new NullPointerException(""name == null"");
    }
    if (deferredName != null) {
        throw new IllegalStateException();
    }
    if (stackSize == 0) {
        throw new IllegalStateException(""JsonWriter is closed."");
    }
    deferredName = name;
    return this;
}","public void test1415() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    jsonWriter0.name(""java.lang.Float@0000000002"");
    // Undeclared exception!
    try {
        jsonWriter0.name(""java.lang.Float@0000000002"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Encodes the property name.
 *
 * @param name the name of the forthcoming value. May not be null.
 * @return this writer.
 */"
"public JsonWriter name(String name) throws IOException {
    if (name == null) {
        throw new NullPointerException(""name == null"");
    }
    if (deferredName != null) {
        throw new IllegalStateException();
    }
    if (stackSize == 0) {
        throw new IllegalStateException(""JsonWriter is closed."");
    }
    deferredName = name;
    return this;
}","public void test1516() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    JsonWriter jsonWriter1 = jsonWriter0.beginArray();
    JsonWriter jsonWriter2 = jsonWriter1.endArray();
    jsonWriter1.close();
    // Undeclared exception!
    try {
        jsonWriter2.name("""");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JsonWriter is closed.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Encodes the property name.
 *
 * @param name the name of the forthcoming value. May not be null.
 * @return this writer.
 */"
"public JsonWriter value(String value) throws IOException {
    if (value == null) {
        return nullValue();
    }
    writeDeferredName();
    beforeValue(false);
    string(value);
    return this;
}","public void test1617() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    // Undeclared exception!
    try {
        jsonWriter0.value((String) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JSON must start with an array or an object.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Encodes {@code value}.
 *
 * @param value the literal string value, or null to encode a null literal.
 * @return this writer.
 */"
"public JsonWriter jsonValue(String value) throws IOException {
    if (value == null) {
        return nullValue();
    }
    writeDeferredName();
    beforeValue(false);
    out.append(value);
    return this;
}","public void test1718() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    // Undeclared exception!
    try {
        jsonWriter0.jsonValue((String) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JSON must start with an array or an object.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Writes {@code value} directly to the writer without quoting or
 * escaping.
 *
 * @param value the literal string value, or null to encode a null literal.
 * @return this writer.
 */"
"public JsonWriter nullValue() throws IOException {
    if (deferredName != null) {
        if (serializeNulls) {
            writeDeferredName();
        } else {
            deferredName = null;
            // skip the name and the value
            return this;
        }
    }
    beforeValue(false);
    out.write(""null"");
    return this;
}","public void test1819() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    JsonWriter jsonWriter1 = jsonWriter0.name(""rQ,v ~\""`Q2Dokvq+"");
    // Undeclared exception!
    try {
        jsonWriter1.nullValue();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Nesting problem.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Encodes {@code null}.
 *
 * @return this writer.
 */"
"public JsonWriter nullValue() throws IOException {
    if (deferredName != null) {
        if (serializeNulls) {
            writeDeferredName();
        } else {
            deferredName = null;
            // skip the name and the value
            return this;
        }
    }
    beforeValue(false);
    out.write(""null"");
    return this;
}","public void test1920() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    JsonWriter jsonWriter1 = jsonWriter0.name(""rQ,v ~\""`Q2Dokvq+"");
    jsonWriter1.setSerializeNulls(false);
    JsonWriter jsonWriter2 = jsonWriter1.nullValue();
    assertSame(jsonWriter2, jsonWriter1);
}","/**
 * Encodes {@code null}.
 *
 * @return this writer.
 */"
"public JsonWriter value(Number value) throws IOException {
    if (value == null) {
        return nullValue();
    }
    writeDeferredName();
    String string = value.toString();
    if (!lenient && (string.equals(""-Infinity"") || string.equals(""Infinity"") || string.equals(""NaN""))) {
        throw new IllegalArgumentException(""Numeric values must be finite, but was "" + value);
    }
    beforeValue(false);
    out.append(string);
    return this;
}","public void test2223() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    // Undeclared exception!
    try {
        jsonWriter0.value((Number) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JSON must start with an array or an object.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Encodes {@code value}.
 *
 * @param value a finite value. May not be {@link Double#isNaN() NaNs} or
 *     {@link Double#isInfinite() infinities}.
 * @return this writer.
 */"
"public final boolean getSerializeNulls() {
    return serializeNulls;
}","public void test2324() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    jsonWriter0.flush();
    assertTrue(jsonWriter0.getSerializeNulls());
}","/**
 * Returns true if object members are serialized when their value is null.
 * This has no impact on array elements. The default is true.
 */"
"public void flush() throws IOException {
    if (stackSize == 0) {
        throw new IllegalStateException(""JsonWriter is closed."");
    }
    out.flush();
}","public void test2425() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    JsonWriter jsonWriter1 = jsonWriter0.beginArray();
    jsonWriter1.endArray();
    jsonWriter1.close();
    // Undeclared exception!
    try {
        jsonWriter0.flush();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JsonWriter is closed.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Ensures all buffered data is written to the underlying {@link Writer}
 * and flushes that writer.
 */"
"public void close() throws IOException {
    out.close();
    int size = stackSize;
    if (size > 1 || size == 1 && stack[size - 1] != NONEMPTY_DOCUMENT) {
        throw new IOException(""Incomplete document"");
    }
    stackSize = 0;
}","public void test2526() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    JsonWriter jsonWriter1 = jsonWriter0.beginArray();
    try {
        jsonWriter1.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Incomplete document
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Flushes and closes this writer and the underlying {@link Writer}.
 *
 * @throws IOException if the JSON document is incomplete.
 */"
"public void close() throws IOException {
    out.close();
    int size = stackSize;
    if (size > 1 || size == 1 && stack[size - 1] != NONEMPTY_DOCUMENT) {
        throw new IOException(""Incomplete document"");
    }
    stackSize = 0;
}","public void test2728() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    try {
        jsonWriter0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Incomplete document
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Flushes and closes this writer and the underlying {@link Writer}.
 *
 * @throws IOException if the JSON document is incomplete.
 */"
"public JsonWriter value(String value) throws IOException {
    if (value == null) {
        return nullValue();
    }
    writeDeferredName();
    beforeValue(false);
    string(value);
    return this;
}","public void test2829() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    JsonWriter jsonWriter1 = jsonWriter0.beginObject();
    JsonWriter jsonWriter2 = jsonWriter1.name(""gN*c;lz"");
    jsonWriter2.jsonValue(""gN*c;lz"");
    // Undeclared exception!
    try {
        jsonWriter1.value(""gN*c;lz"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Nesting problem.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Encodes {@code value}.
 *
 * @param value the literal string value, or null to encode a null literal.
 * @return this writer.
 */"
"public JsonWriter beginObject() throws IOException {
    writeDeferredName();
    return open(EMPTY_OBJECT, ""{"");
}","public void test3233() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    jsonWriter0.beginObject();
    // Undeclared exception!
    try {
        jsonWriter0.beginObject();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Nesting problem.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Begins encoding a new object. Each call to this method must be paired
 * with a call to {@link #endObject}.
 *
 * @return this writer.
 */"
"public JsonWriter beginArray() throws IOException {
    writeDeferredName();
    return open(EMPTY_ARRAY, ""["");
}","public void test3334() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    jsonWriter0.beginArray();
    JsonWriter jsonWriter1 = jsonWriter0.endArray();
    // Undeclared exception!
    try {
        jsonWriter1.beginArray();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JSON must have only one top-level value.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}","/**
 * Begins encoding a new array. Each call to this method must be paired with
 * a call to {@link #endArray}.
 *
 * @return this writer.
 */"
"public final boolean getSerializeNulls() {
    return serializeNulls;
}","public void test3436() throws Throwable {
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    jsonWriter0.setLenient(true);
    JsonWriter jsonWriter1 = jsonWriter0.value(0.0);
    jsonWriter1.value(0.0);
    assertTrue(jsonWriter0.getSerializeNulls());
}","/**
 * Returns true if object members are serialized when their value is null.
 * This has no impact on array elements. The default is true.
 */"
