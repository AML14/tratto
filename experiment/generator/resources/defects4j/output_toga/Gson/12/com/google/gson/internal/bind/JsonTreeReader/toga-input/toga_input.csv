focal_method,test_prefix,docstring
"@Override
public String nextString() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.STRING && token != JsonToken.NUMBER) {
        throw new IllegalStateException(""Expected "" + JsonToken.STRING + "" but was "" + token + locationString());
    }
    String result = ((JsonPrimitive) popStack()).getAsString();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test000() throws Throwable {
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive("""");
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    String string0 = jsonTreeReader0.nextString();
    assertEquals("""", string0);
}",""
"@Override
public long nextLong() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    long result = ((JsonPrimitive) peekStack()).getAsLong();
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test011() throws Throwable {
    Double double0 = new Double((-0.14075010792600606));
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    long long0 = jsonTreeReader0.nextLong();
    assertEquals(0L, long0);
}",""
"@Override
public long nextLong() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    long result = ((JsonPrimitive) peekStack()).getAsLong();
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test022() throws Throwable {
    Double double0 = new Double((-22.89672307759168));
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    long long0 = jsonTreeReader0.nextLong();
    assertEquals((-22L), long0);
}",""
"@Override
public int nextInt() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    int result = ((JsonPrimitive) peekStack()).getAsInt();
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test033() throws Throwable {
    Float float0 = new Float(0.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    int int0 = jsonTreeReader0.nextInt();
    assertEquals(0, int0);
}",""
"@Override
public double nextDouble() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    double result = ((JsonPrimitive) peekStack()).getAsDouble();
    if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {
        throw new NumberFormatException(""JSON forbids NaN and infinities: "" + result);
    }
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test044() throws Throwable {
    Double double0 = new Double(0.8883198299669907);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    double double1 = jsonTreeReader0.nextDouble();
    assertEquals(0.8883198299669907, double1, 0.01);
}",""
"@Override
public boolean nextBoolean() throws IOException {
    expect(JsonToken.BOOLEAN);
    boolean result = ((JsonPrimitive) popStack()).getAsBoolean();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test055() throws Throwable {
    Boolean boolean0 = Boolean.valueOf(true);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    boolean boolean1 = jsonTreeReader0.nextBoolean();
    assertTrue(boolean1);
}",""
"@Override
public void skipValue() throws IOException {
    if (peek() == JsonToken.NAME) {
        nextName();
        pathNames[stackSize - 2] = ""null"";
    } else {
        popStack();
        pathNames[stackSize - 1] = ""null"";
    }
    pathIndices[stackSize - 1]++;
}","public void test066() throws Throwable {
    JsonNull jsonNull0 = JsonNull.INSTANCE;
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonNull0);
    jsonTreeReader0.close();
    // Undeclared exception!
    try {
        jsonTreeReader0.skipValue();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JsonReader is closed
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public void skipValue() throws IOException {
    if (peek() == JsonToken.NAME) {
        nextName();
        pathNames[stackSize - 2] = ""null"";
    } else {
        popStack();
        pathNames[stackSize - 1] = ""null"";
    }
    pathIndices[stackSize - 1]++;
}","public void test077() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.skipValue();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public void promoteNameToValue() throws IOException {
    expect(JsonToken.NAME);
    Iterator<?> i = (Iterator<?>) peekStack();
    Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();
    push(entry.getValue());
    push(new JsonPrimitive((String) entry.getKey()));
}","public void test088() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Character character0 = Character.valueOf('r');
    jsonTreeReader0.beginArray();
    jsonArray0.add(character0);
    // Undeclared exception!
    try {
        jsonTreeReader0.promoteNameToValue();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",""
"public void promoteNameToValue() throws IOException {
    expect(JsonToken.NAME);
    Iterator<?> i = (Iterator<?>) peekStack();
    Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();
    push(entry.getValue());
    push(new JsonPrimitive((String) entry.getKey()));
}","public void test099() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.promoteNameToValue();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public String nextString() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.STRING && token != JsonToken.NUMBER) {
        throw new IllegalStateException(""Expected "" + JsonToken.STRING + "" but was "" + token + locationString());
    }
    String result = ((JsonPrimitive) popStack()).getAsString();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test1010() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Character character0 = Character.valueOf('r');
    jsonTreeReader0.beginArray();
    jsonArray0.add(character0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextString();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",""
"@Override
public String nextString() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.STRING && token != JsonToken.NUMBER) {
        throw new IllegalStateException(""Expected "" + JsonToken.STRING + "" but was "" + token + locationString());
    }
    String result = ((JsonPrimitive) popStack()).getAsString();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test1111() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextString();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public void nextNull() throws IOException {
    expect(JsonToken.NULL);
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
}","public void test1212() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Character character0 = Character.valueOf('r');
    jsonTreeReader0.beginArray();
    jsonArray0.add(character0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextNull();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",""
"@Override
public void nextNull() throws IOException {
    expect(JsonToken.NULL);
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
}","public void test1313() throws Throwable {
    Double double0 = new Double(1.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextNull();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NULL but was NUMBER at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public void nextNull() throws IOException {
    expect(JsonToken.NULL);
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
}","public void test1414() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextNull();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public String nextName() throws IOException {
    expect(JsonToken.NAME);
    Iterator<?> i = (Iterator<?>) peekStack();
    Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();
    String result = (String) entry.getKey();
    pathNames[stackSize - 1] = result;
    push(entry.getValue());
    return result;
}","public void test1515() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Character character0 = Character.valueOf('r');
    jsonTreeReader0.beginArray();
    jsonArray0.add(character0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextName();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",""
"@Override
public String nextName() throws IOException {
    expect(JsonToken.NAME);
    Iterator<?> i = (Iterator<?>) peekStack();
    Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();
    String result = (String) entry.getKey();
    pathNames[stackSize - 1] = result;
    push(entry.getValue());
    return result;
}","public void test1616() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextName();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public long nextLong() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    long result = ((JsonPrimitive) peekStack()).getAsLong();
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test1717() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Character character0 = Character.valueOf('r');
    jsonTreeReader0.beginArray();
    jsonArray0.add(character0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextLong();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",""
"@Override
public long nextLong() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    long result = ((JsonPrimitive) peekStack()).getAsLong();
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test1818() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextLong();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public int nextInt() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    int result = ((JsonPrimitive) peekStack()).getAsInt();
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test1919() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextInt();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public double nextDouble() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    double result = ((JsonPrimitive) peekStack()).getAsDouble();
    if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {
        throw new NumberFormatException(""JSON forbids NaN and infinities: "" + result);
    }
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test2020() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextDouble();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public boolean nextBoolean() throws IOException {
    expect(JsonToken.BOOLEAN);
    boolean result = ((JsonPrimitive) popStack()).getAsBoolean();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test2121() throws Throwable {
    Float float0 = new Float(1.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextBoolean();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected BOOLEAN but was NUMBER at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public boolean nextBoolean() throws IOException {
    expect(JsonToken.BOOLEAN);
    boolean result = ((JsonPrimitive) popStack()).getAsBoolean();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test2222() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextBoolean();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public void endObject() throws IOException {
    expect(JsonToken.END_OBJECT);
    // empty iterator
    popStack();
    // object
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
}","public void test2323() throws Throwable {
    Boolean boolean0 = Boolean.TRUE;
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.endObject();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected END_OBJECT but was BOOLEAN at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public void endObject() throws IOException {
    expect(JsonToken.END_OBJECT);
    // empty iterator
    popStack();
    // object
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
}","public void test2424() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.endObject();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public void endArray() throws IOException {
    expect(JsonToken.END_ARRAY);
    // empty iterator
    popStack();
    // array
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
}","public void test2525() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.endArray();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public void beginObject() throws IOException {
    expect(JsonToken.BEGIN_OBJECT);
    JsonObject object = (JsonObject) peekStack();
    push(object.entrySet().iterator());
}","public void test2626() throws Throwable {
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(""vb.Fsa#"");
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.beginObject();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected BEGIN_OBJECT but was STRING at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public void beginObject() throws IOException {
    expect(JsonToken.BEGIN_OBJECT);
    JsonObject object = (JsonObject) peekStack();
    push(object.entrySet().iterator());
}","public void test2727() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.beginObject();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public void beginArray() throws IOException {
    expect(JsonToken.BEGIN_ARRAY);
    JsonArray array = (JsonArray) peekStack();
    push(array.iterator());
    pathIndices[stackSize - 1] = 0;
}","public void test2828() throws Throwable {
    Character character0 = Character.valueOf('2');
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.beginArray();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected BEGIN_ARRAY but was STRING at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public void beginArray() throws IOException {
    expect(JsonToken.BEGIN_ARRAY);
    JsonArray array = (JsonArray) peekStack();
    push(array.iterator());
    pathIndices[stackSize - 1] = 0;
}","public void test2929() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.beginArray();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public String getPath() {
    StringBuilder result = new StringBuilder().append('$');
    for (int i = 0; i < stackSize; i++) {
        if (stack[i] instanceof JsonArray) {
            if (stack[++i] instanceof Iterator) {
                result.append('[').append(pathIndices[i]).append(']');
            }
        } else if (stack[i] instanceof JsonObject) {
            if (stack[++i] instanceof Iterator) {
                result.append('.');
                if (pathNames[i] != null) {
                    result.append(pathNames[i]);
                }
            }
        }
    }
    return result.toString();
}","public void test3030() throws Throwable {
    JsonObject jsonObject0 = new JsonObject();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
    jsonTreeReader0.beginObject();
    String string0 = jsonTreeReader0.getPath();
    assertEquals(""$."", string0);
}",""
"@Override
public String getPath() {
    StringBuilder result = new StringBuilder().append('$');
    for (int i = 0; i < stackSize; i++) {
        if (stack[i] instanceof JsonArray) {
            if (stack[++i] instanceof Iterator) {
                result.append('[').append(pathIndices[i]).append(']');
            }
        } else if (stack[i] instanceof JsonObject) {
            if (stack[++i] instanceof Iterator) {
                result.append('.');
                if (pathNames[i] != null) {
                    result.append(pathNames[i]);
                }
            }
        }
    }
    return result.toString();
}","public void test3131() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    String string0 = jsonTreeReader0.getPath();
    assertEquals(""$"", string0);
}",""
"@Override
public String getPath() {
    StringBuilder result = new StringBuilder().append('$');
    for (int i = 0; i < stackSize; i++) {
        if (stack[i] instanceof JsonArray) {
            if (stack[++i] instanceof Iterator) {
                result.append('[').append(pathIndices[i]).append(']');
            }
        } else if (stack[i] instanceof JsonObject) {
            if (stack[++i] instanceof Iterator) {
                result.append('.');
                if (pathNames[i] != null) {
                    result.append(pathNames[i]);
                }
            }
        }
    }
    return result.toString();
}","public void test3232() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    jsonTreeReader0.beginArray();
    String string0 = jsonTreeReader0.getPath();
    assertEquals(""$[0]"", string0);
}",""
"@Override
public String getPath() {
    StringBuilder result = new StringBuilder().append('$');
    for (int i = 0; i < stackSize; i++) {
        if (stack[i] instanceof JsonArray) {
            if (stack[++i] instanceof Iterator) {
                result.append('[').append(pathIndices[i]).append(']');
            }
        } else if (stack[i] instanceof JsonObject) {
            if (stack[++i] instanceof Iterator) {
                result.append('.');
                if (pathNames[i] != null) {
                    result.append(pathNames[i]);
                }
            }
        }
    }
    return result.toString();
}","public void test3333() throws Throwable {
    JsonObject jsonObject0 = new JsonObject();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
    String string0 = jsonTreeReader0.getPath();
    assertEquals(""$"", string0);
}",""
"@Override
public String getPath() {
    StringBuilder result = new StringBuilder().append('$');
    for (int i = 0; i < stackSize; i++) {
        if (stack[i] instanceof JsonArray) {
            if (stack[++i] instanceof Iterator) {
                result.append('[').append(pathIndices[i]).append(']');
            }
        } else if (stack[i] instanceof JsonObject) {
            if (stack[++i] instanceof Iterator) {
                result.append('.');
                if (pathNames[i] != null) {
                    result.append(pathNames[i]);
                }
            }
        }
    }
    return result.toString();
}","public void test3434() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    String string0 = jsonTreeReader0.getPath();
    assertEquals(""$"", string0);
}",""
"@Override
public JsonToken peek() throws IOException {
    if (stackSize == 0) {
        return JsonToken.END_DOCUMENT;
    }
    Object o = peekStack();
    if (o instanceof Iterator) {
        boolean isObject = stack[stackSize - 2] instanceof JsonObject;
        Iterator<?> iterator = (Iterator<?>) o;
        if (iterator.hasNext()) {
            if (isObject) {
                return JsonToken.NAME;
            } else {
                push(iterator.next());
                return peek();
            }
        } else {
            return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;
        }
    } else if (o instanceof JsonObject) {
        return JsonToken.BEGIN_OBJECT;
    } else if (o instanceof JsonArray) {
        return JsonToken.BEGIN_ARRAY;
    } else if (o instanceof JsonPrimitive) {
        JsonPrimitive primitive = (JsonPrimitive) o;
        if (primitive.isString()) {
            return JsonToken.STRING;
        } else if (primitive.isBoolean()) {
            return JsonToken.BOOLEAN;
        } else if (primitive.isNumber()) {
            return JsonToken.NUMBER;
        } else {
            throw new AssertionError();
        }
    } else if (o instanceof JsonNull) {
        return JsonToken.NULL;
    } else if (o == SENTINEL_CLOSED) {
        throw new IllegalStateException(""JsonReader is closed"");
    } else {
        throw new AssertionError();
    }
}","public void test3535() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.peek();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public JsonToken peek() throws IOException {
    if (stackSize == 0) {
        return JsonToken.END_DOCUMENT;
    }
    Object o = peekStack();
    if (o instanceof Iterator) {
        boolean isObject = stack[stackSize - 2] instanceof JsonObject;
        Iterator<?> iterator = (Iterator<?>) o;
        if (iterator.hasNext()) {
            if (isObject) {
                return JsonToken.NAME;
            } else {
                push(iterator.next());
                return peek();
            }
        } else {
            return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;
        }
    } else if (o instanceof JsonObject) {
        return JsonToken.BEGIN_OBJECT;
    } else if (o instanceof JsonArray) {
        return JsonToken.BEGIN_ARRAY;
    } else if (o instanceof JsonPrimitive) {
        JsonPrimitive primitive = (JsonPrimitive) o;
        if (primitive.isString()) {
            return JsonToken.STRING;
        } else if (primitive.isBoolean()) {
            return JsonToken.BOOLEAN;
        } else if (primitive.isNumber()) {
            return JsonToken.NUMBER;
        } else {
            throw new AssertionError();
        }
    } else if (o instanceof JsonNull) {
        return JsonToken.NULL;
    } else if (o == SENTINEL_CLOSED) {
        throw new IllegalStateException(""JsonReader is closed"");
    } else {
        throw new AssertionError();
    }
}","public void test3636() throws Throwable {
    JsonNull jsonNull0 = JsonNull.INSTANCE;
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonNull0);
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.NULL, jsonToken0);
}",""
"@Override
public JsonToken peek() throws IOException {
    if (stackSize == 0) {
        return JsonToken.END_DOCUMENT;
    }
    Object o = peekStack();
    if (o instanceof Iterator) {
        boolean isObject = stack[stackSize - 2] instanceof JsonObject;
        Iterator<?> iterator = (Iterator<?>) o;
        if (iterator.hasNext()) {
            if (isObject) {
                return JsonToken.NAME;
            } else {
                push(iterator.next());
                return peek();
            }
        } else {
            return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;
        }
    } else if (o instanceof JsonObject) {
        return JsonToken.BEGIN_OBJECT;
    } else if (o instanceof JsonArray) {
        return JsonToken.BEGIN_ARRAY;
    } else if (o instanceof JsonPrimitive) {
        JsonPrimitive primitive = (JsonPrimitive) o;
        if (primitive.isString()) {
            return JsonToken.STRING;
        } else if (primitive.isBoolean()) {
            return JsonToken.BOOLEAN;
        } else if (primitive.isNumber()) {
            return JsonToken.NUMBER;
        } else {
            throw new AssertionError();
        }
    } else if (o instanceof JsonNull) {
        return JsonToken.NULL;
    } else if (o == SENTINEL_CLOSED) {
        throw new IllegalStateException(""JsonReader is closed"");
    } else {
        throw new AssertionError();
    }
}","public void test3737() throws Throwable {
    Character character0 = Character.valueOf('2');
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.STRING, jsonToken0);
}",""
"@Override
public JsonToken peek() throws IOException {
    if (stackSize == 0) {
        return JsonToken.END_DOCUMENT;
    }
    Object o = peekStack();
    if (o instanceof Iterator) {
        boolean isObject = stack[stackSize - 2] instanceof JsonObject;
        Iterator<?> iterator = (Iterator<?>) o;
        if (iterator.hasNext()) {
            if (isObject) {
                return JsonToken.NAME;
            } else {
                push(iterator.next());
                return peek();
            }
        } else {
            return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;
        }
    } else if (o instanceof JsonObject) {
        return JsonToken.BEGIN_OBJECT;
    } else if (o instanceof JsonArray) {
        return JsonToken.BEGIN_ARRAY;
    } else if (o instanceof JsonPrimitive) {
        JsonPrimitive primitive = (JsonPrimitive) o;
        if (primitive.isString()) {
            return JsonToken.STRING;
        } else if (primitive.isBoolean()) {
            return JsonToken.BOOLEAN;
        } else if (primitive.isNumber()) {
            return JsonToken.NUMBER;
        } else {
            throw new AssertionError();
        }
    } else if (o instanceof JsonNull) {
        return JsonToken.NULL;
    } else if (o == SENTINEL_CLOSED) {
        throw new IllegalStateException(""JsonReader is closed"");
    } else {
        throw new AssertionError();
    }
}","public void test3838() throws Throwable {
    Double double0 = new Double(1.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    jsonTreeReader0.close();
    // Undeclared exception!
    try {
        jsonTreeReader0.peek();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JsonReader is closed
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public JsonToken peek() throws IOException {
    if (stackSize == 0) {
        return JsonToken.END_DOCUMENT;
    }
    Object o = peekStack();
    if (o instanceof Iterator) {
        boolean isObject = stack[stackSize - 2] instanceof JsonObject;
        Iterator<?> iterator = (Iterator<?>) o;
        if (iterator.hasNext()) {
            if (isObject) {
                return JsonToken.NAME;
            } else {
                push(iterator.next());
                return peek();
            }
        } else {
            return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;
        }
    } else if (o instanceof JsonObject) {
        return JsonToken.BEGIN_OBJECT;
    } else if (o instanceof JsonArray) {
        return JsonToken.BEGIN_ARRAY;
    } else if (o instanceof JsonPrimitive) {
        JsonPrimitive primitive = (JsonPrimitive) o;
        if (primitive.isString()) {
            return JsonToken.STRING;
        } else if (primitive.isBoolean()) {
            return JsonToken.BOOLEAN;
        } else if (primitive.isNumber()) {
            return JsonToken.NUMBER;
        } else {
            throw new AssertionError();
        }
    } else if (o instanceof JsonNull) {
        return JsonToken.NULL;
    } else if (o == SENTINEL_CLOSED) {
        throw new IllegalStateException(""JsonReader is closed"");
    } else {
        throw new AssertionError();
    }
}","public void test3939() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.BEGIN_ARRAY, jsonToken0);
}",""
"@Override
public JsonToken peek() throws IOException {
    if (stackSize == 0) {
        return JsonToken.END_DOCUMENT;
    }
    Object o = peekStack();
    if (o instanceof Iterator) {
        boolean isObject = stack[stackSize - 2] instanceof JsonObject;
        Iterator<?> iterator = (Iterator<?>) o;
        if (iterator.hasNext()) {
            if (isObject) {
                return JsonToken.NAME;
            } else {
                push(iterator.next());
                return peek();
            }
        } else {
            return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;
        }
    } else if (o instanceof JsonObject) {
        return JsonToken.BEGIN_OBJECT;
    } else if (o instanceof JsonArray) {
        return JsonToken.BEGIN_ARRAY;
    } else if (o instanceof JsonPrimitive) {
        JsonPrimitive primitive = (JsonPrimitive) o;
        if (primitive.isString()) {
            return JsonToken.STRING;
        } else if (primitive.isBoolean()) {
            return JsonToken.BOOLEAN;
        } else if (primitive.isNumber()) {
            return JsonToken.NUMBER;
        } else {
            throw new AssertionError();
        }
    } else if (o instanceof JsonNull) {
        return JsonToken.NULL;
    } else if (o == SENTINEL_CLOSED) {
        throw new IllegalStateException(""JsonReader is closed"");
    } else {
        throw new AssertionError();
    }
}","public void test4040() throws Throwable {
    JsonObject jsonObject0 = new JsonObject();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.BEGIN_OBJECT, jsonToken0);
}",""
"@Override
public JsonToken peek() throws IOException {
    if (stackSize == 0) {
        return JsonToken.END_DOCUMENT;
    }
    Object o = peekStack();
    if (o instanceof Iterator) {
        boolean isObject = stack[stackSize - 2] instanceof JsonObject;
        Iterator<?> iterator = (Iterator<?>) o;
        if (iterator.hasNext()) {
            if (isObject) {
                return JsonToken.NAME;
            } else {
                push(iterator.next());
                return peek();
            }
        } else {
            return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;
        }
    } else if (o instanceof JsonObject) {
        return JsonToken.BEGIN_OBJECT;
    } else if (o instanceof JsonArray) {
        return JsonToken.BEGIN_ARRAY;
    } else if (o instanceof JsonPrimitive) {
        JsonPrimitive primitive = (JsonPrimitive) o;
        if (primitive.isString()) {
            return JsonToken.STRING;
        } else if (primitive.isBoolean()) {
            return JsonToken.BOOLEAN;
        } else if (primitive.isNumber()) {
            return JsonToken.NUMBER;
        } else {
            throw new AssertionError();
        }
    } else if (o instanceof JsonNull) {
        return JsonToken.NULL;
    } else if (o == SENTINEL_CLOSED) {
        throw new IllegalStateException(""JsonReader is closed"");
    } else {
        throw new AssertionError();
    }
}","public void test4141() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Float float0 = new Float(306.01129);
    jsonTreeReader0.beginArray();
    jsonArray0.add((Number) float0);
    // Undeclared exception!
    try {
        jsonTreeReader0.peek();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",""
"@Override
public JsonToken peek() throws IOException {
    if (stackSize == 0) {
        return JsonToken.END_DOCUMENT;
    }
    Object o = peekStack();
    if (o instanceof Iterator) {
        boolean isObject = stack[stackSize - 2] instanceof JsonObject;
        Iterator<?> iterator = (Iterator<?>) o;
        if (iterator.hasNext()) {
            if (isObject) {
                return JsonToken.NAME;
            } else {
                push(iterator.next());
                return peek();
            }
        } else {
            return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;
        }
    } else if (o instanceof JsonObject) {
        return JsonToken.BEGIN_OBJECT;
    } else if (o instanceof JsonArray) {
        return JsonToken.BEGIN_ARRAY;
    } else if (o instanceof JsonPrimitive) {
        JsonPrimitive primitive = (JsonPrimitive) o;
        if (primitive.isString()) {
            return JsonToken.STRING;
        } else if (primitive.isBoolean()) {
            return JsonToken.BOOLEAN;
        } else if (primitive.isNumber()) {
            return JsonToken.NUMBER;
        } else {
            throw new AssertionError();
        }
    } else if (o instanceof JsonNull) {
        return JsonToken.NULL;
    } else if (o == SENTINEL_CLOSED) {
        throw new IllegalStateException(""JsonReader is closed"");
    } else {
        throw new AssertionError();
    }
}","public void test4242() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    jsonTreeReader0.beginArray();
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.END_ARRAY, jsonToken0);
}",""
"@Override
public String nextString() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.STRING && token != JsonToken.NUMBER) {
        throw new IllegalStateException(""Expected "" + JsonToken.STRING + "" but was "" + token + locationString());
    }
    String result = ((JsonPrimitive) popStack()).getAsString();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test4343() throws Throwable {
    JsonObject jsonObject0 = new JsonObject();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextString();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected STRING but was BEGIN_OBJECT at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public String nextString() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.STRING && token != JsonToken.NUMBER) {
        throw new IllegalStateException(""Expected "" + JsonToken.STRING + "" but was "" + token + locationString());
    }
    String result = ((JsonPrimitive) popStack()).getAsString();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test4444() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    jsonArray0.add((Character) null);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    jsonTreeReader0.beginArray();
    // Undeclared exception!
    try {
        jsonTreeReader0.nextString();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected STRING but was NULL at path $[0]
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public long nextLong() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    long result = ((JsonPrimitive) peekStack()).getAsLong();
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test4545() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    jsonTreeReader0.beginArray();
    // Undeclared exception!
    try {
        jsonTreeReader0.nextLong();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NUMBER but was END_ARRAY at path $[0]
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public void skipValue() throws IOException {
    if (peek() == JsonToken.NAME) {
        nextName();
        pathNames[stackSize - 2] = ""null"";
    } else {
        popStack();
        pathNames[stackSize - 1] = ""null"";
    }
    pathIndices[stackSize - 1]++;
}","public void test4646() throws Throwable {
    Boolean boolean0 = Boolean.valueOf(false);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.skipValue();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public int nextInt() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    int result = ((JsonPrimitive) peekStack()).getAsInt();
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test4747() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextInt();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NUMBER but was BEGIN_ARRAY at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public int nextInt() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    int result = ((JsonPrimitive) peekStack()).getAsInt();
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test4848() throws Throwable {
    Character character0 = Character.valueOf('W');
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextInt();
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""W\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}",""
"@Override
public int nextInt() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    int result = ((JsonPrimitive) peekStack()).getAsInt();
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test4949() throws Throwable {
    Float float0 = new Float(162.708089555);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    int int0 = jsonTreeReader0.nextInt();
    assertEquals(162, int0);
}",""
"@Override
public long nextLong() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    long result = ((JsonPrimitive) peekStack()).getAsLong();
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test5050() throws Throwable {
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(""JSON forbids NaN and infinities: "");
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextLong();
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""JSON forbids NaN and infinities: \""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}",""
"@Override
public long nextLong() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    long result = ((JsonPrimitive) peekStack()).getAsLong();
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test5151() throws Throwable {
    Double double0 = new Double(1.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    long long0 = jsonTreeReader0.nextLong();
    assertEquals(1L, long0);
}",""
"@Override
public double nextDouble() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    double result = ((JsonPrimitive) peekStack()).getAsDouble();
    if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {
        throw new NumberFormatException(""JSON forbids NaN and infinities: "" + result);
    }
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test5252() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextDouble();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NUMBER but was BEGIN_ARRAY at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public double nextDouble() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    double result = ((JsonPrimitive) peekStack()).getAsDouble();
    if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {
        throw new NumberFormatException(""JSON forbids NaN and infinities: "" + result);
    }
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test5353() throws Throwable {
    Character character0 = new Character('`');
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextDouble();
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
    }
}",""
"@Override
public double nextDouble() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
        throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());
    }
    double result = ((JsonPrimitive) peekStack()).getAsDouble();
    if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {
        throw new NumberFormatException(""JSON forbids NaN and infinities: "" + result);
    }
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test5454() throws Throwable {
    Double double0 = new Double(0.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    double double1 = jsonTreeReader0.nextDouble();
    assertEquals(0.0, double1, 0.01);
}",""
"@Override
public boolean nextBoolean() throws IOException {
    expect(JsonToken.BOOLEAN);
    boolean result = ((JsonPrimitive) popStack()).getAsBoolean();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test5555() throws Throwable {
    Boolean boolean0 = Boolean.valueOf(false);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    boolean boolean1 = jsonTreeReader0.nextBoolean();
    assertFalse(boolean1);
}",""
"@Override
public String nextString() throws IOException {
    JsonToken token = peek();
    if (token != JsonToken.STRING && token != JsonToken.NUMBER) {
        throw new IllegalStateException(""Expected "" + JsonToken.STRING + "" but was "" + token + locationString());
    }
    String result = ((JsonPrimitive) popStack()).getAsString();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
    return result;
}","public void test5656() throws Throwable {
    Double double0 = new Double(1.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    String string0 = jsonTreeReader0.nextString();
    assertNotNull(string0);
}",""
"@Override
public boolean hasNext() throws IOException {
    JsonToken token = peek();
    return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY;
}","public void test5757() throws Throwable {
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader((JsonElement) null);
    // Undeclared exception!
    try {
        jsonTreeReader0.hasNext();
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public boolean hasNext() throws IOException {
    JsonToken token = peek();
    return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY;
}","public void test5858() throws Throwable {
    JsonNull jsonNull0 = JsonNull.INSTANCE;
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonNull0);
    jsonTreeReader0.close();
    // Undeclared exception!
    try {
        jsonTreeReader0.hasNext();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JsonReader is closed
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public JsonToken peek() throws IOException {
    if (stackSize == 0) {
        return JsonToken.END_DOCUMENT;
    }
    Object o = peekStack();
    if (o instanceof Iterator) {
        boolean isObject = stack[stackSize - 2] instanceof JsonObject;
        Iterator<?> iterator = (Iterator<?>) o;
        if (iterator.hasNext()) {
            if (isObject) {
                return JsonToken.NAME;
            } else {
                push(iterator.next());
                return peek();
            }
        } else {
            return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;
        }
    } else if (o instanceof JsonObject) {
        return JsonToken.BEGIN_OBJECT;
    } else if (o instanceof JsonArray) {
        return JsonToken.BEGIN_ARRAY;
    } else if (o instanceof JsonPrimitive) {
        JsonPrimitive primitive = (JsonPrimitive) o;
        if (primitive.isString()) {
            return JsonToken.STRING;
        } else if (primitive.isBoolean()) {
            return JsonToken.BOOLEAN;
        } else if (primitive.isNumber()) {
            return JsonToken.NUMBER;
        } else {
            throw new AssertionError();
        }
    } else if (o instanceof JsonNull) {
        return JsonToken.NULL;
    } else if (o == SENTINEL_CLOSED) {
        throw new IllegalStateException(""JsonReader is closed"");
    } else {
        throw new AssertionError();
    }
}","public void test5959() throws Throwable {
    Boolean boolean0 = new Boolean(""cwA{pGf]Mg1l"");
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.BOOLEAN, jsonToken0);
}",""
"@Override
public JsonToken peek() throws IOException {
    if (stackSize == 0) {
        return JsonToken.END_DOCUMENT;
    }
    Object o = peekStack();
    if (o instanceof Iterator) {
        boolean isObject = stack[stackSize - 2] instanceof JsonObject;
        Iterator<?> iterator = (Iterator<?>) o;
        if (iterator.hasNext()) {
            if (isObject) {
                return JsonToken.NAME;
            } else {
                push(iterator.next());
                return peek();
            }
        } else {
            return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;
        }
    } else if (o instanceof JsonObject) {
        return JsonToken.BEGIN_OBJECT;
    } else if (o instanceof JsonArray) {
        return JsonToken.BEGIN_ARRAY;
    } else if (o instanceof JsonPrimitive) {
        JsonPrimitive primitive = (JsonPrimitive) o;
        if (primitive.isString()) {
            return JsonToken.STRING;
        } else if (primitive.isBoolean()) {
            return JsonToken.BOOLEAN;
        } else if (primitive.isNumber()) {
            return JsonToken.NUMBER;
        } else {
            throw new AssertionError();
        }
    } else if (o instanceof JsonNull) {
        return JsonToken.NULL;
    } else if (o == SENTINEL_CLOSED) {
        throw new IllegalStateException(""JsonReader is closed"");
    } else {
        throw new AssertionError();
    }
}","public void test6060() throws Throwable {
    Double double0 = new Double(0.0);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.NUMBER, jsonToken0);
}",""
"@Override
public boolean hasNext() throws IOException {
    JsonToken token = peek();
    return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY;
}","public void test6161() throws Throwable {
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(""JSON forbids NaN and infinities: "");
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonPrimitive0);
    boolean boolean0 = jsonTreeReader0.hasNext();
    assertTrue(boolean0);
}",""
"@Override
public void endArray() throws IOException {
    expect(JsonToken.END_ARRAY);
    // empty iterator
    popStack();
    // array
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
}","public void test6262() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    Character character0 = Character.valueOf('r');
    jsonTreeReader0.beginArray();
    jsonArray0.add(character0);
    // Undeclared exception!
    try {
        jsonTreeReader0.endArray();
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList$Itr"", e);
    }
}",""
"@Override
public boolean hasNext() throws IOException {
    JsonToken token = peek();
    return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY;
}","public void test6363() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    jsonTreeReader0.beginArray();
    boolean boolean0 = jsonTreeReader0.hasNext();
    assertFalse(boolean0);
}",""
"public final boolean isLenient() {
    return lenient;
}","public void test6464() throws Throwable {
    JsonNull jsonNull0 = JsonNull.INSTANCE;
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonNull0);
    jsonTreeReader0.nextNull();
    assertFalse(jsonTreeReader0.isLenient());
}","/**
 * Returns true if this parser is liberal in what it accepts.
 */"
"@Override
public String toString() {
    return getClass().getSimpleName();
}","public void test6565() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    String string0 = jsonTreeReader0.toString();
    assertEquals(""JsonTreeReader"", string0);
}",""
"@Override
public String nextName() throws IOException {
    expect(JsonToken.NAME);
    Iterator<?> i = (Iterator<?>) peekStack();
    Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();
    String result = (String) entry.getKey();
    pathNames[stackSize - 1] = result;
    push(entry.getValue());
    return result;
}","public void test6666() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    // Undeclared exception!
    try {
        jsonTreeReader0.nextName();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NAME but was BEGIN_ARRAY at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public void endArray() throws IOException {
    expect(JsonToken.END_ARRAY);
    // empty iterator
    popStack();
    // array
    popStack();
    if (stackSize > 0) {
        pathIndices[stackSize - 1]++;
    }
}","public void test6767() throws Throwable {
    JsonObject jsonObject0 = new JsonObject();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonObject0);
    jsonTreeReader0.beginObject();
    // Undeclared exception!
    try {
        jsonTreeReader0.endArray();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected END_ARRAY but was END_OBJECT at path $.
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
"@Override
public JsonToken peek() throws IOException {
    if (stackSize == 0) {
        return JsonToken.END_DOCUMENT;
    }
    Object o = peekStack();
    if (o instanceof Iterator) {
        boolean isObject = stack[stackSize - 2] instanceof JsonObject;
        Iterator<?> iterator = (Iterator<?>) o;
        if (iterator.hasNext()) {
            if (isObject) {
                return JsonToken.NAME;
            } else {
                push(iterator.next());
                return peek();
            }
        } else {
            return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;
        }
    } else if (o instanceof JsonObject) {
        return JsonToken.BEGIN_OBJECT;
    } else if (o instanceof JsonArray) {
        return JsonToken.BEGIN_ARRAY;
    } else if (o instanceof JsonPrimitive) {
        JsonPrimitive primitive = (JsonPrimitive) o;
        if (primitive.isString()) {
            return JsonToken.STRING;
        } else if (primitive.isBoolean()) {
            return JsonToken.BOOLEAN;
        } else if (primitive.isNumber()) {
            return JsonToken.NUMBER;
        } else {
            throw new AssertionError();
        }
    } else if (o instanceof JsonNull) {
        return JsonToken.NULL;
    } else if (o == SENTINEL_CLOSED) {
        throw new IllegalStateException(""JsonReader is closed"");
    } else {
        throw new AssertionError();
    }
}","public void test6868() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    jsonTreeReader0.beginArray();
    jsonTreeReader0.endArray();
    JsonToken jsonToken0 = jsonTreeReader0.peek();
    assertEquals(JsonToken.END_DOCUMENT, jsonToken0);
}",""
"public void promoteNameToValue() throws IOException {
    expect(JsonToken.NAME);
    Iterator<?> i = (Iterator<?>) peekStack();
    Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();
    push(entry.getValue());
    push(new JsonPrimitive((String) entry.getKey()));
}","public void test6969() throws Throwable {
    JsonArray jsonArray0 = new JsonArray();
    JsonTreeReader jsonTreeReader0 = new JsonTreeReader(jsonArray0);
    // Undeclared exception!
    try {
        jsonTreeReader0.promoteNameToValue();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NAME but was BEGIN_ARRAY at path $
        //
        verifyException(""com.google.gson.internal.bind.JsonTreeReader"", e);
    }
}",""
