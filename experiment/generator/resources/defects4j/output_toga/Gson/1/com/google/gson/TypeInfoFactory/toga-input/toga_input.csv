focal_method,test_prefix,docstring
"public static TypeInfoArray getTypeInfoForArray(Type type) {
    Preconditions.checkArgument(TypeUtils.isArray(type));
    return new TypeInfoArray(type);
}","public void test00() throws Throwable {
    GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
    // Undeclared exception!
    try {
        TypeInfoFactory.getTypeInfoForArray(genericArrayTypeImpl0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Type 'null' is not a Class, ParameterizedType, or GenericArrayType. Can't extract class.
        //
        verifyException(""com.google.gson.TypeUtils"", e);
    }
}",""
"public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) {
    Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF);
    Type type = f.getGenericType();
    Type actualType = getActualType(type, typeDefiningF, classDefiningF);
    return new TypeInfo(actualType);
}","public void test11() throws Throwable {
    Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(type0).toString();
    Type[] typeArray0 = new Type[4];
    ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(type0, typeArray0, (Type) null);
    GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(parameterizedTypeImpl0);
    // Undeclared exception!
    try {
        TypeInfoFactory.getTypeInfoForField((Field) null, genericArrayTypeImpl0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Type 'null' is not a Class, ParameterizedType, or GenericArrayType. Can't extract class.
        //
        verifyException(""com.google.gson.TypeUtils"", e);
    }
}","/**
 * Evaluates the ""actual"" type for the field.  If the field is a ""TypeVariable"" or has a
 * ""TypeVariable"" in a parameterized type then it evaluates the real type.
 *
 * @param f the actual field object to retrieve the type from
 * @param typeDefiningF the type that contains the field {@code f}
 * @return the type information for the field
 */"
