focal_method,test_prefix,docstring
"@SuppressWarnings(""unchecked"")
@Override
public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) {
    JsonAdapter annotation = targetType.getRawType().getAnnotation(JsonAdapter.class);
    if (annotation == null) {
        return null;
    }
    return (TypeAdapter<T>) getTypeAdapter(constructorConstructor, gson, targetType, annotation);
}","public void test00() throws Throwable {
    JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
    Gson gson0 = new Gson();
    // Undeclared exception!
    try {
        jsonAdapterAnnotationTypeAdapterFactory0.create(gson0, (TypeToken<Object>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory"", e);
    }
}",""
"// Casts guarded by conditionals.
@SuppressWarnings(""unchecked"")
static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken<?> fieldType, JsonAdapter annotation) {
    Class<?> value = annotation.value();
    TypeAdapter<?> typeAdapter;
    if (TypeAdapter.class.isAssignableFrom(value)) {
        Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
        typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
        Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
        typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);
    } else {
        throw new IllegalArgumentException(""@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference."");
    }
    typeAdapter = typeAdapter.nullSafe();
    return typeAdapter;
}","public void test11() throws Throwable {
    Class<Excluder> class0 = Excluder.class;
    JsonAdapter jsonAdapter0 = mock(JsonAdapter.class, new ViolatedAssumptionAnswer());
    doReturn(class0).when(jsonAdapter0).value();
    Gson gson0 = new Gson();
    // Undeclared exception!
    try {
        JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter((ConstructorConstructor) null, gson0, (TypeToken<?>) null, jsonAdapter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory"", e);
    }
}",""
"// Casts guarded by conditionals.
@SuppressWarnings(""unchecked"")
static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken<?> fieldType, JsonAdapter annotation) {
    Class<?> value = annotation.value();
    TypeAdapter<?> typeAdapter;
    if (TypeAdapter.class.isAssignableFrom(value)) {
        Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
        typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
        Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
        typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);
    } else {
        throw new IllegalArgumentException(""@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference."");
    }
    typeAdapter = typeAdapter.nullSafe();
    return typeAdapter;
}","public void test22() throws Throwable {
    Gson gson0 = new Gson();
    Class<DateTypeAdapter> class0 = DateTypeAdapter.class;
    TypeToken<DateTypeAdapter> typeToken0 = TypeToken.get(class0);
    JsonAdapter jsonAdapter0 = mock(JsonAdapter.class, new ViolatedAssumptionAnswer());
    doReturn(class0).when(jsonAdapter0).value();
    // Undeclared exception!
    try {
        JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter((ConstructorConstructor) null, gson0, typeToken0, jsonAdapter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory"", e);
    }
}",""
"@SuppressWarnings(""unchecked"")
@Override
public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) {
    JsonAdapter annotation = targetType.getRawType().getAnnotation(JsonAdapter.class);
    if (annotation == null) {
        return null;
    }
    return (TypeAdapter<T>) getTypeAdapter(constructorConstructor, gson, targetType, annotation);
}","public void test33() throws Throwable {
    JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
    Gson gson0 = new Gson();
    Class<Integer> class0 = Integer.TYPE;
    TypeToken<Integer> typeToken0 = TypeToken.get(class0);
    TypeAdapter<Integer> typeAdapter0 = jsonAdapterAnnotationTypeAdapterFactory0.create(gson0, typeToken0);
    assertNull(typeAdapter0);
}",""
"// Casts guarded by conditionals.
@SuppressWarnings(""unchecked"")
static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken<?> fieldType, JsonAdapter annotation) {
    Class<?> value = annotation.value();
    TypeAdapter<?> typeAdapter;
    if (TypeAdapter.class.isAssignableFrom(value)) {
        Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
        typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
        Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
        typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);
    } else {
        throw new IllegalArgumentException(""@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference."");
    }
    typeAdapter = typeAdapter.nullSafe();
    return typeAdapter;
}","public void test44() throws Throwable {
    Gson gson0 = new Gson();
    Class<Integer> class0 = Integer.TYPE;
    TypeToken<Integer> typeToken0 = TypeToken.get(class0);
    JsonAdapter jsonAdapter0 = mock(JsonAdapter.class, new ViolatedAssumptionAnswer());
    doReturn(class0).when(jsonAdapter0).value();
    // Undeclared exception!
    try {
        JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter((ConstructorConstructor) null, gson0, typeToken0, jsonAdapter0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // @JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.
        //
        verifyException(""com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory"", e);
    }
}",""
