project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
    Gson gson0 = new Gson();
    // Undeclared exception!
    try {
        jsonAdapterAnnotationTypeAdapterFactory0.create(gson0, (TypeToken<Object>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory"", e);
    }
}",0,
project,0,test11,"public void test11() throws Throwable {
    Class<Excluder> class0 = Excluder.class;
    JsonAdapter jsonAdapter0 = mock(JsonAdapter.class, new ViolatedAssumptionAnswer());
    doReturn(class0).when(jsonAdapter0).value();
    Gson gson0 = new Gson();
    // Undeclared exception!
    try {
        JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter((ConstructorConstructor) null, gson0, (TypeToken<?>) null, jsonAdapter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory"", e);
    }
}",0,
project,0,test22,"public void test22() throws Throwable {
    Gson gson0 = new Gson();
    Class<DateTypeAdapter> class0 = DateTypeAdapter.class;
    TypeToken<DateTypeAdapter> typeToken0 = TypeToken.get(class0);
    JsonAdapter jsonAdapter0 = mock(JsonAdapter.class, new ViolatedAssumptionAnswer());
    doReturn(class0).when(jsonAdapter0).value();
    // Undeclared exception!
    try {
        JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter((ConstructorConstructor) null, gson0, typeToken0, jsonAdapter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory"", e);
    }
}",0,
project,0,test33,"public void test33() throws Throwable {
    JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
    Gson gson0 = new Gson();
    Class<Integer> class0 = Integer.TYPE;
    TypeToken<Integer> typeToken0 = TypeToken.get(class0);
    TypeAdapter<Integer> typeAdapter0 = jsonAdapterAnnotationTypeAdapterFactory0.create(gson0, typeToken0);
    assertNull(typeAdapter0);
}",0,assertNotNull(typeAdapter0)
project,0,test44,"public void test44() throws Throwable {
    Gson gson0 = new Gson();
    Class<Integer> class0 = Integer.TYPE;
    TypeToken<Integer> typeToken0 = TypeToken.get(class0);
    JsonAdapter jsonAdapter0 = mock(JsonAdapter.class, new ViolatedAssumptionAnswer());
    doReturn(class0).when(jsonAdapter0).value();
    // Undeclared exception!
    try {
        JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter((ConstructorConstructor) null, gson0, typeToken0, jsonAdapter0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // @JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.
        //
        verifyException(""com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory"", e);
    }
}",0,
