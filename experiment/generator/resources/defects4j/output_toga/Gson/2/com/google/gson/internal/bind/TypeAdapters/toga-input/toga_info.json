{
  "test1212" : {
    "methodSignature" : "public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Class<Object> class0 = Object.class;\n    Gson gson0 = new Gson();\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);\n    Class<JsonArray> class1 = JsonArray.class;\n    gson0.fromJson(jsonElement0, class1);\n}",
    "testName" : "test1212"
  },
  "test2323" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    Gson gson0 = new Gson();\n    BitSet bitSet0 = new BitSet();\n    bitSet0.flip(12);\n    JsonArray jsonArray0 = (JsonArray) gson0.toJsonTree((Object) bitSet0);\n    jsonArray0.size();\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Gson gson0 = new Gson();\n    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(\"Qu\");\n    Class<JsonArray> class0 = JsonArray.class;\n    gson0.fromJson((JsonElement) jsonPrimitive0, class0);\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    Gson gson0 = new Gson();\n    BitSet bitSet0 = new BitSet();\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) bitSet0);\n    Class<StringBuilder> class0 = StringBuilder.class;\n    gson0.fromJson(jsonElement0, class0);\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "public String toJson(JsonElement jsonElement)",
    "methodName" : "toJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Gson gson0 = new Gson();\n    Character character0 = Character.valueOf('c');\n    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);\n    String string0 = gson0.toJson((JsonElement) jsonPrimitive0);\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "public <T> T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    Class<Byte> class0 = Byte.class;\n    Gson gson0 = new Gson();\n    JsonObject jsonObject0 = new JsonObject();\n    gson0.fromJson((JsonElement) jsonObject0, (Type) class0);\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "public String toJson(JsonElement jsonElement)",
    "methodName" : "toJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Gson gson0 = new Gson();\n    String string0 = gson0.toJson((JsonElement) null);\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "public String toJson(Object src, Type typeOfSrc)",
    "methodName" : "toJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Boolean> class0 = Boolean.TYPE;\n    String string0 = gson0.toJson((Object) null, (Type) class0);\n}",
    "testName" : "test2222"
  },
  "test011" : {
    "methodSignature" : "public static <TT> TypeAdapterFactory newFactory(final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter)",
    "methodName" : "newFactory",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Class<Boolean> class0 = Boolean.class;\n    Class<Calendar> class1 = Calendar.class;\n    TypeToken<Calendar> typeToken0 = TypeToken.get(class1);\n    TypeAdapter<Calendar> typeAdapter0 = TypeAdapters.CALENDAR;\n    TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>((Gson) null, typeAdapter0, class0);\n    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Calendar>) typeAdapterRuntimeTypeWrapper0);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public static <TT> TypeAdapterFactory newFactory(final Class<TT> type, final TypeAdapter<TT> typeAdapter)",
    "methodName" : "newFactory",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;\n    Gson gson0 = new Gson();\n    TypeAdapter<ChronoLocalDate> typeAdapter0 = gson0.getAdapter(class0);\n    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public <T> TypeAdapter<T> getAdapter(Class<T> type)",
    "methodName" : "getAdapter",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<GregorianCalendar> class0 = GregorianCalendar.class;\n    TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(class0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public boolean isJsonArray()",
    "methodName" : "isJsonArray",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Gson gson0 = new Gson();\n    JsonObject jsonObject0 = new JsonObject();\n    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);\n    gson0.toJson((JsonElement) jsonObject0, (Appendable) mockPrintWriter0);\n    jsonObject0.isJsonArray();\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public String toJson(Object src)",
    "methodName" : "toJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Gson gson0 = new Gson();\n    String string0 = gson0.toJson((Object) null);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public final String toJson(T value)",
    "methodName" : "toJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Class<Locale> class0 = Locale.class;\n    Gson gson0 = new Gson();\n    TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, (TypeAdapter<Object>) null, class0);\n    URL uRL0 = MockURL.getFileExample();\n    typeAdapterRuntimeTypeWrapper0.toJson((Object) uRL0);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public final T fromJsonTree(JsonElement jsonTree)",
    "methodName" : "fromJsonTree",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Class<URL> class0 = URL.class;\n    Gson gson0 = new Gson();\n    TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(class0);\n    TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class0);\n    JsonNull jsonNull0 = JsonNull.INSTANCE;\n    URL uRL0 = typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonNull0);\n}",
    "testName" : "test1717"
  },
  "test2828" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    Gson gson0 = new Gson();\n    String string0 = gson0.toString();\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Class<Object> class0 = Object.class;\n    Excluder excluder0 = Excluder.DEFAULT;\n    Gson gson0 = new Gson();\n    JsonElement jsonElement0 = gson0.toJsonTree((Object) excluder0, (Type) class0);\n    Class<JsonArray> class1 = JsonArray.class;\n    gson0.fromJson(jsonElement0, class1);\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "public String toJson(Object src)",
    "methodName" : "toJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    Class<Byte> class0 = Byte.class;\n    Gson gson0 = new Gson();\n    gson0.toJson((Object) class0);\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public boolean isBoolean()",
    "methodName" : "isBoolean",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;\n    Gson gson0 = new Gson();\n    TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;\n    TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);\n    Locale locale0 = Locale.PRC;\n    JsonPrimitive jsonPrimitive0 = (JsonPrimitive) typeAdapterRuntimeTypeWrapper0.toJsonTree(locale0);\n    jsonPrimitive0.isBoolean();\n}",
    "testName" : "test1515"
  },
  "test2626" : {
    "methodSignature" : "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter)",
    "methodName" : "newTypeHierarchyFactory",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;\n    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<MockGregorianCalendar>) null);\n}",
    "testName" : "test2626"
  },
  "test2020" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Short> class0 = Short.class;\n    gson0.fromJson(\"Expected \", (Type) class0);\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base, final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter)",
    "methodName" : "newFactoryForMultipleTypes",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Calendar> class0 = Calendar.class;\n    Class<GregorianCalendar> class1 = GregorianCalendar.class;\n    TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, (TypeAdapter<Calendar>) null, class1);\n    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Calendar>) class1, (TypeAdapter<? super Calendar>) typeAdapterRuntimeTypeWrapper0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public T read(JsonReader in) throws IOException",
    "methodName" : "read",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Class<UUID> class0 = UUID.class;\n    Gson gson0 = new Gson();\n    Class<Calendar> class1 = Calendar.class;\n    TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(class1);\n    TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter0, class0);\n    PipedReader pipedReader0 = new PipedReader();\n    JsonReader jsonReader0 = new JsonReader(pipedReader0);\n    typeAdapterRuntimeTypeWrapper0.read(jsonReader0);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public static <TT> TypeAdapterFactory newFactory(final Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter)",
    "methodName" : "newFactory",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Class<Boolean> class0 = Boolean.class;\n    Gson gson0 = new Gson();\n    TypeAdapter<Boolean> typeAdapter0 = gson0.getAdapter(class0);\n    TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Boolean>) typeAdapter0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public String toJson(Object src)",
    "methodName" : "toJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Gson gson0 = new Gson();\n    Class<Object> class0 = Object.class;\n    TypeToken<Object> typeToken0 = TypeToken.get(class0);\n    TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);\n    String string0 = gson0.toJson((Object) typeAdapter0);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public JsonObject getAsJsonObject()",
    "methodName" : "getAsJsonObject",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    JsonArray jsonArray0 = new JsonArray();\n    jsonArray0.getAsJsonObject();\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Class<StringBuffer> class0 = StringBuffer.class;\n    Gson gson0 = new Gson();\n    gson0.fromJson(\"Expected name\", (Type) class0);\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "public <T> T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException",
    "methodName" : "fromJson",
    "className" : "com.google.gson.internal.bind.TypeAdapters",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Gson gson0 = new Gson();\n    Boolean boolean0 = new Boolean(\"/s*XB$;,$>m0)\");\n    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);\n    Class<Long> class0 = Long.TYPE;\n    gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);\n}",
    "testName" : "test1919"
  }
}