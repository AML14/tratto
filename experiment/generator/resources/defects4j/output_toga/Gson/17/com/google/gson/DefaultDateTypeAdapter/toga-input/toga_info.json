{
  "test1212" : {
    "methodSignature" : "public void write(JsonWriter out, Date value) throws IOException",
    "methodName" : "write",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Class<Date> class0 = Date.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);\n    defaultDateTypeAdapter0.write((JsonWriter) null, (Date) null);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "DefaultDateTypeAdapter(Class<? extends Date> dateType)",
    "methodName" : "DefaultDateTypeAdapter",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;\n    defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends Date>) null);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "DefaultDateTypeAdapter(Class<? extends Date> dateType, int style)",
    "methodName" : "DefaultDateTypeAdapter",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Class<Timestamp> class0 = Timestamp.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public final T fromJsonTree(JsonElement jsonTree)",
    "methodName" : "fromJsonTree",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Class<Date> class0 = Date.class;\n    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);\n    JsonNull jsonNull0 = JsonNull.INSTANCE;\n    defaultDateTypeAdapter0.fromJsonTree(jsonNull0);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "public final T fromJsonTree(JsonElement jsonTree)",
    "methodName" : "fromJsonTree",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Class<Timestamp> class0 = Timestamp.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, \"\");\n    MockDate mockDate0 = new MockDate(1462, 1462, 0, 0, 8233);\n    JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);\n    defaultDateTypeAdapter0.fromJsonTree(jsonElement0);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public Date read(JsonReader in) throws IOException",
    "methodName" : "read",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Class<java.sql.Date> class0 = java.sql.Date.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);\n    StringReader stringReader0 = new StringReader(\"DefaultDateTypeAdapter(SimpleDateFormat)\");\n    JsonReader jsonReader0 = new JsonReader(stringReader0);\n    defaultDateTypeAdapter0.read(jsonReader0);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern)",
    "methodName" : "DefaultDateTypeAdapter",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Class<java.sql.Date> class0 = java.sql.Date.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;\n    defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, (String) null);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle)",
    "methodName" : "DefaultDateTypeAdapter",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Class<Timestamp> class0 = Timestamp.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;\n    defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 123, 0);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public boolean isLenient()",
    "methodName" : "isLenient",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Class<java.sql.Date> class0 = java.sql.Date.class;\n    DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);\n    StringWriter stringWriter0 = new StringWriter();\n    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);\n    java.sql.Date date0 = new java.sql.Date((-1L));\n    defaultDateTypeAdapter0.write(jsonWriter0, (Date) date0);\n    jsonWriter0.isLenient();\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle)",
    "methodName" : "DefaultDateTypeAdapter",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Class<Date> class0 = Date.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public final T fromJsonTree(JsonElement jsonTree)",
    "methodName" : "fromJsonTree",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Class<java.sql.Date> class0 = java.sql.Date.class;\n    DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0);\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);\n    MockDate mockDate0 = new MockDate(0);\n    JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);\n    Date date0 = defaultDateTypeAdapter0.fromJsonTree(jsonElement0);\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "public void write(JsonWriter out, Date value) throws IOException",
    "methodName" : "write",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Class<Timestamp> class0 = Timestamp.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);\n    StringWriter stringWriter0 = new StringWriter();\n    BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 86);\n    JsonWriter jsonWriter0 = new JsonWriter(bufferedWriter0);\n    JsonWriter jsonWriter1 = jsonWriter0.value(\"\");\n    MockDate mockDate0 = new MockDate(86, (-1179), 2937, 0, (-1179), 8233);\n    defaultDateTypeAdapter0.write(jsonWriter1, (Date) mockDate0);\n}",
    "testName" : "test1414"
  },
  "test2020" : {
    "methodSignature" : "DefaultDateTypeAdapter(Class<? extends Date> dateType, int style)",
    "methodName" : "DefaultDateTypeAdapter",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Class<Date> class0 = Date.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;\n    defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 60000);\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "public boolean isJsonArray()",
    "methodName" : "isJsonArray",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Class<Timestamp> class0 = Timestamp.class;\n    DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);\n    JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree((Date) null);\n    jsonElement0.isJsonArray();\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Class<java.sql.Date> class0 = java.sql.Date.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, (DateFormat) null, (DateFormat) null);\n    defaultDateTypeAdapter0.toString();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public Date read(JsonReader in) throws IOException",
    "methodName" : "read",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Class<java.sql.Date> class0 = java.sql.Date.class;\n    DateFormat dateFormat0 = MockDateFormat.getDateInstance();\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);\n    PipedReader pipedReader0 = new PipedReader();\n    JsonReader jsonReader0 = new JsonReader(pipedReader0);\n    defaultDateTypeAdapter0.read(jsonReader0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern)",
    "methodName" : "DefaultDateTypeAdapter",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Class<java.sql.Date> class0 = java.sql.Date.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;\n    defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, \" i\");\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public DefaultDateTypeAdapter(int dateStyle, int timeStyle)",
    "methodName" : "DefaultDateTypeAdapter",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;\n    defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(1489, 1489);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public Date read(JsonReader in) throws IOException",
    "methodName" : "read",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Class<java.sql.Date> class0 = java.sql.Date.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, \"\");\n    defaultDateTypeAdapter0.read((JsonReader) null);\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "com.google.gson.DefaultDateTypeAdapter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Class<java.sql.Date> class0 = java.sql.Date.class;\n    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);\n    String string0 = defaultDateTypeAdapter0.toString();\n}",
    "testName" : "test1919"
  }
}