focal_method,test_prefix,docstring
"public boolean isJsonArray() {
    return this instanceof JsonArray;
}","public void test000() throws Throwable {
    Class<Timestamp> class0 = Timestamp.class;
    DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
    JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree((Date) null);
    assertFalse(jsonElement0.isJsonArray());
}","/**
 * provides check for verifying if this element is an array or not.
 *
 * @return true if this element is of type {@link JsonArray}, false otherwise.
 */"
"public final T fromJsonTree(JsonElement jsonTree) {
    try {
        JsonReader jsonReader = new JsonTreeReader(jsonTree);
        return read(jsonReader);
    } catch (IOException e) {
        throw new JsonIOException(e);
    }
}","public void test011() throws Throwable {
    Class<Timestamp> class0 = Timestamp.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, """");
    MockDate mockDate0 = new MockDate(1462, 1462, 0, 0, 8233);
    JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);
    // Undeclared exception!
    try {
        defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        //
        //
        verifyException(""com.google.gson.DefaultDateTypeAdapter"", e);
    }
}","/**
 * Converts {@code jsonTree} to a Java object.
 *
 * @param jsonTree the Java object to convert. May be {@link JsonNull}.
 * @since 2.2
 */"
"@Override
public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(SIMPLE_NAME);
    sb.append('(').append(localFormat.getClass().getSimpleName()).append(')');
    return sb.toString();
}","public void test022() throws Throwable {
    Class<java.sql.Date> class0 = java.sql.Date.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, (DateFormat) null, (DateFormat) null);
    // Undeclared exception!
    try {
        defaultDateTypeAdapter0.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.DefaultDateTypeAdapter"", e);
    }
}",""
"@Override
public Date read(JsonReader in) throws IOException {
    if (in.peek() != JsonToken.STRING) {
        throw new JsonParseException(""The date should be a string value"");
    }
    Date date = deserializeToDate(in.nextString());
    if (dateType == Date.class) {
        return date;
    } else if (dateType == Timestamp.class) {
        return new Timestamp(date.getTime());
    } else if (dateType == java.sql.Date.class) {
        return new java.sql.Date(date.getTime());
    } else {
        // This must never happen: dateType is guarded in the primary constructor
        throw new AssertionError();
    }
}","public void test033() throws Throwable {
    Class<java.sql.Date> class0 = java.sql.Date.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
    StringReader stringReader0 = new StringReader(""DefaultDateTypeAdapter(SimpleDateFormat)"");
    JsonReader jsonReader0 = new JsonReader(stringReader0);
    try {
        defaultDateTypeAdapter0.read(jsonReader0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
        //
        verifyException(""com.google.gson.stream.JsonReader"", e);
    }
}",""
"@Override
public Date read(JsonReader in) throws IOException {
    if (in.peek() != JsonToken.STRING) {
        throw new JsonParseException(""The date should be a string value"");
    }
    Date date = deserializeToDate(in.nextString());
    if (dateType == Date.class) {
        return date;
    } else if (dateType == Timestamp.class) {
        return new Timestamp(date.getTime());
    } else if (dateType == java.sql.Date.class) {
        return new java.sql.Date(date.getTime());
    } else {
        // This must never happen: dateType is guarded in the primary constructor
        throw new AssertionError();
    }
}","public void test044() throws Throwable {
    Class<java.sql.Date> class0 = java.sql.Date.class;
    DateFormat dateFormat0 = MockDateFormat.getDateInstance();
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
    PipedReader pipedReader0 = new PipedReader();
    JsonReader jsonReader0 = new JsonReader(pipedReader0);
    try {
        defaultDateTypeAdapter0.read(jsonReader0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedReader"", e);
    }
}",""
"DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern) {
    this(dateType, new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));
}","public void test055() throws Throwable {
    Class<java.sql.Date> class0 = java.sql.Date.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
    try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, (String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.text.SimpleDateFormat"", e);
    }
}",""
"DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern) {
    this(dateType, new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));
}","public void test066() throws Throwable {
    Class<java.sql.Date> class0 = java.sql.Date.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
    try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "" i"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern character 'i'
        //
        verifyException(""java.text.SimpleDateFormat"", e);
    }
}",""
"public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle) {
    this(dateType, DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US), DateFormat.getDateTimeInstance(dateStyle, timeStyle));
}","public void test077() throws Throwable {
    Class<Timestamp> class0 = Timestamp.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
    try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 123, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 123
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",""
"public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {
    this(Date.class, DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US), DateFormat.getDateTimeInstance(dateStyle, timeStyle));
}","public void test088() throws Throwable {
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
    try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(1489, 1489);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 1489
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",""
"public boolean isLenient() {
    return lenient;
}","public void test099() throws Throwable {
    Class<java.sql.Date> class0 = java.sql.Date.class;
    DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
    StringWriter stringWriter0 = new StringWriter();
    JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
    java.sql.Date date0 = new java.sql.Date((-1L));
    defaultDateTypeAdapter0.write(jsonWriter0, (Date) date0);
    assertFalse(jsonWriter0.isLenient());
}","/**
 * Returns true if this writer has relaxed syntax rules.
 */"
"DefaultDateTypeAdapter(Class<? extends Date> dateType, int style) {
    this(dateType, DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));
}","public void test1010() throws Throwable {
    Class<Timestamp> class0 = Timestamp.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
}",""
"public final T fromJsonTree(JsonElement jsonTree) {
    try {
        JsonReader jsonReader = new JsonTreeReader(jsonTree);
        return read(jsonReader);
    } catch (IOException e) {
        throw new JsonIOException(e);
    }
}","public void test1111() throws Throwable {
    Class<Date> class0 = Date.class;
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
    JsonNull jsonNull0 = JsonNull.INSTANCE;
    // Undeclared exception!
    try {
        defaultDateTypeAdapter0.fromJsonTree(jsonNull0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // The date should be a string value
        //
        verifyException(""com.google.gson.DefaultDateTypeAdapter"", e);
    }
}","/**
 * Converts {@code jsonTree} to a Java object.
 *
 * @param jsonTree the Java object to convert. May be {@link JsonNull}.
 * @since 2.2
 */"
"// These methods need to be synchronized since JDK DateFormat classes are not thread-safe
// See issue 162
@Override
public void write(JsonWriter out, Date value) throws IOException {
    if (value == null) {
        out.nullValue();
        return;
    }
    synchronized (localFormat) {
        String dateFormatAsString = enUsFormat.format(value);
        out.value(dateFormatAsString);
    }
}","public void test1212() throws Throwable {
    Class<Date> class0 = Date.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
    // Undeclared exception!
    try {
        defaultDateTypeAdapter0.write((JsonWriter) null, (Date) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.DefaultDateTypeAdapter"", e);
    }
}",""
"DefaultDateTypeAdapter(Class<? extends Date> dateType) {
    this(dateType, DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US), DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));
}","public void test1313() throws Throwable {
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
    try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends Date>) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
        //
        verifyException(""com.google.gson.DefaultDateTypeAdapter"", e);
    }
}",""
"// These methods need to be synchronized since JDK DateFormat classes are not thread-safe
// See issue 162
@Override
public void write(JsonWriter out, Date value) throws IOException {
    if (value == null) {
        out.nullValue();
        return;
    }
    synchronized (localFormat) {
        String dateFormatAsString = enUsFormat.format(value);
        out.value(dateFormatAsString);
    }
}","public void test1414() throws Throwable {
    Class<Timestamp> class0 = Timestamp.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
    StringWriter stringWriter0 = new StringWriter();
    BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 86);
    JsonWriter jsonWriter0 = new JsonWriter(bufferedWriter0);
    JsonWriter jsonWriter1 = jsonWriter0.value("""");
    MockDate mockDate0 = new MockDate(86, (-1179), 2937, 0, (-1179), 8233);
    // Undeclared exception!
    try {
        defaultDateTypeAdapter0.write(jsonWriter1, (Date) mockDate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // JSON must have only one top-level value.
        //
        verifyException(""com.google.gson.stream.JsonWriter"", e);
    }
}",""
"public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle) {
    this(dateType, DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US), DateFormat.getDateTimeInstance(dateStyle, timeStyle));
}","public void test1616() throws Throwable {
    Class<Date> class0 = Date.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
}",""
"public final T fromJsonTree(JsonElement jsonTree) {
    try {
        JsonReader jsonReader = new JsonTreeReader(jsonTree);
        return read(jsonReader);
    } catch (IOException e) {
        throw new JsonIOException(e);
    }
}","public void test1717() throws Throwable {
    Class<java.sql.Date> class0 = java.sql.Date.class;
    DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0);
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
    MockDate mockDate0 = new MockDate(0);
    JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);
    Date date0 = defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
    assertNotNull(date0);
}","/**
 * Converts {@code jsonTree} to a Java object.
 *
 * @param jsonTree the Java object to convert. May be {@link JsonNull}.
 * @since 2.2
 */"
"@Override
public Date read(JsonReader in) throws IOException {
    if (in.peek() != JsonToken.STRING) {
        throw new JsonParseException(""The date should be a string value"");
    }
    Date date = deserializeToDate(in.nextString());
    if (dateType == Date.class) {
        return date;
    } else if (dateType == Timestamp.class) {
        return new Timestamp(date.getTime());
    } else if (dateType == java.sql.Date.class) {
        return new java.sql.Date(date.getTime());
    } else {
        // This must never happen: dateType is guarded in the primary constructor
        throw new AssertionError();
    }
}","public void test1818() throws Throwable {
    Class<java.sql.Date> class0 = java.sql.Date.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, """");
    // Undeclared exception!
    try {
        defaultDateTypeAdapter0.read((JsonReader) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.DefaultDateTypeAdapter"", e);
    }
}",""
"@Override
public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(SIMPLE_NAME);
    sb.append('(').append(localFormat.getClass().getSimpleName()).append(')');
    return sb.toString();
}","public void test1919() throws Throwable {
    Class<java.sql.Date> class0 = java.sql.Date.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
    String string0 = defaultDateTypeAdapter0.toString();
    assertEquals(""DefaultDateTypeAdapter(SimpleDateFormat)"", string0);
}",""
"DefaultDateTypeAdapter(Class<? extends Date> dateType, int style) {
    this(dateType, DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));
}","public void test2020() throws Throwable {
    Class<Date> class0 = Date.class;
    DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
    try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 60000);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 60000
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",""
