focal_method,test_prefix,docstring
"public final boolean isHtmlSafe() {
    return htmlSafe;
}","public void test00() throws Throwable {
    HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
    ReflectiveTypeAdapterFactory.Adapter<Integer> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Integer>((ObjectConstructor<Integer>) null, hashMap0);
    Gson gson0 = new Gson();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
    JsonWriter jsonWriter0 = gson0.newJsonWriter(mockPrintWriter0);
    Integer integer0 = new Integer(1985);
    reflectiveTypeAdapterFactory_Adapter0.write(jsonWriter0, integer0);
    assertFalse(jsonWriter0.isHtmlSafe());
}","/**
 * Returns true if this writer writes JSON that's safe for inclusion in HTML
 * and XML documents.
 */"
"static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
    return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);
}","public void test22() throws Throwable {
    Excluder excluder0 = new Excluder();
    // Undeclared exception!
    try {
        ReflectiveTypeAdapterFactory.excludeField((Field) null, true, excluder0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.internal.bind.ReflectiveTypeAdapterFactory"", e);
    }
}",""
"@Override
public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
    Class<? super T> raw = type.getRawType();
    if (!Object.class.isAssignableFrom(raw)) {
        // it's a primitive!
        return null;
    }
    ObjectConstructor<T> constructor = constructorConstructor.get(type);
    return new Adapter<T>(constructor, getBoundFields(gson, type, raw));
}","public void test33() throws Throwable {
    FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
    Gson gson0 = new Gson();
    Excluder excluder0 = gson0.excluder();
    ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, fieldNamingPolicy0, excluder0);
    Class<Object> class0 = Object.class;
    TypeToken<Object> typeToken0 = TypeToken.get(class0);
    // Undeclared exception!
    try {
        reflectiveTypeAdapterFactory0.create(gson0, typeToken0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.internal.bind.ReflectiveTypeAdapterFactory"", e);
    }
}",""
"public boolean excludeField(Field f, boolean serialize) {
    return excludeField(f, serialize, excluder);
}","public void test44() throws Throwable {
    FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    Gson gson0 = new Gson();
    Excluder excluder0 = gson0.excluder();
    ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, fieldNamingPolicy0, excluder0);
    // Undeclared exception!
    try {
        reflectiveTypeAdapterFactory0.excludeField((Field) null, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.gson.internal.bind.ReflectiveTypeAdapterFactory"", e);
    }
}",""
"public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException {
    Object object = fromJson(json, (Type) classOfT);
    return Primitives.wrap(classOfT).cast(object);
}","public void test55() throws Throwable {
    Gson gson0 = new Gson();
    Boolean boolean0 = new Boolean(false);
    JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
    Class<Type> class0 = Type.class;
    // Undeclared exception!
    try {
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Register an InstanceCreator with Gson for this type may fix this problem.
        //
        verifyException(""com.google.gson.internal.ConstructorConstructor$14"", e);
    }
}","/**
 * This method deserializes the Json read from the specified parse tree into an object of the
 * specified type. It is not suitable to use if the specified class is a generic type since it
 * will not have the generic type information because of the Type Erasure feature of Java.
 * Therefore, this method should not be used if the desired type is a generic type. Note that
 * this method works fine if the any of the fields of the specified object are generics, just the
 * object itself should not be a generic type. For the cases when the object is of generic type,
 * invoke {@link #fromJson(JsonElement, Type)}.
 * @param <T> the type of the desired object
 * @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 * be deserialized
 * @param classOfT The class of T
 * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 * @since 1.3
 */"
"public boolean serializeNulls() {
    return serializeNulls;
}","public void test66() throws Throwable {
    HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
    ReflectiveTypeAdapterFactory.Adapter<InstanceCreator<Integer>> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<InstanceCreator<Integer>>((ObjectConstructor<InstanceCreator<Integer>>) null, hashMap0);
    Gson gson0 = new Gson();
    PipedReader pipedReader0 = new PipedReader();
    PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
    gson0.toJson((Object) reflectiveTypeAdapterFactory_Adapter0, (Appendable) pipedWriter0);
    assertFalse(gson0.serializeNulls());
}",""
