project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    filteringParserDelegate0.getLastClearedToken();
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    String string0 = filteringParserDelegate0.getCurrentName();
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test0022,"public void test0022() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    boolean boolean0 = filteringParserDelegate0.isExpectedStartObjectToken();
    assertFalse(boolean0);
}",1,
project,0,test0033,"public void test0033() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    boolean boolean0 = filteringParserDelegate0.isExpectedStartArrayToken();
    assertFalse(boolean0);
}",1,
project,0,test0044,"public void test0044() throws Throwable {
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, true);
    boolean boolean0 = filteringParserDelegate0.hasTokenId(847);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0055,"public void test0055() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 33, 2, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.skipChildren();
    assertFalse(readerBasedJsonParser0.isClosed());
}",0,assertTrue(readerBasedJsonParser0.isClosed())
project,0,test0066,"public void test0066() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    boolean boolean0 = filteringParserDelegate0.hasTextCharacters();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0077,"public void test0077() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    String string0 = filteringParserDelegate0.getValueAsString();
    assertEquals(""7"", string0);
}",0,assertNotNull(string0)
project,0,test0088,"public void test0088() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    long long0 = filteringParserDelegate0.getValueAsLong();
    assertEquals(7L, long0);
}",0,"assertEquals(0, long0)"
project,0,test0099,"public void test0099() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    int int0 = filteringParserDelegate0.getValueAsInt((-3480));
    assertEquals((-3480), int0);
}",0,"assertEquals(0, int0)"
project,0,test01010,"public void test01010() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    double double0 = filteringParserDelegate0.getValueAsDouble((double) 2);
    assertEquals(2.0, double0, 0.01);
}",0,
project,0,test01111,"public void test01111() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""': expected '"", false);
    StringReader stringReader0 = new StringReader(""Unexpected problem: chain of filtered context broken"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 32768, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    double double0 = filteringParserDelegate0.getValueAsDouble((double) (byte) (-1));
    assertEquals((-1.0), double0, 0.01);
}",0,
project,0,test01212,"public void test01212() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    double double0 = filteringParserDelegate0.getValueAsDouble();
    assertEquals(7.0, double0, 0.01);
}",0,
project,0,test01313,"public void test01313() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, true);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    boolean boolean0 = filteringParserDelegate0.getValueAsBoolean(true);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test01414,"public void test01414() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    boolean boolean0 = filteringParserDelegate0.getValueAsBoolean();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test01515,"public void test01515() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
    assertEquals((-1L), jsonLocation0.getByteOffset());
}",0,
project,0,test01616,"public void test01616() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    int int0 = filteringParserDelegate0.getTextLength();
    assertEquals(0, int0);
}",1,
project,0,test01717,"public void test01717() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    int int0 = filteringParserDelegate0.getTextLength();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test01818,"public void test01818() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    char[] charArray1 = filteringParserDelegate0.getTextCharacters();
    assertNotSame(charArray0, charArray1);
}",0,
project,0,test01919,"public void test01919() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    String string0 = filteringParserDelegate0.getText();
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test02020,"public void test02020() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    String string0 = filteringParserDelegate0.getText();
    assertEquals(""7"", string0);
}",0,
project,0,test02121,"public void test02121() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    short short0 = filteringParserDelegate0.getShortValue();
    assertEquals((short) 7, short0);
}",0,
project,0,test02222,"public void test02222() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    JsonStreamContext jsonStreamContext0 = filteringParserDelegate0.getParsingContext();
    assertNotNull(jsonStreamContext0);
}",0,assertNotNull(jsonStreamContext0)
project,0,test02223,"public void test02223() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    JsonStreamContext jsonStreamContext0 = filteringParserDelegate0.getParsingContext();
    assertEquals(1, jsonStreamContext0.getEntryCount());
}",0,"assertEquals(1, jsonStreamContext0.getEntryCount())"
project,0,test02324,"public void test02324() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    Number number0 = filteringParserDelegate0.getNumberValue();
    assertEquals(7, number0);
}",0,"assertEquals(1, number0)"
project,0,test02425,"public void test02425() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    long long0 = filteringParserDelegate0.getLongValue();
    assertEquals(7L, long0);
}",0,"assertEquals(1, long0)"
project,0,test02526,"public void test02526() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    float float0 = filteringParserDelegate0.getFloatValue();
    assertEquals(7.0F, float0, 0.01F);
}",0,
project,0,test02627,"public void test02627() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    double double0 = filteringParserDelegate0.getDoubleValue();
    assertEquals(7.0, double0, 0.01);
}",0,
project,0,test02829,"public void test02829() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    JsonToken jsonToken0 = filteringParserDelegate0.getCurrentToken();
    assertEquals(7, jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test02930,"public void test02930() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
    assertEquals(1, jsonLocation0.getColumnNr());
}",0,
project,0,test03031,"public void test03031() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[1];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-3068), (-1235), false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
    assertEquals((-3067), jsonLocation0.getColumnNr());
}",0,"assertEquals(0, jsonLocation0.getColumnNr())"
project,0,test03132,"public void test03132() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    byte byte0 = filteringParserDelegate0.getByteValue();
    assertEquals((byte) 7, byte0);
}",0,assertNotNull(byte0)
project,0,test03334,"public void test03334() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    filteringParserDelegate0._filterContext();
    assertEquals(7, filteringParserDelegate0.getCurrentTokenId());
}",0,
project,0,test03435,"public void test03435() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    JsonStreamContext jsonStreamContext0 = filteringParserDelegate0._filterContext();
    assertFalse(jsonStreamContext0.inArray());
}",0,assertTrue(jsonStreamContext0.inArray())
project,0,test03536,"public void test03536() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.nextValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test03637,"public void test03637() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    stringReader0.close();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    try {
        filteringParserDelegate0.nextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.StringReader"", e);
    }
}",0,
project,0,test03738,"public void test03738() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""#("", false);
    StringReader stringReader0 = new StringReader(""#("");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    try {
        filteringParserDelegate0.nextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: java.lang.String@0000000004; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test03839,"public void test03839() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.nextToken();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test03940,"public void test03940() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    TokenFilter tokenFilter0 = new TokenFilter();
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 12000, false);
    JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.nextToken();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 3
        //
        verifyException(""com.fasterxml.jackson.core.json.ReaderBasedJsonParser"", e);
    }
}",0,
project,0,test04041,"public void test04041() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsString("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test04142,"public void test04142() throws Throwable {
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonParserDelegate"", e);
    }
}",0,
project,0,test04243,"public void test04243() throws Throwable {
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsLong();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test04344,"public void test04344() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsInt((-155));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test04445,"public void test04445() throws Throwable {
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsInt();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test04546,"public void test04546() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsDouble(Double.NEGATIVE_INFINITY);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test04647,"public void test04647() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsDouble();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test04748,"public void test04748() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsBoolean(false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test04849,"public void test04849() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsBoolean();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test04950,"public void test04950() throws Throwable {
    JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getTokenLocation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonParserDelegate"", e);
    }
}",0,
project,0,test05051,"public void test05051() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getTextOffset();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test05152,"public void test05152() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getTextCharacters();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test05253,"public void test05253() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getShortValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test05354,"public void test05354() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2589), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    try {
        filteringParserDelegate0.getNumberValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000005; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test05455,"public void test05455() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getNumberType();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test05556,"public void test05556() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getIntValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test05657,"public void test05657() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getFloatValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test05758,"public void test05758() throws Throwable {
    JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getEmbeddedObject();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonParserDelegate"", e);
    }
}",0,
project,0,test05859,"public void test05859() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 33, 2, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    try {
        filteringParserDelegate0.getDoubleValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000006; line: 1, column: 34]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test05960,"public void test05960() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getDecimalValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test06061,"public void test06061() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getCurrentLocation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test06162,"public void test06162() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getByteValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test06263,"public void test06263() throws Throwable {
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getBooleanValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test06364,"public void test06364() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getBigIntegerValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test06465,"public void test06465() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[9];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (byte) 71, true);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, true, true);
    try {
        filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000007; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test06566,"public void test06566() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0._nextToken2();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test06667,"public void test06667() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader(""|"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1996), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-78), 55296, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0._nextToken2();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -78
        //
        verifyException(""com.fasterxml.jackson.core.json.ReaderBasedJsonParser"", e);
    }
}",0,
project,0,test06768,"public void test06768() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    StringReader stringReader0 = new StringReader(""|:,RxlnVjmas= "");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
    try {
        filteringParserDelegate0._nextToken2();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('|' (code 124)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
        //  at [Source: UNKNOWN; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test06869,"public void test06869() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    assertTrue(filteringParserDelegate0.hasCurrentToken());
}",0,
project,0,test06870,"public void test06870() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    filteringParserDelegate0.nextToken();
    assertFalse(filteringParserDelegate0.hasCurrentToken());
}",0,assertTrue(filteringParserDelegate0.hasCurrentToken())
project,0,test06971,"public void test06971() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextToken();
    assertEquals(7, filteringParserDelegate0.getCurrentTokenId());
}",0,
project,0,test07072,"public void test07072() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    try {
        filteringParserDelegate0.nextToken();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: java.lang.String@0000000008; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test07173,"public void test07173() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test07274,"public void test07274() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2589), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    filteringParserDelegate0._nextToken2();
}",0,
project,0,test07375,"public void test07375() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0._nextToken2();
    filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
    assertTrue(filteringParserDelegate0.hasCurrentToken());
}",0,assertFalse(filteringParserDelegate0.hasCurrentToken())
project,0,test07476,"public void test07476() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    assertTrue(filteringParserDelegate0.hasCurrentToken());
}",0,
project,0,test07477,"public void test07477() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    filteringParserDelegate0.nextValue();
    assertFalse(filteringParserDelegate0.hasCurrentToken());
}",0,
project,0,test07578,"public void test07578() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    filteringParserDelegate0.clearCurrentToken();
    assertEquals(0, filteringParserDelegate0.getFormatFeatures());
}",0,"assertEquals(1, filteringParserDelegate0.getFormatFeatures())"
project,0,test07679,"public void test07679() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    JsonToken jsonToken0 = filteringParserDelegate0.nextValue();
    boolean boolean0 = filteringParserDelegate0.hasToken(jsonToken0);
    assertTrue(filteringParserDelegate0.hasCurrentToken());
}",0,assertTrue(filteringParserDelegate0.hasCurrentToken())
project,0,test07680,"public void test07680() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    JsonToken jsonToken0 = filteringParserDelegate0.nextValue();
    boolean boolean0 = filteringParserDelegate0.hasToken(jsonToken0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07781,"public void test07781() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    JsonToken jsonToken0 = JsonToken.VALUE_NULL;
    boolean boolean0 = filteringParserDelegate0.hasToken(jsonToken0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test07882,"public void test07882() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    boolean boolean0 = filteringParserDelegate0.hasTokenId(0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07983,"public void test07983() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    boolean boolean0 = filteringParserDelegate0.hasTokenId((-3480));
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test08084,"public void test08084() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextIntValue(1330);
    boolean boolean0 = filteringParserDelegate0.hasTokenId((-3480));
    assertTrue(filteringParserDelegate0.hasCurrentToken());
}",0,assertTrue(filteringParserDelegate0.hasCurrentToken())
project,0,test08085,"public void test08085() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextIntValue(1330);
    boolean boolean0 = filteringParserDelegate0.hasTokenId((-3480));
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test08186,"public void test08186() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
    assertEquals(7, filteringParserDelegate0.getCurrentTokenId());
}",0,
project,0,test08187,"public void test08187() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test08288,"public void test08288() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""': expected '"", false);
    StringReader stringReader0 = new StringReader(""Unexpected problem: chain of filtered context broken"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 32768, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test08389,"public void test08389() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    int int0 = filteringParserDelegate0.getCurrentTokenId();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test08490,"public void test08490() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    int int0 = filteringParserDelegate0.getCurrentTokenId();
    assertTrue(filteringParserDelegate0.hasCurrentToken());
}",0,assertTrue(filteringParserDelegate0.hasCurrentToken())
project,0,test08491,"public void test08491() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    int int0 = filteringParserDelegate0.getCurrentTokenId();
    assertEquals(7, int0);
}",0,"assertEquals(0, int0)"
project,0,test08592,"public void test08592() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    double double0 = filteringParserDelegate0.getValueAsDouble((double) 0);
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test08693,"public void test08693() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsLong(0L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test08794,"public void test08794() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    int int0 = filteringParserDelegate0.getValueAsInt();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test08895,"public void test08895() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getBinaryValue((Base64Variant) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test08996,"public void test08996() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    byte[] byteArray0 = new byte[5];
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1094), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, (byte) (-117), false);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
    try {
        filteringParserDelegate0.getShortValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000009; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test09097,"public void test09097() throws Throwable {
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getTextLength();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonParserDelegate"", e);
    }
}",0,
project,0,test09198,"public void test09198() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    // Undeclared exception!
    try {
        filteringParserDelegate0.readBinaryValue((OutputStream) byteArrayBuilder0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test09299,"public void test09299() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getLongValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test093100,"public void test093100() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    boolean boolean0 = filteringParserDelegate0.getValueAsBoolean();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test094101,"public void test094101() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 33, 2, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    TokenFilter tokenFilter1 = filteringParserDelegate0.getFilter();
    assertSame(tokenFilter0, tokenFilter1);
}",0,
project,0,test095102,"public void test095102() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    char[] charArray0 = filteringParserDelegate0.getTextCharacters();
    assertNull(charArray0);
}",0,assertNotNull(charArray0)
project,0,test096103,"public void test096103() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
    assertEquals(605L, jsonLocation0.getCharOffset());
}",0,
project,0,test097104,"public void test097104() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    try {
        filteringParserDelegate0.getNumberType();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: java.io.SequenceInputStream@0000000010; line: 1, column: 606]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test098105,"public void test098105() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    double double0 = filteringParserDelegate0.getValueAsDouble();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test099106,"public void test099106() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
    assertEquals(1, jsonLocation0.getLineNr());
}",0,"assertEquals(0, jsonLocation0.getLineNr())"
project,0,test100107,"public void test100107() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    try {
        filteringParserDelegate0.getBigIntegerValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: java.io.SequenceInputStream@0000000011; line: 1, column: 606]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",1,
project,0,test101108,"public void test101108() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    try {
        filteringParserDelegate0.getBooleanValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not of boolean type
        //  at [Source: java.io.SequenceInputStream@0000000012; line: 1, column: 606]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test102109,"public void test102109() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    int int0 = filteringParserDelegate0.getMatchCount();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test103110,"public void test103110() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    int int0 = filteringParserDelegate0.getValueAsInt(3);
    assertEquals(3, int0);
}",0,"assertEquals(0, int0)"
project,0,test104111,"public void test104111() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    int int0 = filteringParserDelegate0.getTextOffset();
    assertEquals(0, int0);
}",0,
project,0,test105112,"public void test105112() throws Throwable {
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.overrideCurrentName(""M]O"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Can not currently override name during filtering read
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",1,
project,0,test106113,"public void test106113() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    try {
        filteringParserDelegate0.getIntValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: java.io.SequenceInputStream@0000000013; line: 1, column: 606]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",1,
project,0,test107114,"public void test107114() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.hasTextCharacters();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test108115,"public void test108115() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    boolean boolean0 = filteringParserDelegate0.getValueAsBoolean(false);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test109116,"public void test109116() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    try {
        filteringParserDelegate0.getDecimalValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: java.io.SequenceInputStream@0000000014; line: 1, column: 606]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test110117,"public void test110117() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getText();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",0,
project,0,test111118,"public void test111118() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    long long0 = filteringParserDelegate0.getValueAsLong();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test112119,"public void test112119() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
    JsonStreamContext jsonStreamContext0 = filteringParserDelegate0.getParsingContext();
    assertFalse(jsonStreamContext0.inArray());
}",0,assertFalse(jsonStreamContext0.inArray())
project,0,test113120,"public void test113120() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    Object object0 = filteringParserDelegate0.getEmbeddedObject();
    assertNull(object0);
}",1,
project,0,test114121,"public void test114121() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    try {
        filteringParserDelegate0.getByteValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000015; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test115122,"public void test115122() throws Throwable {
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getDoubleValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonParserDelegate"", e);
    }
}",0,
project,0,test116123,"public void test116123() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
    filteringParserDelegate0.getCurrentToken();
}",0,
project,0,test117124,"public void test117124() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    char[] charArray0 = new char[3];
    TokenFilter tokenFilter0 = new TokenFilter();
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 12000, false);
    JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
    String string0 = filteringParserDelegate0.getValueAsString(""7o%ASk"");
    assertEquals(""7o%ASk"", string0);
}",0,
project,0,test118125,"public void test118125() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader(""Can not currently override name during filtering read"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[6];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-303), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 1072, true);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
    try {
        filteringParserDelegate0.getFloatValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000016; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",1,
project,0,test119126,"public void test119126() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    String string0 = filteringParserDelegate0.getValueAsString();
    assertNull(string0);
}",0,
project,0,test120127,"public void test120127() throws Throwable {
    JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getNumberValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonParserDelegate"", e);
    }
}",0,
