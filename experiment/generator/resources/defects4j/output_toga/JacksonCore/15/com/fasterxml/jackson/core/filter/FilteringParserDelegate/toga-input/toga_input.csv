focal_method,test_prefix,docstring
"@Override
public JsonToken getLastClearedToken() {
    return _lastClearedToken;
}","public void test0000() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    filteringParserDelegate0.getLastClearedToken();
}",""
"// !!! TODO: Verify it works as expected: copied from standard JSON parser impl
@Override
public String getCurrentName() throws IOException {
    JsonStreamContext ctxt = _filterContext();
    if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {
        JsonStreamContext parent = ctxt.getParent();
        return (parent == null) ? null : parent.getCurrentName();
    }
    return ctxt.getCurrentName();
}","public void test0011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    String string0 = filteringParserDelegate0.getCurrentName();
    assertNull(string0);
}",""
"@Override
public boolean isExpectedStartObjectToken() {
    return _currToken == JsonToken.START_OBJECT;
}","public void test0022() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    boolean boolean0 = filteringParserDelegate0.isExpectedStartObjectToken();
    assertFalse(boolean0);
}",""
"@Override
public boolean isExpectedStartArrayToken() {
    return _currToken == JsonToken.START_ARRAY;
}","public void test0033() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    boolean boolean0 = filteringParserDelegate0.isExpectedStartArrayToken();
    assertFalse(boolean0);
}",""
"@Override
public boolean hasTokenId(int id) {
    final JsonToken t = _currToken;
    if (t == null) {
        return (JsonTokenId.ID_NO_TOKEN == id);
    }
    return t.id() == id;
}","public void test0044() throws Throwable {
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, true);
    boolean boolean0 = filteringParserDelegate0.hasTokenId(847);
    assertFalse(boolean0);
}",""
"@Override
public boolean isClosed() {
    return _closed;
}","public void test0055() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 33, 2, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.skipChildren();
    assertFalse(readerBasedJsonParser0.isClosed());
}",""
"@Override
public boolean hasTextCharacters() {
    return delegate.hasTextCharacters();
}","public void test0066() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    boolean boolean0 = filteringParserDelegate0.hasTextCharacters();
    assertFalse(boolean0);
}",""
"@Override
public String getValueAsString() throws IOException {
    return delegate.getValueAsString();
}","public void test0077() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    String string0 = filteringParserDelegate0.getValueAsString();
    assertEquals(""7"", string0);
}",""
"@Override
public long getValueAsLong() throws IOException {
    return delegate.getValueAsLong();
}","public void test0088() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    long long0 = filteringParserDelegate0.getValueAsLong();
    assertEquals(7L, long0);
}",""
"@Override
public int getValueAsInt(int defaultValue) throws IOException {
    return delegate.getValueAsInt(defaultValue);
}","public void test0099() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    int int0 = filteringParserDelegate0.getValueAsInt((-3480));
    assertEquals((-3480), int0);
}",""
"@Override
public double getValueAsDouble(double defaultValue) throws IOException {
    return delegate.getValueAsDouble(defaultValue);
}","public void test01010() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    double double0 = filteringParserDelegate0.getValueAsDouble((double) 2);
    assertEquals(2.0, double0, 0.01);
}",""
"@Override
public double getValueAsDouble(double defaultValue) throws IOException {
    return delegate.getValueAsDouble(defaultValue);
}","public void test01111() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""': expected '"", false);
    StringReader stringReader0 = new StringReader(""Unexpected problem: chain of filtered context broken"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 32768, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    double double0 = filteringParserDelegate0.getValueAsDouble((double) (byte) (-1));
    assertEquals((-1.0), double0, 0.01);
}",""
"@Override
public double getValueAsDouble() throws IOException {
    return delegate.getValueAsDouble();
}","public void test01212() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    double double0 = filteringParserDelegate0.getValueAsDouble();
    assertEquals(7.0, double0, 0.01);
}",""
"@Override
public boolean getValueAsBoolean(boolean defaultValue) throws IOException {
    return delegate.getValueAsBoolean(defaultValue);
}","public void test01313() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, true);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    boolean boolean0 = filteringParserDelegate0.getValueAsBoolean(true);
    assertTrue(boolean0);
}",""
"@Override
public boolean getValueAsBoolean() throws IOException {
    return delegate.getValueAsBoolean();
}","public void test01414() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    boolean boolean0 = filteringParserDelegate0.getValueAsBoolean();
    assertTrue(boolean0);
}",""
"public long getByteOffset() {
    return _totalBytes;
}","public void test01515() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
    assertEquals((-1L), jsonLocation0.getByteOffset());
}","/**
 * @return Byte offset within underlying stream, reader or writer,
 *   if available; -1 if not.
 */"
"@Override
public int getTextLength() throws IOException {
    return delegate.getTextLength();
}","public void test01616() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    int int0 = filteringParserDelegate0.getTextLength();
    assertEquals(0, int0);
}",""
"@Override
public int getTextLength() throws IOException {
    return delegate.getTextLength();
}","public void test01717() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    int int0 = filteringParserDelegate0.getTextLength();
    assertEquals(1, int0);
}",""
"@Override
public char[] getTextCharacters() throws IOException {
    return delegate.getTextCharacters();
}","public void test01818() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    char[] charArray1 = filteringParserDelegate0.getTextCharacters();
    assertNotSame(charArray0, charArray1);
}",""
"/*
    /**********************************************************
    /* Public API, access to token information, text
    /**********************************************************
     */
@Override
public String getText() throws IOException {
    return delegate.getText();
}","public void test01919() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    String string0 = filteringParserDelegate0.getText();
    assertNull(string0);
}",""
"/*
    /**********************************************************
    /* Public API, access to token information, text
    /**********************************************************
     */
@Override
public String getText() throws IOException {
    return delegate.getText();
}","public void test02020() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    String string0 = filteringParserDelegate0.getText();
    assertEquals(""7"", string0);
}",""
"@Override
public short getShortValue() throws IOException {
    return delegate.getShortValue();
}","public void test02121() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    short short0 = filteringParserDelegate0.getShortValue();
    assertEquals((short) 7, short0);
}",""
"@Override
public JsonStreamContext getParsingContext() {
    return _filterContext();
}","public void test02222() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    JsonStreamContext jsonStreamContext0 = filteringParserDelegate0.getParsingContext();
    assertNotNull(jsonStreamContext0);
}",""
"public final int getEntryCount() {
    return _index + 1;
}","public void test02223() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    JsonStreamContext jsonStreamContext0 = filteringParserDelegate0.getParsingContext();
    assertEquals(1, jsonStreamContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"@Override
public Number getNumberValue() throws IOException {
    return delegate.getNumberValue();
}","public void test02324() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    Number number0 = filteringParserDelegate0.getNumberValue();
    assertEquals(7, number0);
}",""
"@Override
public long getLongValue() throws IOException {
    return delegate.getLongValue();
}","public void test02425() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    long long0 = filteringParserDelegate0.getLongValue();
    assertEquals(7L, long0);
}",""
"@Override
public float getFloatValue() throws IOException {
    return delegate.getFloatValue();
}","public void test02526() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    float float0 = filteringParserDelegate0.getFloatValue();
    assertEquals(7.0F, float0, 0.01F);
}",""
"@Override
public double getDoubleValue() throws IOException {
    return delegate.getDoubleValue();
}","public void test02627() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    double double0 = filteringParserDelegate0.getDoubleValue();
    assertEquals(7.0, double0, 0.01);
}",""
"public final int id() {
    return _id;
}","public void test02829() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    JsonToken jsonToken0 = filteringParserDelegate0.getCurrentToken();
    assertEquals(7, jsonToken0.id());
}",""
"public int getColumnNr() {
    return _columnNr;
}","public void test02930() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
    assertEquals(1, jsonLocation0.getColumnNr());
}","/**
 * @return Column number of the location (1-based)
 */"
"public int getColumnNr() {
    return _columnNr;
}","public void test03031() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[1];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-3068), (-1235), false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
    assertEquals((-3067), jsonLocation0.getColumnNr());
}","/**
 * @return Column number of the location (1-based)
 */"
"@Override
public byte getByteValue() throws IOException {
    return delegate.getByteValue();
}","public void test03132() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    byte byte0 = filteringParserDelegate0.getByteValue();
    assertEquals((byte) 7, byte0);
}",""
"@Override
public final int getCurrentTokenId() {
    final JsonToken t = _currToken;
    return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
}","public void test03334() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    filteringParserDelegate0._filterContext();
    assertEquals(7, filteringParserDelegate0.getCurrentTokenId());
}",""
"public final boolean inArray() {
    return _type == TYPE_ARRAY;
}","public void test03435() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    JsonStreamContext jsonStreamContext0 = filteringParserDelegate0._filterContext();
    assertFalse(jsonStreamContext0.inArray());
}","/**
 * Method that returns true if this context is an Array context;
 * that is, content is being read from or written to a Json Array.
 */"
"@Override
public JsonToken nextValue() throws IOException {
    // Re-implemented same as ParserMinimalBase:
    JsonToken t = nextToken();
    if (t == JsonToken.FIELD_NAME) {
        t = nextToken();
    }
    return t;
}","public void test03536() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.nextValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public JsonToken nextValue() throws IOException {
    // Re-implemented same as ParserMinimalBase:
    JsonToken t = nextToken();
    if (t == JsonToken.FIELD_NAME) {
        t = nextToken();
    }
    return t;
}","public void test03637() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    stringReader0.close();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    try {
        filteringParserDelegate0.nextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.StringReader"", e);
    }
}",""
"@Override
public JsonToken nextValue() throws IOException {
    // Re-implemented same as ParserMinimalBase:
    JsonToken t = nextToken();
    if (t == JsonToken.FIELD_NAME) {
        t = nextToken();
    }
    return t;
}","public void test03738() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""#("", false);
    StringReader stringReader0 = new StringReader(""#("");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    try {
        filteringParserDelegate0.nextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: java.lang.String@0000000004; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, traversal
    /**********************************************************
     */
@Override
public JsonToken nextToken() throws IOException {
    //Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
    // check for no buffered context _exposedContext - null
    //If all the conditions matches then check for scalar / non-scalar property
    //if not scalar and ended successfully, then return null
    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
    // then return null
    // Anything buffered?
    TokenFilterContext ctxt = _exposedContext;
    if (ctxt != null) {
        while (true) {
            JsonToken t = ctxt.nextTokenToRead();
            if (t != null) {
                _currToken = t;
                return t;
            }
            // all done with buffered stuff?
            if (ctxt == _headContext) {
                _exposedContext = null;
                if (ctxt.inArray()) {
                    t = delegate.getCurrentToken();
                    // Is this guaranteed to work without further checks?
                    //                        if (t != JsonToken.START_ARRAY) {
                    _currToken = t;
                    return t;
                }
                // Almost! Most likely still have the current token;
                // with the sole exception of
                /*
                    t = delegate.getCurrentToken();
                    if (t != JsonToken.FIELD_NAME) {
                        _currToken = t;
                        return t;
                    }
                    */
                break;
            }
            // If not, traverse down the context chain
            ctxt = _headContext.findChildOf(ctxt);
            _exposedContext = ctxt;
            if (ctxt == null) {
                // should never occur
                throw _constructError(""Unexpected problem: chain of filtered context broken"");
            }
        }
    }
    // If not, need to read more. If we got any:
    JsonToken t = delegate.nextToken();
    if (t == null) {
        // no strict need to close, since we have no state here
        return (_currToken = t);
    }
    // otherwise... to include or not?
    TokenFilter f;
    switch(t.id()) {
        case ID_START_ARRAY:
            f = _itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildArrayContext(f, true);
                return (_currToken = t);
            }
            if (f == null) {
                // does this occur?
                delegate.skipChildren();
                break;
            }
            // Otherwise still iffy, need to check
            f = _headContext.checkValue(f);
            if (f == null) {
                delegate.skipChildren();
                break;
            }
            if (f != TokenFilter.INCLUDE_ALL) {
                f = f.filterStartArray();
            }
            _itemFilter = f;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildArrayContext(f, true);
                return (_currToken = t);
            }
            _headContext = _headContext.createChildArrayContext(f, false);
            // Also: only need buffering if parent path to be included
            if (_includePath) {
                t = _nextTokenWithBuffering(_headContext);
                if (t != null) {
                    _currToken = t;
                    return t;
                }
            }
            break;
        case ID_START_OBJECT:
            f = _itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildObjectContext(f, true);
                return (_currToken = t);
            }
            if (f == null) {
                // does this occur?
                delegate.skipChildren();
                break;
            }
            // Otherwise still iffy, need to check
            f = _headContext.checkValue(f);
            if (f == null) {
                delegate.skipChildren();
                break;
            }
            if (f != TokenFilter.INCLUDE_ALL) {
                f = f.filterStartObject();
            }
            _itemFilter = f;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildObjectContext(f, true);
                return (_currToken = t);
            }
            _headContext = _headContext.createChildObjectContext(f, false);
            // Also: only need buffering if parent path to be included
            if (_includePath) {
                t = _nextTokenWithBuffering(_headContext);
                if (t != null) {
                    _currToken = t;
                    return t;
                }
            }
            // note: inclusion of surrounding Object handled separately via
            // FIELD_NAME
            break;
        case ID_END_ARRAY:
        case ID_END_OBJECT:
            {
                boolean returnEnd = _headContext.isStartHandled();
                f = _headContext.getFilter();
                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                    f.filterFinishArray();
                }
                _headContext = _headContext.getParent();
                _itemFilter = _headContext.getFilter();
                if (returnEnd) {
                    return (_currToken = t);
                }
            }
            break;
        case ID_FIELD_NAME:
            {
                final String name = delegate.getCurrentName();
                // note: this will also set 'needToHandleName'
                f = _headContext.setFieldName(name);
                if (f == TokenFilter.INCLUDE_ALL) {
                    _itemFilter = f;
                    if (!_includePath) {
                        // Minor twist here: if parent NOT included, may need to induce output of
                        // surrounding START_OBJECT/END_OBJECT
                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
                            // returns START_OBJECT but also marks it handled
                            t = _headContext.nextTokenToRead();
                            _exposedContext = _headContext;
                        }
                    }
                    return (_currToken = t);
                }
                if (f == null) {
                    delegate.nextToken();
                    delegate.skipChildren();
                    break;
                }
                f = f.includeProperty(name);
                if (f == null) {
                    delegate.nextToken();
                    delegate.skipChildren();
                    break;
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    if (_includePath) {
                        return (_currToken = t);
                    }
                }
                if (_includePath) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                break;
            }
        default:
            // scalar value
            f = _itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                return (_currToken = t);
            }
            if (f != null) {
                f = _headContext.checkValue(f);
                if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                    return (_currToken = t);
                }
            }
            // Otherwise not included (leaves must be explicitly included)
            break;
    }
    // We get here if token was not yet found; offlined handling
    return _nextToken2();
}","public void test03839() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.nextToken();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, traversal
    /**********************************************************
     */
@Override
public JsonToken nextToken() throws IOException {
    //Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
    // check for no buffered context _exposedContext - null
    //If all the conditions matches then check for scalar / non-scalar property
    //if not scalar and ended successfully, then return null
    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
    // then return null
    // Anything buffered?
    TokenFilterContext ctxt = _exposedContext;
    if (ctxt != null) {
        while (true) {
            JsonToken t = ctxt.nextTokenToRead();
            if (t != null) {
                _currToken = t;
                return t;
            }
            // all done with buffered stuff?
            if (ctxt == _headContext) {
                _exposedContext = null;
                if (ctxt.inArray()) {
                    t = delegate.getCurrentToken();
                    // Is this guaranteed to work without further checks?
                    //                        if (t != JsonToken.START_ARRAY) {
                    _currToken = t;
                    return t;
                }
                // Almost! Most likely still have the current token;
                // with the sole exception of
                /*
                    t = delegate.getCurrentToken();
                    if (t != JsonToken.FIELD_NAME) {
                        _currToken = t;
                        return t;
                    }
                    */
                break;
            }
            // If not, traverse down the context chain
            ctxt = _headContext.findChildOf(ctxt);
            _exposedContext = ctxt;
            if (ctxt == null) {
                // should never occur
                throw _constructError(""Unexpected problem: chain of filtered context broken"");
            }
        }
    }
    // If not, need to read more. If we got any:
    JsonToken t = delegate.nextToken();
    if (t == null) {
        // no strict need to close, since we have no state here
        return (_currToken = t);
    }
    // otherwise... to include or not?
    TokenFilter f;
    switch(t.id()) {
        case ID_START_ARRAY:
            f = _itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildArrayContext(f, true);
                return (_currToken = t);
            }
            if (f == null) {
                // does this occur?
                delegate.skipChildren();
                break;
            }
            // Otherwise still iffy, need to check
            f = _headContext.checkValue(f);
            if (f == null) {
                delegate.skipChildren();
                break;
            }
            if (f != TokenFilter.INCLUDE_ALL) {
                f = f.filterStartArray();
            }
            _itemFilter = f;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildArrayContext(f, true);
                return (_currToken = t);
            }
            _headContext = _headContext.createChildArrayContext(f, false);
            // Also: only need buffering if parent path to be included
            if (_includePath) {
                t = _nextTokenWithBuffering(_headContext);
                if (t != null) {
                    _currToken = t;
                    return t;
                }
            }
            break;
        case ID_START_OBJECT:
            f = _itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildObjectContext(f, true);
                return (_currToken = t);
            }
            if (f == null) {
                // does this occur?
                delegate.skipChildren();
                break;
            }
            // Otherwise still iffy, need to check
            f = _headContext.checkValue(f);
            if (f == null) {
                delegate.skipChildren();
                break;
            }
            if (f != TokenFilter.INCLUDE_ALL) {
                f = f.filterStartObject();
            }
            _itemFilter = f;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildObjectContext(f, true);
                return (_currToken = t);
            }
            _headContext = _headContext.createChildObjectContext(f, false);
            // Also: only need buffering if parent path to be included
            if (_includePath) {
                t = _nextTokenWithBuffering(_headContext);
                if (t != null) {
                    _currToken = t;
                    return t;
                }
            }
            // note: inclusion of surrounding Object handled separately via
            // FIELD_NAME
            break;
        case ID_END_ARRAY:
        case ID_END_OBJECT:
            {
                boolean returnEnd = _headContext.isStartHandled();
                f = _headContext.getFilter();
                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                    f.filterFinishArray();
                }
                _headContext = _headContext.getParent();
                _itemFilter = _headContext.getFilter();
                if (returnEnd) {
                    return (_currToken = t);
                }
            }
            break;
        case ID_FIELD_NAME:
            {
                final String name = delegate.getCurrentName();
                // note: this will also set 'needToHandleName'
                f = _headContext.setFieldName(name);
                if (f == TokenFilter.INCLUDE_ALL) {
                    _itemFilter = f;
                    if (!_includePath) {
                        // Minor twist here: if parent NOT included, may need to induce output of
                        // surrounding START_OBJECT/END_OBJECT
                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
                            // returns START_OBJECT but also marks it handled
                            t = _headContext.nextTokenToRead();
                            _exposedContext = _headContext;
                        }
                    }
                    return (_currToken = t);
                }
                if (f == null) {
                    delegate.nextToken();
                    delegate.skipChildren();
                    break;
                }
                f = f.includeProperty(name);
                if (f == null) {
                    delegate.nextToken();
                    delegate.skipChildren();
                    break;
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    if (_includePath) {
                        return (_currToken = t);
                    }
                }
                if (_includePath) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                break;
            }
        default:
            // scalar value
            f = _itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                return (_currToken = t);
            }
            if (f != null) {
                f = _headContext.checkValue(f);
                if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                    return (_currToken = t);
                }
            }
            // Otherwise not included (leaves must be explicitly included)
            break;
    }
    // We get here if token was not yet found; offlined handling
    return _nextToken2();
}","public void test03940() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    TokenFilter tokenFilter0 = new TokenFilter();
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 12000, false);
    JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.nextToken();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 3
        //
        verifyException(""com.fasterxml.jackson.core.json.ReaderBasedJsonParser"", e);
    }
}",""
"@Override
public String getValueAsString(String defaultValue) throws IOException {
    return delegate.getValueAsString(defaultValue);
}","public void test04041() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsString("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public String getValueAsString() throws IOException {
    return delegate.getValueAsString();
}","public void test04142() throws Throwable {
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonParserDelegate"", e);
    }
}",""
"@Override
public long getValueAsLong() throws IOException {
    return delegate.getValueAsLong();
}","public void test04243() throws Throwable {
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsLong();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public int getValueAsInt(int defaultValue) throws IOException {
    return delegate.getValueAsInt(defaultValue);
}","public void test04344() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsInt((-155));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, access to token information, coercion/conversion
    /**********************************************************
     */
@Override
public int getValueAsInt() throws IOException {
    return delegate.getValueAsInt();
}","public void test04445() throws Throwable {
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsInt();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public double getValueAsDouble(double defaultValue) throws IOException {
    return delegate.getValueAsDouble(defaultValue);
}","public void test04546() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsDouble(Double.NEGATIVE_INFINITY);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public double getValueAsDouble() throws IOException {
    return delegate.getValueAsDouble();
}","public void test04647() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsDouble();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public boolean getValueAsBoolean(boolean defaultValue) throws IOException {
    return delegate.getValueAsBoolean(defaultValue);
}","public void test04748() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsBoolean(false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public boolean getValueAsBoolean() throws IOException {
    return delegate.getValueAsBoolean();
}","public void test04849() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsBoolean();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public JsonLocation getTokenLocation() {
    return delegate.getTokenLocation();
}","public void test04950() throws Throwable {
    JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getTokenLocation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonParserDelegate"", e);
    }
}",""
"@Override
public int getTextOffset() throws IOException {
    return delegate.getTextOffset();
}","public void test05051() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getTextOffset();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public char[] getTextCharacters() throws IOException {
    return delegate.getTextCharacters();
}","public void test05152() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getTextCharacters();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public short getShortValue() throws IOException {
    return delegate.getShortValue();
}","public void test05253() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getShortValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public Number getNumberValue() throws IOException {
    return delegate.getNumberValue();
}","public void test05354() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2589), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    try {
        filteringParserDelegate0.getNumberValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000005; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public NumberType getNumberType() throws IOException {
    return delegate.getNumberType();
}","public void test05455() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getNumberType();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public int getIntValue() throws IOException {
    return delegate.getIntValue();
}","public void test05556() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getIntValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public float getFloatValue() throws IOException {
    return delegate.getFloatValue();
}","public void test05657() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getFloatValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, access to token values, other
    /**********************************************************
     */
@Override
public Object getEmbeddedObject() throws IOException {
    return delegate.getEmbeddedObject();
}","public void test05758() throws Throwable {
    JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getEmbeddedObject();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonParserDelegate"", e);
    }
}",""
"@Override
public double getDoubleValue() throws IOException {
    return delegate.getDoubleValue();
}","public void test05859() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 33, 2, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    try {
        filteringParserDelegate0.getDoubleValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000006; line: 1, column: 34]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public BigDecimal getDecimalValue() throws IOException {
    return delegate.getDecimalValue();
}","public void test05960() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getDecimalValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public JsonLocation getCurrentLocation() {
    return delegate.getCurrentLocation();
}","public void test06061() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getCurrentLocation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public byte getByteValue() throws IOException {
    return delegate.getByteValue();
}","public void test06162() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getByteValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public boolean getBooleanValue() throws IOException {
    return delegate.getBooleanValue();
}","public void test06263() throws Throwable {
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getBooleanValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, access to token information, numeric
    /**********************************************************
     */
@Override
public BigInteger getBigIntegerValue() throws IOException {
    return delegate.getBigIntegerValue();
}","public void test06364() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getBigIntegerValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException {
    main_loop: while (true) {
        JsonToken t = delegate.nextToken();
        if (t == null) {
            // is this even legal?
            return t;
        }
        TokenFilter f;
        // One simplification here: we know for a fact that the item filter is
        // neither null nor 'include all', for most cases; the only exception
        // being FIELD_NAME handling
        switch(t.id()) {
            case ID_START_ARRAY:
                f = _headContext.checkValue(_itemFilter);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartArray();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return _nextBuffered(buffRoot);
                }
                _headContext = _headContext.createChildArrayContext(f, false);
                continue main_loop;
            case ID_START_OBJECT:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return t;
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartObject();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return _nextBuffered(buffRoot);
                }
                _headContext = _headContext.createChildObjectContext(f, false);
                continue main_loop;
            case ID_END_ARRAY:
            case ID_END_OBJECT:
                {
                    // Unlike with other loops, here we know that content was NOT
                    // included (won't get this far otherwise)
                    f = _headContext.getFilter();
                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                        f.filterFinishArray();
                    }
                    boolean gotEnd = (_headContext == buffRoot);
                    boolean returnEnd = gotEnd && _headContext.isStartHandled();
                    _headContext = _headContext.getParent();
                    _itemFilter = _headContext.getFilter();
                    if (returnEnd) {
                        return t;
                    }
                    // Hmmh. Do we need both checks, or should above suffice?
                    if (gotEnd || (_headContext == buffRoot)) {
                        return null;
                    }
                }
                continue main_loop;
            case ID_FIELD_NAME:
                {
                    final String name = delegate.getCurrentName();
                    f = _headContext.setFieldName(name);
                    if (f == TokenFilter.INCLUDE_ALL) {
                        _itemFilter = f;
                        return _nextBuffered(buffRoot);
                    }
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    f = f.includeProperty(name);
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    _itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        return _nextBuffered(buffRoot);
                    }
                }
                continue main_loop;
            default:
                // scalar value
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    return _nextBuffered(buffRoot);
                }
                if (f != null) {
                    f = _headContext.checkValue(f);
                    if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                        return _nextBuffered(buffRoot);
                    }
                }
                // Otherwise not included (leaves must be explicitly included)
                continue main_loop;
        }
    }
}","public void test06465() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[9];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (byte) 71, true);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, true, true);
    try {
        filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000007; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called when a new potentially included context is found.
 */"
"protected final JsonToken _nextToken2() throws IOException {
    main_loop: while (true) {
        JsonToken t = delegate.nextToken();
        if (t == null) {
            // is this even legal?
            return (_currToken = t);
        }
        TokenFilter f;
        switch(t.id()) {
            case ID_START_ARRAY:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return (_currToken = t);
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartArray();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return (_currToken = t);
                }
                _headContext = _headContext.createChildArrayContext(f, false);
                // but if we didn't figure it out yet, need to buffer possible events
                if (_includePath) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                continue main_loop;
            case ID_START_OBJECT:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return (_currToken = t);
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartObject();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return (_currToken = t);
                }
                _headContext = _headContext.createChildObjectContext(f, false);
                if (_includePath) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                continue main_loop;
            case ID_END_ARRAY:
            case ID_END_OBJECT:
                {
                    boolean returnEnd = _headContext.isStartHandled();
                    f = _headContext.getFilter();
                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                        f.filterFinishArray();
                    }
                    _headContext = _headContext.getParent();
                    _itemFilter = _headContext.getFilter();
                    if (returnEnd) {
                        return (_currToken = t);
                    }
                }
                continue main_loop;
            case ID_FIELD_NAME:
                {
                    final String name = delegate.getCurrentName();
                    f = _headContext.setFieldName(name);
                    if (f == TokenFilter.INCLUDE_ALL) {
                        _itemFilter = f;
                        return (_currToken = t);
                    }
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    f = f.includeProperty(name);
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    _itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        if (_includePath) {
                            return (_currToken = t);
                        }
                        //                        if (_includeImmediateParent) { ...
                        continue main_loop;
                    }
                    if (_includePath) {
                        t = _nextTokenWithBuffering(_headContext);
                        if (t != null) {
                            _currToken = t;
                            return t;
                        }
                    }
                }
                continue main_loop;
            default:
                // scalar value
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    return (_currToken = t);
                }
                if (f != null) {
                    f = _headContext.checkValue(f);
                    if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                        return (_currToken = t);
                    }
                }
                // Otherwise not included (leaves must be explicitly included)
                break;
        }
    }
}","public void test06566() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0._nextToken2();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}","/**
 * Offlined handling for cases where there was no buffered token to
 * return, and the token read next could not be returned as-is,
 * at least not yet, but where we have not yet established that
 * buffering is needed.
 */"
"protected final JsonToken _nextToken2() throws IOException {
    main_loop: while (true) {
        JsonToken t = delegate.nextToken();
        if (t == null) {
            // is this even legal?
            return (_currToken = t);
        }
        TokenFilter f;
        switch(t.id()) {
            case ID_START_ARRAY:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return (_currToken = t);
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartArray();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return (_currToken = t);
                }
                _headContext = _headContext.createChildArrayContext(f, false);
                // but if we didn't figure it out yet, need to buffer possible events
                if (_includePath) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                continue main_loop;
            case ID_START_OBJECT:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return (_currToken = t);
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartObject();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return (_currToken = t);
                }
                _headContext = _headContext.createChildObjectContext(f, false);
                if (_includePath) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                continue main_loop;
            case ID_END_ARRAY:
            case ID_END_OBJECT:
                {
                    boolean returnEnd = _headContext.isStartHandled();
                    f = _headContext.getFilter();
                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                        f.filterFinishArray();
                    }
                    _headContext = _headContext.getParent();
                    _itemFilter = _headContext.getFilter();
                    if (returnEnd) {
                        return (_currToken = t);
                    }
                }
                continue main_loop;
            case ID_FIELD_NAME:
                {
                    final String name = delegate.getCurrentName();
                    f = _headContext.setFieldName(name);
                    if (f == TokenFilter.INCLUDE_ALL) {
                        _itemFilter = f;
                        return (_currToken = t);
                    }
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    f = f.includeProperty(name);
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    _itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        if (_includePath) {
                            return (_currToken = t);
                        }
                        //                        if (_includeImmediateParent) { ...
                        continue main_loop;
                    }
                    if (_includePath) {
                        t = _nextTokenWithBuffering(_headContext);
                        if (t != null) {
                            _currToken = t;
                            return t;
                        }
                    }
                }
                continue main_loop;
            default:
                // scalar value
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    return (_currToken = t);
                }
                if (f != null) {
                    f = _headContext.checkValue(f);
                    if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                        return (_currToken = t);
                    }
                }
                // Otherwise not included (leaves must be explicitly included)
                break;
        }
    }
}","public void test06667() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader(""|"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1996), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-78), 55296, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0._nextToken2();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -78
        //
        verifyException(""com.fasterxml.jackson.core.json.ReaderBasedJsonParser"", e);
    }
}","/**
 * Offlined handling for cases where there was no buffered token to
 * return, and the token read next could not be returned as-is,
 * at least not yet, but where we have not yet established that
 * buffering is needed.
 */"
"protected final JsonToken _nextToken2() throws IOException {
    main_loop: while (true) {
        JsonToken t = delegate.nextToken();
        if (t == null) {
            // is this even legal?
            return (_currToken = t);
        }
        TokenFilter f;
        switch(t.id()) {
            case ID_START_ARRAY:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return (_currToken = t);
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartArray();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return (_currToken = t);
                }
                _headContext = _headContext.createChildArrayContext(f, false);
                // but if we didn't figure it out yet, need to buffer possible events
                if (_includePath) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                continue main_loop;
            case ID_START_OBJECT:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return (_currToken = t);
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartObject();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return (_currToken = t);
                }
                _headContext = _headContext.createChildObjectContext(f, false);
                if (_includePath) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                continue main_loop;
            case ID_END_ARRAY:
            case ID_END_OBJECT:
                {
                    boolean returnEnd = _headContext.isStartHandled();
                    f = _headContext.getFilter();
                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                        f.filterFinishArray();
                    }
                    _headContext = _headContext.getParent();
                    _itemFilter = _headContext.getFilter();
                    if (returnEnd) {
                        return (_currToken = t);
                    }
                }
                continue main_loop;
            case ID_FIELD_NAME:
                {
                    final String name = delegate.getCurrentName();
                    f = _headContext.setFieldName(name);
                    if (f == TokenFilter.INCLUDE_ALL) {
                        _itemFilter = f;
                        return (_currToken = t);
                    }
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    f = f.includeProperty(name);
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    _itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        if (_includePath) {
                            return (_currToken = t);
                        }
                        //                        if (_includeImmediateParent) { ...
                        continue main_loop;
                    }
                    if (_includePath) {
                        t = _nextTokenWithBuffering(_headContext);
                        if (t != null) {
                            _currToken = t;
                            return t;
                        }
                    }
                }
                continue main_loop;
            default:
                // scalar value
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    return (_currToken = t);
                }
                if (f != null) {
                    f = _headContext.checkValue(f);
                    if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                        return (_currToken = t);
                    }
                }
                // Otherwise not included (leaves must be explicitly included)
                break;
        }
    }
}","public void test06768() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    StringReader stringReader0 = new StringReader(""|:,RxlnVjmas= "");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
    try {
        filteringParserDelegate0._nextToken2();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('|' (code 124)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
        //  at [Source: UNKNOWN; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Offlined handling for cases where there was no buffered token to
 * return, and the token read next could not be returned as-is,
 * at least not yet, but where we have not yet established that
 * buffering is needed.
 */"
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test06869() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    assertTrue(filteringParserDelegate0.hasCurrentToken());
}",""
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test06870() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    filteringParserDelegate0._nextToken2();
    filteringParserDelegate0.nextToken();
    assertFalse(filteringParserDelegate0.hasCurrentToken());
}",""
"@Override
public final int getCurrentTokenId() {
    final JsonToken t = _currToken;
    return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
}","public void test06971() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextToken();
    assertEquals(7, filteringParserDelegate0.getCurrentTokenId());
}",""
"/*
    /**********************************************************
    /* Public API, traversal
    /**********************************************************
     */
@Override
public JsonToken nextToken() throws IOException {
    //Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
    // check for no buffered context _exposedContext - null
    //If all the conditions matches then check for scalar / non-scalar property
    //if not scalar and ended successfully, then return null
    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
    // then return null
    // Anything buffered?
    TokenFilterContext ctxt = _exposedContext;
    if (ctxt != null) {
        while (true) {
            JsonToken t = ctxt.nextTokenToRead();
            if (t != null) {
                _currToken = t;
                return t;
            }
            // all done with buffered stuff?
            if (ctxt == _headContext) {
                _exposedContext = null;
                if (ctxt.inArray()) {
                    t = delegate.getCurrentToken();
                    // Is this guaranteed to work without further checks?
                    //                        if (t != JsonToken.START_ARRAY) {
                    _currToken = t;
                    return t;
                }
                // Almost! Most likely still have the current token;
                // with the sole exception of
                /*
                    t = delegate.getCurrentToken();
                    if (t != JsonToken.FIELD_NAME) {
                        _currToken = t;
                        return t;
                    }
                    */
                break;
            }
            // If not, traverse down the context chain
            ctxt = _headContext.findChildOf(ctxt);
            _exposedContext = ctxt;
            if (ctxt == null) {
                // should never occur
                throw _constructError(""Unexpected problem: chain of filtered context broken"");
            }
        }
    }
    // If not, need to read more. If we got any:
    JsonToken t = delegate.nextToken();
    if (t == null) {
        // no strict need to close, since we have no state here
        return (_currToken = t);
    }
    // otherwise... to include or not?
    TokenFilter f;
    switch(t.id()) {
        case ID_START_ARRAY:
            f = _itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildArrayContext(f, true);
                return (_currToken = t);
            }
            if (f == null) {
                // does this occur?
                delegate.skipChildren();
                break;
            }
            // Otherwise still iffy, need to check
            f = _headContext.checkValue(f);
            if (f == null) {
                delegate.skipChildren();
                break;
            }
            if (f != TokenFilter.INCLUDE_ALL) {
                f = f.filterStartArray();
            }
            _itemFilter = f;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildArrayContext(f, true);
                return (_currToken = t);
            }
            _headContext = _headContext.createChildArrayContext(f, false);
            // Also: only need buffering if parent path to be included
            if (_includePath) {
                t = _nextTokenWithBuffering(_headContext);
                if (t != null) {
                    _currToken = t;
                    return t;
                }
            }
            break;
        case ID_START_OBJECT:
            f = _itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildObjectContext(f, true);
                return (_currToken = t);
            }
            if (f == null) {
                // does this occur?
                delegate.skipChildren();
                break;
            }
            // Otherwise still iffy, need to check
            f = _headContext.checkValue(f);
            if (f == null) {
                delegate.skipChildren();
                break;
            }
            if (f != TokenFilter.INCLUDE_ALL) {
                f = f.filterStartObject();
            }
            _itemFilter = f;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildObjectContext(f, true);
                return (_currToken = t);
            }
            _headContext = _headContext.createChildObjectContext(f, false);
            // Also: only need buffering if parent path to be included
            if (_includePath) {
                t = _nextTokenWithBuffering(_headContext);
                if (t != null) {
                    _currToken = t;
                    return t;
                }
            }
            // note: inclusion of surrounding Object handled separately via
            // FIELD_NAME
            break;
        case ID_END_ARRAY:
        case ID_END_OBJECT:
            {
                boolean returnEnd = _headContext.isStartHandled();
                f = _headContext.getFilter();
                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                    f.filterFinishArray();
                }
                _headContext = _headContext.getParent();
                _itemFilter = _headContext.getFilter();
                if (returnEnd) {
                    return (_currToken = t);
                }
            }
            break;
        case ID_FIELD_NAME:
            {
                final String name = delegate.getCurrentName();
                // note: this will also set 'needToHandleName'
                f = _headContext.setFieldName(name);
                if (f == TokenFilter.INCLUDE_ALL) {
                    _itemFilter = f;
                    if (!_includePath) {
                        // Minor twist here: if parent NOT included, may need to induce output of
                        // surrounding START_OBJECT/END_OBJECT
                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
                            // returns START_OBJECT but also marks it handled
                            t = _headContext.nextTokenToRead();
                            _exposedContext = _headContext;
                        }
                    }
                    return (_currToken = t);
                }
                if (f == null) {
                    delegate.nextToken();
                    delegate.skipChildren();
                    break;
                }
                f = f.includeProperty(name);
                if (f == null) {
                    delegate.nextToken();
                    delegate.skipChildren();
                    break;
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    if (_includePath) {
                        return (_currToken = t);
                    }
                }
                if (_includePath) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                break;
            }
        default:
            // scalar value
            f = _itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                return (_currToken = t);
            }
            if (f != null) {
                f = _headContext.checkValue(f);
                if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                    return (_currToken = t);
                }
            }
            // Otherwise not included (leaves must be explicitly included)
            break;
    }
    // We get here if token was not yet found; offlined handling
    return _nextToken2();
}","public void test07072() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    try {
        filteringParserDelegate0.nextToken();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: java.lang.String@0000000008; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException {
    main_loop: while (true) {
        JsonToken t = delegate.nextToken();
        if (t == null) {
            // is this even legal?
            return t;
        }
        TokenFilter f;
        // One simplification here: we know for a fact that the item filter is
        // neither null nor 'include all', for most cases; the only exception
        // being FIELD_NAME handling
        switch(t.id()) {
            case ID_START_ARRAY:
                f = _headContext.checkValue(_itemFilter);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartArray();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return _nextBuffered(buffRoot);
                }
                _headContext = _headContext.createChildArrayContext(f, false);
                continue main_loop;
            case ID_START_OBJECT:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return t;
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartObject();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return _nextBuffered(buffRoot);
                }
                _headContext = _headContext.createChildObjectContext(f, false);
                continue main_loop;
            case ID_END_ARRAY:
            case ID_END_OBJECT:
                {
                    // Unlike with other loops, here we know that content was NOT
                    // included (won't get this far otherwise)
                    f = _headContext.getFilter();
                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                        f.filterFinishArray();
                    }
                    boolean gotEnd = (_headContext == buffRoot);
                    boolean returnEnd = gotEnd && _headContext.isStartHandled();
                    _headContext = _headContext.getParent();
                    _itemFilter = _headContext.getFilter();
                    if (returnEnd) {
                        return t;
                    }
                    // Hmmh. Do we need both checks, or should above suffice?
                    if (gotEnd || (_headContext == buffRoot)) {
                        return null;
                    }
                }
                continue main_loop;
            case ID_FIELD_NAME:
                {
                    final String name = delegate.getCurrentName();
                    f = _headContext.setFieldName(name);
                    if (f == TokenFilter.INCLUDE_ALL) {
                        _itemFilter = f;
                        return _nextBuffered(buffRoot);
                    }
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    f = f.includeProperty(name);
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    _itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        return _nextBuffered(buffRoot);
                    }
                }
                continue main_loop;
            default:
                // scalar value
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    return _nextBuffered(buffRoot);
                }
                if (f != null) {
                    f = _headContext.checkValue(f);
                    if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                        return _nextBuffered(buffRoot);
                    }
                }
                // Otherwise not included (leaves must be explicitly included)
                continue main_loop;
        }
    }
}","public void test07173() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}","/**
 * Method called when a new potentially included context is found.
 */"
"protected final JsonToken _nextToken2() throws IOException {
    main_loop: while (true) {
        JsonToken t = delegate.nextToken();
        if (t == null) {
            // is this even legal?
            return (_currToken = t);
        }
        TokenFilter f;
        switch(t.id()) {
            case ID_START_ARRAY:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return (_currToken = t);
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartArray();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return (_currToken = t);
                }
                _headContext = _headContext.createChildArrayContext(f, false);
                // but if we didn't figure it out yet, need to buffer possible events
                if (_includePath) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                continue main_loop;
            case ID_START_OBJECT:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return (_currToken = t);
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartObject();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return (_currToken = t);
                }
                _headContext = _headContext.createChildObjectContext(f, false);
                if (_includePath) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                continue main_loop;
            case ID_END_ARRAY:
            case ID_END_OBJECT:
                {
                    boolean returnEnd = _headContext.isStartHandled();
                    f = _headContext.getFilter();
                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                        f.filterFinishArray();
                    }
                    _headContext = _headContext.getParent();
                    _itemFilter = _headContext.getFilter();
                    if (returnEnd) {
                        return (_currToken = t);
                    }
                }
                continue main_loop;
            case ID_FIELD_NAME:
                {
                    final String name = delegate.getCurrentName();
                    f = _headContext.setFieldName(name);
                    if (f == TokenFilter.INCLUDE_ALL) {
                        _itemFilter = f;
                        return (_currToken = t);
                    }
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    f = f.includeProperty(name);
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    _itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        if (_includePath) {
                            return (_currToken = t);
                        }
                        //                        if (_includeImmediateParent) { ...
                        continue main_loop;
                    }
                    if (_includePath) {
                        t = _nextTokenWithBuffering(_headContext);
                        if (t != null) {
                            _currToken = t;
                            return t;
                        }
                    }
                }
                continue main_loop;
            default:
                // scalar value
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    return (_currToken = t);
                }
                if (f != null) {
                    f = _headContext.checkValue(f);
                    if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                        return (_currToken = t);
                    }
                }
                // Otherwise not included (leaves must be explicitly included)
                break;
        }
    }
}","public void test07274() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2589), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    filteringParserDelegate0._nextToken2();
}","/**
 * Offlined handling for cases where there was no buffered token to
 * return, and the token read next could not be returned as-is,
 * at least not yet, but where we have not yet established that
 * buffering is needed.
 */"
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test07375() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0._nextToken2();
    filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
    assertTrue(filteringParserDelegate0.hasCurrentToken());
}",""
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test07476() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    assertTrue(filteringParserDelegate0.hasCurrentToken());
}",""
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test07477() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    filteringParserDelegate0.nextValue();
    assertFalse(filteringParserDelegate0.hasCurrentToken());
}",""
"public int getFormatFeatures() {
    return 0;
}","public void test07578() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    filteringParserDelegate0.clearCurrentToken();
    assertEquals(0, filteringParserDelegate0.getFormatFeatures());
}","/**
 * Bulk access method for getting state of all {@link FormatFeature}s, format-specific
 * on/off configuration settings.
 *
 * @return Bit mask that defines current states of all standard {@link FormatFeature}s.
 *
 * @since 2.6
 */"
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test07679() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    JsonToken jsonToken0 = filteringParserDelegate0.nextValue();
    boolean boolean0 = filteringParserDelegate0.hasToken(jsonToken0);
    assertTrue(filteringParserDelegate0.hasCurrentToken());
}",""
"@Override
public final boolean hasToken(JsonToken t) {
    return (_currToken == t);
}","public void test07680() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    JsonToken jsonToken0 = filteringParserDelegate0.nextValue();
    boolean boolean0 = filteringParserDelegate0.hasToken(jsonToken0);
    assertTrue(boolean0);
}",""
"@Override
public final boolean hasToken(JsonToken t) {
    return (_currToken == t);
}","public void test07781() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    JsonToken jsonToken0 = JsonToken.VALUE_NULL;
    boolean boolean0 = filteringParserDelegate0.hasToken(jsonToken0);
    assertFalse(boolean0);
}",""
"@Override
public boolean hasTokenId(int id) {
    final JsonToken t = _currToken;
    if (t == null) {
        return (JsonTokenId.ID_NO_TOKEN == id);
    }
    return t.id() == id;
}","public void test07882() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    boolean boolean0 = filteringParserDelegate0.hasTokenId(0);
    assertTrue(boolean0);
}",""
"@Override
public boolean hasTokenId(int id) {
    final JsonToken t = _currToken;
    if (t == null) {
        return (JsonTokenId.ID_NO_TOKEN == id);
    }
    return t.id() == id;
}","public void test07983() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    boolean boolean0 = filteringParserDelegate0.hasTokenId((-3480));
    assertFalse(boolean0);
}",""
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test08084() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextIntValue(1330);
    boolean boolean0 = filteringParserDelegate0.hasTokenId((-3480));
    assertTrue(filteringParserDelegate0.hasCurrentToken());
}",""
"@Override
public boolean hasTokenId(int id) {
    final JsonToken t = _currToken;
    if (t == null) {
        return (JsonTokenId.ID_NO_TOKEN == id);
    }
    return t.id() == id;
}","public void test08085() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextIntValue(1330);
    boolean boolean0 = filteringParserDelegate0.hasTokenId((-3480));
    assertFalse(boolean0);
}",""
"@Override
public final int getCurrentTokenId() {
    final JsonToken t = _currToken;
    return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
}","public void test08186() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
    assertEquals(7, filteringParserDelegate0.getCurrentTokenId());
}",""
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test08187() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
    assertTrue(boolean0);
}",""
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test08288() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""': expected '"", false);
    StringReader stringReader0 = new StringReader(""Unexpected problem: chain of filtered context broken"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 32768, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
    assertFalse(boolean0);
}",""
"@Override
public final int getCurrentTokenId() {
    final JsonToken t = _currToken;
    return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
}","public void test08389() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    int int0 = filteringParserDelegate0.getCurrentTokenId();
    assertEquals(0, int0);
}",""
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test08490() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    int int0 = filteringParserDelegate0.getCurrentTokenId();
    assertTrue(filteringParserDelegate0.hasCurrentToken());
}",""
"@Override
public final int getCurrentTokenId() {
    final JsonToken t = _currToken;
    return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
}","public void test08491() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    charArray0[2] = '7';
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextValue();
    int int0 = filteringParserDelegate0.getCurrentTokenId();
    assertEquals(7, int0);
}",""
"@Override
public double getValueAsDouble(double defaultValue) throws IOException {
    return delegate.getValueAsDouble(defaultValue);
}","public void test08592() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
    double double0 = filteringParserDelegate0.getValueAsDouble((double) 0);
    assertEquals(0.0, double0, 0.01);
}",""
"@Override
public long getValueAsLong(long defaultValue) throws IOException {
    return delegate.getValueAsLong(defaultValue);
}","public void test08693() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getValueAsLong(0L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, access to token information, coercion/conversion
    /**********************************************************
     */
@Override
public int getValueAsInt() throws IOException {
    return delegate.getValueAsInt();
}","public void test08794() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    int int0 = filteringParserDelegate0.getValueAsInt();
    assertEquals(0, int0);
}",""
"@Override
public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
    return delegate.getBinaryValue(b64variant);
}","public void test08895() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getBinaryValue((Base64Variant) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public short getShortValue() throws IOException {
    return delegate.getShortValue();
}","public void test08996() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    byte[] byteArray0 = new byte[5];
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1094), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, (byte) (-117), false);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
    try {
        filteringParserDelegate0.getShortValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000009; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public int getTextLength() throws IOException {
    return delegate.getTextLength();
}","public void test09097() throws Throwable {
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getTextLength();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonParserDelegate"", e);
    }
}",""
"public int readBinaryValue(OutputStream out) throws IOException {
    return readBinaryValue(Base64Variants.getDefaultVariant(), out);
}","public void test09198() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    // Undeclared exception!
    try {
        filteringParserDelegate0.readBinaryValue((OutputStream) byteArrayBuilder0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}","/**
 * Method that can be used as an alternative to {@link #getBigIntegerValue()},
 * especially when value can be large. The main difference (beyond method
 * of returning content using {@link OutputStream} instead of as byte array)
 * is that content will NOT remain accessible after method returns: any content
 * processed will be consumed and is not buffered in any way. If caller needs
 * buffering, it has to implement it.
 *
 * @param out Output stream to use for passing decoded binary data
 *
 * @return Number of bytes that were decoded and written via {@link OutputStream}
 *
 * @since 2.1
 */"
"@Override
public long getLongValue() throws IOException {
    return delegate.getLongValue();
}","public void test09299() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getLongValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public boolean getValueAsBoolean() throws IOException {
    return delegate.getValueAsBoolean();
}","public void test093100() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    boolean boolean0 = filteringParserDelegate0.getValueAsBoolean();
    assertFalse(boolean0);
}",""
"/*
    /**********************************************************
    /* Extended API
    /**********************************************************
     */
public TokenFilter getFilter() {
    return rootFilter;
}","public void test094101() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 33, 2, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    TokenFilter tokenFilter1 = filteringParserDelegate0.getFilter();
    assertSame(tokenFilter0, tokenFilter1);
}",""
"@Override
public char[] getTextCharacters() throws IOException {
    return delegate.getTextCharacters();
}","public void test095102() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    char[] charArray0 = filteringParserDelegate0.getTextCharacters();
    assertNull(charArray0);
}",""
"public long getCharOffset() {
    return _totalChars;
}","public void test096103() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
    assertEquals(605L, jsonLocation0.getCharOffset());
}","/**
 * @return Character offset within underlying stream, reader or writer,
 *   if available; -1 if not.
 */"
"@Override
public NumberType getNumberType() throws IOException {
    return delegate.getNumberType();
}","public void test097104() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    try {
        filteringParserDelegate0.getNumberType();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: java.io.SequenceInputStream@0000000010; line: 1, column: 606]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public double getValueAsDouble() throws IOException {
    return delegate.getValueAsDouble();
}","public void test098105() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    double double0 = filteringParserDelegate0.getValueAsDouble();
    assertEquals(0.0, double0, 0.01);
}",""
"public int getLineNr() {
    return _lineNr;
}","public void test099106() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
    assertEquals(1, jsonLocation0.getLineNr());
}","/**
 * @return Line number of the location (1-based)
 */"
"/*
    /**********************************************************
    /* Public API, access to token information, numeric
    /**********************************************************
     */
@Override
public BigInteger getBigIntegerValue() throws IOException {
    return delegate.getBigIntegerValue();
}","public void test100107() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    try {
        filteringParserDelegate0.getBigIntegerValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: java.io.SequenceInputStream@0000000011; line: 1, column: 606]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public boolean getBooleanValue() throws IOException {
    return delegate.getBooleanValue();
}","public void test101108() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    try {
        filteringParserDelegate0.getBooleanValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not of boolean type
        //  at [Source: java.io.SequenceInputStream@0000000012; line: 1, column: 606]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"public int getMatchCount() {
    return _matchCount;
}","public void test102109() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    int int0 = filteringParserDelegate0.getMatchCount();
    assertEquals(0, int0);
}","/**
 * Accessor for finding number of matches, where specific token and sub-tree
 * starting (if structured type) are passed.
 */"
"@Override
public int getValueAsInt(int defaultValue) throws IOException {
    return delegate.getValueAsInt(defaultValue);
}","public void test103110() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    int int0 = filteringParserDelegate0.getValueAsInt(3);
    assertEquals(3, int0);
}",""
"@Override
public int getTextOffset() throws IOException {
    return delegate.getTextOffset();
}","public void test104111() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    int int0 = filteringParserDelegate0.getTextOffset();
    assertEquals(0, int0);
}",""
"@Override
public void overrideCurrentName(String name) {
    /* 14-Apr-2015, tatu: Not sure whether this can be supported, and if so,
         *    what to do with it... Delegation won't work for sure, so let's for
         *    now throw an exception
         */
    throw new UnsupportedOperationException(""Can not currently override name during filtering read"");
}","public void test105112() throws Throwable {
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.overrideCurrentName(""M]O"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Can not currently override name during filtering read
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public int getIntValue() throws IOException {
    return delegate.getIntValue();
}","public void test106113() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    try {
        filteringParserDelegate0.getIntValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: java.io.SequenceInputStream@0000000013; line: 1, column: 606]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public boolean hasTextCharacters() {
    return delegate.hasTextCharacters();
}","public void test107114() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.hasTextCharacters();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public boolean getValueAsBoolean(boolean defaultValue) throws IOException {
    return delegate.getValueAsBoolean(defaultValue);
}","public void test108115() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    boolean boolean0 = filteringParserDelegate0.getValueAsBoolean(false);
    assertFalse(boolean0);
}",""
"@Override
public BigDecimal getDecimalValue() throws IOException {
    return delegate.getDecimalValue();
}","public void test109116() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 605, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 605, 2044, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
    try {
        filteringParserDelegate0.getDecimalValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: java.io.SequenceInputStream@0000000014; line: 1, column: 606]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, access to token information, text
    /**********************************************************
     */
@Override
public String getText() throws IOException {
    return delegate.getText();
}","public void test110117() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getText();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringParserDelegate"", e);
    }
}",""
"@Override
public long getValueAsLong() throws IOException {
    return delegate.getValueAsLong();
}","public void test111118() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    long long0 = filteringParserDelegate0.getValueAsLong();
    assertEquals(0L, long0);
}",""
"public final boolean inArray() {
    return _type == TYPE_ARRAY;
}","public void test112119() throws Throwable {
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
    JsonStreamContext jsonStreamContext0 = filteringParserDelegate0.getParsingContext();
    assertFalse(jsonStreamContext0.inArray());
}","/**
 * Method that returns true if this context is an Array context;
 * that is, content is being read from or written to a Json Array.
 */"
"/*
    /**********************************************************
    /* Public API, access to token values, other
    /**********************************************************
     */
@Override
public Object getEmbeddedObject() throws IOException {
    return delegate.getEmbeddedObject();
}","public void test113120() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    Object object0 = filteringParserDelegate0.getEmbeddedObject();
    assertNull(object0);
}",""
"@Override
public byte getByteValue() throws IOException {
    return delegate.getByteValue();
}","public void test114121() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
    try {
        filteringParserDelegate0.getByteValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000015; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public double getDoubleValue() throws IOException {
    return delegate.getDoubleValue();
}","public void test115122() throws Throwable {
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getDoubleValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonParserDelegate"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, token accessors
    /**********************************************************
     */
@Override
public JsonToken getCurrentToken() {
    return _currToken;
}","public void test116123() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
    filteringParserDelegate0.getCurrentToken();
}",""
"@Override
public String getValueAsString(String defaultValue) throws IOException {
    return delegate.getValueAsString(defaultValue);
}","public void test117124() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    char[] charArray0 = new char[3];
    TokenFilter tokenFilter0 = new TokenFilter();
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 12000, false);
    JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
    String string0 = filteringParserDelegate0.getValueAsString(""7o%ASk"");
    assertEquals(""7o%ASk"", string0);
}",""
"@Override
public float getFloatValue() throws IOException {
    return delegate.getFloatValue();
}","public void test118125() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringReader stringReader0 = new StringReader(""Can not currently override name during filtering read"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[6];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-303), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 1072, true);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
    try {
        filteringParserDelegate0.getFloatValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, can not use numeric value accessors
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000016; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public String getValueAsString() throws IOException {
    return delegate.getValueAsString();
}","public void test119126() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    StringReader stringReader0 = new StringReader("""");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[3];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
    TokenFilter tokenFilter0 = new TokenFilter();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
    String string0 = filteringParserDelegate0.getValueAsString();
    assertNull(string0);
}",""
"@Override
public Number getNumberValue() throws IOException {
    return delegate.getNumberValue();
}","public void test120127() throws Throwable {
    JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringParserDelegate0.getNumberValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonParserDelegate"", e);
    }
}",""
