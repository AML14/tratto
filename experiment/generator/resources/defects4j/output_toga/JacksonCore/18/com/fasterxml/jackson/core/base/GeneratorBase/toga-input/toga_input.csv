focal_method,test_prefix,docstring
"@Override
public int getFeatureMask() {
    return _features;
}","public void test000() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    SerializedString serializedString0 = new SerializedString(""EJcoi<V"");
    uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
    assertEquals(1198, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
    SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
    uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
    assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test012() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
    SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
    uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test023() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.flush();
    assertEquals(1198, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getOutputBuffered() {
    // Assuming tail and head are kept but... trust and verify:
    int len = _outputTail - _outputHead;
    return Math.max(0, len);
}","public void test034() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    char[] charArray0 = new char[2];
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1672), (ObjectCodec) null, (Writer) null);
    writerBasedJsonGenerator0.writeRawValue(charArray0, 0, 2);
    assertEquals(2, writerBasedJsonGenerator0.getOutputBuffered());
}",""
"@Override
public int getOutputBuffered() {
    // Assuming tail and head are kept but... trust and verify:
    int len = _outputTail - _outputHead;
    return Math.max(0, len);
}","public void test045() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringWriter stringWriter0 = new StringWriter(2834);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 10, (ObjectCodec) null, stringWriter0);
    writerBasedJsonGenerator0.writeRawValue(""SQjjAd~I,YoWvt"", 0, 1);
    assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test056() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
    uTF8JsonGenerator0.version();
    assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
}",""
"public abstract int getFeatureMask();","public void test067() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.writeString(""EJcoi<V"");
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
    assertEquals(1, jsonGenerator0.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard (non-dataformat-specific)
 * {@link JsonGenerator.Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
 *
 * @since 2.3
 */"
"public int getHighestEscapedChar() {
    return 0;
}","public void test068() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.writeString(""EJcoi<V"");
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"public abstract int getFeatureMask();","public void test079() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
    assertEquals(1198, jsonGenerator0.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard (non-dataformat-specific)
 * {@link JsonGenerator.Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
 *
 * @since 2.3
 */"
"@Override
public int getFeatureMask() {
    return _features;
}","public void test0810() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, byteArrayBuilder0);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
    filteringGeneratorDelegate0.writeStartObject();
    uTF8JsonGenerator0.setFeatureMask(563);
    assertEquals(563, uTF8JsonGenerator0.getFeatureMask());
}",""
"public int getHighestEscapedChar() {
    return 0;
}","public void test0911() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"public abstract int getFeatureMask();","public void test0912() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
    assertEquals((-3229), jsonGenerator0.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard (non-dataformat-specific)
 * {@link JsonGenerator.Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
 *
 * @since 2.3
 */"
"@Override
public int getFeatureMask() {
    return _features;
}","public void test1013() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""write a number"", true);
    MockFile mockFile0 = new MockFile("">'2_vuB"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-20), true);
    uTF8JsonGenerator0.setFeatureMask((byte) (-16));
    uTF8JsonGenerator0.setCodec((ObjectCodec) null);
    assertEquals((-16), uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getOutputBuffered() {
    // Assuming tail is always valid, set to 0 on close
    return _outputTail;
}","public void test1114() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1767), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeRawValue(""EJcoi<V"");
    uTF8JsonGenerator0.overrideStdFeatures(3, (-1767));
    assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
}",""
"public abstract int getFeatureMask();","public void test1215() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, (-723), false);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-3230), 128);
    assertEquals(0, jsonGenerator0.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard (non-dataformat-specific)
 * {@link JsonGenerator.Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
 *
 * @since 2.3
 */"
"@Override
public boolean isClosed() {
    return _closed;
}","public void test1316() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.close();
    boolean boolean0 = uTF8JsonGenerator0.isClosed();
    assertTrue(boolean0);
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test1417() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    uTF8JsonGenerator0.getOutputContext();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test1418() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    uTF8JsonGenerator0.getOutputContext();
    assertEquals((-3229), uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getOutputBuffered() {
    // Assuming tail is always valid, set to 0 on close
    return _outputTail;
}","public void test1519() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeNumberField(""J^?ou=(.#@Q?"", (-695.73224F));
    uTF8JsonGenerator0.writeRawValue(""EJcoi<V"");
    uTF8JsonGenerator0.getOutputContext();
    assertEquals(34, uTF8JsonGenerator0.getOutputBuffered());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test1620() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    File file0 = MockFile.createTempFile(""Hc!wHe[6Z17`NY"", ""si"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
    byte[] byteArray0 = new byte[3];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 128, false);
    int int0 = uTF8JsonGenerator0.getFeatureMask();
    assertEquals(0, int0);
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test1721() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[1];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 51, false);
    int int0 = uTF8JsonGenerator0.getFeatureMask();
    assertEquals(1, int0);
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test1822() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.setCurrentValue(byteArrayBuilder0);
    uTF8JsonGenerator0.getCurrentValue();
    assertEquals(1198, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test1923() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
    assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test1924() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test2025() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(1196, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public void writeTree(TreeNode rootNode) throws IOException {
    // As with 'writeObject()', we are not check if write would work
    if (rootNode == null) {
        writeNull();
    } else {
        if (_objectCodec == null) {
            throw new IllegalStateException(""No ObjectCodec defined"");
        }
        _objectCodec.writeValue(this, rootNode);
    }
}","public void test2126() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
    writerBasedJsonGenerator0.close();
    // Undeclared exception!
    try {
        writerBasedJsonGenerator0.writeTree((TreeNode) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.WriterBasedJsonGenerator"", e);
    }
}",""
"@Override
public void writeTree(TreeNode rootNode) throws IOException {
    // As with 'writeObject()', we are not check if write would work
    if (rootNode == null) {
        writeNull();
    } else {
        if (_objectCodec == null) {
            throw new IllegalStateException(""No ObjectCodec defined"");
        }
        _objectCodec.writeValue(this, rootNode);
    }
}","public void test2227() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    try {
        uTF8JsonGenerator0.writeTree((TreeNode) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a null, expecting field name
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"@Override
public void writeRawValue(char[] text, int offset, int len) throws IOException {
    _verifyValueWrite(""write raw value"");
    writeRaw(text, offset, len);
}","public void test2429() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    char[] charArray0 = new char[0];
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1672), (ObjectCodec) null, (Writer) null);
    // Undeclared exception!
    try {
        writerBasedJsonGenerator0.writeRawValue(charArray0, 0, 2);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",""
"@Override
public void writeRawValue(char[] text, int offset, int len) throws IOException {
    _verifyValueWrite(""write raw value"");
    writeRaw(text, offset, len);
}","public void test2530() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    char[] charArray0 = new char[0];
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1672), (ObjectCodec) null, (Writer) null);
    writerBasedJsonGenerator0.writeStartObject();
    try {
        writerBasedJsonGenerator0.writeRawValue(charArray0, 0, 2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write raw value, expecting field name
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"@Override
public void writeRawValue(String text, int offset, int len) throws IOException {
    _verifyValueWrite(""write raw value"");
    writeRaw(text, offset, len);
}","public void test2631() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1527), (ObjectCodec) null, (OutputStream) null);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeRawValue((String) null, 57343, (-1527));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8JsonGenerator"", e);
    }
}",""
"@Override
public void writeRawValue(String text, int offset, int len) throws IOException {
    _verifyValueWrite(""write raw value"");
    writeRaw(text, offset, len);
}","public void test2732() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""write a number"", true);
    MockFile mockFile0 = new MockFile("">'2_vuB"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
    uTF8JsonGenerator0.writeStartObject();
    try {
        uTF8JsonGenerator0.writeRawValue(""0I!&C>^'sI5ly,"", 127, (int) (byte) (-41));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write raw value, expecting field name
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"@Override
public void writeRawValue(String text) throws IOException {
    _verifyValueWrite(""write raw value"");
    writeRaw(text);
}","public void test2833() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeRawValue((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8JsonGenerator"", e);
    }
}",""
"@Override
public void writeRawValue(String text) throws IOException {
    _verifyValueWrite(""write raw value"");
    writeRaw(text);
}","public void test2934() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    try {
        uTF8JsonGenerator0.writeRawValue(""Ox\"""");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write raw value, expecting field name
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"/*
   /**********************************************************
   /* Public API, write methods, primitive
   /**********************************************************
    */
// Not implemented at this level, added as placeholders
/*
    public abstract void writeNumber(int i)
    public abstract void writeNumber(long l)
    public abstract void writeNumber(double d)
    public abstract void writeNumber(float f)
    public abstract void writeNumber(BigDecimal dec)
    public abstract void writeBoolean(boolean state)
    public abstract void writeNull()
    */
/*
    /**********************************************************
    /* Public API, write methods, POJOs, trees
    /**********************************************************
     */
@Override
public void writeObject(Object value) throws IOException {
    if (value == null) {
        // important: call method that does check value write:
        writeNull();
    } else {
        /* 02-Mar-2009, tatu: we are NOT to call _verifyValueWrite here,
             *   because that will be done when codec actually serializes
             *   contained POJO. If we did call it it would advance state
             *   causing exception later on
             */
        if (_objectCodec != null) {
            _objectCodec.writeValue(this, value);
            return;
        }
        _writeSimpleObject(value);
    }
}","public void test3035() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""com.fasterxml.jackson.core.base.GeneratorBase"", true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 56320);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeObject(byteArrayBuilder0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.util.ByteArrayBuilder)
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"/*
   /**********************************************************
   /* Public API, write methods, primitive
   /**********************************************************
    */
// Not implemented at this level, added as placeholders
/*
    public abstract void writeNumber(int i)
    public abstract void writeNumber(long l)
    public abstract void writeNumber(double d)
    public abstract void writeNumber(float f)
    public abstract void writeNumber(BigDecimal dec)
    public abstract void writeBoolean(boolean state)
    public abstract void writeNull()
    */
/*
    /**********************************************************
    /* Public API, write methods, POJOs, trees
    /**********************************************************
     */
@Override
public void writeObject(Object value) throws IOException {
    if (value == null) {
        // important: call method that does check value write:
        writeNull();
    } else {
        /* 02-Mar-2009, tatu: we are NOT to call _verifyValueWrite here,
             *   because that will be done when codec actually serializes
             *   contained POJO. If we did call it it would advance state
             *   causing exception later on
             */
        if (_objectCodec != null) {
            _objectCodec.writeValue(this, value);
            return;
        }
        _writeSimpleObject(value);
    }
}","public void test3136() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3246), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeStartObject();
    try {
        uTF8JsonGenerator0.writeObject("""");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a string, expecting field name
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"@Override
public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException {
    _verifyValueWrite(WRITE_BINARY);
    // Starting quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = BYTE_QUOTE;
    byte[] encodingBuffer = _ioContext.allocBase64Buffer();
    int bytes;
    try {
        if (dataLength < 0) {
            // length unknown
            bytes = _writeBinary(b64variant, data, encodingBuffer);
        } else {
            int missing = _writeBinary(b64variant, data, encodingBuffer, dataLength);
            if (missing > 0) {
                _reportError(""Too few bytes available: missing "" + missing + "" bytes (out of "" + dataLength + "")"");
            }
            bytes = dataLength;
        }
    } finally {
        _ioContext.releaseBase64Buffer(encodingBuffer);
    }
    // and closing quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = BYTE_QUOTE;
    return bytes;
}","public void test3338() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 354);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, 1192);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8JsonGenerator"", e);
    }
}",""
"/*
    /**********************************************************
    /* Overridden configuration methods
    /**********************************************************
     */
@Override
public JsonGenerator enable(Feature f) {
    super.enable(f);
    if (f == Feature.QUOTE_FIELD_NAMES) {
        _cfgUnqNames = false;
    }
    return this;
}","public void test3439() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.enable((JsonGenerator.Feature) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.base.GeneratorBase"", e);
    }
}",""
"@Override
public void close() throws IOException {
    super.close();
    /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open
         *   scopes.
         */
    // First: let's see that we still have buffers...
    if ((_outputBuffer != null) && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {
        while (true) {
            JsonStreamContext ctxt = getOutputContext();
            if (ctxt.inArray()) {
                writeEndArray();
            } else if (ctxt.inObject()) {
                writeEndObject();
            } else {
                break;
            }
        }
    }
    _flushBuffer();
    // just to ensure we don't think there's anything buffered
    _outputTail = 0;
    /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()
         *   on the underlying Reader, unless we ""own"" it, or auto-closing
         *   feature is enabled.
         *   One downside: when using UTF8Writer, underlying buffer(s)
         *   may not be properly recycled if we don't close the writer.
         */
    if (_outputStream != null) {
        if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {
            _outputStream.close();
        } else if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {
            // If we can't close it, we should at least flush
            _outputStream.flush();
        }
    }
    // Internal buffer(s) generator has can now be released as well
    _releaseBuffers();
}","public void test3540() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, filterOutputStream0);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.close();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.FilterOutputStream"", e);
    }
}",""
"@Override
public void close() throws IOException {
    super.close();
    /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open
         *   scopes.
         */
    // First: let's see that we still have buffers...
    if ((_outputBuffer != null) && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {
        while (true) {
            JsonStreamContext ctxt = getOutputContext();
            if (ctxt.inArray()) {
                writeEndArray();
            } else if (ctxt.inObject()) {
                writeEndObject();
            } else {
                break;
            }
        }
    }
    _flushBuffer();
    // just to ensure we don't think there's anything buffered
    _outputTail = 0;
    /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()
         *   on the underlying Reader, unless we ""own"" it, or auto-closing
         *   feature is enabled.
         *   One downside: when using UTF8Writer, underlying buffer(s)
         *   may not be properly recycled if we don't close the writer.
         */
    if (_outputStream != null) {
        if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {
            _outputStream.close();
        } else if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {
            // If we can't close it, we should at least flush
            _outputStream.flush();
        }
    }
    // Internal buffer(s) generator has can now be released as well
    _releaseBuffers();
}","public void test3641() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.writeString(""EJcoi<V"");
    try {
        uTF8JsonGenerator0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedOutputStream"", e);
    }
}",""
"/*
    /**********************************************************
    /* Configuration
    /**********************************************************
     */
@Override
public final boolean isEnabled(Feature f) {
    return (_features & f.getMask()) != 0;
}","public void test3742() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringWriter stringWriter0 = new StringWriter(1);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
    boolean boolean0 = writerBasedJsonGenerator0.isEnabled(jsonGenerator_Feature0);
    assertFalse(boolean0);
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test3743() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringWriter stringWriter0 = new StringWriter(1);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
    boolean boolean0 = writerBasedJsonGenerator0.isEnabled(jsonGenerator_Feature0);
    assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
}",""
"/*
    /**********************************************************
    /* Configuration
    /**********************************************************
     */
@Override
public final boolean isEnabled(Feature f) {
    return (_features & f.getMask()) != 0;
}","public void test3844() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    boolean boolean0 = uTF8JsonGenerator0.isEnabled(jsonGenerator_Feature0);
    assertTrue(boolean0);
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test3845() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    boolean boolean0 = uTF8JsonGenerator0.isEnabled(jsonGenerator_Feature0);
    assertEquals(1198, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test3946() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeTree((TreeNode) null);
    assertEquals((-3229), uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test3947() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeTree((TreeNode) null);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test4048() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.writeObject((Object) null);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test4049() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.writeObject((Object) null);
    assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
}",""
"public int getHighestEscapedChar() {
    return 0;
}","public void test4150() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
    JsonGenerator jsonGenerator1 = jsonGenerator0.useDefaultPrettyPrinter();
    assertEquals(0, jsonGenerator1.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"public abstract int getFeatureMask();","public void test4151() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
    JsonGenerator jsonGenerator1 = jsonGenerator0.useDefaultPrettyPrinter();
    assertEquals(1, jsonGenerator1.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard (non-dataformat-specific)
 * {@link JsonGenerator.Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
 *
 * @since 2.3
 */"
"@Override
public int getFeatureMask() {
    return _features;
}","public void test4252() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3246), (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.overrideStdFeatures(3, (-3246));
    assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test4353() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.overrideStdFeatures((-3), 73);
    assertEquals(1263, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test4454() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.overrideStdFeatures(3, 1198);
    assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test4555() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""write a number"", true);
    MockFile mockFile0 = new MockFile("">'2_vuB"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
    uTF8JsonGenerator0.setFeatureMask((byte) (-16));
    assertEquals((-16), uTF8JsonGenerator0.getFeatureMask());
}",""
"public int getHighestEscapedChar() {
    return 0;
}","public void test4656() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setFeatureMask(0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"@Override
public int getFeatureMask() {
    return _features;
}","public void test4657() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setFeatureMask(0);
    assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test4758() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
    uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    uTF8JsonGenerator0.overrideStdFeatures(3, 1198);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"public abstract int getFeatureMask();","public void test4859() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(1, jsonGenerator0.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard (non-dataformat-specific)
 * {@link JsonGenerator.Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
 *
 * @since 2.3
 */"
"public int getHighestEscapedChar() {
    return 0;
}","public void test4860() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"@Override
public int getFeatureMask() {
    return _features;
}","public void test4961() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
    uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals((-3485), uTF8JsonGenerator0.getFeatureMask());
}",""
"public abstract int getFeatureMask();","public void test5062() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals((-3229), jsonGenerator0.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard (non-dataformat-specific)
 * {@link JsonGenerator.Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
 *
 * @since 2.3
 */"
"public int getHighestEscapedChar() {
    return 0;
}","public void test5063() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"public int getHighestEscapedChar() {
    return 0;
}","public void test5164() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1199, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(127, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"public abstract int getFeatureMask();","public void test5165() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1199, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(1199, jsonGenerator0.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard (non-dataformat-specific)
 * {@link JsonGenerator.Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
 *
 * @since 2.3
 */"
"public abstract int getFeatureMask();","public void test5266() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1199, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(1199, jsonGenerator0.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard (non-dataformat-specific)
 * {@link JsonGenerator.Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
 *
 * @since 2.3
 */"
"@Override
public int getFeatureMask() {
    return _features;
}","public void test5367() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
    uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(1454, uTF8JsonGenerator0.getFeatureMask());
}",""
"public abstract int getFeatureMask();","public void test5468() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals((-3229), jsonGenerator0.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard (non-dataformat-specific)
 * {@link JsonGenerator.Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
 *
 * @since 2.3
 */"
"public int getHighestEscapedChar() {
    return 0;
}","public void test5469() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3229), (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test5570() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.getCodec();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test5571() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.getCodec();
    assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
}",""
"public abstract int getFeatureMask();","public void test5672() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""write a number"", true);
    MockFile mockFile0 = new MockFile("">'2_vuB"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
    assertEquals(3, jsonGenerator0.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard (non-dataformat-specific)
 * {@link JsonGenerator.Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
 *
 * @since 2.3
 */"
"@Override
public int getOutputBuffered() {
    // Assuming tail is always valid, set to 0 on close
    return _outputTail;
}","public void test5773() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    BigDecimal bigDecimal0 = new BigDecimal(564.0);
    uTF8JsonGenerator0.writeNumber(bigDecimal0);
    assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test5975() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-879), (ObjectCodec) null, (OutputStream) null);
    int int0 = uTF8JsonGenerator0.getFeatureMask();
    assertEquals((-879), int0);
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test6076() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.getCurrentValue();
    assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test6077() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
    uTF8JsonGenerator0.getCurrentValue();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test6178() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
    StringWriter stringWriter0 = new StringWriter(2);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
    SerializedString serializedString0 = new SerializedString(""c1"");
    writerBasedJsonGenerator0.writeRawValue((SerializableString) serializedString0);
    assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
}",""
"@Override
public int getOutputBuffered() {
    // Assuming tail is always valid, set to 0 on close
    return _outputTail;
}","public void test6279() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeRawValue(""EJcoi<V"");
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
}",""
"@Override
public void writeRawValue(char[] text, int offset, int len) throws IOException {
    _verifyValueWrite(""write raw value"");
    writeRaw(text, offset, len);
}","public void test6380() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    char[] charArray0 = new char[0];
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1672), (ObjectCodec) null, (Writer) null);
    // Undeclared exception!
    try {
        writerBasedJsonGenerator0.writeRawValue(charArray0, 3, 55296);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.WriterBasedJsonGenerator"", e);
    }
}",""
"@Override
public void writeRawValue(String text, int offset, int len) throws IOException {
    _verifyValueWrite(""write raw value"");
    writeRaw(text, offset, len);
}","public void test6481() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""write a number"", true);
    MockFile mockFile0 = new MockFile("">'2_vuB"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeRawValue(""0I!&C>^'sI5ly,"", 127, (int) (byte) (-76));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test6582() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.isClosed();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test6583() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.isClosed();
    assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
}",""
