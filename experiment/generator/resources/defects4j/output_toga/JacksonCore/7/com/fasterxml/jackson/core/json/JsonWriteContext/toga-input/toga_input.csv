focal_method,test_prefix,docstring
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test000() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    assertTrue(jsonWriteContext0.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test001() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.reset(1666);
    jsonWriteContext1.toString();
    assertFalse(jsonWriteContext1.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test012() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.reset(1666);
    int int0 = jsonWriteContext1.writeValue();
    assertEquals(1, jsonWriteContext1.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public int writeValue() {
    // Most likely, object:
    if (_type == TYPE_OBJECT) {
        _gotName = false;
        ++_index;
        return STATUS_OK_AFTER_COLON;
    }
    // Ok, array?
    if (_type == TYPE_ARRAY) {
        int ix = _index;
        ++_index;
        return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
    }
    // Nope, root context
    // No commas within root context, but need space
    ++_index;
    return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;
}","public void test013() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.reset(1666);
    int int0 = jsonWriteContext1.writeValue();
    assertEquals(0, int0);
}",""
"public final int getCurrentIndex() {
    return (_index < 0) ? 0 : _index;
}","public void test024() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.writeValue();
    jsonWriteContext0.writeValue();
    int int0 = jsonWriteContext0.writeFieldName(""p1zlWIIjB`i3 N"");
    assertEquals(1, jsonWriteContext0.getCurrentIndex());
}","/**
 * @return Index of the currently processed entry, if any
 */"
"// // // API sub-classes are to implement
/**
 * Method that writer is to call before it writes a field name.
 *
 * @return Index of the field entry (0-based)
 */
public int writeFieldName(String name) throws JsonProcessingException {
    if (_gotName) {
        return JsonWriteContext.STATUS_EXPECT_VALUE;
    }
    _gotName = true;
    _currentName = name;
    if (_dups != null) {
        _checkDup(_dups, name);
    }
    return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
}","public void test025() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.writeValue();
    jsonWriteContext0.writeValue();
    int int0 = jsonWriteContext0.writeFieldName(""p1zlWIIjB`i3 N"");
    assertEquals(1, int0);
}",""
"public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","public void test037() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    StringBuilder stringBuilder0 = new StringBuilder(""WRITE_BIGDECIMAL_AS_PLAIN"");
    jsonWriteContext0.appendDesc(stringBuilder0);
    assertEquals(""ROOT"", jsonWriteContext0.getTypeDesc());
}","/**
 * Method for accessing simple type description of current context;
 * either ROOT (for root-level values), OBJECT (for field names and
 * values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */"
"public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","public void test048() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext((DupDetector) null);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.withDupDetector((DupDetector) null);
    jsonWriteContext0.createChildObjectContext();
    jsonWriteContext2.withDupDetector((DupDetector) null);
    assertEquals(""OBJECT"", jsonWriteContext2.getTypeDesc());
}","/**
 * Method for accessing simple type description of current context;
 * either ROOT (for root-level values), OBJECT (for field names and
 * values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */"
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test049() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext((DupDetector) null);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.withDupDetector((DupDetector) null);
    jsonWriteContext0.createChildObjectContext();
    jsonWriteContext2.withDupDetector((DupDetector) null);
    assertTrue(jsonWriteContext0.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"public final int getCurrentIndex() {
    return (_index < 0) ? 0 : _index;
}","public void test0510() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    jsonWriteContext0.writeValue();
    jsonWriteContext0.writeValue();
    jsonWriteContext0.withDupDetector(dupDetector0);
    assertEquals(1, jsonWriteContext0.getCurrentIndex());
}","/**
 * @return Index of the currently processed entry, if any
 */"
"public final boolean inObject() {
    return _type == TYPE_OBJECT;
}","public void test0611() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    assertFalse(jsonWriteContext0.inObject());
}","/**
 * Method that returns true if this context is an Object context;
 * that is, content is being read from or written to a Json Object.
 */"
"public final boolean inObject() {
    return _type == TYPE_OBJECT;
}","public void test0612() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.reset(2);
    assertTrue(jsonWriteContext0.inObject());
}","/**
 * Method that returns true if this context is an Object context;
 * that is, content is being read from or written to a Json Object.
 */"
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test0714() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.reset(1);
    assertFalse(jsonWriteContext1.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test0815() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.reset(0);
    assertEquals(0, jsonWriteContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","public void test0816() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.reset(0);
    assertEquals(""ROOT"", jsonWriteContext0.getTypeDesc());
}","/**
 * Method for accessing simple type description of current context;
 * either ROOT (for root-level values), OBJECT (for field names and
 * values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */"
"public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","public void test0917() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext();
    JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
    assertEquals(""ARRAY"", jsonWriteContext2.getTypeDesc());
}","/**
 * Method for accessing simple type description of current context;
 * either ROOT (for root-level values), OBJECT (for field names and
 * values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */"
"public final boolean inArray() {
    return _type == TYPE_ARRAY;
}","public void test0918() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext();
    JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
    assertFalse(jsonWriteContext0.inArray());
}","/**
 * Method that returns true if this context is an Array context;
 * that is, content is being read from or written to a Json Array.
 */"
"public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","public void test0919() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext();
    JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
    assertEquals(""OBJECT"", jsonWriteContext3.getTypeDesc());
}","/**
 * Method for accessing simple type description of current context;
 * either ROOT (for root-level values), OBJECT (for field names and
 * values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test0920() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext();
    JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
    assertEquals(0, jsonWriteContext3.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"// // // Shared API
@Override
public final JsonWriteContext getParent() {
    return _parent;
}","public void test0921() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext();
    JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
    assertNotNull(jsonWriteContext3);
}",""
"// // // Shared API
@Override
public final JsonWriteContext getParent() {
    return _parent;
}","public void test1022() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext();
    JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
    assertNotSame(jsonWriteContext3, jsonWriteContext2);
}",""
"public final boolean inArray() {
    return _type == TYPE_ARRAY;
}","public void test1023() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext();
    JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
    assertFalse(jsonWriteContext0.inArray());
}","/**
 * Method that returns true if this context is an Array context;
 * that is, content is being read from or written to a Json Array.
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test1024() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext();
    JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
    assertEquals(0, jsonWriteContext3.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final boolean inArray() {
    return _type == TYPE_ARRAY;
}","public void test1026() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext();
    JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
    assertTrue(jsonWriteContext3.inArray());
}","/**
 * Method that returns true if this context is an Array context;
 * that is, content is being read from or written to a Json Array.
 */"
"// // // Shared API
@Override
public final JsonWriteContext getParent() {
    return _parent;
}","public void test1127() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.getParent();
    assertNotNull(jsonWriteContext2);
}",""
"public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","public void test1128() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.getParent();
    assertEquals(""OBJECT"", jsonWriteContext1.getTypeDesc());
}","/**
 * Method for accessing simple type description of current context;
 * either ROOT (for root-level values), OBJECT (for field names and
 * values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */"
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test1129() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.getParent();
    assertTrue(jsonWriteContext2.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test1130() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext1.getParent();
    assertEquals(0, jsonWriteContext2.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test1231() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.writeValue();
    jsonWriteContext0.writeValue();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    jsonWriteContext1.getParent();
    assertEquals(2, jsonWriteContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final int getCurrentIndex() {
    return (_index < 0) ? 0 : _index;
}","public void test1232() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.writeValue();
    jsonWriteContext0.writeValue();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    jsonWriteContext1.getParent();
    assertEquals(1, jsonWriteContext0.getCurrentIndex());
}","/**
 * @return Index of the currently processed entry, if any
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test1333() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    DupDetector dupDetector1 = jsonWriteContext0.getDupDetector();
    assertEquals(0, jsonWriteContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test1334() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    DupDetector dupDetector1 = jsonWriteContext0.getDupDetector();
    assertTrue(jsonWriteContext0.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"public DupDetector getDupDetector() {
    return _dups;
}","public void test1335() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    DupDetector dupDetector1 = jsonWriteContext0.getDupDetector();
    assertNotNull(dupDetector1);
}",""
"@Override
public Object getCurrentValue() {
    return _currentValue;
}","public void test1436() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.setCurrentValue(""a"");
    Object object0 = jsonWriteContext0.getCurrentValue();
    assertNotNull(object0);
}",""
"public final int getEntryCount() {
    return _index + 1;
}","public void test1437() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.setCurrentValue(""a"");
    Object object0 = jsonWriteContext0.getCurrentValue();
    assertEquals(0, jsonWriteContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","public void test1438() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.setCurrentValue(""a"");
    Object object0 = jsonWriteContext0.getCurrentValue();
    assertEquals(""ROOT"", jsonWriteContext0.getTypeDesc());
}","/**
 * Method for accessing simple type description of current context;
 * either ROOT (for root-level values), OBJECT (for field names and
 * values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */"
"// // // API sub-classes are to implement
/**
 * Method that writer is to call before it writes a field name.
 *
 * @return Index of the field entry (0-based)
 */
public int writeFieldName(String name) throws JsonProcessingException {
    if (_gotName) {
        return JsonWriteContext.STATUS_EXPECT_VALUE;
    }
    _gotName = true;
    _currentName = name;
    if (_dups != null) {
        _checkDup(_dups, name);
    }
    return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
}","public void test1539() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    int int0 = jsonWriteContext0.writeFieldName(""{?}"");
    assertEquals(0, int0);
}",""
"public final int getEntryCount() {
    return _index + 1;
}","public void test1540() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    int int0 = jsonWriteContext0.writeFieldName(""{?}"");
    String string0 = jsonWriteContext0.getCurrentName();
    assertEquals(0, jsonWriteContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test1541() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    int int0 = jsonWriteContext0.writeFieldName(""{?}"");
    String string0 = jsonWriteContext0.getCurrentName();
    assertTrue(jsonWriteContext0.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"@Override
public final String getCurrentName() {
    return _currentName;
}","public void test1542() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    int int0 = jsonWriteContext0.writeFieldName(""{?}"");
    String string0 = jsonWriteContext0.getCurrentName();
    assertNotNull(string0);
}",""
"// // // API sub-classes are to implement
/**
 * Method that writer is to call before it writes a field name.
 *
 * @return Index of the field entry (0-based)
 */
public int writeFieldName(String name) throws JsonProcessingException {
    if (_gotName) {
        return JsonWriteContext.STATUS_EXPECT_VALUE;
    }
    _gotName = true;
    _currentName = name;
    if (_dups != null) {
        _checkDup(_dups, name);
    }
    return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
}","public void test1643() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext((DupDetector) null);
    int int0 = jsonWriteContext0.writeFieldName("""");
    assertEquals(0, int0);
}",""
"@Override
public final String getCurrentName() {
    return _currentName;
}","public void test1644() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext((DupDetector) null);
    int int0 = jsonWriteContext0.writeFieldName("""");
    String string0 = jsonWriteContext0.getCurrentName();
    assertNotNull(string0);
}",""
"public final int getEntryCount() {
    return _index + 1;
}","public void test1645() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext((DupDetector) null);
    int int0 = jsonWriteContext0.writeFieldName("""");
    String string0 = jsonWriteContext0.getCurrentName();
    assertEquals(0, jsonWriteContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test1646() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext((DupDetector) null);
    int int0 = jsonWriteContext0.writeFieldName("""");
    String string0 = jsonWriteContext0.getCurrentName();
    assertTrue(jsonWriteContext0.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"// // // Internally used abstract methods
protected void appendDesc(StringBuilder sb) {
    if (_type == TYPE_OBJECT) {
        sb.append('{');
        if (_currentName != null) {
            sb.append('""');
            // !!! TODO: Name chars should be escaped?
            sb.append(_currentName);
            sb.append('""');
        } else {
            sb.append('?');
        }
        sb.append('}');
    } else if (_type == TYPE_ARRAY) {
        sb.append('[');
        sb.append(getCurrentIndex());
        sb.append(']');
    } else {
        // nah, ROOT:
        sb.append(""/"");
    }
}","public void test1747() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    // Undeclared exception!
    try {
        jsonWriteContext0.appendDesc((StringBuilder) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.JsonWriteContext"", e);
    }
}",""
"public final boolean inArray() {
    return _type == TYPE_ARRAY;
}","public void test1848() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    String string0 = jsonWriteContext1.toString();
    assertFalse(jsonWriteContext0.inArray());
}","/**
 * Method that returns true if this context is an Array context;
 * that is, content is being read from or written to a Json Array.
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test1850() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    String string0 = jsonWriteContext1.toString();
    assertEquals(0, jsonWriteContext1.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test1951() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    String string0 = jsonWriteContext1.toString();
    assertEquals(0, jsonWriteContext1.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test1952() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    String string0 = jsonWriteContext1.toString();
    assertTrue(jsonWriteContext0.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test2054() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.writeValue();
    int int0 = jsonWriteContext0.writeFieldName(""{?}"");
    assertEquals(1, jsonWriteContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"// // // API sub-classes are to implement
/**
 * Method that writer is to call before it writes a field name.
 *
 * @return Index of the field entry (0-based)
 */
public int writeFieldName(String name) throws JsonProcessingException {
    if (_gotName) {
        return JsonWriteContext.STATUS_EXPECT_VALUE;
    }
    _gotName = true;
    _currentName = name;
    if (_dups != null) {
        _checkDup(_dups, name);
    }
    return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
}","public void test2055() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.writeValue();
    int int0 = jsonWriteContext0.writeFieldName(""{?}"");
    assertEquals(1, int0);
}",""
"// // // API sub-classes are to implement
/**
 * Method that writer is to call before it writes a field name.
 *
 * @return Index of the field entry (0-based)
 */
public int writeFieldName(String name) throws JsonProcessingException {
    if (_gotName) {
        return JsonWriteContext.STATUS_EXPECT_VALUE;
    }
    _gotName = true;
    _currentName = name;
    if (_dups != null) {
        _checkDup(_dups, name);
    }
    return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
}","public void test2156() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext1 = new JsonWriteContext(4, jsonWriteContext0, dupDetector0);
    jsonWriteContext1.writeFieldName(""z"");
    JsonWriteContext jsonWriteContext2 = new JsonWriteContext(3, jsonWriteContext1, dupDetector0);
    // Undeclared exception!
    try {
        jsonWriteContext2.writeFieldName((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.DupDetector"", e);
    }
}",""
"public final int getEntryCount() {
    return _index + 1;
}","public void test2258() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    int int0 = jsonWriteContext0.writeFieldName(""{?}"");
    int int1 = jsonWriteContext0.writeFieldName(""{?}"");
    assertEquals(0, jsonWriteContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"// // // API sub-classes are to implement
/**
 * Method that writer is to call before it writes a field name.
 *
 * @return Index of the field entry (0-based)
 */
public int writeFieldName(String name) throws JsonProcessingException {
    if (_gotName) {
        return JsonWriteContext.STATUS_EXPECT_VALUE;
    }
    _gotName = true;
    _currentName = name;
    if (_dups != null) {
        _checkDup(_dups, name);
    }
    return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
}","public void test2259() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    int int0 = jsonWriteContext0.writeFieldName(""{?}"");
    int int1 = jsonWriteContext0.writeFieldName(""{?}"");
    assertEquals(4, int1);
}",""
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test2260() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    int int0 = jsonWriteContext0.writeFieldName(""{?}"");
    int int1 = jsonWriteContext0.writeFieldName(""{?}"");
    assertTrue(jsonWriteContext0.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"public JsonWriteContext createChildObjectContext() {
    JsonWriteContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new JsonWriteContext(TYPE_OBJECT, this, (_dups == null) ? null : _dups.child());
        return ctxt;
    }
    return ctxt.reset(TYPE_OBJECT);
}","public void test2361() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    assertNotNull(jsonWriteContext1);
}",""
"public final int getCurrentIndex() {
    return (_index < 0) ? 0 : _index;
}","public void test2362() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    jsonWriteContext1.writeValue();
    int int0 = jsonWriteContext1.writeValue();
    assertEquals(1, jsonWriteContext1.getCurrentIndex());
}","/**
 * @return Index of the currently processed entry, if any
 */"
"public int writeValue() {
    // Most likely, object:
    if (_type == TYPE_OBJECT) {
        _gotName = false;
        ++_index;
        return STATUS_OK_AFTER_COLON;
    }
    // Ok, array?
    if (_type == TYPE_ARRAY) {
        int ix = _index;
        ++_index;
        return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
    }
    // Nope, root context
    // No commas within root context, but need space
    ++_index;
    return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;
}","public void test2363() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    jsonWriteContext1.writeValue();
    int int0 = jsonWriteContext1.writeValue();
    assertEquals(2, int0);
}",""
"public JsonWriteContext createChildArrayContext() {
    JsonWriteContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new JsonWriteContext(TYPE_ARRAY, this, (_dups == null) ? null : _dups.child());
        return ctxt;
    }
    return ctxt.reset(TYPE_ARRAY);
}","public void test2464() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    assertNotNull(jsonWriteContext1);
}",""
"public final int getEntryCount() {
    return _index + 1;
}","public void test2465() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    jsonWriteContext1.writeValue();
    jsonWriteContext1.writeValue();
    int int0 = jsonWriteContext1.writeValue();
    assertEquals(3, jsonWriteContext1.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public int writeValue() {
    // Most likely, object:
    if (_type == TYPE_OBJECT) {
        _gotName = false;
        ++_index;
        return STATUS_OK_AFTER_COLON;
    }
    // Ok, array?
    if (_type == TYPE_ARRAY) {
        int ix = _index;
        ++_index;
        return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
    }
    // Nope, root context
    // No commas within root context, but need space
    ++_index;
    return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;
}","public void test2466() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    jsonWriteContext1.writeValue();
    jsonWriteContext1.writeValue();
    int int0 = jsonWriteContext1.writeValue();
    assertEquals(1, int0);
}",""
"public JsonWriteContext createChildArrayContext() {
    JsonWriteContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new JsonWriteContext(TYPE_ARRAY, this, (_dups == null) ? null : _dups.child());
        return ctxt;
    }
    return ctxt.reset(TYPE_ARRAY);
}","public void test2567() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    assertNotNull(jsonWriteContext1);
}",""
"public final int getEntryCount() {
    return _index + 1;
}","public void test2568() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    assertEquals(0, jsonWriteContext1.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final boolean inArray() {
    return _type == TYPE_ARRAY;
}","public void test2569() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    assertTrue(jsonWriteContext1.inArray());
}","/**
 * Method that returns true if this context is an Array context;
 * that is, content is being read from or written to a Json Array.
 */"
"public final boolean inArray() {
    return _type == TYPE_ARRAY;
}","public void test2570() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
    assertFalse(jsonWriteContext0.inArray());
}","/**
 * Method that returns true if this context is an Array context;
 * that is, content is being read from or written to a Json Array.
 */"
"public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","public void test2671() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    assertEquals(""OBJECT"", jsonWriteContext1.getTypeDesc());
}","/**
 * Method for accessing simple type description of current context;
 * either ROOT (for root-level values), OBJECT (for field names and
 * values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */"
"public JsonWriteContext createChildObjectContext() {
    JsonWriteContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new JsonWriteContext(TYPE_OBJECT, this, (_dups == null) ? null : _dups.child());
        return ctxt;
    }
    return ctxt.reset(TYPE_OBJECT);
}","public void test2672() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    assertNotNull(jsonWriteContext1);
}",""
"public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","public void test2673() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext0.createChildArrayContext();
    assertEquals(""ROOT"", jsonWriteContext0.getTypeDesc());
}","/**
 * Method for accessing simple type description of current context;
 * either ROOT (for root-level values), OBJECT (for field names and
 * values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */"
"public JsonWriteContext createChildArrayContext() {
    JsonWriteContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new JsonWriteContext(TYPE_ARRAY, this, (_dups == null) ? null : _dups.child());
        return ctxt;
    }
    return ctxt.reset(TYPE_ARRAY);
}","public void test2674() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext0.createChildArrayContext();
    assertSame(jsonWriteContext2, jsonWriteContext1);
}",""
"public final int getEntryCount() {
    return _index + 1;
}","public void test2675() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext0.createChildArrayContext();
    assertEquals(0, jsonWriteContext2.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","public void test2676() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
    JsonWriteContext jsonWriteContext2 = jsonWriteContext0.createChildArrayContext();
    assertEquals(""ARRAY"", jsonWriteContext2.getTypeDesc());
}","/**
 * Method for accessing simple type description of current context;
 * either ROOT (for root-level values), OBJECT (for field names and
 * values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */"
"public final boolean inObject() {
    return _type == TYPE_OBJECT;
}","public void test2777() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0._child = jsonWriteContext0;
    assertFalse(jsonWriteContext0._child.inObject());
}","/**
 * Method that returns true if this context is an Object context;
 * that is, content is being read from or written to a Json Object.
 */"
"public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","public void test2778() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0._child = jsonWriteContext0;
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0._child.createChildObjectContext();
    jsonWriteContext0.writeFieldName(""lS]T}alLC5\""4sA"");
    String string0 = jsonWriteContext1.toString();
    assertEquals(""OBJECT"", jsonWriteContext0.getTypeDesc());
}","/**
 * Method for accessing simple type description of current context;
 * either ROOT (for root-level values), OBJECT (for field names and
 * values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */"
"// // // API sub-classes are to implement
/**
 * Method that writer is to call before it writes a field name.
 *
 * @return Index of the field entry (0-based)
 */
public int writeFieldName(String name) throws JsonProcessingException {
    if (_gotName) {
        return JsonWriteContext.STATUS_EXPECT_VALUE;
    }
    _gotName = true;
    _currentName = name;
    if (_dups != null) {
        _checkDup(_dups, name);
    }
    return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
}","public void test2880() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.withDupDetector(dupDetector0);
    jsonWriteContext1.writeFieldName(""z"");
    JsonWriteContext jsonWriteContext2 = JsonWriteContext.createRootContext(dupDetector0);
    try {
        jsonWriteContext2.writeFieldName(""z"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Duplicate field 'z'
        //
        verifyException(""com.fasterxml.jackson.core.json.JsonWriteContext"", e);
    }
}",""
"public final int getEntryCount() {
    return _index + 1;
}","public void test2981() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.getCurrentValue();
    assertEquals(0, jsonWriteContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","public void test2982() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.getCurrentValue();
    assertEquals(""ROOT"", jsonWriteContext0.getTypeDesc());
}","/**
 * Method for accessing simple type description of current context;
 * either ROOT (for root-level values), OBJECT (for field names and
 * values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */"
"// // // Shared API
@Override
public final JsonWriteContext getParent() {
    return _parent;
}","public void test3083() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.getParent();
    assertNull(jsonWriteContext1);
}",""
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test3084() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.getParent();
    assertTrue(jsonWriteContext0.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test3085() throws Throwable {
    DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
    JsonWriteContext jsonWriteContext1 = jsonWriteContext0.getParent();
    assertEquals(0, jsonWriteContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test3186() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.getDupDetector();
    assertEquals(0, jsonWriteContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test3187() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.getDupDetector();
    assertTrue(jsonWriteContext0.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","public void test3288() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.getCurrentName();
    assertTrue(jsonWriteContext0.inRoot());
}","/**
 * Method that returns true if this context is a Root context;
 * that is, content is being read from or written to without
 * enclosing array or object structure.
 */"
"public final int getEntryCount() {
    return _index + 1;
}","public void test3289() throws Throwable {
    JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
    jsonWriteContext0.getCurrentName();
    assertEquals(0, jsonWriteContext0.getEntryCount());
}","/**
 * @return Number of entries that are complete and started.
 */"
