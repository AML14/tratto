focal_method,test_prefix,docstring
"static int _calcTertiaryShift(int primarySlots) {
    // first: we only get 1/4 of slots of primary, to divide
    int tertSlots = (primarySlots) >> 2;
    // default is for buckets of 4 slots (each 4 ints, i.e. 1 << 4)
    if (tertSlots < 64) {
        return 4;
    }
    if (tertSlots <= 256) {
        // buckets of 8 slots (up to 256 == 32 x 8)
        return 5;
    }
    if (tertSlots <= 1024) {
        // buckets of 16 slots (up to 1024 == 64 x 16)
        return 6;
    }
    // and biggest buckets have 32 slots
    return 7;
}","public void test000() throws Throwable {
    int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(4096);
    assertEquals(6, int0);
}",""
"static int _calcTertiaryShift(int primarySlots) {
    // first: we only get 1/4 of slots of primary, to divide
    int tertSlots = (primarySlots) >> 2;
    // default is for buckets of 4 slots (each 4 ints, i.e. 1 << 4)
    if (tertSlots < 64) {
        return 4;
    }
    if (tertSlots <= 256) {
        // buckets of 8 slots (up to 256 == 32 x 8)
        return 5;
    }
    if (tertSlots <= 1024) {
        // buckets of 16 slots (up to 1024 == 64 x 16)
        return 6;
    }
    // and biggest buckets have 32 slots
    return 7;
}","public void test011() throws Throwable {
    int int0 = ByteQuadsCanonicalizer._calcTertiaryShift((-1));
    assertEquals(4, int0);
}",""
"public String findName(int[] q, int qlen) {
    /* This version differs significantly, because longer names do not fit within cell.
         * Rather, they contain hash in main slot, and offset+length to extension area
         * that contains actual quads.
         */
    if (qlen < 4) {
        // another sanity check
        if (qlen == 3) {
            return findName(q[0], q[1], q[2]);
        }
        if (qlen == 2) {
            return findName(q[0], q[1]);
        }
        return findName(q[0]);
    }
    final int hash = calcHash(q, qlen);
    int offset = _calcOffset(hash);
    final int[] hashArea = _hashArea;
    final int len = hashArea[offset + 3];
    if ((hash == hashArea[offset]) && (len == qlen)) {
        // probable but not guaranteed: verify
        if (_verifyLongName(q, qlen, hashArea[offset + 1])) {
            return _names[offset >> 2];
        }
    }
    if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary?
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    final int len2 = hashArea[offset2 + 3];
    if ((hash == hashArea[offset2]) && (len2 == qlen)) {
        if (_verifyLongName(q, qlen, hashArea[offset2 + 1])) {
            return _names[offset2 >> 2];
        }
    }
    if (len == 0) {
        // empty slot? Short-circuit if no more spillovers
        return null;
    }
    return _findSecondary(offset, hash, q, qlen);
}","public void test022() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[6];
    intArray0[3] = (-1134);
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.findName(intArray0, 32768);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 6
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String addName(String name, int[] q, int qlen) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset;
    switch(qlen) {
        case 1:
            {
                offset = _findOffsetForAdd(calcHash(q[0]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 3] = 1;
            }
            break;
        case 2:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 3] = 2;
            }
            break;
        case 3:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 2] = q[2];
                _hashArea[offset + 3] = 3;
            }
            break;
        default:
            final int hash = calcHash(q, qlen);
            offset = _findOffsetForAdd(hash);
            _hashArea[offset] = hash;
            int longStart = _appendLongName(q, qlen);
            _hashArea[offset + 1] = longStart;
            _hashArea[offset + 3] = qlen;
    }
    // plus add the actual String
    _names[offset >> 2] = name;
    // and finally; see if we really should rehash.
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test033() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[7];
    intArray0[3] = 3208;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName("""", intArray0, 1134);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 7
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String addName(String name, int[] q, int qlen) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset;
    switch(qlen) {
        case 1:
            {
                offset = _findOffsetForAdd(calcHash(q[0]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 3] = 1;
            }
            break;
        case 2:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 3] = 2;
            }
            break;
        case 3:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 2] = q[2];
                _hashArea[offset + 3] = 3;
            }
            break;
        default:
            final int hash = calcHash(q, qlen);
            offset = _findOffsetForAdd(hash);
            _hashArea[offset] = hash;
            int longStart = _appendLongName(q, qlen);
            _hashArea[offset + 1] = longStart;
            _hashArea[offset + 3] = qlen;
    }
    // plus add the actual String
    _names[offset >> 2] = name;
    // and finally; see if we really should rehash.
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test044() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[7];
    intArray0[2] = 4033;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName("""", intArray0, 1134);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 7
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String addName(String name, int[] q, int qlen) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset;
    switch(qlen) {
        case 1:
            {
                offset = _findOffsetForAdd(calcHash(q[0]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 3] = 1;
            }
            break;
        case 2:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 3] = 2;
            }
            break;
        case 3:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 2] = q[2];
                _hashArea[offset + 3] = 3;
            }
            break;
        default:
            final int hash = calcHash(q, qlen);
            offset = _findOffsetForAdd(hash);
            _hashArea[offset] = hash;
            int longStart = _appendLongName(q, qlen);
            _hashArea[offset + 1] = longStart;
            _hashArea[offset + 3] = qlen;
    }
    // plus add the actual String
    _names[offset >> 2] = name;
    // and finally; see if we really should rehash.
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test055() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[7];
    intArray0[1] = 4;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName("""", intArray0, 1134);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 7
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"/*
    /**********************************************************
    /* API, mutators
    /**********************************************************
     */
public String addName(String name, int q1) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset = _findOffsetForAdd(calcHash(q1));
    _hashArea[offset] = q1;
    _hashArea[offset + 3] = 1;
    _names[offset >> 2] = name;
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test066() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(7);
    int[] intArray0 = new int[8];
    intArray0[3] = 7;
    byteQuadsCanonicalizer0._tertiaryShift = 7;
    byteQuadsCanonicalizer0._hashArea = intArray0;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName(""w|cN^aF"", 7);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"/*
    /**********************************************************
    /* API, mutators
    /**********************************************************
     */
public String addName(String name, int q1) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset = _findOffsetForAdd(calcHash(q1));
    _hashArea[offset] = q1;
    _hashArea[offset + 3] = 1;
    _names[offset >> 2] = name;
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test077() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-9));
    int[] intArray0 = new int[11];
    intArray0[3] = (-9);
    byteQuadsCanonicalizer0._hashArea = intArray0;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName(""w|cN^aF"", (-9));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test088() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(7);
    int[] intArray0 = new int[8];
    intArray0[3] = 7;
    intArray0[4] = 7;
    byteQuadsCanonicalizer0._hashArea = intArray0;
    byteQuadsCanonicalizer0._spilloverEnd = 7;
    byteQuadsCanonicalizer0.findName(7);
    assertEquals(1, byteQuadsCanonicalizer0.spilloverCount());
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"public int hashSeed() {
    return _seed;
}","public void test099() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-24));
    int[] intArray0 = new int[8];
    intArray0[0] = (-24);
    intArray0[3] = (-24);
    byteQuadsCanonicalizer0._hashArea = intArray0;
    assertEquals((-24), byteQuadsCanonicalizer0.hashSeed());
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test0910() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-24));
    int[] intArray0 = new int[8];
    intArray0[0] = (-24);
    intArray0[3] = (-24);
    byteQuadsCanonicalizer0._hashArea = intArray0;
    byteQuadsCanonicalizer0.findName((-24));
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test0911() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-24));
    int[] intArray0 = new int[8];
    intArray0[0] = (-24);
    intArray0[3] = (-24);
    byteQuadsCanonicalizer0._hashArea = intArray0;
    byteQuadsCanonicalizer0.findName((-24));
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"/*
    /**********************************************************
    /* Public API, accessing symbols
    /**********************************************************
     */
public String findName(int q1) {
    int offset = _calcOffset(calcHash(q1));
    // first: primary match?
    final int[] hashArea = _hashArea;
    int len = hashArea[offset + 3];
    if (len == 1) {
        if (hashArea[offset] == q1) {
            return _names[offset >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary? single slot shared by N/2 primaries
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    len = hashArea[offset2 + 3];
    if (len == 1) {
        if (hashArea[offset2] == q1) {
            return _names[offset2 >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // tertiary lookup & spillovers best to offline
    return _findSecondary(offset, q1);
}","public void test1012() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(19);
    byteQuadsCanonicalizer0._tertiaryShift = 423;
    int[] intArray0 = new int[4];
    intArray0[3] = 19;
    byteQuadsCanonicalizer0._hashArea = intArray0;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.findName(19);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 7
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public int hashSeed() {
    return _seed;
}","public void test1113() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-24));
    int[] intArray0 = new int[8];
    intArray0[3] = (-24);
    byteQuadsCanonicalizer0._hashArea = intArray0;
    assertEquals((-24), byteQuadsCanonicalizer0.hashSeed());
}",""
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test1114() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-24));
    int[] intArray0 = new int[8];
    intArray0[3] = (-24);
    byteQuadsCanonicalizer0._hashArea = intArray0;
    byteQuadsCanonicalizer0.findName((-24));
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test1215() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
    byteQuadsCanonicalizer1._hashSize = 2;
    byteQuadsCanonicalizer1.toString();
    assertEquals(108, byteQuadsCanonicalizer1.spilloverCount());
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test1316() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(33);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    byteQuadsCanonicalizer1._secondaryStart = 487;
    String string0 = byteQuadsCanonicalizer1.toString();
    assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"public int hashSeed() {
    return _seed;
}","public void test1317() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(33);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    byteQuadsCanonicalizer1._secondaryStart = 487;
    String string0 = byteQuadsCanonicalizer1.toString();
    assertEquals(33, byteQuadsCanonicalizer1.hashSeed());
}",""
"@Override
public String toString() {
    int pri = primaryCount();
    int sec = secondaryCount();
    int tert = tertiaryCount();
    int spill = spilloverCount();
    int total = totalCount();
    return String.format(""[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]"", getClass().getName(), _count, _hashSize, pri, sec, tert, spill, total, (pri + sec + tert + spill), total);
}","public void test1318() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(33);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    byteQuadsCanonicalizer1._secondaryStart = 487;
    String string0 = byteQuadsCanonicalizer1.toString();
    assertEquals(""[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=64, 0/0/0/0 pri/sec/ter/spill (=0), total:0]"", string0);
}",""
"public boolean maybeDirty() {
    return !_hashShared;
}","public void test1319() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(33);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    byteQuadsCanonicalizer1._secondaryStart = 487;
    String string0 = byteQuadsCanonicalizer1.toString();
    assertFalse(byteQuadsCanonicalizer1.maybeDirty());
}","/**
 * Method called to check to quickly see if a child symbol table
 * may have gotten additional entries. Used for checking to see
 * if a child table should be merged into shared table.
 */"
"public int hashSeed() {
    return _seed;
}","public void test1420() throws Throwable {
    System.setCurrentTimeMillis(3905L);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(3905, byteQuadsCanonicalizer0.hashSeed());
}",""
"public int hashSeed() {
    return _seed;
}","public void test1521() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byteQuadsCanonicalizer0._reportTooManyCollisions();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test1522() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byteQuadsCanonicalizer0._reportTooManyCollisions();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public String addName(String name, int[] q, int qlen) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset;
    switch(qlen) {
        case 1:
            {
                offset = _findOffsetForAdd(calcHash(q[0]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 3] = 1;
            }
            break;
        case 2:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 3] = 2;
            }
            break;
        case 3:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 2] = q[2];
                _hashArea[offset + 3] = 3;
            }
            break;
        default:
            final int hash = calcHash(q, qlen);
            offset = _findOffsetForAdd(hash);
            _hashArea[offset] = hash;
            int longStart = _appendLongName(q, qlen);
            _hashArea[offset + 1] = longStart;
            _hashArea[offset + 3] = qlen;
    }
    // plus add the actual String
    _names[offset >> 2] = name;
    // and finally; see if we really should rehash.
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test1623() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[5];
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName(""$"", intArray0, 4);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test1724() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-1691));
    int int0 = byteQuadsCanonicalizer0.totalCount();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int hashSeed() {
    return _seed;
}","public void test1725() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-1691));
    int int0 = byteQuadsCanonicalizer0.totalCount();
    assertEquals((-1691), byteQuadsCanonicalizer0.hashSeed());
}",""
"public int totalCount() {
    int count = 0;
    for (int offset = 3, end = (_hashSize << 3); offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test1726() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-1691));
    int int0 = byteQuadsCanonicalizer0.totalCount();
    assertEquals(0, int0);
}",""
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test1827() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byteQuadsCanonicalizer0._hashSize = (-377);
    int int0 = byteQuadsCanonicalizer0.spilloverCount();
    assertEquals(659, int0);
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test1928() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(2416);
    byteQuadsCanonicalizer0._hashSize = 2416;
    int int0 = byteQuadsCanonicalizer0.spilloverCount();
    assertEquals((-4228), int0);
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test2029() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4276);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4276);
    byteQuadsCanonicalizer1._count = 4276;
    int int0 = byteQuadsCanonicalizer1.size();
    assertEquals(4276, int0);
}",""
"public int secondaryCount() {
    int count = 0;
    int offset = _secondaryStart + 3;
    for (int end = _tertiaryStart; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test2130() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    int int0 = byteQuadsCanonicalizer0.secondaryCount();
    assertEquals(0, int0);
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in secondary buckets
 */"
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test2131() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    int int0 = byteQuadsCanonicalizer0.secondaryCount();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int hashSeed() {
    return _seed;
}","public void test2132() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    int int0 = byteQuadsCanonicalizer0.secondaryCount();
    assertEquals((-80), byteQuadsCanonicalizer0.hashSeed());
}",""
"public int hashSeed() {
    return _seed;
}","public void test2233() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int int0 = byteQuadsCanonicalizer0.primaryCount();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",""
"public int primaryCount() {
    int count = 0;
    for (int offset = 3, end = _secondaryStart; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test2234() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int int0 = byteQuadsCanonicalizer0.primaryCount();
    assertEquals(0, int0);
}","/**
 * Method mostly needed by unit tests; calculates number of
 * entries that are in the primary slot set. These are
 * ""perfect"" entries, accessible with a single lookup
 */"
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test2235() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int int0 = byteQuadsCanonicalizer0.primaryCount();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test2336() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-1599));
    int int0 = byteQuadsCanonicalizer0.hashSeed();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int hashSeed() {
    return _seed;
}","public void test2337() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-1599));
    int int0 = byteQuadsCanonicalizer0.hashSeed();
    assertEquals((-1599), int0);
}",""
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test2438() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    int[] intArray0 = new int[1];
    byteQuadsCanonicalizer1.findName(intArray0, (-1717));
    assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"public int bucketCount() {
    return _hashSize;
}","public void test2439() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    int[] intArray0 = new int[1];
    byteQuadsCanonicalizer1.findName(intArray0, (-1717));
    assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
}","/**
 * Returns number of primary slots table has currently
 */"
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test2440() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    int[] intArray0 = new int[1];
    byteQuadsCanonicalizer1.findName(intArray0, (-1717));
    assertEquals(0, byteQuadsCanonicalizer1.size());
}",""
"public int hashSeed() {
    return _seed;
}","public void test2441() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    int[] intArray0 = new int[1];
    byteQuadsCanonicalizer1.findName(intArray0, (-1717));
    assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
}",""
"public int hashSeed() {
    return _seed;
}","public void test2542() throws Throwable {
    System.setCurrentTimeMillis((-1L));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals((-1), byteQuadsCanonicalizer0.hashSeed());
}",""
"public int calcHash(int[] q, int qlen) {
    if (qlen < 4) {
        throw new IllegalArgumentException();
    }
    /* And then change handling again for ""multi-quad"" case; mostly
         * to make calculation of collisions less fun. For example,
         * add seed bit later in the game, and switch plus/xor around,
         * use different shift lengths.
         */
    int hash = q[0] ^ _seed;
    hash += (hash >>> 9);
    hash += q[1];
    hash += (hash >>> 15);
    hash *= MULT;
    hash ^= q[2];
    hash += (hash >>> 4);
    for (int i = 3; i < qlen; ++i) {
        int next = q[i];
        next = next ^ (next >> 21);
        hash += next;
    }
    hash *= MULT2;
    // and finally shuffle some more once done
    hash += (hash >>> 19);
    hash ^= (hash << 5);
    return hash;
}","public void test2643() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[4];
    intArray0[0] = (-1147);
    int int0 = byteQuadsCanonicalizer0.calcHash(intArray0, 4);
    assertEquals(173736282, int0);
}",""
"public int calcHash(int q1, int q2, int q3) {
    // use same algorithm as multi-byte, tested to work well
    int hash = q1 ^ _seed;
    hash += (hash >>> 9);
    hash *= MULT3;
    hash += q2;
    hash *= MULT;
    hash += (hash >>> 15);
    hash ^= q3;
    // 26-Mar-2015, tatu: As per two-quad case, a short shift seems to help more here
    hash += (hash >>> 4);
    hash += (hash >>> 15);
    hash ^= (hash << 9);
    return hash;
}","public void test2744() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1707);
    int int0 = byteQuadsCanonicalizer0.calcHash((-3), (-3), 0);
    assertEquals((-1264803167), int0);
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test2745() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1707);
    int int0 = byteQuadsCanonicalizer0.calcHash((-3), (-3), 0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int calcHash(int q1, int q2) {
    // For two quads, let's change algorithm a bit, to spice
    // things up (can do bit more processing anyway)
    int hash = q1;
    // try mixing first and second byte pairs first
    hash += (hash >>> 15);
    // as well as lowest 2 bytes
    hash ^= (hash >>> 9);
    // then add second quad
    hash += (q2 * MULT);
    hash ^= _seed;
    // and shuffle some more
    hash += (hash >>> 16);
    hash ^= (hash >>> 4);
    hash += (hash << 3);
    return hash;
}","public void test2846() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(0);
    int int0 = byteQuadsCanonicalizer0.calcHash(0, 0);
    assertEquals(0, int0);
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test2847() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(0);
    int int0 = byteQuadsCanonicalizer0.calcHash(0, 0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int calcHash(int q1, int q2) {
    // For two quads, let's change algorithm a bit, to spice
    // things up (can do bit more processing anyway)
    int hash = q1;
    // try mixing first and second byte pairs first
    hash += (hash >>> 15);
    // as well as lowest 2 bytes
    hash ^= (hash >>> 9);
    // then add second quad
    hash += (q2 * MULT);
    hash ^= _seed;
    // and shuffle some more
    hash += (hash >>> 16);
    hash ^= (hash >>> 4);
    hash += (hash << 3);
    return hash;
}","public void test2948() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1707);
    int int0 = byteQuadsCanonicalizer0.calcHash((-1), 0);
    assertEquals(1120185, int0);
}",""
"public int calcHash(int q1) {
    int hash = q1 ^ _seed;
    /* 29-Mar-2015, tatu: Earlier used 15 + 9 right shifts, which worked ok
         *    except for one specific problem case: numbers. So needed to make sure
         *    that all 4 least-significant bits participate in hash. Couple of ways
         *    to work it out, but this is the simplest, fast and seems to do ok.
         */
    // to xor hi- and low- 16-bits
    hash += (hash >>> 16);
    hash ^= (hash >>> 12);
    return hash;
}","public void test3049() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(19);
    int int0 = byteQuadsCanonicalizer0.calcHash(19);
    assertEquals(0, int0);
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test3050() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(19);
    int int0 = byteQuadsCanonicalizer0.calcHash(19);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test3151() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int int0 = byteQuadsCanonicalizer0.calcHash((-423));
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int calcHash(int q1) {
    int hash = q1 ^ _seed;
    /* 29-Mar-2015, tatu: Earlier used 15 + 9 right shifts, which worked ok
         *    except for one specific problem case: numbers. So needed to make sure
         *    that all 4 least-significant bits participate in hash. Couple of ways
         *    to work it out, but this is the simplest, fast and seems to do ok.
         */
    // to xor hi- and low- 16-bits
    hash += (hash >>> 16);
    hash ^= (hash >>> 12);
    return hash;
}","public void test3152() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int int0 = byteQuadsCanonicalizer0.calcHash((-423));
    assertEquals((-839018704), int0);
}",""
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test3253() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(224);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(596);
    int int0 = byteQuadsCanonicalizer1.bucketCount();
    assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"public int hashSeed() {
    return _seed;
}","public void test3254() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(224);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(596);
    int int0 = byteQuadsCanonicalizer1.bucketCount();
    assertEquals(224, byteQuadsCanonicalizer1.hashSeed());
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test3255() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(224);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(596);
    int int0 = byteQuadsCanonicalizer1.bucketCount();
    assertEquals(0, byteQuadsCanonicalizer1.size());
}",""
"public int bucketCount() {
    return _hashSize;
}","public void test3256() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(224);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(596);
    int int0 = byteQuadsCanonicalizer1.bucketCount();
    assertEquals(64, int0);
}","/**
 * Returns number of primary slots table has currently
 */"
"public int bucketCount() {
    return _hashSize;
}","public void test3357() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byteQuadsCanonicalizer0._hashSize = (-377);
    int int0 = byteQuadsCanonicalizer0.bucketCount();
    assertEquals((-377), int0);
}","/**
 * Returns number of primary slots table has currently
 */"
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test3458() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(224);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(596);
    byteQuadsCanonicalizer1.addName((String) null, (-1490), 596, 224);
    assertEquals(1, byteQuadsCanonicalizer1.size());
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test3559() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    byteQuadsCanonicalizer1.addName("""", 1902, 1902, 0);
    assertEquals(1, byteQuadsCanonicalizer1.size());
}",""
"public int totalCount() {
    int count = 0;
    for (int offset = 3, end = (_hashSize << 3); offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test3660() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    byteQuadsCanonicalizer1.addName(""($&ki{s"", 495, (-1916));
    assertEquals(1, byteQuadsCanonicalizer1.totalCount());
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test3761() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    byteQuadsCanonicalizer1.addName("""", (-2005));
    assertEquals(1, byteQuadsCanonicalizer1.size());
}",""
"public int totalCount() {
    int count = 0;
    for (int offset = 3, end = (_hashSize << 3); offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test3862() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byteQuadsCanonicalizer0._hashSize = 10;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.totalCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public int totalCount() {
    int count = 0;
    for (int offset = 3, end = (_hashSize << 3); offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test3963() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(7);
    int[] intArray0 = new int[8];
    byteQuadsCanonicalizer0._hashSize = 7;
    byteQuadsCanonicalizer0._hashArea = intArray0;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.totalCount();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public String toString() {
    int pri = primaryCount();
    int sec = secondaryCount();
    int tert = tertiaryCount();
    int spill = spilloverCount();
    int total = totalCount();
    return String.format(""[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]"", getClass().getName(), _count, _hashSize, pri, sec, tert, spill, total, (pri + sec + tert + spill), total);
}","public void test4064() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(37);
    byteQuadsCanonicalizer0._hashSize = 1870;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"@Override
public String toString() {
    int pri = primaryCount();
    int sec = secondaryCount();
    int tert = tertiaryCount();
    int spill = spilloverCount();
    int total = totalCount();
    return String.format(""[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]"", getClass().getName(), _count, _hashSize, pri, sec, tert, spill, total, (pri + sec + tert + spill), total);
}","public void test4165() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(33);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    int[] intArray0 = new int[3];
    byteQuadsCanonicalizer1._hashArea = intArray0;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer1.toString();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public int tertiaryCount() {
    int count = 0;
    // to 1.5x, starting point of tertiary
    int offset = _tertiaryStart + 3;
    for (int end = offset + _hashSize; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test4266() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(425);
    byteQuadsCanonicalizer0._hashSize = 425;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.tertiaryCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in tertiary buckets
 */"
"public int primaryCount() {
    int count = 0;
    for (int offset = 3, end = _secondaryStart; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test4367() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(0);
    byteQuadsCanonicalizer0._secondaryStart = 1702;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.primaryCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Method mostly needed by unit tests; calculates number of
 * entries that are in the primary slot set. These are
 * ""perfect"" entries, accessible with a single lookup
 */"
"public ByteQuadsCanonicalizer makeChild(int flags) {
    return new ByteQuadsCanonicalizer(this, JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags), _seed, JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags), _tableInfo.get());
}","public void test4468() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-1691));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1691));
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer1.makeChild((-1691));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}","/**
 * Factory method used to create actual symbol table instance to
 * use for parsing.
 */"
"public String findName(int q1, int q2, int q3) {
    int offset = _calcOffset(calcHash(q1, q2, q3));
    final int[] hashArea = _hashArea;
    int len = hashArea[offset + 3];
    if (len == 3) {
        if ((q1 == hashArea[offset]) && (hashArea[offset + 1] == q2) && (hashArea[offset + 2] == q3)) {
            return _names[offset >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary?
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    len = hashArea[offset2 + 3];
    if (len == 3) {
        if ((q1 == hashArea[offset2]) && (hashArea[offset2 + 1] == q2) && (hashArea[offset2 + 2] == q3)) {
            return _names[offset2 >> 2];
        }
    } else if (len == 0) {
        // empty slot? Short-circuit if no more spillovers
        return null;
    }
    return _findSecondary(offset, q1, q2, q3);
}","public void test4569() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[3];
    byteQuadsCanonicalizer0._hashArea = intArray0;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.findName(0, 0, 0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -2007127093
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String findName(int q1, int q2) {
    int offset = _calcOffset(calcHash(q1, q2));
    final int[] hashArea = _hashArea;
    int len = hashArea[offset + 3];
    if (len == 2) {
        if ((q1 == hashArea[offset]) && (q2 == hashArea[offset + 1])) {
            return _names[offset >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary?
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    len = hashArea[offset2 + 3];
    if (len == 2) {
        if ((q1 == hashArea[offset2]) && (q2 == hashArea[offset2 + 1])) {
            return _names[offset2 >> 2];
        }
    } else if (len == 0) {
        // empty slot? Short-circuit if no more spillovers
        return null;
    }
    return _findSecondary(offset, q1, q2);
}","public void test4670() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.findName((-2218), (-1422));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String findName(int q1, int q2) {
    int offset = _calcOffset(calcHash(q1, q2));
    final int[] hashArea = _hashArea;
    int len = hashArea[offset + 3];
    if (len == 2) {
        if ((q1 == hashArea[offset]) && (q2 == hashArea[offset + 1])) {
            return _names[offset >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary?
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    len = hashArea[offset2 + 3];
    if (len == 2) {
        if ((q1 == hashArea[offset2]) && (q2 == hashArea[offset2 + 1])) {
            return _names[offset2 >> 2];
        }
    } else if (len == 0) {
        // empty slot? Short-circuit if no more spillovers
        return null;
    }
    return _findSecondary(offset, q1, q2);
}","public void test4771() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(425);
    int[] intArray0 = new int[7];
    byteQuadsCanonicalizer0._hashArea = intArray0;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.findName(0, 2185);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 2446887
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, accessing symbols
    /**********************************************************
     */
public String findName(int q1) {
    int offset = _calcOffset(calcHash(q1));
    // first: primary match?
    final int[] hashArea = _hashArea;
    int len = hashArea[offset + 3];
    if (len == 1) {
        if (hashArea[offset] == q1) {
            return _names[offset >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary? single slot shared by N/2 primaries
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    len = hashArea[offset2 + 3];
    if (len == 1) {
        if (hashArea[offset2] == q1) {
            return _names[offset2 >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // tertiary lookup & spillovers best to offline
    return _findSecondary(offset, q1);
}","public void test4872() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.findName(0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public int calcHash(int[] q, int qlen) {
    if (qlen < 4) {
        throw new IllegalArgumentException();
    }
    /* And then change handling again for ""multi-quad"" case; mostly
         * to make calculation of collisions less fun. For example,
         * add seed bit later in the game, and switch plus/xor around,
         * use different shift lengths.
         */
    int hash = q[0] ^ _seed;
    hash += (hash >>> 9);
    hash += q[1];
    hash += (hash >>> 15);
    hash *= MULT;
    hash ^= q[2];
    hash += (hash >>> 4);
    for (int i = 3; i < qlen; ++i) {
        int next = q[i];
        next = next ^ (next >> 21);
        hash += next;
    }
    hash *= MULT2;
    // and finally shuffle some more once done
    hash += (hash >>> 19);
    hash ^= (hash << 5);
    return hash;
}","public void test4973() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[3];
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.calcHash(intArray0, 4);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 3
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String addName(String name, int q1, int q2, int q3) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset = _findOffsetForAdd(calcHash(q1, q2, q3));
    _hashArea[offset] = q1;
    _hashArea[offset + 1] = q2;
    _hashArea[offset + 2] = q3;
    _hashArea[offset + 3] = 3;
    _names[offset >> 2] = name;
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test5074() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    byteQuadsCanonicalizer1._count = 1902;
    byteQuadsCanonicalizer1.addName(""($&ki{s"", 2448, 7, (-4933));
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer1.addName(""($&ki{s"", 1902, 1902, 0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Failed rehash(): old count=1903, copyCount=1
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String addName(String name, int q1, int q2, int q3) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset = _findOffsetForAdd(calcHash(q1, q2, q3));
    _hashArea[offset] = q1;
    _hashArea[offset + 1] = q2;
    _hashArea[offset + 2] = q3;
    _hashArea[offset + 3] = 3;
    _names[offset >> 2] = name;
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test5175() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[1];
    byteQuadsCanonicalizer0._hashArea = intArray0;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName(""|!vv&07dZ=[}&"", 180, 180, 180);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1078114749
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String addName(String name, int q1, int q2) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);
    int offset = _findOffsetForAdd(hash);
    _hashArea[offset] = q1;
    _hashArea[offset + 1] = q2;
    _hashArea[offset + 3] = 2;
    _names[offset >> 2] = name;
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test5276() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(63);
    int[] intArray0 = new int[2];
    byteQuadsCanonicalizer0._hashArea = intArray0;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName(""[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]"", 63, 425);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 481683
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public int calcHash(int[] q, int qlen) {
    if (qlen < 4) {
        throw new IllegalArgumentException();
    }
    /* And then change handling again for ""multi-quad"" case; mostly
         * to make calculation of collisions less fun. For example,
         * add seed bit later in the game, and switch plus/xor around,
         * use different shift lengths.
         */
    int hash = q[0] ^ _seed;
    hash += (hash >>> 9);
    hash += q[1];
    hash += (hash >>> 15);
    hash *= MULT;
    hash ^= q[2];
    hash += (hash >>> 4);
    for (int i = 3; i < qlen; ++i) {
        int next = q[i];
        next = next ^ (next >> 21);
        hash += next;
    }
    hash *= MULT2;
    // and finally shuffle some more once done
    hash += (hash >>> 19);
    hash ^= (hash << 5);
    return hash;
}","public void test5377() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[4];
    int int0 = byteQuadsCanonicalizer0.calcHash(intArray0, 4);
    assertEquals((-1246727123), int0);
}",""
"public int calcHash(int[] q, int qlen) {
    if (qlen < 4) {
        throw new IllegalArgumentException();
    }
    /* And then change handling again for ""multi-quad"" case; mostly
         * to make calculation of collisions less fun. For example,
         * add seed bit later in the game, and switch plus/xor around,
         * use different shift lengths.
         */
    int hash = q[0] ^ _seed;
    hash += (hash >>> 9);
    hash += q[1];
    hash += (hash >>> 15);
    hash *= MULT;
    hash ^= q[2];
    hash += (hash >>> 4);
    for (int i = 3; i < qlen; ++i) {
        int next = q[i];
        next = next ^ (next >> 21);
        hash += next;
    }
    hash *= MULT2;
    // and finally shuffle some more once done
    hash += (hash >>> 19);
    hash ^= (hash << 5);
    return hash;
}","public void test5478() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.calcHash((int[]) null, 37);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String addName(String name, int[] q, int qlen) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset;
    switch(qlen) {
        case 1:
            {
                offset = _findOffsetForAdd(calcHash(q[0]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 3] = 1;
            }
            break;
        case 2:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 3] = 2;
            }
            break;
        case 3:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 2] = q[2];
                _hashArea[offset + 3] = 3;
            }
            break;
        default:
            final int hash = calcHash(q, qlen);
            offset = _findOffsetForAdd(hash);
            _hashArea[offset] = hash;
            int longStart = _appendLongName(q, qlen);
            _hashArea[offset + 1] = longStart;
            _hashArea[offset + 3] = qlen;
    }
    // plus add the actual String
    _names[offset >> 2] = name;
    // and finally; see if we really should rehash.
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test5579() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[9];
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName("") does not override copy(); it has to"", intArray0, 1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String addName(String name, int[] q, int qlen) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset;
    switch(qlen) {
        case 1:
            {
                offset = _findOffsetForAdd(calcHash(q[0]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 3] = 1;
            }
            break;
        case 2:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 3] = 2;
            }
            break;
        case 3:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 2] = q[2];
                _hashArea[offset + 3] = 3;
            }
            break;
        default:
            final int hash = calcHash(q, qlen);
            offset = _findOffsetForAdd(hash);
            _hashArea[offset] = hash;
            int longStart = _appendLongName(q, qlen);
            _hashArea[offset + 1] = longStart;
            _hashArea[offset + 3] = qlen;
    }
    // plus add the actual String
    _names[offset >> 2] = name;
    // and finally; see if we really should rehash.
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test5680() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
    int[] intArray0 = new int[8];
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer1.addName(""Spill-over slots in symbol table with "", intArray0, (-936));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test5781() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    byteQuadsCanonicalizer0.tertiaryCount();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int hashSeed() {
    return _seed;
}","public void test5782() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    byteQuadsCanonicalizer0.tertiaryCount();
    assertEquals((-80), byteQuadsCanonicalizer0.hashSeed());
}",""
"public boolean maybeDirty() {
    return !_hashShared;
}","public void test5883() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    boolean boolean0 = byteQuadsCanonicalizer0.maybeDirty();
    assertTrue(boolean0);
}","/**
 * Method called to check to quickly see if a child symbol table
 * may have gotten additional entries. Used for checking to see
 * if a child table should be merged into shared table.
 */"
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test5884() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    boolean boolean0 = byteQuadsCanonicalizer0.maybeDirty();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int hashSeed() {
    return _seed;
}","public void test5885() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    boolean boolean0 = byteQuadsCanonicalizer0.maybeDirty();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",""
"public int bucketCount() {
    return _hashSize;
}","public void test5986() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
    boolean boolean0 = byteQuadsCanonicalizer1.maybeDirty();
    assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
}","/**
 * Returns number of primary slots table has currently
 */"
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test5987() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
    boolean boolean0 = byteQuadsCanonicalizer1.maybeDirty();
    assertEquals(0, byteQuadsCanonicalizer1.size());
}",""
"public boolean maybeDirty() {
    return !_hashShared;
}","public void test5988() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
    boolean boolean0 = byteQuadsCanonicalizer1.maybeDirty();
    assertFalse(boolean0);
}","/**
 * Method called to check to quickly see if a child symbol table
 * may have gotten additional entries. Used for checking to see
 * if a child table should be merged into shared table.
 */"
"public int hashSeed() {
    return _seed;
}","public void test5989() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
    boolean boolean0 = byteQuadsCanonicalizer1.maybeDirty();
    assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
}",""
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test5990() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
    boolean boolean0 = byteQuadsCanonicalizer1.maybeDirty();
    assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test6091() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-546));
    int int0 = byteQuadsCanonicalizer0.calcHash(6000);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int calcHash(int q1) {
    int hash = q1 ^ _seed;
    /* 29-Mar-2015, tatu: Earlier used 15 + 9 right shifts, which worked ok
         *    except for one specific problem case: numbers. So needed to make sure
         *    that all 4 least-significant bits participate in hash. Couple of ways
         *    to work it out, but this is the simplest, fast and seems to do ok.
         */
    // to xor hi- and low- 16-bits
    hash += (hash >>> 16);
    hash ^= (hash >>> 12);
    return hash;
}","public void test6092() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-546));
    int int0 = byteQuadsCanonicalizer0.calcHash(6000);
    assertEquals(60067, int0);
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test6193() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int int0 = byteQuadsCanonicalizer0.calcHash(0, (-998));
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int calcHash(int q1, int q2) {
    // For two quads, let's change algorithm a bit, to spice
    // things up (can do bit more processing anyway)
    int hash = q1;
    // try mixing first and second byte pairs first
    hash += (hash >>> 15);
    // as well as lowest 2 bytes
    hash ^= (hash >>> 9);
    // then add second quad
    hash += (q2 * MULT);
    hash ^= _seed;
    // and shuffle some more
    hash += (hash >>> 16);
    hash ^= (hash >>> 4);
    hash += (hash << 3);
    return hash;
}","public void test6194() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int int0 = byteQuadsCanonicalizer0.calcHash(0, (-998));
    assertEquals((-895122595), int0);
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test6295() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-1599));
    int int0 = byteQuadsCanonicalizer0.calcHash((-704), (-898), 2122);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int calcHash(int q1, int q2, int q3) {
    // use same algorithm as multi-byte, tested to work well
    int hash = q1 ^ _seed;
    hash += (hash >>> 9);
    hash *= MULT3;
    hash += q2;
    hash *= MULT;
    hash += (hash >>> 15);
    hash ^= q3;
    // 26-Mar-2015, tatu: As per two-quad case, a short shift seems to help more here
    hash += (hash >>> 4);
    hash += (hash >>> 15);
    hash ^= (hash << 9);
    return hash;
}","public void test6296() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-1599));
    int int0 = byteQuadsCanonicalizer0.calcHash((-704), (-898), 2122);
    assertEquals(628642162, int0);
}",""
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test6397() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(0);
    int int0 = byteQuadsCanonicalizer0.spilloverCount();
    assertEquals(0, int0);
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"public int hashSeed() {
    return _seed;
}","public void test6398() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(0);
    int int0 = byteQuadsCanonicalizer0.spilloverCount();
    assertEquals(0, byteQuadsCanonicalizer0.hashSeed());
}",""
"static int _calcTertiaryShift(int primarySlots) {
    // first: we only get 1/4 of slots of primary, to divide
    int tertSlots = (primarySlots) >> 2;
    // default is for buckets of 4 slots (each 4 ints, i.e. 1 << 4)
    if (tertSlots < 64) {
        return 4;
    }
    if (tertSlots <= 256) {
        // buckets of 8 slots (up to 256 == 32 x 8)
        return 5;
    }
    if (tertSlots <= 1024) {
        // buckets of 16 slots (up to 1024 == 64 x 16)
        return 6;
    }
    // and biggest buckets have 32 slots
    return 7;
}","public void test6499() throws Throwable {
    int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(4276);
    assertEquals(7, int0);
}",""
"static int _calcTertiaryShift(int primarySlots) {
    // first: we only get 1/4 of slots of primary, to divide
    int tertSlots = (primarySlots) >> 2;
    // default is for buckets of 4 slots (each 4 ints, i.e. 1 << 4)
    if (tertSlots < 64) {
        return 4;
    }
    if (tertSlots <= 256) {
        // buckets of 8 slots (up to 256 == 32 x 8)
        return 5;
    }
    if (tertSlots <= 1024) {
        // buckets of 16 slots (up to 1024 == 64 x 16)
        return 6;
    }
    // and biggest buckets have 32 slots
    return 7;
}","public void test65100() throws Throwable {
    int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(1893);
    assertEquals(6, int0);
}",""
"static int _calcTertiaryShift(int primarySlots) {
    // first: we only get 1/4 of slots of primary, to divide
    int tertSlots = (primarySlots) >> 2;
    // default is for buckets of 4 slots (each 4 ints, i.e. 1 << 4)
    if (tertSlots < 64) {
        return 4;
    }
    if (tertSlots <= 256) {
        // buckets of 8 slots (up to 256 == 32 x 8)
        return 5;
    }
    if (tertSlots <= 1024) {
        // buckets of 16 slots (up to 1024 == 64 x 16)
        return 6;
    }
    // and biggest buckets have 32 slots
    return 7;
}","public void test66101() throws Throwable {
    int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(507);
    assertEquals(5, int0);
}",""
"protected void _reportTooManyCollisions() {
    // First: do not fuzz about small symbol tables; may get balanced by doubling up
    if (_hashSize <= 1024) {
        // would have spill-over area of 128 entries
        return;
    }
    throw new IllegalStateException(""Spill-over slots in symbol table with "" + _count + "" entries, hash area of "" + _hashSize + "" slots is now full (all "" + (_hashSize >> 3) + "" slots -- suspect a DoS attack based on hash collisions."" + "" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`"");
}","public void test67102() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1707);
    byteQuadsCanonicalizer0._hashSize = 1120185;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0._reportTooManyCollisions();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Spill-over slots in symbol table with 0 entries, hash area of 1120185 slots is now full (all 140023 slots -- suspect a DoS attack based on hash collisions. You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String findName(int[] q, int qlen) {
    /* This version differs significantly, because longer names do not fit within cell.
         * Rather, they contain hash in main slot, and offset+length to extension area
         * that contains actual quads.
         */
    if (qlen < 4) {
        // another sanity check
        if (qlen == 3) {
            return findName(q[0], q[1], q[2]);
        }
        if (qlen == 2) {
            return findName(q[0], q[1]);
        }
        return findName(q[0]);
    }
    final int hash = calcHash(q, qlen);
    int offset = _calcOffset(hash);
    final int[] hashArea = _hashArea;
    final int len = hashArea[offset + 3];
    if ((hash == hashArea[offset]) && (len == qlen)) {
        // probable but not guaranteed: verify
        if (_verifyLongName(q, qlen, hashArea[offset + 1])) {
            return _names[offset >> 2];
        }
    }
    if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary?
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    final int len2 = hashArea[offset2 + 3];
    if ((hash == hashArea[offset2]) && (len2 == qlen)) {
        if (_verifyLongName(q, qlen, hashArea[offset2 + 1])) {
            return _names[offset2 >> 2];
        }
    }
    if (len == 0) {
        // empty slot? Short-circuit if no more spillovers
        return null;
    }
    return _findSecondary(offset, hash, q, qlen);
}","public void test68103() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[9];
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.findName(intArray0, 4);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public int calcHash(int[] q, int qlen) {
    if (qlen < 4) {
        throw new IllegalArgumentException();
    }
    /* And then change handling again for ""multi-quad"" case; mostly
         * to make calculation of collisions less fun. For example,
         * add seed bit later in the game, and switch plus/xor around,
         * use different shift lengths.
         */
    int hash = q[0] ^ _seed;
    hash += (hash >>> 9);
    hash += q[1];
    hash += (hash >>> 15);
    hash *= MULT;
    hash ^= q[2];
    hash += (hash >>> 4);
    for (int i = 3; i < qlen; ++i) {
        int next = q[i];
        next = next ^ (next >> 21);
        hash += next;
    }
    hash *= MULT2;
    // and finally shuffle some more once done
    hash += (hash >>> 19);
    hash ^= (hash << 5);
    return hash;
}","public void test69104() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[1];
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.calcHash(intArray0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"/*
    /**********************************************************
    /* API, mutators
    /**********************************************************
     */
public String addName(String name, int q1) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset = _findOffsetForAdd(calcHash(q1));
    _hashArea[offset] = q1;
    _hashArea[offset + 3] = 1;
    _names[offset >> 2] = name;
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test70105() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(7);
    int[] intArray0 = new int[8];
    intArray0[3] = 7;
    byteQuadsCanonicalizer0._hashArea = intArray0;
    byteQuadsCanonicalizer0._spilloverEnd = 7;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName(""w|cN^aF"", 7);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 10
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public int primaryCount() {
    int count = 0;
    for (int offset = 3, end = _secondaryStart; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test71106() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    byteQuadsCanonicalizer1._count = 1902;
    byteQuadsCanonicalizer1._spilloverEnd = 1902;
    byteQuadsCanonicalizer1.addName(""($&ki{s"", 1902, 1902, 0);
    assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
}","/**
 * Method mostly needed by unit tests; calculates number of
 * entries that are in the primary slot set. These are
 * ""perfect"" entries, accessible with a single lookup
 */"
"public String addName(String name, int[] q, int qlen) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset;
    switch(qlen) {
        case 1:
            {
                offset = _findOffsetForAdd(calcHash(q[0]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 3] = 1;
            }
            break;
        case 2:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 3] = 2;
            }
            break;
        case 3:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 2] = q[2];
                _hashArea[offset + 3] = 3;
            }
            break;
        default:
            final int hash = calcHash(q, qlen);
            offset = _findOffsetForAdd(hash);
            _hashArea[offset] = hash;
            int longStart = _appendLongName(q, qlen);
            _hashArea[offset + 1] = longStart;
            _hashArea[offset + 3] = qlen;
    }
    // plus add the actual String
    _names[offset >> 2] = name;
    // and finally; see if we really should rehash.
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test72107() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int[] intArray0 = new int[6];
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName(""Failed copy(): "", intArray0, 2);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String addName(String name, int q1, int q2) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);
    int offset = _findOffsetForAdd(hash);
    _hashArea[offset] = q1;
    _hashArea[offset + 1] = q2;
    _hashArea[offset + 3] = 2;
    _names[offset >> 2] = name;
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test73108() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1));
    byteQuadsCanonicalizer1.addName(""U%I4h|ch2F"", 1902);
    byteQuadsCanonicalizer1._count = 1902;
    byteQuadsCanonicalizer1.addName(""($&ki{s"", 1902, 1902, 0);
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer1.addName(""($&ki{s"", 0, (-1916));
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Failed rehash(): old count=1903, copyCount=2
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"/*
    /**********************************************************
    /* API, mutators
    /**********************************************************
     */
public String addName(String name, int q1) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset = _findOffsetForAdd(calcHash(q1));
    _hashArea[offset] = q1;
    _hashArea[offset + 3] = 1;
    _names[offset >> 2] = name;
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test74109() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1156);
    byteQuadsCanonicalizer1._count = 1156;
    byteQuadsCanonicalizer1.addName(""($&ki{s"", 1156, 1156, 0);
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer1.addName((String) null, 0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Failed rehash(): old count=1157, copyCount=1
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String addName(String name, int q1, int q2, int q3) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int offset = _findOffsetForAdd(calcHash(q1, q2, q3));
    _hashArea[offset] = q1;
    _hashArea[offset + 1] = q2;
    _hashArea[offset + 2] = q3;
    _hashArea[offset + 3] = 3;
    _names[offset >> 2] = name;
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test75110() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName(""($&ki{s"", 0, 0, 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String addName(String name, int q1, int q2) {
    _verifySharing();
    if (_intern) {
        name = InternCache.instance.intern(name);
    }
    int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);
    int offset = _findOffsetForAdd(hash);
    _hashArea[offset] = q1;
    _hashArea[offset + 1] = q2;
    _hashArea[offset + 3] = 2;
    _names[offset >> 2] = name;
    ++_count;
    _verifyNeedForRehash();
    return name;
}","public void test76111() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.addName(""W2kvM`gi}5(gPbyz"", 0, 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String findName(int q1, int q2) {
    int offset = _calcOffset(calcHash(q1, q2));
    final int[] hashArea = _hashArea;
    int len = hashArea[offset + 3];
    if (len == 2) {
        if ((q1 == hashArea[offset]) && (q2 == hashArea[offset + 1])) {
            return _names[offset >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary?
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    len = hashArea[offset2 + 3];
    if (len == 2) {
        if ((q1 == hashArea[offset2]) && (q2 == hashArea[offset2 + 1])) {
            return _names[offset2 >> 2];
        }
    } else if (len == 0) {
        // empty slot? Short-circuit if no more spillovers
        return null;
    }
    return _findSecondary(offset, q1, q2);
}","public void test77112() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(19);
    int[] intArray0 = new int[4];
    intArray0[0] = 19;
    intArray0[1] = 19;
    intArray0[3] = 19;
    byteQuadsCanonicalizer0._hashArea = intArray0;
    String string0 = byteQuadsCanonicalizer0.findName(19, 0);
    assertNull(string0);
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test78113() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(19);
    int[] intArray0 = new int[4];
    intArray0[0] = 19;
    intArray0[3] = 19;
    byteQuadsCanonicalizer0._hashArea = intArray0;
    byteQuadsCanonicalizer0.findName(19, 0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"/*
    /**********************************************************
    /* Public API, accessing symbols
    /**********************************************************
     */
public String findName(int q1) {
    int offset = _calcOffset(calcHash(q1));
    // first: primary match?
    final int[] hashArea = _hashArea;
    int len = hashArea[offset + 3];
    if (len == 1) {
        if (hashArea[offset] == q1) {
            return _names[offset >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary? single slot shared by N/2 primaries
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    len = hashArea[offset2 + 3];
    if (len == 1) {
        if (hashArea[offset2] == q1) {
            return _names[offset2 >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // tertiary lookup & spillovers best to offline
    return _findSecondary(offset, q1);
}","public void test79114() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(7);
    int[] intArray0 = new int[8];
    intArray0[0] = 7;
    intArray0[3] = 7;
    byteQuadsCanonicalizer0._hashArea = intArray0;
    byteQuadsCanonicalizer0._spilloverEnd = 7;
    String string0 = byteQuadsCanonicalizer0.findName(7);
    assertNull(string0);
}",""
"public String findName(int[] q, int qlen) {
    /* This version differs significantly, because longer names do not fit within cell.
         * Rather, they contain hash in main slot, and offset+length to extension area
         * that contains actual quads.
         */
    if (qlen < 4) {
        // another sanity check
        if (qlen == 3) {
            return findName(q[0], q[1], q[2]);
        }
        if (qlen == 2) {
            return findName(q[0], q[1]);
        }
        return findName(q[0]);
    }
    final int hash = calcHash(q, qlen);
    int offset = _calcOffset(hash);
    final int[] hashArea = _hashArea;
    final int len = hashArea[offset + 3];
    if ((hash == hashArea[offset]) && (len == qlen)) {
        // probable but not guaranteed: verify
        if (_verifyLongName(q, qlen, hashArea[offset + 1])) {
            return _names[offset >> 2];
        }
    }
    if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary?
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    final int len2 = hashArea[offset2 + 3];
    if ((hash == hashArea[offset2]) && (len2 == qlen)) {
        if (_verifyLongName(q, qlen, hashArea[offset2 + 1])) {
            return _names[offset2 >> 2];
        }
    }
    if (len == 0) {
        // empty slot? Short-circuit if no more spillovers
        return null;
    }
    return _findSecondary(offset, hash, q, qlen);
}","public void test80115() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(2);
    int[] intArray0 = new int[5];
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.findName(intArray0, 2);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public String findName(int[] q, int qlen) {
    /* This version differs significantly, because longer names do not fit within cell.
         * Rather, they contain hash in main slot, and offset+length to extension area
         * that contains actual quads.
         */
    if (qlen < 4) {
        // another sanity check
        if (qlen == 3) {
            return findName(q[0], q[1], q[2]);
        }
        if (qlen == 2) {
            return findName(q[0], q[1]);
        }
        return findName(q[0]);
    }
    final int hash = calcHash(q, qlen);
    int offset = _calcOffset(hash);
    final int[] hashArea = _hashArea;
    final int len = hashArea[offset + 3];
    if ((hash == hashArea[offset]) && (len == qlen)) {
        // probable but not guaranteed: verify
        if (_verifyLongName(q, qlen, hashArea[offset + 1])) {
            return _names[offset >> 2];
        }
    }
    if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary?
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    final int len2 = hashArea[offset2 + 3];
    if ((hash == hashArea[offset2]) && (len2 == qlen)) {
        if (_verifyLongName(q, qlen, hashArea[offset2 + 1])) {
            return _names[offset2 >> 2];
        }
    }
    if (len == 0) {
        // empty slot? Short-circuit if no more spillovers
        return null;
    }
    return _findSecondary(offset, hash, q, qlen);
}","public void test81116() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(6);
    int[] intArray0 = new int[3];
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.findName(intArray0, 3);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"public int hashSeed() {
    return _seed;
}","public void test82117() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(37);
    byteQuadsCanonicalizer1.findName(1, 3795, (-2408));
    assertEquals((-80), byteQuadsCanonicalizer1.hashSeed());
}",""
"public int bucketCount() {
    return _hashSize;
}","public void test82118() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(37);
    byteQuadsCanonicalizer1.findName(1, 3795, (-2408));
    assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
}","/**
 * Returns number of primary slots table has currently
 */"
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test83119() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(19);
    int[] intArray0 = new int[4];
    intArray0[3] = 19;
    byteQuadsCanonicalizer0._hashArea = intArray0;
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test83120() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(19);
    int[] intArray0 = new int[4];
    intArray0[3] = 19;
    byteQuadsCanonicalizer0._hashArea = intArray0;
    byteQuadsCanonicalizer0.findName(19, 0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test84121() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(37);
    byteQuadsCanonicalizer1.findName(37, (-2408));
    assertEquals(0, byteQuadsCanonicalizer1.size());
}",""
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test84122() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(37);
    byteQuadsCanonicalizer1.findName(37, (-2408));
    assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"public int bucketCount() {
    return _hashSize;
}","public void test84123() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(37);
    byteQuadsCanonicalizer1.findName(37, (-2408));
    assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
}","/**
 * Returns number of primary slots table has currently
 */"
"public int hashSeed() {
    return _seed;
}","public void test84124() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(37);
    byteQuadsCanonicalizer1.findName(37, (-2408));
    assertEquals((-80), byteQuadsCanonicalizer1.hashSeed());
}",""
"public int primaryCount() {
    int count = 0;
    for (int offset = 3, end = _secondaryStart; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test85125() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1166);
    int[] intArray0 = new int[1];
    byteQuadsCanonicalizer1.addName(""UkI4h|ch2F"", 0);
    byteQuadsCanonicalizer1.findName(intArray0, (-1756));
    assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
}","/**
 * Method mostly needed by unit tests; calculates number of
 * entries that are in the primary slot set. These are
 * ""perfect"" entries, accessible with a single lookup
 */"
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test85126() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1166);
    int[] intArray0 = new int[1];
    byteQuadsCanonicalizer1.addName(""UkI4h|ch2F"", 0);
    byteQuadsCanonicalizer1.findName(intArray0, (-1756));
    assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"/*
    /**********************************************************
    /* Public API, accessing symbols
    /**********************************************************
     */
public String findName(int q1) {
    int offset = _calcOffset(calcHash(q1));
    // first: primary match?
    final int[] hashArea = _hashArea;
    int len = hashArea[offset + 3];
    if (len == 1) {
        if (hashArea[offset] == q1) {
            return _names[offset >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary? single slot shared by N/2 primaries
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    len = hashArea[offset2 + 3];
    if (len == 1) {
        if (hashArea[offset2] == q1) {
            return _names[offset2 >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // tertiary lookup & spillovers best to offline
    return _findSecondary(offset, q1);
}","public void test86127() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(7);
    int[] intArray0 = new int[8];
    byteQuadsCanonicalizer0._hashArea = intArray0;
    String string0 = byteQuadsCanonicalizer0.findName(7);
    assertNull(string0);
}",""
"public int primaryCount() {
    int count = 0;
    for (int offset = 3, end = _secondaryStart; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test87128() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(37);
    byteQuadsCanonicalizer1.addName("""", (-2089), (-2089));
    int int0 = byteQuadsCanonicalizer1.totalCount();
    assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
}","/**
 * Method mostly needed by unit tests; calculates number of
 * entries that are in the primary slot set. These are
 * ""perfect"" entries, accessible with a single lookup
 */"
"public int totalCount() {
    int count = 0;
    for (int offset = 3, end = (_hashSize << 3); offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test87129() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(37);
    byteQuadsCanonicalizer1.addName("""", (-2089), (-2089));
    int int0 = byteQuadsCanonicalizer1.totalCount();
    assertEquals(1, int0);
}",""
"public int tertiaryCount() {
    int count = 0;
    // to 1.5x, starting point of tertiary
    int offset = _tertiaryStart + 3;
    for (int end = offset + _hashSize; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test88130() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(3507);
    int[] intArray0 = new int[9];
    intArray0[3] = 3507;
    byteQuadsCanonicalizer0._hashArea = intArray0;
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer1._parent;
    byteQuadsCanonicalizer2._hashSize = 3507;
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer2.tertiaryCount();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 11
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in tertiary buckets
 */"
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test89131() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1156);
    byteQuadsCanonicalizer1.addName(""UkI4h|ch2F"", 0);
    byteQuadsCanonicalizer1.addName((String) null, 0);
    int int0 = byteQuadsCanonicalizer1.secondaryCount();
    assertEquals(2, byteQuadsCanonicalizer1.size());
}",""
"public int secondaryCount() {
    int count = 0;
    int offset = _secondaryStart + 3;
    for (int end = _tertiaryStart; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test89132() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1156);
    byteQuadsCanonicalizer1.addName(""UkI4h|ch2F"", 0);
    byteQuadsCanonicalizer1.addName((String) null, 0);
    int int0 = byteQuadsCanonicalizer1.secondaryCount();
    assertEquals(1, int0);
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in secondary buckets
 */"
"public boolean maybeDirty() {
    return !_hashShared;
}","public void test90133() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-80));
    byteQuadsCanonicalizer1.addName("""", (-2089), (-2089));
    int int0 = byteQuadsCanonicalizer1.primaryCount();
    assertTrue(byteQuadsCanonicalizer1.maybeDirty());
}","/**
 * Method called to check to quickly see if a child symbol table
 * may have gotten additional entries. Used for checking to see
 * if a child table should be merged into shared table.
 */"
"public int primaryCount() {
    int count = 0;
    for (int offset = 3, end = _secondaryStart; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","public void test90134() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-80));
    byteQuadsCanonicalizer1.addName("""", (-2089), (-2089));
    int int0 = byteQuadsCanonicalizer1.primaryCount();
    assertEquals(1, int0);
}","/**
 * Method mostly needed by unit tests; calculates number of
 * entries that are in the primary slot set. These are
 * ""perfect"" entries, accessible with a single lookup
 */"
"public int hashSeed() {
    return _seed;
}","public void test91135() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(33);
    int int0 = byteQuadsCanonicalizer0.size();
    assertEquals(33, byteQuadsCanonicalizer0.hashSeed());
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test91136() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(33);
    int int0 = byteQuadsCanonicalizer0.size();
    assertEquals(0, int0);
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test92137() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
    byteQuadsCanonicalizer1.release();
    assertEquals(0, byteQuadsCanonicalizer1.size());
}",""
"public int bucketCount() {
    return _hashSize;
}","public void test92138() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
    byteQuadsCanonicalizer1.release();
    assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
}","/**
 * Returns number of primary slots table has currently
 */"
"public int hashSeed() {
    return _seed;
}","public void test92139() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
    byteQuadsCanonicalizer1.release();
    assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
}",""
"public boolean maybeDirty() {
    return !_hashShared;
}","public void test92140() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
    byteQuadsCanonicalizer1.release();
    assertFalse(byteQuadsCanonicalizer1.maybeDirty());
}","/**
 * Method called to check to quickly see if a child symbol table
 * may have gotten additional entries. Used for checking to see
 * if a child table should be merged into shared table.
 */"
"public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","public void test92141() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
    byteQuadsCanonicalizer1.release();
    assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
}","/**
 * Method mostly needed by unit tests; calculates number of entries
 * in shared spillover area
 */"
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test93142() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byteQuadsCanonicalizer0.release();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int hashSeed() {
    return _seed;
}","public void test93143() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byteQuadsCanonicalizer0.release();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test94144() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(6);
    int int0 = byteQuadsCanonicalizer0.bucketCount();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int hashSeed() {
    return _seed;
}","public void test94145() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(6);
    int int0 = byteQuadsCanonicalizer0.bucketCount();
    assertEquals(6, byteQuadsCanonicalizer0.hashSeed());
}",""
"public int bucketCount() {
    return _hashSize;
}","public void test94146() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(6);
    int int0 = byteQuadsCanonicalizer0.bucketCount();
    assertEquals(0, int0);
}","/**
 * Returns number of primary slots table has currently
 */"
"public String findName(int q1, int q2, int q3) {
    int offset = _calcOffset(calcHash(q1, q2, q3));
    final int[] hashArea = _hashArea;
    int len = hashArea[offset + 3];
    if (len == 3) {
        if ((q1 == hashArea[offset]) && (hashArea[offset + 1] == q2) && (hashArea[offset + 2] == q3)) {
            return _names[offset >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary?
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    len = hashArea[offset2 + 3];
    if (len == 3) {
        if ((q1 == hashArea[offset2]) && (hashArea[offset2 + 1] == q2) && (hashArea[offset2 + 2] == q3)) {
            return _names[offset2 >> 2];
        }
    } else if (len == 0) {
        // empty slot? Short-circuit if no more spillovers
        return null;
    }
    return _findSecondary(offset, q1, q2, q3);
}","public void test95147() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    // Undeclared exception!
    try {
        byteQuadsCanonicalizer0.findName(1, 3795, (-2408));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test96148() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int int0 = byteQuadsCanonicalizer0.hashSeed();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",""
"public int hashSeed() {
    return _seed;
}","public void test96149() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    int int0 = byteQuadsCanonicalizer0.hashSeed();
    assertEquals(839877741, int0);
}",""
"/*
    /**********************************************************
    /* API, accessors
    /**********************************************************
     */
public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","public void test97150() throws Throwable {
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-80));
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(37);
    byteQuadsCanonicalizer1.addName("""", (-2089), (-2089));
    byteQuadsCanonicalizer1.release();
    assertEquals(1, byteQuadsCanonicalizer1.size());
}",""
