focal_method,test_prefix,docstring
"@Override
public int nextIntValue(int defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test0000() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byte[] byteArray1 = new byte[21];
    byteArray1[0] = (byte) 78;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 35, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 52, 0, false);
    try {
        uTF8StreamJsonParser0.nextIntValue((-873));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'N\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000': was expecting 'null', 'true', 'false' or NaN
        //  at [Source: UNKNOWN; line: 1, column: -29]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseMediumName(int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Ok, got 5 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    return parseMediumName2(i, q2);
}","public void test0011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[6];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_NAME_COPY_BUFFER, false);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (-544), false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.parseMediumName(0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 6
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test0022() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[21];
    byteArray0[1] = (byte) 34;
    byteArray0[2] = (byte) (-124);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 3, true);
    uTF8StreamJsonParser0.nextValue();
    try {
        uTF8StreamJsonParser0.nextIntValue((byte) (-124));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0x84
        //  at [Source: UNKNOWN; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public int getTextOffset() throws IOException {
    // Most have offset of 0, only some may have other values:
    if (_currToken != null) {
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                return 0;
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextOffset();
            default:
        }
    }
    return 0;
}","public void test0033() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 34;
    byteArray0[2] = (byte) (-32);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 928, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 53, 53, false);
    uTF8StreamJsonParser0.nextValue();
    try {
        uTF8StreamJsonParser0.getTextOffset();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: UNKNOWN; line: 1, column: 5]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseMediumName(int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Ok, got 5 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    return parseMediumName2(i, q2);
}","public void test0044() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-52);
    byteArray0[1] = (byte) (-52);
    byteArray0[2] = (byte) (-52);
    byteArray0[3] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-52), 0, false);
    uTF8StreamJsonParser0._loadToHaveAtLeast((byte) (-52));
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.parseMediumName(0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 6
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"@SuppressWarnings(""unchecked"")
public <T extends TreeNode> T readValueAsTree() throws IOException {
    return (T) _codec().readTree(this);
}","public void test0055() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 93, 93);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-13), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.readValueAsTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No ObjectCodec defined for parser, needed for deserialization
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method to deserialize JSON content into equivalent ""tree model"",
 * represented by root {@link TreeNode} of resulting model.
 * For JSON Arrays it will an array node (with child nodes),
 * for objects object node (with child nodes), and for other types
 * matching leaf node type. Empty or whitespace documents are null.
 *
 * @return root of the document, or null if empty or whitespace.
 */"
"@Override
public boolean isClosed() {
    return _closed;
}","public void test0066() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[2];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-55), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-55), (-522), false);
    uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
    assertFalse(uTF8StreamJsonParser0.isClosed());
}",""
"@Override
public Object getInputSource() {
    return _inputStream;
}","public void test0077() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 0, true);
    Object object0 = uTF8StreamJsonParser0.getInputSource();
    assertSame(byteArrayInputStream0, object0);
}",""
"/*
    /**********************************************************
    /* Overrides for life-cycle
    /**********************************************************
     */
@Override
public int releaseBuffered(OutputStream out) throws IOException {
    int count = _inputEnd - _inputPtr;
    if (count < 1) {
        return 0;
    }
    // let's just advance ptr to end
    int origPtr = _inputPtr;
    out.write(_inputBuffer, origPtr, count);
    return count;
}","public void test0088() throws Throwable {
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 31, 4098, true);
    ByteArrayBuilder byteArrayBuilder0 = uTF8StreamJsonParser0._getByteArrayBuilder();
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",""
"/*
    /**********************************************************
    /* Overrides for life-cycle
    /**********************************************************
     */
@Override
public int releaseBuffered(OutputStream out) throws IOException {
    int count = _inputEnd - _inputPtr;
    if (count < 1) {
        return 0;
    }
    // let's just advance ptr to end
    int origPtr = _inputPtr;
    out.write(_inputBuffer, origPtr, count);
    return count;
}","public void test0099() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 63, pushbackInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 2, 0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 683);
    int int0 = uTF8StreamJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, int0);
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected String _parseAposName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test01010() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""DOUBLE"", false);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 786, 3);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 128, (byte) 1, false);
    uTF8StreamJsonParser0.nextIntValue(128);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input: was expecting closing ''' for name
        //  at [Source: java.lang.String@0000000009; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"public final int id() {
    return _id;
}","public void test01111() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
    byte[] byteArray0 = new byte[0];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1859, mockFileInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 2, 2, false);
    JsonToken jsonToken0 = uTF8StreamJsonParser0._parsePosNumber((-523));
    assertEquals(7, jsonToken0.id());
}",""
"protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        final int ptr = _inputPtr;
        _currInputProcessed += ptr;
        _currInputRowStart -= ptr;
        // 26-Nov-2015, tatu: Since name-offset requires it too, must offset
        //  (note: probably has little effect here but just in case)
        _nameStartOffset -= ptr;
        System.arraycopy(_inputBuffer, ptr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01212() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 102, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, true);
    boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast(3);
    assertFalse(boolean0);
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        final int ptr = _inputPtr;
        _currInputProcessed += ptr;
        _currInputRowStart -= ptr;
        // 26-Nov-2015, tatu: Since name-offset requires it too, must offset
        //  (note: probably has little effect here but just in case)
        _nameStartOffset -= ptr;
        System.arraycopy(_inputBuffer, ptr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01313() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
    IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 238, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 127, 1395, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._loadToHaveAtLeast(1723);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        final int ptr = _inputPtr;
        _currInputProcessed += ptr;
        _currInputRowStart -= ptr;
        // 26-Nov-2015, tatu: Since name-offset requires it too, must offset
        //  (note: probably has little effect here but just in case)
        _nameStartOffset -= ptr;
        System.arraycopy(_inputBuffer, ptr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01414() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""DOUBLE"", false);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 1, false);
    try {
        uTF8StreamJsonParser0._loadToHaveAtLeast(42);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // InputStream.read() returned 0 characters when trying to read -1 bytes
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        final int ptr = _inputPtr;
        _currInputProcessed += ptr;
        _currInputRowStart -= ptr;
        // 26-Nov-2015, tatu: Since name-offset requires it too, must offset
        //  (note: probably has little effect here but just in case)
        _nameStartOffset -= ptr;
        System.arraycopy(_inputBuffer, ptr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01516() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 1, true);
    boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast(1363);
    assertFalse(boolean0);
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test01617() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 1, 0, true);
    uTF8StreamJsonParser0._releaseBuffers();
    assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
}",""
"/*
    /**********************************************************
    /* Public API, data access
    /**********************************************************
     */
@Override
public String getText() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            return _finishAndReturnString();
        }
        return _textBuffer.contentsAsString();
    }
    return _getText2(_currToken);
}","public void test01718() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 15, 0, true);
    String string0 = uTF8StreamJsonParser0.getText();
    assertNull(string0);
}",""
"@Override
public String nextTextValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_STRING) {
            if (_tokenIncomplete) {
                _tokenIncomplete = false;
                return _finishAndReturnString();
            }
            return _textBuffer.contentsAsString();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
}","public void test01819() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 34;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 147, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 62, 3, true);
    try {
        uTF8StreamJsonParser0.nextTextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: UNKNOWN; line: 1, column: -56]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"// // // Let's override default impls for improved performance
// @since 2.1
@Override
public String getValueAsString() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            return _finishAndReturnString();
        }
        return _textBuffer.contentsAsString();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return getCurrentName();
    }
    return super.getValueAsString(null);
}","public void test01920() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 35, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 52, 0, false);
    String string0 = uTF8StreamJsonParser0.getValueAsString();
    assertNull(string0);
}",""
"// @since 2.1
@Override
public String getValueAsString(String defValue) throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            return _finishAndReturnString();
        }
        return _textBuffer.contentsAsString();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return getCurrentName();
    }
    return super.getValueAsString(defValue);
}","public void test02021() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 34, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 55, 3, true);
    String string0 = uTF8StreamJsonParser0.getValueAsString((String) null);
    assertNull(string0);
}",""
"// since 2.6
@Override
public int getValueAsInt() throws IOException {
    JsonToken t = _currToken;
    if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
        // inlined 'getIntValue()'
        if ((_numTypesValid & NR_INT) == 0) {
            if (_numTypesValid == NR_UNKNOWN) {
                return _parseIntValue();
            }
            if ((_numTypesValid & NR_INT) == 0) {
                convertNumberToInt();
            }
        }
        return _numberInt;
    }
    return super.getValueAsInt(0);
}","public void test02122() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-52), (byte) (-52), true);
    int int0 = uTF8StreamJsonParser0.getValueAsInt();
    assertEquals(0, int0);
}",""
"// since 2.6
@Override
public int getValueAsInt(int defValue) throws IOException {
    JsonToken t = _currToken;
    if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
        // inlined 'getIntValue()'
        if ((_numTypesValid & NR_INT) == 0) {
            if (_numTypesValid == NR_UNKNOWN) {
                return _parseIntValue();
            }
            if ((_numTypesValid & NR_INT) == 0) {
                convertNumberToInt();
            }
        }
        return _numberInt;
    }
    return super.getValueAsInt(defValue);
}","public void test02223() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1, false);
    int int0 = uTF8StreamJsonParser0.getValueAsInt(55);
    assertEquals(55, int0);
}",""
"protected final String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02324() throws Throwable {
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    byte[] byteArray0 = new byte[12];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext((BufferRecycler) null, mockFileInputStream0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 43, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1784, (-1684), false);
    JsonToken jsonToken0 = JsonToken.FIELD_NAME;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertNull(string0);
}",""
"protected final String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02425() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 15, 0, true);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals("""", string0);
}",""
"protected final String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02526() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 1245, false);
    JsonToken jsonToken0 = JsonToken.VALUE_STRING;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals("""", string0);
}",""
"protected final String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02627() throws Throwable {
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
    byte[] byteArray0 = new byte[1];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 118, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 0, 3, true);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals("""", string0);
}",""
"protected final String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02728() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 125, 2, false);
    JsonToken jsonToken0 = JsonToken.VALUE_NULL;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals(""null"", string0);
}",""
"@Override
public char[] getTextCharacters() throws IOException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                if (!_nameCopied) {
                    String name = _parsingContext.getCurrentName();
                    int nameLen = name.length();
                    if (_nameCopyBuffer == null) {
                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);
                    } else if (_nameCopyBuffer.length < nameLen) {
                        _nameCopyBuffer = new char[nameLen];
                    }
                    name.getChars(0, nameLen, _nameCopyBuffer, 0);
                    _nameCopied = true;
                }
                return _nameCopyBuffer;
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextBuffer();
            default:
                return _currToken.asCharArray();
        }
    }
    return null;
}","public void test02829() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 319);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-5407), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 319, (-5407), true);
    char[] charArray0 = uTF8StreamJsonParser0.getTextCharacters();
    assertNull(charArray0);
}",""
"@Override
public int getTextLength() throws IOException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                return _parsingContext.getCurrentName().length();
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.size();
            default:
                return _currToken.asCharArray().length;
        }
    }
    return 0;
}","public void test02930() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[10];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 200, false);
    int int0 = uTF8StreamJsonParser0.getTextLength();
    assertEquals(0, int0);
}",""
"@Override
public int getTextOffset() throws IOException {
    // Most have offset of 0, only some may have other values:
    if (_currToken != null) {
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                return 0;
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextOffset();
            default:
        }
    }
    return 0;
}","public void test03031() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
    int int0 = uTF8StreamJsonParser0.getTextOffset();
    assertEquals(0, int0);
}",""
"@Override
public int getCurrentTokenId() {
    final JsonToken t = _currToken;
    return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
}","public void test03132() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 55;
    byteArray0[1] = (byte) 55;
    byteArray0[2] = (byte) 9;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 55, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 55, (byte) 0, true);
    uTF8StreamJsonParser0.nextValue();
    uTF8StreamJsonParser0.getTextOffset();
    assertEquals(7, uTF8StreamJsonParser0.getCurrentTokenId());
}",""
"@Override
public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
    // if we have already read the token, just use whatever we may have
    if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING) {
        byte[] b = getBinaryValue(b64variant);
        out.write(b);
        return b.length;
    }
    // otherwise do ""real"" incremental parsing...
    byte[] buf = _ioContext.allocBase64Buffer();
    try {
        return _readBinary(b64variant, out, buf);
    } finally {
        _ioContext.releaseBase64Buffer(buf);
    }
}","public void test03233() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-52), (byte) (-52), true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    try {
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayBuilder0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException {
    int outputPtr = 0;
    final int outputEnd = buffer.length - 3;
    int outputCount = 0;
    while (true) {
        // first, we'll skip preceding white space, if any
        int ch;
        do {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            ch = (int) _inputBuffer[_inputPtr++] & 0xFF;
        } while (ch <= INT_SPACE);
        int bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            // reached the end, fair and square?
            if (ch == INT_QUOTE) {
                break;
            }
            bits = _decodeBase64Escape(b64variant, ch, 0);
            if (bits < 0) {
                // white space to skip
                continue;
            }
        }
        // enough room? If not, flush
        if (outputPtr > outputEnd) {
            outputCount += outputPtr;
            out.write(buffer, 0, outputPtr);
            outputPtr = 0;
        }
        int decodedData = bits;
        // then second base64 char; can't get padding yet, nor ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            bits = _decodeBase64Escape(b64variant, ch, 1);
        }
        decodedData = (decodedData << 6) | bits;
        // third base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        // First branch: can get padding (-> 1 byte)
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""' && !b64variant.usesPadding()) {
                    decodedData >>= 4;
                    buffer[outputPtr++] = (byte) decodedData;
                    break;
                }
                bits = _decodeBase64Escape(b64variant, ch, 2);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                // Ok, must get padding
                if (_inputPtr >= _inputEnd) {
                    loadMoreGuaranteed();
                }
                ch = _inputBuffer[_inputPtr++] & 0xFF;
                if (!b64variant.usesPaddingChar(ch)) {
                    throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                }
                // Got 12 bits, only need 8, need to shift
                decodedData >>= 4;
                buffer[outputPtr++] = (byte) decodedData;
                continue;
            }
        }
        // Nope, 2 or 3 bytes
        decodedData = (decodedData << 6) | bits;
        // fourth and last base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""' && !b64variant.usesPadding()) {
                    decodedData >>= 2;
                    buffer[outputPtr++] = (byte) (decodedData >> 8);
                    buffer[outputPtr++] = (byte) decodedData;
                    break;
                }
                bits = _decodeBase64Escape(b64variant, ch, 3);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                /* With padding we only get 2 bytes; but we have
                     * to shift it a bit so it is identical to triplet
                     * case with partial output.
                     * 3 chars gives 3x6 == 18 bits, of which 2 are
                     * dummies, need to discard:
                     */
                decodedData >>= 2;
                buffer[outputPtr++] = (byte) (decodedData >> 8);
                buffer[outputPtr++] = (byte) decodedData;
                continue;
            }
        }
        // otherwise, our triplet is now complete
        decodedData = (decodedData << 6) | bits;
        buffer[outputPtr++] = (byte) (decodedData >> 16);
        buffer[outputPtr++] = (byte) (decodedData >> 8);
        buffer[outputPtr++] = (byte) decodedData;
    }
    _tokenIncomplete = false;
    if (outputPtr > 0) {
        outputCount += outputPtr;
        out.write(buffer, 0, outputPtr);
    }
    return outputCount;
}","public void test03334() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) (-93);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 192);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 200, 7, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2467);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, mockPrintStream0, byteArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"@Override
public JsonToken nextValue() throws IOException {
    /* Implementation should be as trivial as follows; only
         * needs to change if we are to skip other tokens (for
         * example, if comments were exposed as tokens)
         */
    JsonToken t = nextToken();
    if (t == JsonToken.FIELD_NAME) {
        t = nextToken();
    }
    return t;
}","public void test03435() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) 93;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 13, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 117, (byte) 117, false);
    try {
        uTF8StreamJsonParser0.nextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected close marker ']': expected '}' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000010; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public String nextTextValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_STRING) {
            if (_tokenIncomplete) {
                _tokenIncomplete = false;
                return _finishAndReturnString();
            }
            return _textBuffer.contentsAsString();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
}","public void test03536() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[2] = (byte) 52;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 117, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 117, false);
    try {
        uTF8StreamJsonParser0.nextTextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
        //  at [Source: UNKNOWN; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public long nextLongValue(long defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getLongValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
}","public void test03637() throws Throwable {
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 53;
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, bufferedInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 0, (byte) 30, true);
    try {
        uTF8StreamJsonParser0.nextLongValue((byte) 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
        //  at [Source: java.io.BufferedInputStream@0000000011; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test03738() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 56;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1877), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 4966, (-1877), true);
    try {
        uTF8StreamJsonParser0.nextIntValue(585);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
        //  at [Source: UNKNOWN; line: 1, column: -6840]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, traversal, nextXxxValue/nextFieldName
    /**********************************************************
     */
@Override
public boolean nextFieldName(SerializableString str) throws IOException {
    // // // Note: most of code below is copied from nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        // can't have name right after name
        _nextAfterName();
        return false;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        // end-of-input
        close();
        _currToken = null;
        return false;
    }
    _binaryValue = null;
    // Closing scope?
    if (i == INT_RBRACKET) {
        _updateLocation();
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.clearAndGetParent();
        _currToken = JsonToken.END_ARRAY;
        return false;
    }
    if (i == INT_RCURLY) {
        _updateLocation();
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.clearAndGetParent();
        _currToken = JsonToken.END_OBJECT;
        return false;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.getTypeDesc() + "" entries"");
        }
        i = _skipWS();
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return false;
    }
    // // // This part differs, name parsing
    _updateNameLocation();
    if (i == INT_QUOTE) {
        // when doing literal match, must consider escaping:
        byte[] nameBytes = str.asQuotedUTF8();
        final int len = nameBytes.length;
        // 22-May-2014, tatu: Actually, let's require 4 more bytes for faster skipping
        //    of colon that follows name
        if ((_inputPtr + len + 4) < _inputEnd) {
            // maybe...
            // first check length match by
            final int end = _inputPtr + len;
            if (_inputBuffer[end] == INT_QUOTE) {
                int offset = 0;
                int ptr = _inputPtr;
                while (true) {
                    if (ptr == end) {
                        // yes, match!
                        _parsingContext.setCurrentName(str.getValue());
                        i = _skipColonFast(ptr + 1);
                        _isNextTokenNameYes(i);
                        return true;
                    }
                    if (nameBytes[offset] != _inputBuffer[ptr]) {
                        break;
                    }
                    ++offset;
                    ++ptr;
                }
            }
        }
    }
    return _isNextTokenNameMaybe(i, str);
}","public void test03839() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2504, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-52), (byte) (-52), false);
    SerializedString serializedString0 = new SerializedString(""J9WEl"");
    try {
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token '\u00CC\u0000\u0000\u0000\u0000\u0000': was expecting ('true', 'false' or 'null')
        //  at [Source: UNKNOWN; line: 1, column: 13]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, traversal, nextXxxValue/nextFieldName
    /**********************************************************
     */
@Override
public boolean nextFieldName(SerializableString str) throws IOException {
    // // // Note: most of code below is copied from nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        // can't have name right after name
        _nextAfterName();
        return false;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        // end-of-input
        close();
        _currToken = null;
        return false;
    }
    _binaryValue = null;
    // Closing scope?
    if (i == INT_RBRACKET) {
        _updateLocation();
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.clearAndGetParent();
        _currToken = JsonToken.END_ARRAY;
        return false;
    }
    if (i == INT_RCURLY) {
        _updateLocation();
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.clearAndGetParent();
        _currToken = JsonToken.END_OBJECT;
        return false;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.getTypeDesc() + "" entries"");
        }
        i = _skipWS();
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return false;
    }
    // // // This part differs, name parsing
    _updateNameLocation();
    if (i == INT_QUOTE) {
        // when doing literal match, must consider escaping:
        byte[] nameBytes = str.asQuotedUTF8();
        final int len = nameBytes.length;
        // 22-May-2014, tatu: Actually, let's require 4 more bytes for faster skipping
        //    of colon that follows name
        if ((_inputPtr + len + 4) < _inputEnd) {
            // maybe...
            // first check length match by
            final int end = _inputPtr + len;
            if (_inputBuffer[end] == INT_QUOTE) {
                int offset = 0;
                int ptr = _inputPtr;
                while (true) {
                    if (ptr == end) {
                        // yes, match!
                        _parsingContext.setCurrentName(str.getValue());
                        i = _skipColonFast(ptr + 1);
                        _isNextTokenNameYes(i);
                        return true;
                    }
                    if (nameBytes[offset] != _inputBuffer[ptr]) {
                        break;
                    }
                    ++offset;
                    ++ptr;
                }
            }
        }
    }
    return _isNextTokenNameMaybe(i, str);
}","public void test03940() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 32, 1091);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-399), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 192, 110, true);
    SerializedString serializedString0 = new SerializedString(""&p2:RXo@j"");
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.io.IOContext"", e);
    }
}",""
"@Override
public String nextFieldName() throws IOException {
    // // // Note: this is almost a verbatim copy of nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        _nextAfterName();
        return null;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        close();
        _currToken = null;
        return null;
    }
    _binaryValue = null;
    if (i == INT_RBRACKET) {
        _updateLocation();
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.clearAndGetParent();
        _currToken = JsonToken.END_ARRAY;
        return null;
    }
    if (i == INT_RCURLY) {
        _updateLocation();
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.clearAndGetParent();
        _currToken = JsonToken.END_OBJECT;
        return null;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.getTypeDesc() + "" entries"");
        }
        i = _skipWS();
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return null;
    }
    _updateNameLocation();
    final String nameStr = _parseName(i);
    _parsingContext.setCurrentName(nameStr);
    _currToken = JsonToken.FIELD_NAME;
    i = _skipColon();
    _updateLocation();
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        _nextToken = JsonToken.VALUE_STRING;
        return nameStr;
    }
    JsonToken t;
    switch(i) {
        case '-':
            t = _parseNegNumber();
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parsePosNumber(i);
            break;
        case 'f':
            _matchToken(""false"", 1);
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchToken(""null"", 1);
            t = JsonToken.VALUE_NULL;
            break;
        case 't':
            _matchToken(""true"", 1);
            t = JsonToken.VALUE_TRUE;
            break;
        case '[':
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            t = JsonToken.START_OBJECT;
            break;
        default:
            t = _handleUnexpectedValue(i);
    }
    _nextToken = t;
    return nameStr;
}","public void test04041() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""com.fasterxml.jackson.core.JsonParser$Feature"", false);
    byte[] byteArray0 = new byte[5];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.nextFieldName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.io.IOContext"", e);
    }
}",""
"@Override
public String nextFieldName() throws IOException {
    // // // Note: this is almost a verbatim copy of nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        _nextAfterName();
        return null;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        close();
        _currToken = null;
        return null;
    }
    _binaryValue = null;
    if (i == INT_RBRACKET) {
        _updateLocation();
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.clearAndGetParent();
        _currToken = JsonToken.END_ARRAY;
        return null;
    }
    if (i == INT_RCURLY) {
        _updateLocation();
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.clearAndGetParent();
        _currToken = JsonToken.END_OBJECT;
        return null;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.getTypeDesc() + "" entries"");
        }
        i = _skipWS();
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return null;
    }
    _updateNameLocation();
    final String nameStr = _parseName(i);
    _parsingContext.setCurrentName(nameStr);
    _currToken = JsonToken.FIELD_NAME;
    i = _skipColon();
    _updateLocation();
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        _nextToken = JsonToken.VALUE_STRING;
        return nameStr;
    }
    JsonToken t;
    switch(i) {
        case '-':
            t = _parseNegNumber();
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parsePosNumber(i);
            break;
        case 'f':
            _matchToken(""false"", 1);
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchToken(""null"", 1);
            t = JsonToken.VALUE_NULL;
            break;
        case 't':
            _matchToken(""true"", 1);
            t = JsonToken.VALUE_TRUE;
            break;
        case '[':
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            t = JsonToken.START_OBJECT;
            break;
        default:
            t = _handleUnexpectedValue(i);
    }
    _nextToken = t;
    return nameStr;
}","public void test04142() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2048, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 2, false);
    try {
        uTF8StreamJsonParser0.nextFieldName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token '\u00CC\u0000\u0000\u0000': was expecting ('true', 'false' or 'null')
        //  at [Source: UNKNOWN; line: 1, column: 8]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public int getCurrentTokenId() {
    final JsonToken t = _currToken;
    return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
}","public void test04344() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Exponent indicator not followed by a digit"", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 55;
    byteArray0[1] = (byte) 9;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 11, (-32), true);
    int int0 = uTF8StreamJsonParser0.nextIntValue(1814);
    assertEquals(7, uTF8StreamJsonParser0.getCurrentTokenId());
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test04345() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Exponent indicator not followed by a digit"", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 55;
    byteArray0[1] = (byte) 9;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 11, (-32), true);
    int int0 = uTF8StreamJsonParser0.nextIntValue(1814);
    assertEquals(7, int0);
}",""
"@Override
public long nextLongValue(long defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getLongValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
}","public void test04447() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 15, 0, true);
    uTF8StreamJsonParser0._skipCR();
    UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1242, 15, false);
    long long0 = uTF8StreamJsonParser1.nextLongValue((-1L));
    assertEquals((-1L), long0);
}",""
"public int getTokenColumnNr() {
    // note: value of -1 means ""not available""; otherwise convert from 0-based to 1-based
    int col = _tokenInputCol;
    return (col < 0) ? col : (col + 1);
}","public void test04548() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 9;
    byteArray0[1] = (byte) 9;
    byteArray0[2] = (byte) 9;
    byteArray0[3] = (byte) 55;
    byteArray0[4] = (byte) 9;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 9, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 9, (byte) 9, true);
    long long0 = uTF8StreamJsonParser0.nextLongValue((byte) 9);
    assertEquals(5, uTF8StreamJsonParser0.getTokenColumnNr());
}",""
"@Override
public long nextLongValue(long defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getLongValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
}","public void test04549() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 9;
    byteArray0[1] = (byte) 9;
    byteArray0[2] = (byte) 9;
    byteArray0[3] = (byte) 55;
    byteArray0[4] = (byte) 9;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 9, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 9, (byte) 9, true);
    long long0 = uTF8StreamJsonParser0.nextLongValue((byte) 9);
    assertEquals(7L, long0);
}",""
"@Override
public Boolean nextBooleanValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","public void test04650() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: UNKNOWN; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parsePosNumber(int c) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[0] = (char) c;
    int intLen = 1;
    int outPtr = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    // 1 == outPtr
    int end = _inputPtr + outBuf.length - 1;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // split across boundary, offline
            return _parseNumber2(outBuf, outPtr, false, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, false, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(false, intLen);
}","public void test04852() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 10, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 2, false);
    try {
        uTF8StreamJsonParser0._parsePosNumber(48);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parsePosNumber(int c) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[0] = (char) c;
    int intLen = 1;
    int outPtr = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    // 1 == outPtr
    int end = _inputPtr + outBuf.length - 1;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // split across boundary, offline
            return _parseNumber2(outBuf, outPtr, false, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, false, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(false, intLen);
}","public void test04953() throws Throwable {
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 159, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-1009), 2, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parsePosNumber(3);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1009
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parsePosNumber(int c) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[0] = (char) c;
    int intLen = 1;
    int outPtr = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    // 1 == outPtr
    int end = _inputPtr + outBuf.length - 1;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // split across boundary, offline
            return _parseNumber2(outBuf, outPtr, false, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, false, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(false, intLen);
}","public void test05054() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray1 = new byte[3];
    byteArray1[1] = (byte) 46;
    DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-355), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 1, (byte) 31, false);
    try {
        uTF8StreamJsonParser0._parsePosNumber((-102));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: Decimal point not followed by a digit
        //  at [Source: java.io.DataInputStream@0000000012; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _parseNegNumber() throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    // Need to prepend sign?
    outBuf[outPtr++] = '-';
    // Must have something after sign too
    if (_inputPtr >= _inputEnd) {
        loadMoreGuaranteed();
    }
    int c = (int) _inputBuffer[_inputPtr++] & 0xFF;
    // Note: must be followed by a digit
    if (c < INT_0 || c > INT_9) {
        return _handleInvalidNumberStart(c, true);
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    int end = _inputPtr + outBuf.length - outPtr;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parseNumber2(outBuf, outPtr, true, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, true, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(true, intLen);
}","public void test05155() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 2, true);
    try {
        uTF8StreamJsonParser0._parseNegNumber();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000013; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _parseNegNumber() throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    // Need to prepend sign?
    outBuf[outPtr++] = '-';
    // Must have something after sign too
    if (_inputPtr >= _inputEnd) {
        loadMoreGuaranteed();
    }
    int c = (int) _inputBuffer[_inputPtr++] & 0xFF;
    // Note: must be followed by a digit
    if (c < INT_0 || c > INT_9) {
        return _handleInvalidNumberStart(c, true);
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    int end = _inputPtr + outBuf.length - outPtr;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parseNumber2(outBuf, outPtr, true, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, true, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(true, intLen);
}","public void test05256() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 10, 2, false);
    try {
        uTF8StreamJsonParser0._parseNegNumber();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: UNKNOWN; line: 1, column: -6]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _parseNegNumber() throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    // Need to prepend sign?
    outBuf[outPtr++] = '-';
    // Must have something after sign too
    if (_inputPtr >= _inputEnd) {
        loadMoreGuaranteed();
    }
    int c = (int) _inputBuffer[_inputPtr++] & 0xFF;
    // Note: must be followed by a digit
    if (c < INT_0 || c > INT_9) {
        return _handleInvalidNumberStart(c, true);
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    int end = _inputPtr + outBuf.length - outPtr;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parseNumber2(outBuf, outPtr, true, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, true, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(true, intLen);
}","public void test05357() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 10, 2, false);
    try {
        uTF8StreamJsonParser0._parseNegNumber();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('\u00CC' (code 204)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: UNKNOWN; line: 1, column: -6]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _parseNegNumber() throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    // Need to prepend sign?
    outBuf[outPtr++] = '-';
    // Must have something after sign too
    if (_inputPtr >= _inputEnd) {
        loadMoreGuaranteed();
    }
    int c = (int) _inputBuffer[_inputPtr++] & 0xFF;
    // Note: must be followed by a digit
    if (c < INT_0 || c > INT_9) {
        return _handleInvalidNumberStart(c, true);
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    int end = _inputPtr + outBuf.length - outPtr;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parseNumber2(outBuf, outPtr, true, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, true, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(true, intLen);
}","public void test05458() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 55;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 3, true);
    try {
        uTF8StreamJsonParser0._parseNegNumber();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
        //  at [Source: UNKNOWN; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parsePosNumber(int c) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[0] = (char) c;
    int intLen = 1;
    int outPtr = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    // 1 == outPtr
    int end = _inputPtr + outBuf.length - 1;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // split across boundary, offline
            return _parseNumber2(outBuf, outPtr, false, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, false, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(false, intLen);
}","public void test05559() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[21];
    byteArray0[0] = (byte) 55;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2316, 2316, false);
    try {
        uTF8StreamJsonParser0._parsePosNumber(0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
        //  at [Source: UNKNOWN; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parsePosNumber(int c) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[0] = (char) c;
    int intLen = 1;
    int outPtr = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    // 1 == outPtr
    int end = _inputPtr + outBuf.length - 1;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // split across boundary, offline
            return _parseNumber2(outBuf, outPtr, false, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, false, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(false, intLen);
}","public void test05660() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-18);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-1139), false);
    try {
        uTF8StreamJsonParser0._parsePosNumber(101);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('\u00EE' (code 238)): Expected space separating root-level values
        //  at [Source: UNKNOWN; line: 1, column: -1138]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parsePosNumber(int c) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[0] = (char) c;
    int intLen = 1;
    int outPtr = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    // 1 == outPtr
    int end = _inputPtr + outBuf.length - 1;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // split across boundary, offline
            return _parseNumber2(outBuf, outPtr, false, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, false, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(false, intLen);
}","public void test05761() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 10, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 2, false);
    try {
        uTF8StreamJsonParser0._parsePosNumber(48);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('\u00CC' (code 204)): Expected space separating root-level values
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parsePosNumber(int c) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[0] = (char) c;
    int intLen = 1;
    int outPtr = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    // 1 == outPtr
    int end = _inputPtr + outBuf.length - 1;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // split across boundary, offline
            return _parseNumber2(outBuf, outPtr, false, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, false, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(false, intLen);
}","public void test05862() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[10];
    byteArray0[0] = (byte) 32;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 35, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 35, true);
    JsonToken jsonToken0 = uTF8StreamJsonParser0._parsePosNumber(35);
    assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test05964() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 39, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 228, (byte) 55, false);
    try {
        uTF8StreamJsonParser0._parseName((byte) 34);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -156]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test06065() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[0];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 121, 2, true);
    try {
        uTF8StreamJsonParser0._parseName(131);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0x83
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test06166() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 55, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 110, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseName((byte) 34);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 8
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test06267() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[1] = (byte) 55;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 55, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 110, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseName((byte) 34);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 8
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test06368() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[1] = (byte) 55;
    byteArray0[2] = (byte) 55;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 55, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 110, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseName((byte) 34);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 8
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test06469() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[1] = (byte) 55;
    byteArray0[2] = (byte) 55;
    byteArray0[3] = (byte) 55;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 55, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 110, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseName((byte) 34);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 8
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test06570() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[1] = (byte) 55;
    byteArray0[2] = (byte) 55;
    byteArray0[3] = (byte) 55;
    byteArray0[4] = (byte) 55;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 55, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 110, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseName((byte) 34);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 8
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test06671() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[1] = (byte) 55;
    byteArray0[2] = (byte) 55;
    byteArray0[3] = (byte) 55;
    byteArray0[4] = (byte) 55;
    byteArray0[5] = (byte) 34;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 55, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 110, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseName((byte) 34);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"protected final String parseMediumName(int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Ok, got 5 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    return parseMediumName2(i, q2);
}","public void test06772() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 87;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.parseMediumName(2);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 4
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"protected final String parseMediumName(int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Ok, got 5 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    return parseMediumName2(i, q2);
}","public void test06873() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[6];
    byteArray0[1] = (byte) 114;
    byteArray0[2] = (byte) 118;
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_READ_IO_BUFFER, false);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (-544), false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.parseMediumName(0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 6
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"protected final String parseMediumName(int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Ok, got 5 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    return parseMediumName2(i, q2);
}","public void test06974() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_READ_IO_BUFFER, true);
    byte[] byteArray0 = new byte[12];
    byteArray0[0] = (byte) (-42);
    byteArray0[1] = (byte) 47;
    byteArray0[2] = (byte) 47;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-42), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-1385), 248, true);
    uTF8StreamJsonParser0._loadToHaveAtLeast((-1235));
    try {
        uTF8StreamJsonParser0.parseMediumName(51);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: java.lang.Integer@0000000014; line: 1, column: 1410]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseMediumName2(int q3, final int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Got 9 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return parseLongName(i, q2, q3);
}","public void test07075() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-52), 0, false);
    uTF8StreamJsonParser0._loadToHaveAtLeast((byte) (-52));
    try {
        uTF8StreamJsonParser0.parseMediumName2((byte) (-52), 2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: 65]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"protected final String parseMediumName2(int q3, final int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Got 9 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return parseLongName(i, q2, q3);
}","public void test07176() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[2];
    byteArray0[1] = (byte) 34;
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1771, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (-933), true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.parseMediumName2(54, 47);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}","/**
 * @since 2.6
 */"
"protected final String parseMediumName2(int q3, final int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Got 9 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return parseLongName(i, q2, q3);
}","public void test07277() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-52);
    byteArray0[1] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-52), 0, false);
    uTF8StreamJsonParser0._loadToHaveAtLeast((byte) (-52));
    try {
        uTF8StreamJsonParser0.parseMediumName2((byte) (-52), 2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: 65]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"protected final String parseMediumName2(int q3, final int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Got 9 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return parseLongName(i, q2, q3);
}","public void test07378() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-52);
    byteArray0[1] = (byte) (-52);
    byteArray0[2] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-52), 0, false);
    uTF8StreamJsonParser0._loadToHaveAtLeast((byte) (-52));
    try {
        uTF8StreamJsonParser0.parseMediumName2((byte) (-52), 2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: 65]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"protected final String parseMediumName2(int q3, final int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Got 9 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return parseLongName(i, q2, q3);
}","public void test07479() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-52);
    byteArray0[1] = (byte) (-52);
    byteArray0[2] = (byte) (-52);
    byteArray0[3] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-52), 0, false);
    uTF8StreamJsonParser0._loadToHaveAtLeast((byte) (-52));
    try {
        uTF8StreamJsonParser0.parseMediumName2((byte) (-52), 2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: 65]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"protected final String parseLongName(int q, final int q2, int q3) throws IOException {
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    _quadBuffer[2] = q3;
    // As explained above, will ignore UTF-8 encoding at this point
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int qlen = 3;
    while ((_inputPtr + 4) <= _inputEnd) {
        int i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
    /* Let's offline if we hit buffer boundary (otherwise would
         * need to [try to] align input, which is bit complicated
         * and may not always be possible)
         */
    return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
}","public void test07580() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 93, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 69, (byte) (-93), false);
    uTF8StreamJsonParser0._skipCR();
    try {
        uTF8StreamJsonParser0.parseLongName((byte) 31, (byte) (-93), 3);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000015; line: 2, column: 13]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseLongName(int q, final int q2, int q3) throws IOException {
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    _quadBuffer[2] = q3;
    // As explained above, will ignore UTF-8 encoding at this point
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int qlen = 3;
    while ((_inputPtr + 4) <= _inputEnd) {
        int i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
    /* Let's offline if we hit buffer boundary (otherwise would
         * need to [try to] align input, which is bit complicated
         * and may not always be possible)
         */
    return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
}","public void test07681() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-93);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 93, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 69, (byte) (-93), false);
    uTF8StreamJsonParser0._skipCR();
    try {
        uTF8StreamJsonParser0.parseLongName((byte) 31, (byte) (-93), 3);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000016; line: 2, column: 13]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseLongName(int q, final int q2, int q3) throws IOException {
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    _quadBuffer[2] = q3;
    // As explained above, will ignore UTF-8 encoding at this point
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int qlen = 3;
    while ((_inputPtr + 4) <= _inputEnd) {
        int i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
    /* Let's offline if we hit buffer boundary (otherwise would
         * need to [try to] align input, which is bit complicated
         * and may not always be possible)
         */
    return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
}","public void test07782() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-93);
    byteArray0[1] = (byte) (-93);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 93, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 69, (byte) (-93), false);
    uTF8StreamJsonParser0._skipCR();
    try {
        uTF8StreamJsonParser0.parseLongName((byte) 31, (byte) (-93), 3);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000017; line: 2, column: 13]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseLongName(int q, final int q2, int q3) throws IOException {
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    _quadBuffer[2] = q3;
    // As explained above, will ignore UTF-8 encoding at this point
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int qlen = 3;
    while ((_inputPtr + 4) <= _inputEnd) {
        int i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
    /* Let's offline if we hit buffer boundary (otherwise would
         * need to [try to] align input, which is bit complicated
         * and may not always be possible)
         */
    return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
}","public void test07883() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-52);
    byteArray0[1] = (byte) (-52);
    byteArray0[2] = (byte) 43;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-49), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-1090), true);
    uTF8StreamJsonParser0._skipCR();
    try {
        uTF8StreamJsonParser0.parseLongName((-49), 1, 2244);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 2, column: 9]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseLongName(int q, final int q2, int q3) throws IOException {
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    _quadBuffer[2] = q3;
    // As explained above, will ignore UTF-8 encoding at this point
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int qlen = 3;
    while ((_inputPtr + 4) <= _inputEnd) {
        int i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
    /* Let's offline if we hit buffer boundary (otherwise would
         * need to [try to] align input, which is bit complicated
         * and may not always be possible)
         */
    return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
}","public void test07984() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-52);
    byteArray0[1] = (byte) 78;
    byteArray0[2] = (byte) 43;
    byteArray0[3] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-49), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-1090), true);
    uTF8StreamJsonParser0._skipCR();
    try {
        uTF8StreamJsonParser0.parseLongName((-49), 1, 2244);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 2, column: 9]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected String slowParseName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\""' for name"");
        }
    }
    int i = _inputBuffer[_inputPtr++] & 0xFF;
    if (i == INT_QUOTE) {
        // special case, """"
        return """";
    }
    return parseEscapedName(_quadBuffer, 0, 0, i, 0);
}","public void test08085() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 15, 0, true);
    uTF8StreamJsonParser0._skipCR();
    UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1242, 15, false);
    try {
        uTF8StreamJsonParser1.slowParseName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input: was expecting closing '\""' for name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000018; line: 1, column: 16]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called when not even first 8 bytes are guaranteed
 * to come consecutively. Happens rarely, so this is offlined;
 * plus we'll also do full checks for escaping etc.
 */"
"protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch, int currQuadBytes) throws IOException {
    /* 25-Nov-2008, tatu: This may seem weird, but here we do not want to worry about
         *   UTF-8 decoding yet. Rather, we'll assume that part is ok (if not it will get
         *   caught later on), and just handle quotes and backslashes here.
         */
    final int[] codes = _icLatin1;
    while (true) {
        if (codes[ch] != 0) {
            if (ch == INT_QUOTE) {
                // we are done
                break;
            }
            // Unquoted white space?
            if (ch != INT_BACKSLASH) {
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test08186() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 35, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 122, 35, true);
    int[] intArray0 = new int[3];
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.parseEscapedName(intArray0, (byte) 122, 32, 59, 116);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 122
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}","/**
 * Slower parsing method which is generally branched to when
 * an escape sequence is detected (or alternatively for long
 * names, one crossing input buffer boundary).
 * Needs to be able to handle more exceptional cases, gets slower,
 * and hance is offlined to a separate method.
 */"
"protected String _handleOddName(int ch) throws IOException {
    // [JACKSON-173]: allow single quotes
    if (ch == '\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
        return _parseAposName();
    }
    // [JACKSON-69]: allow unquoted names if feature enabled:
    if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {
        char c = (char) _decodeCharForError(ch);
        _reportUnexpectedChar(c, ""was expecting double-quote to start field name"");
    }
    /* Also: note that although we use a different table here,
         * it does NOT handle UTF-8 decoding. It'll just pass those
         * high-bit codes as acceptable for later decoding.
         */
    final int[] codes = CharTypes.getInputCodeUtf8JsNames();
    // Also: must start with a valid character...
    if (codes[ch] != 0) {
        _reportUnexpectedChar(ch, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");
    }
    /* Ok, now; instead of ultra-optimizing parsing here (as with
         * regular JSON names), let's just use the generic ""slow""
         * variant. Can measure its impact later on if need be
         */
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    while (true) {
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr] & 0xFF;
        if (codes[ch] != 0) {
            break;
        }
        ++_inputPtr;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test08287() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[3];
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1312, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 116, 2, false);
    try {
        uTF8StreamJsonParser0._handleOddName(39);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character (''' (code 39)): was expecting double-quote to start field name
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called when we see non-white space character other
 * than double quote, when expecting a field name.
 * In standard mode will just throw an exception; but
 * in non-standard modes may be able to parse name.
 */"
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test08388() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 56, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 365, 3, false);
    try {
        uTF8StreamJsonParser0._parseName(3);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 3)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000019; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test08489() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-52);
    byteArray0[1] = (byte) (-52);
    byteArray0[2] = (byte) (-52);
    byteArray0[3] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1065, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 12, (byte) (-52), false);
    try {
        uTF8StreamJsonParser0._parseName(35);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -55]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test08590() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 26, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 0, 2, false);
    try {
        uTF8StreamJsonParser0._parseName(131);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0x83
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected String _parseAposName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test08691() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[12];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-128), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1, false);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: 26]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected String _parseAposName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test08792() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 34;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1398, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 55, 3, true);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -43]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected String _parseAposName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test08893() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[10];
    byteArray0[0] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 98, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 98, 2, true);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -75]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected String _parseAposName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test08994() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[10];
    byteArray0[1] = (byte) 92;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 98, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 98, 2, true);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -75]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected String _parseAposName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test09095() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[10];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byte[] byteArray1 = new byte[9];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 98, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (byte) 98, 2, true);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -84]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseMediumName2(int q3, final int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Got 9 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return parseLongName(i, q2, q3);
}","public void test09196() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) 55;
    byteArray0[1] = (byte) 34;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) 0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 34, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 0, true);
    String string0 = uTF8StreamJsonParser0.parseMediumName2(7, 1065);
    assertEquals(""\u0000\u0000\u0000\u0000\u0000\u0000\u0004)\u00077"", string0);
}","/**
 * @since 2.6
 */"
"protected final String parseLongName(int q, final int q2, int q3) throws IOException {
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    _quadBuffer[2] = q3;
    // As explained above, will ignore UTF-8 encoding at this point
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int qlen = 3;
    while ((_inputPtr + 4) <= _inputEnd) {
        int i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
    /* Let's offline if we hit buffer boundary (otherwise would
         * need to [try to] align input, which is bit complicated
         * and may not always be possible)
         */
    return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
}","public void test09297() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-32);
    byteArray0[1] = (byte) 34;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1216));
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 55, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 3, (byte) (-32), false);
    try {
        uTF8StreamJsonParser0.parseLongName(121, (byte) 34, 3);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -32]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test09398() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-64);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) 22);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-49), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, (-1090), false);
    try {
        uTF8StreamJsonParser0._parseName(199);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0xffffc7c0
        //  at [Source: UNKNOWN; line: 1, column: -1090]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test09499() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[8];
    byteArray0[1] = (byte) 91;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 660, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 2, false);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: UNKNOWN; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public boolean isExpectedStartObjectToken() {
    return _currToken == JsonToken.START_OBJECT;
}","public void test095100() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 34;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 730, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 730, (-1977), true);
    uTF8StreamJsonParser0._finishString();
    assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
}",""
"protected String _finishAndReturnString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                return _textBuffer.setCurrentAndReturn(outPtr);
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
    return _textBuffer.contentsAsString();
}","public void test096101() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) 122;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 128, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 185, 91, false);
    try {
        uTF8StreamJsonParser0._finishAndReturnString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: UNKNOWN; line: 1, column: -91]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"public int getTokenColumnNr() {
    // note: value of -1 means ""not available""; otherwise convert from 0-based to 1-based
    int col = _tokenInputCol;
    return (col < 0) ? col : (col + 1);
}","public void test097102() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 34;
    byteArray0[1] = (byte) 34;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 15, true);
    uTF8StreamJsonParser0.nextValue();
    uTF8StreamJsonParser0.getValueAsString();
    assertEquals(2, uTF8StreamJsonParser0.getTokenColumnNr());
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test098103() throws Throwable {
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[7];
    byteArray0[4] = (byte) 55;
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 32, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, (byte) 32, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 7
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test099104() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 49;
    byteArray0[1] = (byte) (-11);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 6, (-1758), true);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000020; line: 1, column: -1760]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected String _finishAndReturnString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                return _textBuffer.setCurrentAndReturn(outPtr);
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
    return _textBuffer.contentsAsString();
}","public void test100105() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-18);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-127), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 78, 35, true);
    try {
        uTF8StreamJsonParser0._finishAndReturnString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: UNKNOWN; line: 1, column: -40]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test101106() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[22];
    byteArray0[0] = (byte) (-110);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 49, true);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0x92
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000021; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2();
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3();
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test102107() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byte[] byteArray1 = new byte[21];
    byteArray1[0] = (byte) 78;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 35, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 52, 0, false);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: UNKNOWN; line: 1, column: -29]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2();
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3();
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test104109() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1, false);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: UNKNOWN; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2();
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3();
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test105110() throws Throwable {
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) (-18);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 123, (-1020), false);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: UNKNOWN; line: 1, column: -1140]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected JsonToken _handleUnexpectedValue(int c) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(c) {
        case ']':
        case '}':
            // Error: neither is valid at this point; valid closers have
            // been handled earlier
            _reportUnexpectedChar(c, ""expected a value"");
        case '\'':
            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
                return _handleApos();
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            if (_inputPtr >= _inputEnd) {
                if (!loadMore()) {
                    _reportInvalidEOFInValue();
                }
            }
            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);
    }
    // [Issue#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(c)) {
        _reportInvalidToken("""" + ((char) c), ""('true', 'false' or 'null')"");
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
    return null;
}","public void test106111() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 43, 0, true);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue(43);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: UNKNOWN; line: 1, column: -41]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method for handling cases where first non-space character
 * of an expected value token is not legal for standard JSON content.
 */"
"protected JsonToken _handleUnexpectedValue(int c) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(c) {
        case ']':
        case '}':
            // Error: neither is valid at this point; valid closers have
            // been handled earlier
            _reportUnexpectedChar(c, ""expected a value"");
        case '\'':
            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
                return _handleApos();
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            if (_inputPtr >= _inputEnd) {
                if (!loadMore()) {
                    _reportInvalidEOFInValue();
                }
            }
            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);
    }
    // [Issue#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(c)) {
        _reportInvalidToken("""" + ((char) c), ""('true', 'false' or 'null')"");
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
    return null;
}","public void test107112() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    PipedInputStream pipedInputStream0 = new PipedInputStream((byte) 55);
    byte[] byteArray0 = new byte[4];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-124), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 238, 117, true);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue(73);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}","/**
 * Method for handling cases where first non-space character
 * of an expected value token is not legal for standard JSON content.
 */"
"protected JsonToken _handleUnexpectedValue(int c) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(c) {
        case ']':
        case '}':
            // Error: neither is valid at this point; valid closers have
            // been handled earlier
            _reportUnexpectedChar(c, ""expected a value"");
        case '\'':
            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
                return _handleApos();
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            if (_inputPtr >= _inputEnd) {
                if (!loadMore()) {
                    _reportInvalidEOFInValue();
                }
            }
            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);
    }
    // [Issue#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(c)) {
        _reportInvalidToken("""" + ((char) c), ""('true', 'false' or 'null')"");
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
    return null;
}","public void test108113() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 98, (byte) 98, true);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue(125);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('}' (code 125)): expected a value
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method for handling cases where first non-space character
 * of an expected value token is not legal for standard JSON content.
 */"
"protected JsonToken _handleUnexpectedValue(int c) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(c) {
        case ']':
        case '}':
            // Error: neither is valid at this point; valid closers have
            // been handled earlier
            _reportUnexpectedChar(c, ""expected a value"");
        case '\'':
            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
                return _handleApos();
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            if (_inputPtr >= _inputEnd) {
                if (!loadMore()) {
                    _reportInvalidEOFInValue();
                }
            }
            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);
    }
    // [Issue#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(c)) {
        _reportInvalidToken("""" + ((char) c), ""('true', 'false' or 'null')"");
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
    return null;
}","public void test109114() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1217, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 0, 15, true);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue(43);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: UNKNOWN; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method for handling cases where first non-space character
 * of an expected value token is not legal for standard JSON content.
 */"
"@Override
public Boolean nextBooleanValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","public void test110115() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[10];
    byteArray0[0] = (byte) 32;
    byteArray0[1] = (byte) 92;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 35, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 35, true);
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('\\' (code 92)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
        //  at [Source: java.io.ByteArrayInputStream@0000000022; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                c = _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test111116() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 55, 896, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 55
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                c = _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test112117() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 87;
    byteArray0[1] = (byte) 69;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray1 = new byte[2];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-19), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 3741, (byte) 87, false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: UNKNOWN; line: 1, column: -3650]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"public final int id() {
    return _id;
}","public void test113118() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byte[] byteArray1 = new byte[21];
    byteArray1[0] = (byte) 39;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 35, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 52, 0, false);
    JsonToken jsonToken0 = uTF8StreamJsonParser0._handleApos();
    assertEquals(6, jsonToken0.id());
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                c = _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test114119() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[22];
    byteArray0[0] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1, false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0xcc
        //  at [Source: UNKNOWN; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                c = _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test115120() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 87;
    byteArray0[1] = (byte) 69;
    byteArray0[2] = (byte) (-19);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 55, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 240, 73, false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: UNKNOWN; line: 1, column: -162]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                c = _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test116121() throws Throwable {
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) (-18);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-3630), true);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: UNKNOWN; line: 1, column: -3629]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                c = _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test117122() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-93);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 192);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-93), (byte) (-93), true);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0xa3
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000023; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                c = _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test118123() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 34;
    byteArray0[1] = (byte) 34;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 15, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 2
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"@Override
public long nextLongValue(long defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getLongValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
}","public void test119124() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 78;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1268, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 3803, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.nextLongValue(199);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 4
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"protected final void _matchToken(String matchStr, int i) throws IOException {
    final int len = matchStr.length();
    if ((_inputPtr + len) >= _inputEnd) {
        _matchToken2(matchStr, i);
        return;
    }
    do {
        if (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {
            _reportInvalidToken(matchStr.substring(0, i));
        }
        ++_inputPtr;
    } while (++i < len);
    int ch = _inputBuffer[_inputPtr] & 0xFF;
    if (ch >= '0' && ch != ']' && ch != '}') {
        // expected/allowed chars
        _checkMatchEnd(matchStr, i, ch);
    }
}","public void test120125() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-49), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 0, false);
    uTF8StreamJsonParser0._skipCR();
    uTF8StreamJsonParser0._loadToHaveAtLeast((byte) (-52));
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._matchToken(""8|=rS#3cnIsh"", (byte) (-52));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"protected final void _matchToken(String matchStr, int i) throws IOException {
    final int len = matchStr.length();
    if ((_inputPtr + len) >= _inputEnd) {
        _matchToken2(matchStr, i);
        return;
    }
    do {
        if (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {
            _reportInvalidToken(matchStr.substring(0, i));
        }
        ++_inputPtr;
    } while (++i < len);
    int ch = _inputBuffer[_inputPtr] & 0xFF;
    if (ch >= '0' && ch != ']' && ch != '}') {
        // expected/allowed chars
        _checkMatchEnd(matchStr, i, ch);
    }
}","public void test121126() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 319);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-5407), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 319, (-5407), true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._matchToken(""8|=rS#3cnIsh"", 1095);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"@Override
public Boolean nextBooleanValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","public void test122127() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 55;
    byteArray0[1] = (byte) 55;
    byteArray0[2] = (byte) 9;
    byteArray0[3] = (byte) 9;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 55, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 55, (byte) 9, true);
    uTF8StreamJsonParser0.nextValue();
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.io.IOContext"", e);
    }
}",""
"@Override
public JsonToken nextValue() throws IOException {
    /* Implementation should be as trivial as follows; only
         * needs to change if we are to skip other tokens (for
         * example, if comments were exposed as tokens)
         */
    JsonToken t = nextToken();
    if (t == JsonToken.FIELD_NAME) {
        t = nextToken();
    }
    return t;
}","public void test123128() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byte[] byteArray1 = new byte[7];
    byteArray1[1] = (byte) 9;
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 1, 49, true);
    try {
        uTF8StreamJsonParser0.nextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: UNKNOWN; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
protected char _decodeEscaped() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("" in character escape sequence"");
        }
    }
    int c = (int) _inputBuffer[_inputPtr++];
    switch(c) {
        // First, ones that are mapped
        case 'b':
            return '\b';
        case 't':
            return '\t';
        case 'n':
            return '\n';
        case 'f':
            return '\f';
        case 'r':
            return '\r';
        // And these are to be returned as they are
        case '""':
        case '/':
        case '\\':
            return (char) c;
        case // and finally hex-escaped
        'u':
            break;
        default:
            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));
    }
    // Ok, a hex escape. Need 4 characters
    int value = 0;
    for (int i = 0; i < 4; ++i) {
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in character escape sequence"");
            }
        }
        int ch = (int) _inputBuffer[_inputPtr++];
        int digit = CharTypes.charToHex(ch);
        if (digit < 0) {
            _reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
        }
        value = (value << 4) | digit;
    }
    return (char) value;
}","public void test124129() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
    byte[] byteArray0 = new byte[0];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1859, mockFileInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 2, 2, false);
    try {
        uTF8StreamJsonParser0._decodeEscaped();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in character escape sequence
        //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000024; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
protected char _decodeEscaped() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("" in character escape sequence"");
        }
    }
    int c = (int) _inputBuffer[_inputPtr++];
    switch(c) {
        // First, ones that are mapped
        case 'b':
            return '\b';
        case 't':
            return '\t';
        case 'n':
            return '\n';
        case 'f':
            return '\f';
        case 'r':
            return '\r';
        // And these are to be returned as they are
        case '""':
        case '/':
        case '\\':
            return (char) c;
        case // and finally hex-escaped
        'u':
            break;
        default:
            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));
    }
    // Ok, a hex escape. Need 4 characters
    int value = 0;
    for (int i = 0; i < 4; ++i) {
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in character escape sequence"");
            }
        }
        int ch = (int) _inputBuffer[_inputPtr++];
        int digit = CharTypes.charToHex(ch);
        if (digit < 0) {
            _reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
        }
        value = (value << 4) | digit;
    }
    return (char) value;
}","public void test125130() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 47;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-51), byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 1794, 91, true);
    char char0 = uTF8StreamJsonParser0._decodeEscaped();
    assertEquals('/', char0);
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test126131() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 92;
    byteArray0[2] = (byte) 92;
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1516), bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1860, true);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: java.io.BufferedInputStream@0000000025; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
protected char _decodeEscaped() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("" in character escape sequence"");
        }
    }
    int c = (int) _inputBuffer[_inputPtr++];
    switch(c) {
        // First, ones that are mapped
        case 'b':
            return '\b';
        case 't':
            return '\t';
        case 'n':
            return '\n';
        case 'f':
            return '\f';
        case 'r':
            return '\r';
        // And these are to be returned as they are
        case '""':
        case '/':
        case '\\':
            return (char) c;
        case // and finally hex-escaped
        'u':
            break;
        default:
            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));
    }
    // Ok, a hex escape. Need 4 characters
    int value = 0;
    for (int i = 0; i < 4; ++i) {
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in character escape sequence"");
            }
        }
        int ch = (int) _inputBuffer[_inputPtr++];
        int digit = CharTypes.charToHex(ch);
        if (digit < 0) {
            _reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
        }
        value = (value << 4) | digit;
    }
    return (char) value;
}","public void test127132() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 98;
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3396, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 2, false);
    char char0 = uTF8StreamJsonParser0._decodeEscaped();
    assertEquals('\b', char0);
}",""
"@Override
protected char _decodeEscaped() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("" in character escape sequence"");
        }
    }
    int c = (int) _inputBuffer[_inputPtr++];
    switch(c) {
        // First, ones that are mapped
        case 'b':
            return '\b';
        case 't':
            return '\t';
        case 'n':
            return '\n';
        case 'f':
            return '\f';
        case 'r':
            return '\r';
        // And these are to be returned as they are
        case '""':
        case '/':
        case '\\':
            return (char) c;
        case // and finally hex-escaped
        'u':
            break;
        default:
            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));
    }
    // Ok, a hex escape. Need 4 characters
    int value = 0;
    for (int i = 0; i < 4; ++i) {
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in character escape sequence"");
            }
        }
        int ch = (int) _inputBuffer[_inputPtr++];
        int digit = CharTypes.charToHex(ch);
        if (digit < 0) {
            _reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
        }
        value = (value << 4) | digit;
    }
    return (char) value;
}","public void test128133() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) 114;
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_WRITE_CONCAT_BUFFER, false);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (-544), false);
    char char0 = uTF8StreamJsonParser0._decodeEscaped();
    assertEquals('\r', char0);
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test129134() throws Throwable {
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
    byte[] byteArray0 = new byte[1];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 93, false);
    try {
        uTF8StreamJsonParser0._parseName((-3864));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: java.io.BufferedInputStream@0000000026; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected String slowParseName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\""' for name"");
        }
    }
    int i = _inputBuffer[_inputPtr++] & 0xFF;
    if (i == INT_QUOTE) {
        // special case, """"
        return """";
    }
    return parseEscapedName(_quadBuffer, 0, 0, i, 0);
}","public void test130135() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 92;
    byteArray0[2] = (byte) (-16);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 56, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1051, false);
    try {
        uTF8StreamJsonParser0.slowParseName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000027; line: 1, column: 5]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called when not even first 8 bytes are guaranteed
 * to come consecutively. Happens rarely, so this is offlined;
 * plus we'll also do full checks for escaping etc.
 */"
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test131136() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) (-72);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-574), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-72), (byte) (-72), true);
    try {
        uTF8StreamJsonParser0._parseName((-574));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('\u00B8' (code 184)): was expecting double-quote to start field name
        //  at [Source: UNKNOWN; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test132137() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray1 = new byte[6];
    byteArray1[2] = (byte) (-47);
    byteArray1[3] = (byte) (-82);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 2, 101, false);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: UNKNOWN; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test133138() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray1 = new byte[6];
    byteArray1[2] = (byte) (-18);
    byteArray1[3] = (byte) (-82);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 2, 101, false);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: UNKNOWN; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2();
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3();
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test134139() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1, false);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0xcc
        //  at [Source: UNKNOWN; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2();
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3();
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test135140() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) (-18);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 35, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 52, 0, false);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: UNKNOWN; line: 1, column: -48]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2();
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3();
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test136141() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray1 = new byte[6];
    byteArray1[2] = (byte) (-18);
    byteArray1[3] = (byte) (-82);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 2, 101, false);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: UNKNOWN; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"@Override
public boolean isExpectedStartArrayToken() {
    return _currToken == JsonToken.START_ARRAY;
}","public void test138143() throws Throwable {
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
    byte[] byteArray0 = new byte[0];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 45, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 73, 0, false);
    uTF8StreamJsonParser0._skipCR();
    assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test139144() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byte[] byteArray1 = new byte[21];
    byteArray1[0] = (byte) 78;
    byteArray1[1] = (byte) 31;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 35, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 52, 0, false);
    try {
        uTF8StreamJsonParser0.nextIntValue((-873));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'N': was expecting 'null', 'true', 'false' or NaN
        //  at [Source: UNKNOWN; line: 1, column: -49]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"public long getCharOffset() {
    return _totalChars;
}","public void test141146() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 1245, false);
    JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
    assertEquals((-1L), jsonLocation0.getCharOffset());
}","/**
 * @return Character offset within underlying stream, reader or writer,
 *   if available; -1 if not.
 */"
"public int getColumnNr() {
    return _columnNr;
}","public void test141147() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 1245, false);
    JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
    assertEquals(0, jsonLocation0.getColumnNr());
}","/**
 * @return Column number of the location (1-based)
 */"
"public long getByteOffset() {
    return _totalBytes;
}","public void test141148() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 1245, false);
    JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
    assertEquals((-1L), jsonLocation0.getByteOffset());
}","/**
 * @return Byte offset within underlying stream, reader or writer,
 *   if available; -1 if not.
 */"
"public int getLineNr() {
    return _lineNr;
}","public void test141149() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 1245, false);
    JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
    assertEquals(1, jsonLocation0.getLineNr());
}","/**
 * @return Line number of the location (1-based)
 */"
