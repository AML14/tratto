project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""Z*h*ISf,#n(</\""a]x,"");
    byte[] byteArray0 = new byte[3];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
    int[] intArray0 = new int[0];
    uTF8JsonGenerator0._outputEscapes = intArray0;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test011,"public void test011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Illegal white space character (code 0x"");
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 192, (ObjectCodec) null, mockFileOutputStream0);
    uTF8JsonGenerator0.writeStringField(""FAIL_ON_SYMBOL_HASH_OVERFLOW"", ""\"":zA~"");
    assertEquals(36, uTF8JsonGenerator0.getOutputBuffered());
}",0,
project,0,test022,"public void test022() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-3225), true);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test033,"public void test033() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) 32, (ObjectCodec) null, stringWriter0);
    assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test034,"public void test034() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) 32, (ObjectCodec) null, stringWriter0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
    writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
    SerializedString serializedString0 = new SerializedString("" 9dmd).a*8{w:S!;"");
    JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setRootValueSeparator(serializedString0);
    assertEquals(127, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test045,"public void test045() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Illegal white space character (code 0x"");
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 156, (ObjectCodec) null, mockFileOutputStream0);
    uTF8JsonGenerator0.writeNumber(""}R|Y7@5O"");
    uTF8JsonGenerator0.setHighestNonEscapedChar(1);
    assertEquals(1, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test056,"public void test056() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-10));
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4534, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-166), true);
    assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test057,"public void test057() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-10));
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4534, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-166), true);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test068,"public void test068() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, (-123), true);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test079,"public void test079() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""3lcKV4OkIt)N]_"");
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 248, (ObjectCodec) null, mockPrintStream0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
    assertEquals(127, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test0810,"public void test0810() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
    int int0 = writerBasedJsonGenerator0.getHighestEscapedChar();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test0911,"public void test0911() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""yH]er"", true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
    uTF8JsonGenerator0._maximumNonEscapedChar = (-467);
    int int0 = uTF8JsonGenerator0.getHighestEscapedChar();
    assertEquals((-467), int0);
}",0,"assertEquals(0, int0)"
project,0,test1012,"public void test1012() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
    BigInteger bigInteger0 = BigInteger.ONE;
    writerBasedJsonGenerator0.writeNumber(bigInteger0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
    JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test1113,"public void test1113() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
    DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte) (-1), false);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test1214,"public void test1214() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Illegal white space character (code 0x"");
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 192, (ObjectCodec) null, mockFileOutputStream0);
    uTF8JsonGenerator0.close();
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeStringField(""FAIL_ON_SYMBOL_HASH_OVERFLOW"", ""\"":zA~"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1315,"public void test1315() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Illegal white space character (code 0x"", false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 205, (ObjectCodec) null, mockFileOutputStream0);
    int[] intArray0 = new int[1];
    uTF8JsonGenerator0._outputEscapes = intArray0;
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeStringField(""Illegal white space character (code 0x"", ""Illegal white space character (code 0x"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1416,"public void test1416() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Illegal white space character (code 0x"");
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 192, (ObjectCodec) null, mockFileOutputStream0);
    byte[] byteArray0 = new byte[7];
    uTF8JsonGenerator0.writeBinaryField(""Illegal white space character (code 0x"", byteArray0);
    try {
        uTF8JsonGenerator0.writeStringField(""FAIL_ON_SYMBOL_HASH_O|ERFLOW"", ""\"":zA~"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test1517,"public void test1517() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) 0, (ObjectCodec) null, stringWriter0);
    // Undeclared exception!
    try {
        writerBasedJsonGenerator0.enable((JsonGenerator.Feature) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.base.GeneratorBase"", e);
    }
}",0,
project,0,test1618,"public void test1618() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Illegal white space character (code 0x"");
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 156, (ObjectCodec) null, mockFileOutputStream0);
    uTF8JsonGenerator0.setHighestNonEscapedChar(1);
    assertEquals(1, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test1719,"public void test1719() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-6), (ObjectCodec) null, (Writer) null);
    assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar())"
project,0,test1720,"public void test1720() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-6), (ObjectCodec) null, (Writer) null);
    writerBasedJsonGenerator0.setHighestNonEscapedChar((-6));
    assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar())"
project,0,test1821,"public void test1821() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""Eiu4"");
    byte[] byteArray0 = new byte[3];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
    uTF8JsonGenerator0._checkStdFeatureChanges(0, (-1));
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test1922,"public void test1922() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""com.fasterxml.jackson.core.json.JsonGeneratorImpl"");
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(57343, (byte) 41);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, jsonGenerator0.getHighestEscapedChar())"
project,0,test2023,"public void test2023() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) 0, (ObjectCodec) null, stringWriter0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
    JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test2124,"public void test2124() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""com.fasterxml.jackson.core.JsonParseException"");
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
    // Undeclared exception!
    uTF8JsonGenerator0.writeStringField(""com.fasterxml.jackson.core.JsonParseException"", ""com.fasterxml.jackson.core.JsonParseException"");
}",0,
project,0,test2225,"public void test2225() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""com.fasterxml.jackson.core.json.JsonGeneratorImpl"");
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
    SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, jsonGenerator0.getHighestEscapedChar())"
project,0,test2326,"public void test2326() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-6), (ObjectCodec) null, (Writer) null);
    int int0 = writerBasedJsonGenerator0.getHighestEscapedChar();
    assertEquals(127, int0);
}",0,"assertEquals(0, int0)"
project,0,test2427,"public void test2427() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""Eiu4"");
    byte[] byteArray0 = new byte[3];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
    uTF8JsonGenerator0.getCharacterEscapes();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test2528,"public void test2528() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-6), (ObjectCodec) null, (Writer) null);
    writerBasedJsonGenerator0.version();
    assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar())"
