focal_method,test_prefix,docstring
"@Override
public boolean isClosed() {
    return _closed;
}","public void test0000() throws Throwable {
    byte[] byteArray0 = new byte[5];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 503, 132, false);
    long long0 = uTF8StreamJsonParser0.nextLongValue((-5673L));
    assertTrue(uTF8StreamJsonParser0.isClosed());
}",""
"@Override
public long nextLongValue(long defaultValue) throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getLongValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
}","public void test0001() throws Throwable {
    byte[] byteArray0 = new byte[5];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 503, 132, false);
    long long0 = uTF8StreamJsonParser0.nextLongValue((-5673L));
    assertEquals((-5673L), long0);
}",""
"@SuppressWarnings(""unchecked"")
public <T extends TreeNode> T readValueAsTree() throws IOException, JsonProcessingException {
    ObjectCodec codec = getCodec();
    if (codec == null) {
        throw new IllegalStateException(""No ObjectCodec defined for the parser, can not deserialize JSON into JsonNode tree"");
    }
    return (T) codec.readTree(this);
}","public void test0012() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
    doReturn((String) null).when(objectCodec0).toString();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3220, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-63), 2000, true);
    TreeNode treeNode0 = uTF8StreamJsonParser0.readValueAsTree();
    assertNull(treeNode0);
}","/**
 * Method to deserialize JSON content into equivalent ""tree model"",
 * represented by root {@link TreeNode} of resulting model.
 * For JSON Arrays it will an array node (with child nodes),
 * for objects object node (with child nodes), and for other types
 * matching leaf node type
 */"
"/*
    /**********************************************************
    /* Public API, traversal, nextXxxValue/nextFieldName
    /**********************************************************
     */
@Override
public boolean nextFieldName(SerializableString str) throws IOException, JsonParseException {
    // // // Note: most of code below is copied from nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        // can't have name right after name
        _nextAfterName();
        return false;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        // end-of-input
        close();
        _currToken = null;
        return false;
    }
    _tokenInputTotal = _currInputProcessed + _inputPtr - 1;
    _tokenInputRow = _currInputRow;
    _tokenInputCol = _inputPtr - _currInputRowStart - 1;
    // finally: clear any data retained so far
    _binaryValue = null;
    // Closing scope?
    if (i == INT_RBRACKET) {
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_ARRAY;
        return false;
    }
    if (i == INT_RCURLY) {
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_OBJECT;
        return false;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.getTypeDesc() + "" entries"");
        }
        i = _skipWS();
    }
    if (!_parsingContext.inObject()) {
        _nextTokenNotInObject(i);
        return false;
    }
    // // // This part differs, name parsing
    if (i == INT_QUOTE) {
        // when doing literal match, must consider escaping:
        byte[] nameBytes = str.asQuotedUTF8();
        final int len = nameBytes.length;
        if ((_inputPtr + len) < _inputEnd) {
            // maybe...
            // first check length match by
            final int end = _inputPtr + len;
            if (_inputBuffer[end] == INT_QUOTE) {
                int offset = 0;
                final int ptr = _inputPtr;
                while (true) {
                    if (offset == len) {
                        // yes, match!
                        // skip current value first
                        _inputPtr = end + 1;
                        // First part is simple; setting of name
                        _parsingContext.setCurrentName(str.getValue());
                        _currToken = JsonToken.FIELD_NAME;
                        // But then we also must handle following value etc
                        _isNextTokenNameYes();
                        return true;
                    }
                    if (nameBytes[offset] != _inputBuffer[ptr + offset]) {
                        break;
                    }
                    ++offset;
                }
            }
        }
    }
    return _isNextTokenNameMaybe(i, str);
}","public void test0023() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 73;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 78, (byte) 3, true);
    SerializedString serializedString0 = new SerializedString("""");
    try {
        uTF8StreamJsonParser0.nextFieldName(serializedString0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'I\u0000\u0000': was expecting 'null', 'true', 'false' or NaN
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 10]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, Native Ids (type, object)
    /**********************************************************
     */
/**
 *  Introspection method that may be called to see if the underlying
 *  data format supports some kind of Object Ids natively (many do not;
 *  for example, JSON doesn't).
 * <p>
 *  Default implementation returns true; overridden by data formats
 *  that do support native Object Ids. Caller is expected to either
 *  use a non-native notation (explicit property or such), or fail,
 *  in case it can not use native object ids.
 *
 *  @since 2.3
 */
public boolean canReadObjectId() {
    return false;
}","public void test0034() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2022), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-2103), 127, false);
    uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
    assertFalse(uTF8StreamJsonParser0.canReadObjectId());
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test0045() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 85;
    byteArray0[4] = (byte) (-91);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-113), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 146, (byte) (-91), false);
    try {
        uTF8StreamJsonParser0.nextIntValue((byte) 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0xa5
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000002; line: 1, column: -85]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public Object getInputSource() {
    return _inputStream;
}","public void test0056() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    MockFile mockFile0 = new MockFile(""5^2'@jB$$\""!"", ""com.fasterxml.jackson.core.io.CharTypes"");
    File file0 = MockFile.createTempFile(""5^2'@jB$$\""!"", (String) null, (File) mockFile0);
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 16);
    byte[] byteArray0 = new byte[7];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 32, pushbackInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 32, 16, true);
    Object object0 = uTF8StreamJsonParser0.getInputSource();
    assertSame(object0, pushbackInputStream0);
}",""
"@Override
public String nextTextValue() throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_STRING) {
            if (_tokenIncomplete) {
                _tokenIncomplete = false;
                _finishString();
            }
            return _textBuffer.contentsAsString();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
}","public void test0067() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 85;
    byteArray0[1] = (byte) (-56);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-3692), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 44, (-3692), true);
    try {
        uTF8StreamJsonParser0.nextTextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000003; line: 1, column: -3688]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected Name parseMediumName(int q2, final int[] codes) throws IOException, JsonParseException {
    // Ok, got 5 name bytes so far
    int i = _inputBuffer[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = _inputBuffer[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = _inputBuffer[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = _inputBuffer[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    return parseLongName(i);
}","public void test0078() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-56), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (-805), false);
    int[] intArray0 = new int[7];
    intArray0[0] = (int) (byte) (-56);
    try {
        uTF8StreamJsonParser0.parseMediumName((byte) (-56), intArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000004; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Overrides
    /**********************************************************
     */
@Override
public int releaseBuffered(OutputStream out) throws IOException {
    int count = _inputEnd - _inputPtr;
    if (count < 1) {
        return 0;
    }
    // let's just advance ptr to end
    int origPtr = _inputPtr;
    out.write(_inputBuffer, origPtr, count);
    return count;
}","public void test0089() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 49, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 3312, (-601), false);
    uTF8StreamJsonParser0._parseNumber((-601));
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Overrides
    /**********************************************************
     */
@Override
public int releaseBuffered(OutputStream out) throws IOException {
    int count = _inputEnd - _inputPtr;
    if (count < 1) {
        return 0;
    }
    // let's just advance ptr to end
    int origPtr = _inputPtr;
    out.write(_inputBuffer, origPtr, count);
    return count;
}","public void test00910() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 9, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, (byte) 0, true);
    int int0 = uTF8StreamJsonParser0.releaseBuffered((OutputStream) null);
    assertEquals(0, int0);
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test01011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    byte[] byteArray1 = new byte[0];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 202, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray1, 2000, 2000, false);
    try {
        uTF8StreamJsonParser0.nextIntValue(2000);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // InputStream.read() returned 0 characters when trying to read 0 bytes
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"protected boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        _currInputProcessed += _inputPtr;
        _currInputRowStart -= _inputPtr;
        System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01112() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    MockFile mockFile0 = new MockFile(""5^2'@jB$$\""!"", ""com.fasterxml.jackson.core.io.CharTypes"");
    File file0 = MockFile.createTempFile(""5^2'@jB$$\""!"", (String) null, (File) mockFile0);
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 16);
    byte[] byteArray0 = new byte[7];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 32, pushbackInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 32, 16, true);
    boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast((-921));
    assertTrue(boolean0);
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"protected boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        _currInputProcessed += _inputPtr;
        _currInputRowStart -= _inputPtr;
        System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01213() throws Throwable {
    byte[] byteArray0 = new byte[5];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 848, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 4, 4, true);
    boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast(848);
    assertFalse(boolean0);
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"protected boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        _currInputProcessed += _inputPtr;
        _currInputRowStart -= _inputPtr;
        System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01315() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 202, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-2518), (-1249), false);
    boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast(92);
    assertFalse(boolean0);
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"protected boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        _currInputProcessed += _inputPtr;
        _currInputRowStart -= _inputPtr;
        System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01416() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 31, sequenceInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 31, 98, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._loadToHaveAtLeast(129);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"protected boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        _currInputProcessed += _inputPtr;
        _currInputRowStart -= _inputPtr;
        System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01517() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 313, pushbackInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-54), 1058, false);
    try {
        uTF8StreamJsonParser0._loadToHaveAtLeast(214);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // InputStream.read() returned 0 characters when trying to read 1112 bytes
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"@Override
public Boolean nextBooleanValue() throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    switch(nextToken()) {
        case VALUE_TRUE:
            return Boolean.TRUE;
        case VALUE_FALSE:
            return Boolean.FALSE;
        default:
            return null;
    }
}","public void test01719() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    MockFile mockFile0 = new MockFile(""5^2'@jB$$\""!"", ""com.fasterxml.jackson.core.io.CharTypes"");
    File file0 = MockFile.createTempFile(""5^2'@jB$$\""!"", (String) null, (File) mockFile0);
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 16);
    byte[] byteArray0 = new byte[7];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 32, pushbackInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 32, 16, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Trying to release buffer not owned by the context
        //
        verifyException(""com.fasterxml.jackson.core.io.IOContext"", e);
    }
}",""
"@Override
public Boolean nextBooleanValue() throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    switch(nextToken()) {
        case VALUE_TRUE:
            return Boolean.TRUE;
        case VALUE_FALSE:
            return Boolean.FALSE;
        default:
            return null;
    }
}","public void test01820() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1846, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, (byte[]) null, 2000, 2000, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, data access
    /**********************************************************
     */
@Override
public String getText() throws IOException, JsonParseException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            _finishString();
        }
        return _textBuffer.contentsAsString();
    }
    return _getText2(_currToken);
}","public void test01921() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-56), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-56), 2000, false);
    String string0 = uTF8StreamJsonParser0.getText();
    assertNull(string0);
}",""
"// // // Let's override default impls for improved performance
// @since 2.1
@Override
public String getValueAsString() throws IOException, JsonParseException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            _finishString();
        }
        return _textBuffer.contentsAsString();
    }
    return super.getValueAsString(null);
}","public void test02022() throws Throwable {
    byte[] byteArray0 = new byte[5];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 503, 132, false);
    String string0 = uTF8StreamJsonParser0.getValueAsString();
    assertNull(string0);
}",""
"// @since 2.1
@Override
public String getValueAsString(String defValue) throws IOException, JsonParseException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            _finishString();
        }
        return _textBuffer.contentsAsString();
    }
    return super.getValueAsString(defValue);
}","public void test02123() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[6];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2648, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-2847), 1648, false);
    String string0 = uTF8StreamJsonParser0.getValueAsString(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
    assertEquals(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"", string0);
}",""
"protected String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t) {
        case FIELD_NAME:
            return _parsingContext.getCurrentName();
        case VALUE_STRING:
        // fall through
        case VALUE_NUMBER_INT:
        case VALUE_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02224() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Non-standard token '"", false);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-58), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-278), false);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals("""", string0);
}",""
"protected String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t) {
        case FIELD_NAME:
            return _parsingContext.getCurrentName();
        case VALUE_STRING:
        // fall through
        case VALUE_NUMBER_INT:
        case VALUE_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02325() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[9];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2), (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (byte) 5, 0, false);
    JsonToken jsonToken0 = JsonToken.FIELD_NAME;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertNull(string0);
}",""
"protected String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t) {
        case FIELD_NAME:
            return _parsingContext.getCurrentName();
        case VALUE_STRING:
        // fall through
        case VALUE_NUMBER_INT:
        case VALUE_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02426() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = iOContext0.allocBase64Buffer();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 47, (-348), true);
    JsonToken jsonToken0 = JsonToken.VALUE_STRING;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals("""", string0);
}",""
"protected String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t) {
        case FIELD_NAME:
            return _parsingContext.getCurrentName();
        case VALUE_STRING:
        // fall through
        case VALUE_NUMBER_INT:
        case VALUE_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02527() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 47, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 47, (byte) 47, false);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals("""", string0);
}",""
"protected String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t) {
        case FIELD_NAME:
            return _parsingContext.getCurrentName();
        case VALUE_STRING:
        // fall through
        case VALUE_NUMBER_INT:
        case VALUE_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02628() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2821), (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 47, (-4), false);
    JsonToken jsonToken0 = JsonToken.VALUE_NULL;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals(""null"", string0);
}",""
"@Override
public char[] getTextCharacters() throws IOException, JsonParseException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken) {
            case FIELD_NAME:
                if (!_nameCopied) {
                    String name = _parsingContext.getCurrentName();
                    int nameLen = name.length();
                    if (_nameCopyBuffer == null) {
                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);
                    } else if (_nameCopyBuffer.length < nameLen) {
                        _nameCopyBuffer = new char[nameLen];
                    }
                    name.getChars(0, nameLen, _nameCopyBuffer, 0);
                    _nameCopied = true;
                }
                return _nameCopyBuffer;
            case VALUE_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case VALUE_NUMBER_INT:
            case VALUE_NUMBER_FLOAT:
                return _textBuffer.getTextBuffer();
            default:
                return _currToken.asCharArray();
        }
    }
    return null;
}","public void test02729() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Non-standard token '"", false);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-58), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-278), false);
    char[] charArray0 = uTF8StreamJsonParser0.getTextCharacters();
    assertNull(charArray0);
}",""
"@Override
public int getTextLength() throws IOException, JsonParseException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken) {
            case FIELD_NAME:
                return _parsingContext.getCurrentName().length();
            case VALUE_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case VALUE_NUMBER_INT:
            case VALUE_NUMBER_FLOAT:
                return _textBuffer.size();
            default:
                return _currToken.asCharArray().length;
        }
    }
    return 0;
}","public void test02830() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    MockFile mockFile0 = new MockFile(""5^2'@jB$$\""!"", ""com.fasterxml.jackson.core.io.CharTypes"");
    File file0 = MockFile.createTempFile(""5^2'@jB$$\""!"", (String) null, (File) mockFile0);
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 16);
    byte[] byteArray0 = new byte[7];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 32, pushbackInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 32, 16, true);
    int int0 = uTF8StreamJsonParser0.getTextLength();
    assertEquals(0, int0);
}",""
"@Override
public int getTextOffset() throws IOException, JsonParseException {
    // Most have offset of 0, only some may have other values:
    if (_currToken != null) {
        switch(_currToken) {
            case FIELD_NAME:
                return 0;
            case VALUE_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case VALUE_NUMBER_INT:
            case VALUE_NUMBER_FLOAT:
                return _textBuffer.getTextOffset();
            default:
        }
    }
    return 0;
}","public void test02931() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = iOContext0.allocBase64Buffer();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1160), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1860, 1860, true);
    int int0 = uTF8StreamJsonParser0.getTextOffset();
    assertEquals(0, int0);
}",""
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test03032() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 49;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1994, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2141, (byte) 49, true);
    uTF8StreamJsonParser0.nextIntValue((byte) 109);
    uTF8StreamJsonParser0.getTextOffset();
    assertTrue(uTF8StreamJsonParser0.hasCurrentToken());
}",""
"@Override
public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException, JsonParseException {
    // if we have already read the token, just use whatever we may have
    if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING) {
        byte[] b = getBinaryValue(b64variant);
        out.write(b);
        return b.length;
    }
    // otherwise do ""real"" incremental parsing...
    byte[] buf = _ioContext.allocBase64Buffer();
    try {
        return _readBinary(b64variant, out, buf);
    } finally {
        _ioContext.releaseBase64Buffer(buf);
    }
}","public void test03133() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1278, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 31, (byte) 31, false);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    try {
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) pipedOutputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000005; line: 1, column: 32]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException, JsonParseException {
    // if we have already read the token, just use whatever we may have
    if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING) {
        byte[] b = getBinaryValue(b64variant);
        out.write(b);
        return b.length;
    }
    // otherwise do ""real"" incremental parsing...
    byte[] buf = _ioContext.allocBase64Buffer();
    try {
        return _readBinary(b64variant, out, buf);
    } finally {
        _ioContext.releaseBase64Buffer(buf);
    }
}","public void test03234() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1278, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 31, (byte) 31, false);
    uTF8StreamJsonParser0._tokenIncomplete = true;
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    try {
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) pipedOutputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000006; line: 1, column: 32]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException, JsonParseException {
    int outputPtr = 0;
    final int outputEnd = buffer.length - 3;
    int outputCount = 0;
    while (true) {
        // first, we'll skip preceding white space, if any
        int ch;
        do {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            ch = (int) _inputBuffer[_inputPtr++] & 0xFF;
        } while (ch <= INT_SPACE);
        int bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            // reached the end, fair and square?
            if (ch == INT_QUOTE) {
                break;
            }
            bits = _decodeBase64Escape(b64variant, ch, 0);
            if (bits < 0) {
                // white space to skip
                continue;
            }
        }
        // enough room? If not, flush
        if (outputPtr > outputEnd) {
            outputCount += outputPtr;
            out.write(buffer, 0, outputPtr);
            outputPtr = 0;
        }
        int decodedData = bits;
        // then second base64 char; can't get padding yet, nor ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            bits = _decodeBase64Escape(b64variant, ch, 1);
        }
        decodedData = (decodedData << 6) | bits;
        // third base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        // First branch: can get padding (-> 1 byte)
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""' && !b64variant.usesPadding()) {
                    decodedData >>= 4;
                    buffer[outputPtr++] = (byte) decodedData;
                    break;
                }
                bits = _decodeBase64Escape(b64variant, ch, 2);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                // Ok, must get padding
                if (_inputPtr >= _inputEnd) {
                    loadMoreGuaranteed();
                }
                ch = _inputBuffer[_inputPtr++] & 0xFF;
                if (!b64variant.usesPaddingChar(ch)) {
                    throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                }
                // Got 12 bits, only need 8, need to shift
                decodedData >>= 4;
                buffer[outputPtr++] = (byte) decodedData;
                continue;
            }
        }
        // Nope, 2 or 3 bytes
        decodedData = (decodedData << 6) | bits;
        // fourth and last base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""' && !b64variant.usesPadding()) {
                    decodedData >>= 2;
                    buffer[outputPtr++] = (byte) (decodedData >> 8);
                    buffer[outputPtr++] = (byte) decodedData;
                    break;
                }
                bits = _decodeBase64Escape(b64variant, ch, 3);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                /* With padding we only get 2 bytes; but we have
                     * to shift it a bit so it is identical to triplet
                     * case with partial output.
                     * 3 chars gives 3x6 == 18 bits, of which 2 are
                     * dummies, need to discard:
                     */
                decodedData >>= 2;
                buffer[outputPtr++] = (byte) (decodedData >> 8);
                buffer[outputPtr++] = (byte) decodedData;
                continue;
            }
        }
        // otherwise, our triplet is now complete
        decodedData = (decodedData << 6) | bits;
        buffer[outputPtr++] = (byte) (decodedData >> 16);
        buffer[outputPtr++] = (byte) (decodedData >> 8);
        buffer[outputPtr++] = (byte) decodedData;
    }
    _tokenIncomplete = false;
    if (outputPtr > 0) {
        outputCount += outputPtr;
        out.write(buffer, 0, outputPtr);
    }
    return outputCount;
}","public void test03335() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 34, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 117, true);
    Base64Variant base64Variant0 = new Base64Variant("""", ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"", true, '-', 2000);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
    try {
        uTF8StreamJsonParser0._readBinary(base64Variant0, mockPrintStream0, byteArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: UNKNOWN; line: 1, column: 132]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test03436() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 116;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 85, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1551, (byte) 116, false);
    try {
        uTF8StreamJsonParser0.nextIntValue((byte) 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 't\u0000': was expecting 'null', 'true', 'false' or NaN
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000007; line: 1, column: 121]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public boolean isClosed() {
    return _closed;
}","public void test03537() throws Throwable {
    byte[] byteArray0 = new byte[5];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 503, 132, false);
    SerializedString serializedString0 = new SerializedString("""");
    boolean boolean0 = uTF8StreamJsonParser0.nextFieldName(serializedString0);
    assertTrue(uTF8StreamJsonParser0.isClosed());
}",""
"/*
    /**********************************************************
    /* Public API, traversal, nextXxxValue/nextFieldName
    /**********************************************************
     */
@Override
public boolean nextFieldName(SerializableString str) throws IOException, JsonParseException {
    // // // Note: most of code below is copied from nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        // can't have name right after name
        _nextAfterName();
        return false;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        // end-of-input
        close();
        _currToken = null;
        return false;
    }
    _tokenInputTotal = _currInputProcessed + _inputPtr - 1;
    _tokenInputRow = _currInputRow;
    _tokenInputCol = _inputPtr - _currInputRowStart - 1;
    // finally: clear any data retained so far
    _binaryValue = null;
    // Closing scope?
    if (i == INT_RBRACKET) {
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_ARRAY;
        return false;
    }
    if (i == INT_RCURLY) {
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_OBJECT;
        return false;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.getTypeDesc() + "" entries"");
        }
        i = _skipWS();
    }
    if (!_parsingContext.inObject()) {
        _nextTokenNotInObject(i);
        return false;
    }
    // // // This part differs, name parsing
    if (i == INT_QUOTE) {
        // when doing literal match, must consider escaping:
        byte[] nameBytes = str.asQuotedUTF8();
        final int len = nameBytes.length;
        if ((_inputPtr + len) < _inputEnd) {
            // maybe...
            // first check length match by
            final int end = _inputPtr + len;
            if (_inputBuffer[end] == INT_QUOTE) {
                int offset = 0;
                final int ptr = _inputPtr;
                while (true) {
                    if (offset == len) {
                        // yes, match!
                        // skip current value first
                        _inputPtr = end + 1;
                        // First part is simple; setting of name
                        _parsingContext.setCurrentName(str.getValue());
                        _currToken = JsonToken.FIELD_NAME;
                        // But then we also must handle following value etc
                        _isNextTokenNameYes();
                        return true;
                    }
                    if (nameBytes[offset] != _inputBuffer[ptr + offset]) {
                        break;
                    }
                    ++offset;
                }
            }
        }
    }
    return _isNextTokenNameMaybe(i, str);
}","public void test03538() throws Throwable {
    byte[] byteArray0 = new byte[5];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 503, 132, false);
    SerializedString serializedString0 = new SerializedString("""");
    boolean boolean0 = uTF8StreamJsonParser0.nextFieldName(serializedString0);
    assertFalse(boolean0);
}",""
"@Override
public boolean isClosed() {
    return _closed;
}","public void test03639() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[6];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2520), (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2648, 2258, false);
    int int0 = uTF8StreamJsonParser0.nextIntValue(1907);
    assertTrue(uTF8StreamJsonParser0.isClosed());
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test03640() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[6];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2520), (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2648, 2258, false);
    int int0 = uTF8StreamJsonParser0.nextIntValue(1907);
    assertEquals(1907, int0);
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /* (note: in 1.6 and prior, part of ""Utf8NumericParser""
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parseNumber(int c) throws IOException, JsonParseException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    boolean negative = (c == INT_MINUS);
    // Need to prepend sign?
    if (negative) {
        outBuf[outPtr++] = '-';
        // Must have something after sign too
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        // Note: must be followed by a digit
        if (c < INT_0 || c > INT_9) {
            return _handleInvalidNumberStart(c, true);
        }
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks:
    int end = _inputPtr + outBuf.length;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parserNumber2(outBuf, outPtr, negative, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, negative, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    // And there we have it!
    return resetInt(negative, intLen);
}","public void test03741() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 74, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 2000, true);
    try {
        uTF8StreamJsonParser0._parseNumber(45);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer@0000000008; line: 1, column: 2002]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /* (note: in 1.6 and prior, part of ""Utf8NumericParser""
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parseNumber(int c) throws IOException, JsonParseException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    boolean negative = (c == INT_MINUS);
    // Need to prepend sign?
    if (negative) {
        outBuf[outPtr++] = '-';
        // Must have something after sign too
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        // Note: must be followed by a digit
        if (c < INT_0 || c > INT_9) {
            return _handleInvalidNumberStart(c, true);
        }
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks:
    int end = _inputPtr + outBuf.length;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parserNumber2(outBuf, outPtr, negative, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, negative, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    // And there we have it!
    return resetInt(negative, intLen);
}","public void test03842() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[6];
    PipedInputStream pipedInputStream0 = new PipedInputStream(1792);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 49, bufferedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-1830), 2000, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseNumber(45);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1830
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test03943() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 92, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 214, true);
    uTF8StreamJsonParser0._parseNumber(48);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer@0000000009; line: 1, column: 216]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /* (note: in 1.6 and prior, part of ""Utf8NumericParser""
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parseNumber(int c) throws IOException, JsonParseException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    boolean negative = (c == INT_MINUS);
    // Need to prepend sign?
    if (negative) {
        outBuf[outPtr++] = '-';
        // Must have something after sign too
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        // Note: must be followed by a digit
        if (c < INT_0 || c > INT_9) {
            return _handleInvalidNumberStart(c, true);
        }
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks:
    int end = _inputPtr + outBuf.length;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parserNumber2(outBuf, outPtr, negative, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, negative, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    // And there we have it!
    return resetInt(negative, intLen);
}","public void test04044() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-280), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 49, 3728, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseNumber((byte) 46);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 49
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test04145() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 49;
    byteArray0[1] = (byte) 49;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 49, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 65536, (byte) 49, false);
    int int0 = uTF8StreamJsonParser0.nextIntValue((byte) 49);
    assertTrue(uTF8StreamJsonParser0.hasCurrentToken());
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test04146() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 49;
    byteArray0[1] = (byte) 49;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 49, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 65536, (byte) 49, false);
    int int0 = uTF8StreamJsonParser0.nextIntValue((byte) 49);
    assertEquals(11, int0);
}",""
"@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","public void test04247() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 49;
    byteArray0[1] = (byte) 49;
    byteArray0[2] = (byte) 49;
    byteArray0[3] = (byte) 49;
    byteArray0[4] = (byte) 49;
    byteArray0[5] = (byte) (-7);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 49, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 65536, (byte) 49, false);
    int int0 = uTF8StreamJsonParser0.nextIntValue((byte) 49);
    assertTrue(uTF8StreamJsonParser0.hasCurrentToken());
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test04248() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 49;
    byteArray0[1] = (byte) 49;
    byteArray0[2] = (byte) 49;
    byteArray0[3] = (byte) 49;
    byteArray0[4] = (byte) 49;
    byteArray0[5] = (byte) (-7);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 49, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 65536, (byte) 49, false);
    int int0 = uTF8StreamJsonParser0.nextIntValue((byte) 49);
    assertEquals(11111, int0);
}",""
"public boolean isNumeric() {
    return (this == VALUE_NUMBER_INT) || (this == VALUE_NUMBER_FLOAT);
}","public void test04450() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 116, (byte) (-4));
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1416), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2000, 42, true);
    JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNumber(42);
    assertTrue(jsonToken0.isNumeric());
}",""
"protected Name parseLongName(int q) throws IOException, JsonParseException {
    // As explained above, will ignore UTF-8 encoding at this point
    final int[] codes = _icLatin1;
    int qlen = 2;
    while (true) {
        /* Let's offline if we hit buffer boundary (otherwise would
             * need to [try to] align input, which is bit complicated
             * and may not always be possible)
             */
        if ((_inputEnd - _inputPtr) < 4) {
            return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
        }
        // Otherwise can skip boundary checks for 4 bytes in loop
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
}","public void test04551() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) (-1);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 947, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-964), true);
    uTF8StreamJsonParser0._parseNumber(49);
    try {
        uTF8StreamJsonParser0.parseLongName((byte) (-1));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -947]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /* (note: in 1.6 and prior, part of ""Utf8NumericParser""
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parseNumber(int c) throws IOException, JsonParseException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    boolean negative = (c == INT_MINUS);
    // Need to prepend sign?
    if (negative) {
        outBuf[outPtr++] = '-';
        // Must have something after sign too
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        // Note: must be followed by a digit
        if (c < INT_0 || c > INT_9) {
            return _handleInvalidNumberStart(c, true);
        }
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks:
    int end = _inputPtr + outBuf.length;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parserNumber2(outBuf, outPtr, negative, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, negative, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    // And there we have it!
    return resetInt(negative, intLen);
}","public void test04652() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 46;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 9, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 422, 422, false);
    try {
        uTF8StreamJsonParser0._parseNumber((byte) 9);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: Decimal point not followed by a digit
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000010; line: 1, column: 425]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /* (note: in 1.6 and prior, part of ""Utf8NumericParser""
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parseNumber(int c) throws IOException, JsonParseException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    boolean negative = (c == INT_MINUS);
    // Need to prepend sign?
    if (negative) {
        outBuf[outPtr++] = '-';
        // Must have something after sign too
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        // Note: must be followed by a digit
        if (c < INT_0 || c > INT_9) {
            return _handleInvalidNumberStart(c, true);
        }
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks:
    int end = _inputPtr + outBuf.length;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parserNumber2(outBuf, outPtr, negative, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, negative, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    // And there we have it!
    return resetInt(negative, intLen);
}","public void test04753() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-56), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-56), 2000, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseNumber(48);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -56
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"// caller had pushed it back, before calling; reset
// TODO? Handle UTF-8 char decoding for error reporting
/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected Name _parseFieldName(int i) throws IOException, JsonParseException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 9) > _inputEnd) {
        // Need 8 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i, codes);
                    }
                    if (i == INT_QUOTE) {
                        // one byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // one byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // one byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return BytesToNameCanonicalizer.getEmptyName();
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test04854() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 29, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 38, (byte) 29, false);
    try {
        uTF8StreamJsonParser0._parseFieldName(38);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('&' (code 38)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
        //  at [Source: UNKNOWN; line: 1, column: 39]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 *  Method called to ensure that a root-value is followed by a space
 *  token.
 * <p>
 *  NOTE: caller MUST ensure there is at least one character available;
 *  and that input pointer is AT given char (not past)
 */"
"protected Name parseMediumName(int q2, final int[] codes) throws IOException, JsonParseException {
    // Ok, got 5 name bytes so far
    int i = _inputBuffer[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = _inputBuffer[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = _inputBuffer[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = _inputBuffer[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    return parseLongName(i);
}","public void test04955() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-56), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (byte) (-56), false);
    int[] intArray0 = new int[7];
    try {
        uTF8StreamJsonParser0.parseMediumName((byte) (-56), intArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000011; line: 1, column: 5]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected Name parseLongName(int q) throws IOException, JsonParseException {
    // As explained above, will ignore UTF-8 encoding at this point
    final int[] codes = _icLatin1;
    int qlen = 2;
    while (true) {
        /* Let's offline if we hit buffer boundary (otherwise would
             * need to [try to] align input, which is bit complicated
             * and may not always be possible)
             */
        if ((_inputEnd - _inputPtr) < 4) {
            return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
        }
        // Otherwise can skip boundary checks for 4 bytes in loop
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
}","public void test05056() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) (-1);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 947, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-964), true);
    uTF8StreamJsonParser0._parseNumber(49);
    try {
        uTF8StreamJsonParser0.parseLongName((byte) (-1));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -947]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected Name parseLongName(int q) throws IOException, JsonParseException {
    // As explained above, will ignore UTF-8 encoding at this point
    final int[] codes = _icLatin1;
    int qlen = 2;
    while (true) {
        /* Let's offline if we hit buffer boundary (otherwise would
             * need to [try to] align input, which is bit complicated
             * and may not always be possible)
             */
        if ((_inputEnd - _inputPtr) < 4) {
            return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
        }
        // Otherwise can skip boundary checks for 4 bytes in loop
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
}","public void test05157() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) (-1);
    byteArray0[2] = (byte) (-99);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 947, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-964), true);
    uTF8StreamJsonParser0._parseNumber(49);
    try {
        uTF8StreamJsonParser0.parseLongName((byte) (-1));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -947]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected Name parseLongName(int q) throws IOException, JsonParseException {
    // As explained above, will ignore UTF-8 encoding at this point
    final int[] codes = _icLatin1;
    int qlen = 2;
    while (true) {
        /* Let's offline if we hit buffer boundary (otherwise would
             * need to [try to] align input, which is bit complicated
             * and may not always be possible)
             */
        if ((_inputEnd - _inputPtr) < 4) {
            return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
        }
        // Otherwise can skip boundary checks for 4 bytes in loop
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
}","public void test05258() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) (-1);
    byteArray0[1] = (byte) (-1);
    byteArray0[2] = (byte) (-99);
    byteArray0[3] = (byte) (-1);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 947, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-964), true);
    uTF8StreamJsonParser0._parseNumber(49);
    try {
        uTF8StreamJsonParser0.parseLongName((byte) (-1));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -947]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected Name slowParseName() throws IOException, JsonParseException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\""' for name"");
        }
    }
    int i = _inputBuffer[_inputPtr++] & 0xFF;
    if (i == INT_QUOTE) {
        // special case, """"
        return BytesToNameCanonicalizer.getEmptyName();
    }
    return parseEscapedName(_quadBuffer, 0, 0, i, 0);
}","public void test05359() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[6];
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 44, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 5, 44, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.slowParseName();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 6
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}","/**
 * Method called when not even first 8 bytes are guaranteed
 * to come consequtively. Happens rarely, so this is offlined;
 * plus we'll also do full checks for escaping etc.
 */"
"protected Name slowParseName() throws IOException, JsonParseException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\""' for name"");
        }
    }
    int i = _inputBuffer[_inputPtr++] & 0xFF;
    if (i == INT_QUOTE) {
        // special case, """"
        return BytesToNameCanonicalizer.getEmptyName();
    }
    return parseEscapedName(_quadBuffer, 0, 0, i, 0);
}","public void test05460() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 85, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1551, (byte) 0, false);
    try {
        uTF8StreamJsonParser0.slowParseName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000012; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called when not even first 8 bytes are guaranteed
 * to come consequtively. Happens rarely, so this is offlined;
 * plus we'll also do full checks for escaping etc.
 */"
"protected Name slowParseName() throws IOException, JsonParseException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\""' for name"");
        }
    }
    int i = _inputBuffer[_inputPtr++] & 0xFF;
    if (i == INT_QUOTE) {
        // special case, """"
        return BytesToNameCanonicalizer.getEmptyName();
    }
    return parseEscapedName(_quadBuffer, 0, 0, i, 0);
}","public void test05561() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 458, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 458, (byte) (-113), false);
    try {
        uTF8StreamJsonParser0.slowParseName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input: was expecting closing '\""' for name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000013; line: 1, column: 346]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called when not even first 8 bytes are guaranteed
 * to come consequtively. Happens rarely, so this is offlined;
 * plus we'll also do full checks for escaping etc.
 */"
"protected Name parseLongName(int q) throws IOException, JsonParseException {
    // As explained above, will ignore UTF-8 encoding at this point
    final int[] codes = _icLatin1;
    int qlen = 2;
    while (true) {
        /* Let's offline if we hit buffer boundary (otherwise would
             * need to [try to] align input, which is bit complicated
             * and may not always be possible)
             */
        if ((_inputEnd - _inputPtr) < 4) {
            return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
        }
        // Otherwise can skip boundary checks for 4 bytes in loop
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
}","public void test05662() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    byteArray0[7] = (byte) (-1);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 947, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-964), true);
    uTF8StreamJsonParser0._parseNumber(49);
    try {
        uTF8StreamJsonParser0.parseLongName((byte) (-1));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -947]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected Name parseLongName(int q) throws IOException, JsonParseException {
    // As explained above, will ignore UTF-8 encoding at this point
    final int[] codes = _icLatin1;
    int qlen = 2;
    while (true) {
        /* Let's offline if we hit buffer boundary (otherwise would
             * need to [try to] align input, which is bit complicated
             * and may not always be possible)
             */
        if ((_inputEnd - _inputPtr) < 4) {
            return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
        }
        // Otherwise can skip boundary checks for 4 bytes in loop
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
}","public void test05763() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 422, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 422, (byte) 29, false);
    try {
        uTF8StreamJsonParser0.parseLongName(34);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: 36]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected Name parseLongName(int q) throws IOException, JsonParseException {
    // As explained above, will ignore UTF-8 encoding at this point
    final int[] codes = _icLatin1;
    int qlen = 2;
    while (true) {
        /* Let's offline if we hit buffer boundary (otherwise would
             * need to [try to] align input, which is bit complicated
             * and may not always be possible)
             */
        if ((_inputEnd - _inputPtr) < 4) {
            return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
        }
        // Otherwise can skip boundary checks for 4 bytes in loop
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
}","public void test05864() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byte[] byteArray1 = iOContext0.allocBase64Buffer();
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-280), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray1, (byte) 49, 3728, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.parseLongName((byte) 46);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 2000
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"protected Name parseLongName(int q) throws IOException, JsonParseException {
    // As explained above, will ignore UTF-8 encoding at this point
    final int[] codes = _icLatin1;
    int qlen = 2;
    while (true) {
        /* Let's offline if we hit buffer boundary (otherwise would
             * need to [try to] align input, which is bit complicated
             * and may not always be possible)
             */
        if ((_inputEnd - _inputPtr) < 4) {
            return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
        }
        // Otherwise can skip boundary checks for 4 bytes in loop
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
}","public void test05965() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byte[] byteArray1 = iOContext0.allocBase64Buffer();
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 422, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray1, (byte) 46, 78, false);
    try {
        uTF8StreamJsonParser0.parseLongName((-2277));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000014; line: 1, column: 81]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"// caller had pushed it back, before calling; reset
// TODO? Handle UTF-8 char decoding for error reporting
/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected Name _parseFieldName(int i) throws IOException, JsonParseException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 9) > _inputEnd) {
        // Need 8 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i, codes);
                    }
                    if (i == INT_QUOTE) {
                        // one byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // one byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // one byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return BytesToNameCanonicalizer.getEmptyName();
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test06066() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 422, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 29, (byte) 29, true);
    try {
        uTF8StreamJsonParser0._parseFieldName((byte) 29);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 29)): was expecting double-quote to start field name
        //  at [Source: UNKNOWN; line: 1, column: 30]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 *  Method called to ensure that a root-value is followed by a space
 *  token.
 * <p>
 *  NOTE: caller MUST ensure there is at least one character available;
 *  and that input pointer is AT given char (not past)
 */"
"protected Name _handleOddName(int ch) throws IOException, JsonParseException {
    // [JACKSON-173]: allow single quotes
    if (ch == '\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
        return _parseAposName();
    }
    // [JACKSON-69]: allow unquoted names if feature enabled:
    if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {
        _reportUnexpectedChar(ch, ""was expecting double-quote to start field name"");
    }
    /* Also: note that although we use a different table here,
         * it does NOT handle UTF-8 decoding. It'll just pass those
         * high-bit codes as acceptable for later decoding.
         */
    final int[] codes = CharTypes.getInputCodeUtf8JsNames();
    // Also: must start with a valid character...
    if (codes[ch] != 0) {
        _reportUnexpectedChar(ch, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");
    }
    /* Ok, now; instead of ultra-optimizing parsing here (as with
         * regular JSON names), let's just use the generic ""slow""
         * variant. Can measure its impact later on if need be
         */
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    while (true) {
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr] & 0xFF;
        if (codes[ch] != 0) {
            break;
        }
        ++_inputPtr;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    Name name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test06167() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 458, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 458, (byte) (-113), false);
    try {
        uTF8StreamJsonParser0._handleOddName(242);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000015; line: 1, column: 346]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called when we see non-white space character other
 * than double quote, when expecting a field name.
 * In standard mode will just throw an expection; but
 * in non-standard modes may be able to parse name.
 */"
"public String getName() {
    return _name;
}","public void test06268() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, true);
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 57, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, 100, (byte) 52, true);
    Name name0 = uTF8StreamJsonParser0._handleOddName((byte) 49);
    assertEquals(""1"", name0.getName());
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected Name _parseAposName() throws IOException, JsonParseException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return BytesToNameCanonicalizer.getEmptyName();
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    Name name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test06369() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 214, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 214, 2000, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 214
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected Name _parseAposName() throws IOException, JsonParseException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return BytesToNameCanonicalizer.getEmptyName();
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    Name name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test06470() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 458, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 458, (byte) (-113), false);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input: was expecting closing ''' for name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000016; line: 1, column: 346]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"public String getName() {
    return _name;
}","public void test06571() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[13];
    byteArray0[0] = (byte) 39;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1014), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2047, (-1014), true);
    Name name0 = uTF8StreamJsonParser0._parseAposName();
    assertEquals("""", name0.getName());
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected Name _parseAposName() throws IOException, JsonParseException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return BytesToNameCanonicalizer.getEmptyName();
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    Name name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test06672() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[6];
    byteArray0[3] = (byte) 39;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 52, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 52, 47, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected Name _parseAposName() throws IOException, JsonParseException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return BytesToNameCanonicalizer.getEmptyName();
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    Name name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test06773() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) 109;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 52, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 52, 47, false);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000017; line: 1, column: 60]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected Name _parseAposName() throws IOException, JsonParseException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return BytesToNameCanonicalizer.getEmptyName();
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    Name name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test06874() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = iOContext0.allocBase64Buffer();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-1), (-2), false);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000018; line: 1, column: 3999]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected Name _handleOddName(int ch) throws IOException, JsonParseException {
    // [JACKSON-173]: allow single quotes
    if (ch == '\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
        return _parseAposName();
    }
    // [JACKSON-69]: allow unquoted names if feature enabled:
    if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {
        _reportUnexpectedChar(ch, ""was expecting double-quote to start field name"");
    }
    /* Also: note that although we use a different table here,
         * it does NOT handle UTF-8 decoding. It'll just pass those
         * high-bit codes as acceptable for later decoding.
         */
    final int[] codes = CharTypes.getInputCodeUtf8JsNames();
    // Also: must start with a valid character...
    if (codes[ch] != 0) {
        _reportUnexpectedChar(ch, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");
    }
    /* Ok, now; instead of ultra-optimizing parsing here (as with
         * regular JSON names), let's just use the generic ""slow""
         * variant. Can measure its impact later on if need be
         */
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    while (true) {
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr] & 0xFF;
        if (codes[ch] != 0) {
            break;
        }
        ++_inputPtr;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    Name name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test06975() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 109;
    byteArray0[1] = (byte) (-109);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, true);
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 57, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, 100, (byte) 52, true);
    try {
        uTF8StreamJsonParser0._handleOddName((byte) 49);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0x93
        //  at [Source: UNKNOWN; line: 1, column: 55]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called when we see non-white space character other
 * than double quote, when expecting a field name.
 * In standard mode will just throw an expection; but
 * in non-standard modes may be able to parse name.
 */"
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test07076() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 116;
    byteArray0[1] = (byte) 116;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 85, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1551, (byte) 116, false);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000019; line: 1, column: 121]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test07177() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = iOContext0.allocBase64Buffer();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-91), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 561, 0, true);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000020; line: 1, column: 4001]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test07278() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    byteArray0[2] = (byte) 85;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-1), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 85, (byte) 85, true);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000021; line: 1, column: 100]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test07379() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) (-63);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 3220, 656, false);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000022; line: 1, column: 659]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test07480() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) (-8);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-756), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 180, (byte) 123, false);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0xf8
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000023; line: 1, column: 125]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3(c);
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    // As per [JACKSON-208], call can now return:
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test07581() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 399, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 128, true);
    uTF8StreamJsonParser0._parseNumber(2257);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000024; line: 1, column: 130]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3(c);
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    // As per [JACKSON-208], call can now return:
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test07682() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 85, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, (-1265), true);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000025; line: 1, column: -1263]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3(c);
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    // As per [JACKSON-208], call can now return:
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test07783() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 116;
    byteArray0[1] = (byte) 116;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1721), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1224, 366, true);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000026; line: 1, column: 371]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3(c);
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    // As per [JACKSON-208], call can now return:
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test07884() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 85;
    byteArray0[1] = (byte) (-56);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-56), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-56), (byte) (-56), false);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000027; line: 1, column: -52]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3(c);
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    // As per [JACKSON-208], call can now return:
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test07985() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) (-1);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-113), (-3632), true);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0xff
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000028; line: 1, column: -3630]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected JsonToken _handleUnexpectedValue(int c) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(c) {
        case '\'':
            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
                return _handleApos();
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            if (_inputPtr >= _inputEnd) {
                if (!loadMore()) {
                    _reportInvalidEOFInValue();
                }
            }
            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);
    }
    // [Issue#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(c)) {
        _reportInvalidToken("""" + ((char) c), ""('true', 'false' or 'null')"");
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
    return null;
}","public void test08086() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 214, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 3, 3, false);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue(43);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: java.io.ByteArrayInputStream@0000000029; line: 1, column: 5]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method for handling cases where first non-space character
 * of an expected value token is not legal for standard JSON content.
 */"
"protected JsonToken _handleUnexpectedValue(int c) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(c) {
        case '\'':
            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
                return _handleApos();
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            if (_inputPtr >= _inputEnd) {
                if (!loadMore()) {
                    _reportInvalidEOFInValue();
                }
            }
            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);
    }
    // [Issue#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(c)) {
        _reportInvalidToken("""" + ((char) c), ""('true', 'false' or 'null')"");
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
    return null;
}","public void test08187() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 3, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, (byte) 3, true);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue((byte) 78);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'N\u0000\u0000\u0000\u0000\u0000': was expecting 'null', 'true', 'false' or NaN
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000030; line: 1, column: 14]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method for handling cases where first non-space character
 * of an expected value token is not legal for standard JSON content.
 */"
"protected JsonToken _handleUnexpectedValue(int c) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(c) {
        case '\'':
            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
                return _handleApos();
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            if (_inputPtr >= _inputEnd) {
                if (!loadMore()) {
                    _reportInvalidEOFInValue();
                }
            }
            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);
    }
    // [Issue#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(c)) {
        _reportInvalidToken("""" + ((char) c), ""('true', 'false' or 'null')"");
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
    return null;
}","public void test08288() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 116, (byte) (-4));
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 32, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 116, 39, true);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue(39);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character (''' (code 39)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
        //  at [Source: UNKNOWN; line: 1, column: 117]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method for handling cases where first non-space character
 * of an expected value token is not legal for standard JSON content.
 */"
"protected JsonToken _handleUnexpectedValue(int c) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(c) {
        case '\'':
            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
                return _handleApos();
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            if (_inputPtr >= _inputEnd) {
                if (!loadMore()) {
                    _reportInvalidEOFInValue();
                }
            }
            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);
    }
    // [Issue#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(c)) {
        _reportInvalidToken("""" + ((char) c), ""('true', 'false' or 'null')"");
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
    return null;
}","public void test08389() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 3968, 139, true);
    uTF8StreamJsonParser0._parseNumber((byte) (-50));
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue(39);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: UNKNOWN; line: 1, column: 141]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method for handling cases where first non-space character
 * of an expected value token is not legal for standard JSON content.
 */"
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                if (c != '\'') {
                    // marked as special, isn't here
                    c = _decodeEscaped();
                }
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test08490() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-474), 98, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                if (c != '\'') {
                    // marked as special, isn't here
                    c = _decodeEscaped();
                }
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test08591() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) 127;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, (-2528), false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000031; line: 1, column: -2525]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                if (c != '\'') {
                    // marked as special, isn't here
                    c = _decodeEscaped();
                }
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test08692() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 85;
    byteArray0[1] = (byte) (-63);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-63), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 47, (byte) (-63), true);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000032; line: 1, column: -59]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                if (c != '\'') {
                    // marked as special, isn't here
                    c = _decodeEscaped();
                }
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test08793() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-107);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 3, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 9, (byte) (-54), false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0x95
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000033; line: 1, column: -52]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected void _matchToken(String matchStr, int i) throws IOException {
    final int len = matchStr.length();
    do {
        if (((_inputPtr >= _inputEnd) && !loadMore()) || (_inputBuffer[_inputPtr] != matchStr.charAt(i))) {
            _reportInvalidToken(matchStr.substring(0, i));
        }
        ++_inputPtr;
    } while (++i < len);
    // but let's also ensure we either get EOF, or non-alphanum char...
    if (_inputPtr >= _inputEnd && !loadMore()) {
        return;
    }
    int ch = _inputBuffer[_inputPtr] & 0xFF;
    if (ch < '0' || ch == ']' || ch == '}') {
        // expected/allowed chars
        return;
    }
    // but actually only alphanums are problematic
    char c = (char) _decodeCharForError(ch);
    if (Character.isJavaIdentifierPart(c)) {
        _reportInvalidToken(matchStr.substring(0, i));
    }
}","public void test08894() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 458, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 458, (byte) (-113), true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._matchToken(""y<lqw(U<fHu("", 5100);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"protected JsonToken _handleUnexpectedValue(int c) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(c) {
        case '\'':
            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
                return _handleApos();
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            if (_inputPtr >= _inputEnd) {
                if (!loadMore()) {
                    _reportInvalidEOFInValue();
                }
            }
            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);
    }
    // [Issue#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(c)) {
        _reportInvalidToken("""" + ((char) c), ""('true', 'false' or 'null')"");
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
    return null;
}","public void test08995() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 92, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 202, true);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue(2000);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token '\u07D0\u0000\u0000': was expecting ('true', 'false' or 'null')
        //  at [Source: com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer@0000000034; line: 1, column: 207]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method for handling cases where first non-space character
 * of an expected value token is not legal for standard JSON content.
 */"
"@Override
public String nextTextValue() throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_STRING) {
            if (_tokenIncomplete) {
                _tokenIncomplete = false;
                _finishString();
            }
            return _textBuffer.contentsAsString();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
}","public void test09096() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
    IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, false);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 9;
    byteArray0[1] = (byte) 9;
    byteArray0[2] = (byte) 98;
    byteArray0[3] = (byte) 9;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 46, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 9, (byte) 9, false);
    try {
        uTF8StreamJsonParser0.nextTextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'b': was expecting ('true', 'false' or 'null')
        //  at [Source: org.evosuite.runtime.testdata.FileSystemHandling@0000000035; line: 1, column: 14]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test09197() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = iOContext0.allocBase64Buffer();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1160), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1860, 1860, true);
    try {
        uTF8StreamJsonParser0.nextIntValue(1860);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000036; line: 1, column: 1862]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test09298() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) (-7);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-7), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1997, 1980, false);
    try {
        uTF8StreamJsonParser0.nextIntValue(256);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0xf9
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000037; line: 1, column: 1982]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected Name parseLongName(int q) throws IOException, JsonParseException {
    // As explained above, will ignore UTF-8 encoding at this point
    final int[] codes = _icLatin1;
    int qlen = 2;
    while (true) {
        /* Let's offline if we hit buffer boundary (otherwise would
             * need to [try to] align input, which is bit complicated
             * and may not always be possible)
             */
        if ((_inputEnd - _inputPtr) < 4) {
            return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
        }
        // Otherwise can skip boundary checks for 4 bytes in loop
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
}","public void test09399() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bytesToNameCanonicalizer0, true);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 92, (-1647), true);
    uTF8StreamJsonParser0._parseNumber((-1647));
    try {
        uTF8StreamJsonParser0.parseLongName(92);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer@0000000038; line: 1, column: -1645]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
protected char _decodeEscaped() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("" in character escape sequence"");
        }
    }
    int c = (int) _inputBuffer[_inputPtr++];
    switch((int) c) {
        // First, ones that are mapped
        case 'b':
            return '\b';
        case 't':
            return '\t';
        case 'n':
            return '\n';
        case 'f':
            return '\f';
        case 'r':
            return '\r';
        // And these are to be returned as they are
        case '""':
        case '/':
        case '\\':
            return (char) c;
        case // and finally hex-escaped
        'u':
            break;
        default:
            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));
    }
    // Ok, a hex escape. Need 4 characters
    int value = 0;
    for (int i = 0; i < 4; ++i) {
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in character escape sequence"");
            }
        }
        int ch = (int) _inputBuffer[_inputPtr++];
        int digit = CharTypes.charToHex(ch);
        if (digit < 0) {
            _reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
        }
        value = (value << 4) | digit;
    }
    return (char) value;
}","public void test094100() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 458, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 458, (byte) (-113), true);
    try {
        uTF8StreamJsonParser0._decodeEscaped();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in character escape sequence
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000039; line: 1, column: 346]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
protected char _decodeEscaped() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("" in character escape sequence"");
        }
    }
    int c = (int) _inputBuffer[_inputPtr++];
    switch((int) c) {
        // First, ones that are mapped
        case 'b':
            return '\b';
        case 't':
            return '\t';
        case 'n':
            return '\n';
        case 'f':
            return '\f';
        case 'r':
            return '\r';
        // And these are to be returned as they are
        case '""':
        case '/':
        case '\\':
            return (char) c;
        case // and finally hex-escaped
        'u':
            break;
        default:
            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));
    }
    // Ok, a hex escape. Need 4 characters
    int value = 0;
    for (int i = 0; i < 4; ++i) {
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in character escape sequence"");
            }
        }
        int ch = (int) _inputBuffer[_inputPtr++];
        int digit = CharTypes.charToHex(ch);
        if (digit < 0) {
            _reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
        }
        value = (value << 4) | digit;
    }
    return (char) value;
}","public void test095101() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 116;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 256, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 48, (-1925), false);
    char char0 = uTF8StreamJsonParser0._decodeEscaped();
    assertEquals('\t', char0);
}",""
"protected int _decodeCharForError(int firstByte) throws IOException {
    int c = (int) firstByte;
    if (c < 0) {
        // if >= 0, is ascii and fine as is
        int needed;
        // Ok; if we end here, we got multi-byte combination
        if ((c & 0xE0) == 0xC0) {
            // 2 bytes (0x0080 - 0x07FF)
            c &= 0x1F;
            needed = 1;
        } else if ((c & 0xF0) == 0xE0) {
            // 3 bytes (0x0800 - 0xFFFF)
            c &= 0x0F;
            needed = 2;
        } else if ((c & 0xF8) == 0xF0) {
            // 4 bytes; double-char with surrogates and all...
            c &= 0x07;
            needed = 3;
        } else {
            _reportInvalidInitial(c & 0xFF);
            // never gets here
            needed = 1;
        }
        int d = nextByte();
        if ((d & 0xC0) != 0x080) {
            _reportInvalidOther(d & 0xFF);
        }
        c = (c << 6) | (d & 0x3F);
        if (needed > 1) {
            // needed == 1 means 2 bytes total
            // 3rd byte
            d = nextByte();
            if ((d & 0xC0) != 0x080) {
                _reportInvalidOther(d & 0xFF);
            }
            c = (c << 6) | (d & 0x3F);
            if (needed > 2) {
                // 4 bytes? (need surrogates)
                d = nextByte();
                if ((d & 0xC0) != 0x080) {
                    _reportInvalidOther(d & 0xFF);
                }
                c = (c << 6) | (d & 0x3F);
            }
        }
    }
    return c;
}","public void test096102() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[6];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 125, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 918, 2000, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._decodeCharForError((byte) (-27));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 918
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"protected int _decodeCharForError(int firstByte) throws IOException {
    int c = (int) firstByte;
    if (c < 0) {
        // if >= 0, is ascii and fine as is
        int needed;
        // Ok; if we end here, we got multi-byte combination
        if ((c & 0xE0) == 0xC0) {
            // 2 bytes (0x0080 - 0x07FF)
            c &= 0x1F;
            needed = 1;
        } else if ((c & 0xF0) == 0xE0) {
            // 3 bytes (0x0800 - 0xFFFF)
            c &= 0x0F;
            needed = 2;
        } else if ((c & 0xF8) == 0xF0) {
            // 4 bytes; double-char with surrogates and all...
            c &= 0x07;
            needed = 3;
        } else {
            _reportInvalidInitial(c & 0xFF);
            // never gets here
            needed = 1;
        }
        int d = nextByte();
        if ((d & 0xC0) != 0x080) {
            _reportInvalidOther(d & 0xFF);
        }
        c = (c << 6) | (d & 0x3F);
        if (needed > 1) {
            // needed == 1 means 2 bytes total
            // 3rd byte
            d = nextByte();
            if ((d & 0xC0) != 0x080) {
                _reportInvalidOther(d & 0xFF);
            }
            c = (c << 6) | (d & 0x3F);
            if (needed > 2) {
                // 4 bytes? (need surrogates)
                d = nextByte();
                if ((d & 0xC0) != 0x080) {
                    _reportInvalidOther(d & 0xFF);
                }
                c = (c << 6) | (d & 0x3F);
            }
        }
    }
    return c;
}","public void test097103() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-59), (byte) (-77), true);
    try {
        uTF8StreamJsonParser0._decodeCharForError((byte) (-14));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException, JsonParseException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test098104() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[2];
    byteArray0[1] = (byte) (-56);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byteArrayInputStream0.read();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-128), (-1663), false);
    try {
        uTF8StreamJsonParser0.nextIntValue(132);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000040; line: 1, column: -1660]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public JsonToken getCurrentToken() {
    return _currToken;
}","public void test099105() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1774), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 110, false);
    uTF8StreamJsonParser0._skipCR();
    assertNull(uTF8StreamJsonParser0.getCurrentToken());
}",""
