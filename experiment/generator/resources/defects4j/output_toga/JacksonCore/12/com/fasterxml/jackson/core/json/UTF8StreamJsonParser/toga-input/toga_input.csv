focal_method,test_prefix,docstring
"@Override
public String nextTextValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_STRING) {
            if (_tokenIncomplete) {
                _tokenIncomplete = false;
                return _finishAndReturnString();
            }
            return _textBuffer.contentsAsString();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
}","public void test0000() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[9];
    byteArray0[2] = (byte) 10;
    byteArray0[3] = (byte) 10;
    byteArray0[4] = (byte) 10;
    byteArray0[5] = (byte) 13;
    byteArray0[6] = (byte) 10;
    byteArray0[7] = (byte) 80;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 423, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.nextTextValue();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 9
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"protected final String parseMediumName(int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Ok, got 5 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    return parseMediumName2(i, q2);
}","public void test0011() throws Throwable {
    byte[] byteArray0 = new byte[4];
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-43), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 3, true);
    try {
        uTF8StreamJsonParser0.parseMediumName(2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000007; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public String nextTextValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_STRING) {
            if (_tokenIncomplete) {
                _tokenIncomplete = false;
                return _finishAndReturnString();
            }
            return _textBuffer.contentsAsString();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
}","public void test0022() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-2);
    byteArray0[3] = (byte) (-2);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 80, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 80, (-126), false);
    try {
        uTF8StreamJsonParser0.nextTextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0xfe
        //  at [Source: UNKNOWN; line: 1, column: -201]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final void _matchToken(String matchStr, int i) throws IOException {
    final int len = matchStr.length();
    if ((_inputPtr + len) >= _inputEnd) {
        _matchToken2(matchStr, i);
        return;
    }
    do {
        if (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {
            _reportInvalidToken(matchStr.substring(0, i));
        }
        ++_inputPtr;
    } while (++i < len);
    int ch = _inputBuffer[_inputPtr] & 0xFF;
    if (ch >= '0' && ch != ']' && ch != '}') {
        // expected/allowed chars
        _checkMatchEnd(matchStr, i, ch);
    }
}","public void test0044() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[2];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1827, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1477, (-2696), false);
    try {
        uTF8StreamJsonParser0._matchToken(""X&#(&y,2\""Ze|x$kQg"", 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token '': was expecting 'null', 'true', 'false' or NaN
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000008; line: 1, column: -5391]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"public int getFeatureMask() {
    return _features;
}","public void test0055() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 47, (byte) (-15));
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1677), 89, false);
    ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    uTF8StreamJsonParser0.setCodec(objectCodec1);
    assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard {@link Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link Feature}s.
 *
 * @since 2.3
 */"
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test0066() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 209, true);
    try {
        uTF8StreamJsonParser0._parseName(34);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000009; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public Object getInputSource() {
    return _inputStream;
}","public void test0077() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 57, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 57, (byte) 0, true);
    Object object0 = uTF8StreamJsonParser0.getInputSource();
    assertSame(object0, byteArrayInputStream0);
}",""
"/*
    /**********************************************************
    /* Overrides for life-cycle
    /**********************************************************
     */
@Override
public int releaseBuffered(OutputStream out) throws IOException {
    int count = _inputEnd - _inputPtr;
    if (count < 1) {
        return 0;
    }
    // let's just advance ptr to end
    int origPtr = _inputPtr;
    out.write(_inputBuffer, origPtr, count);
    return count;
}","public void test0088() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 12, 850, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) pipedOutputStream0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.PipedOutputStream"", e);
    }
}",""
"/*
    /**********************************************************
    /* Overrides for life-cycle
    /**********************************************************
     */
@Override
public int releaseBuffered(OutputStream out) throws IOException {
    int count = _inputEnd - _inputPtr;
    if (count < 1) {
        return 0;
    }
    // let's just advance ptr to end
    int origPtr = _inputPtr;
    out.write(_inputBuffer, origPtr, count);
    return count;
}","public void test0099() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-500), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 80, (byte) 80, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
    int int0 = uTF8StreamJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, int0);
}",""
"protected void _reportInvalidToken(String matchedPart, String msg) throws IOException {
    StringBuilder sb = new StringBuilder(matchedPart);
    /* Let's just try to find what appears to be the token, using
          * regular Java identifier character rules. It's just a heuristic,
          * nothing fancy here (nor fast).
          */
    while (true) {
        if (_inputPtr >= _inputEnd && !loadMore()) {
            break;
        }
        int i = (int) _inputBuffer[_inputPtr++];
        char c = (char) _decodeCharForError(i);
        if (!Character.isJavaIdentifierPart(c)) {
            break;
        }
        sb.append(c);
    }
    _reportError(""Unrecognized token '"" + sb.toString() + ""': was expecting "" + msg);
}","public void test01010() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    byte[] byteArray0 = new byte[0];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 5, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
    try {
        uTF8StreamJsonParser0._reportInvalidToken("") not numeric, can not use numeric value accessors"", ""Operation not supported by parser of type "");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token ') not numeric, can not use numeric value accessors': was expecting Operation not supported by parser of type
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000010; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected String slowParseName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\""' for name"");
        }
    }
    int i = _inputBuffer[_inputPtr++] & 0xFF;
    if (i == INT_QUOTE) {
        // special case, """"
        return """";
    }
    return parseEscapedName(_quadBuffer, 0, 0, i, 0);
}","public void test01111() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 212, (byte) 104, false);
    uTF8StreamJsonParser0._loadToHaveAtLeast(1388);
    try {
        uTF8StreamJsonParser0.slowParseName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000011; line: 1, column: -210]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called when not even first 8 bytes are guaranteed
 * to come consecutively. Happens rarely, so this is offlined;
 * plus we'll also do full checks for escaping etc.
 */"
"protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        _currInputProcessed += _inputPtr;
        _currInputRowStart -= _inputPtr;
        System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01212() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 98, 4);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1162, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1292, 1292, false);
    uTF8StreamJsonParser0._parsePosNumber((byte) 7);
    boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast((-1));
    assertFalse(boolean0);
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"protected String _handleOddName(int ch) throws IOException {
    // [JACKSON-173]: allow single quotes
    if (ch == '\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
        return _parseAposName();
    }
    // [JACKSON-69]: allow unquoted names if feature enabled:
    if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {
        char c = (char) _decodeCharForError(ch);
        _reportUnexpectedChar(c, ""was expecting double-quote to start field name"");
    }
    /* Also: note that although we use a different table here,
         * it does NOT handle UTF-8 decoding. It'll just pass those
         * high-bit codes as acceptable for later decoding.
         */
    final int[] codes = CharTypes.getInputCodeUtf8JsNames();
    // Also: must start with a valid character...
    if (codes[ch] != 0) {
        _reportUnexpectedChar(ch, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");
    }
    /* Ok, now; instead of ultra-optimizing parsing here (as with
         * regular JSON names), let's just use the generic ""slow""
         * variant. Can measure its impact later on if need be
         */
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    while (true) {
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr] & 0xFF;
        if (codes[ch] != 0) {
            break;
        }
        ++_inputPtr;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test01313() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) 98);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 109, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, Integer.MAX_VALUE, 727, true);
    String string0 = uTF8StreamJsonParser0._handleOddName(35);
    assertEquals(""#"", string0);
}","/**
 * Method called when we see non-white space character other
 * than double quote, when expecting a field name.
 * In standard mode will just throw an exception; but
 * in non-standard modes may be able to parse name.
 */"
"protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        _currInputProcessed += _inputPtr;
        _currInputRowStart -= _inputPtr;
        System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01314() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) 98);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 109, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, Integer.MAX_VALUE, 727, true);
    String string0 = uTF8StreamJsonParser0._handleOddName(35);
    boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast(2111);
    assertFalse(boolean0);
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        _currInputProcessed += _inputPtr;
        _currInputRowStart -= _inputPtr;
        System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01415() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2183), pushbackInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, (byte) 7, Integer.MIN_VALUE, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._loadToHaveAtLeast(2);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        _currInputProcessed += _inputPtr;
        _currInputRowStart -= _inputPtr;
        System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01516() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 109, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 7, (-2573), true);
    boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast((-2573));
    assertTrue(boolean0);
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
    // No input stream, no leading (either we are closed, or have non-stream input source)
    if (_inputStream == null) {
        return false;
    }
    // Need to move remaining data in front?
    int amount = _inputEnd - _inputPtr;
    if (amount > 0 && _inputPtr > 0) {
        _currInputProcessed += _inputPtr;
        _currInputRowStart -= _inputPtr;
        System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);
        _inputEnd = amount;
    } else {
        _inputEnd = 0;
    }
    _inputPtr = 0;
    while (_inputEnd < minAvailable) {
        int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        if (count < 1) {
            // End of input
            _closeInput();
            // Should never return 0, so let's fail
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
            }
            return false;
        }
        _inputEnd += count;
    }
    return true;
}","public void test01617() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray1 = new byte[5];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (byte) 104, 3, true);
    try {
        uTF8StreamJsonParser0._loadToHaveAtLeast(525);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // InputStream.read() returned 0 characters when trying to read -101 bytes
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}","/**
 * Helper method that will try to load at least specified number bytes in
 * input buffer, possible moving existing data around if necessary
 */"
"@Override
public boolean isClosed() {
    return _closed;
}","public void test01718() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[7];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 192, 136, false);
    uTF8StreamJsonParser0.nextTextValue();
    assertTrue(uTF8StreamJsonParser0.isClosed());
}",""
"@Override
public boolean isClosed() {
    return _closed;
}","public void test01819() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""|i9EVahQz"", true);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 865, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 46, 3, true);
    uTF8StreamJsonParser0.nextBooleanValue();
    assertTrue(uTF8StreamJsonParser0.isClosed());
}",""
"/*
    /**********************************************************
    /* Public API, data access
    /**********************************************************
     */
@Override
public String getText() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            return _finishAndReturnString();
        }
        return _textBuffer.contentsAsString();
    }
    return _getText2(_currToken);
}","public void test01920() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 2751, true);
    String string0 = uTF8StreamJsonParser0.getText();
    assertNull(string0);
}",""
"// // // Let's override default impls for improved performance
// @since 2.1
@Override
public String getValueAsString() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            return _finishAndReturnString();
        }
        return _textBuffer.contentsAsString();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return getCurrentName();
    }
    return super.getValueAsString(null);
}","public void test02021() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 173, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 3, 68, false);
    String string0 = uTF8StreamJsonParser0.getValueAsString();
    assertNull(string0);
}",""
"// @since 2.1
@Override
public String getValueAsString(String defValue) throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            return _finishAndReturnString();
        }
        return _textBuffer.contentsAsString();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return getCurrentName();
    }
    return super.getValueAsString(defValue);
}","public void test02122() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    byte[] byteArray0 = new byte[0];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 5, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
    String string0 = uTF8StreamJsonParser0.getValueAsString(""sbLt,J'}}0~gXX%uA"");
    assertNotNull(string0);
}",""
"// since 2.6
@Override
public int getValueAsInt() throws IOException {
    JsonToken t = _currToken;
    if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
        // inlined 'getIntValue()'
        if ((_numTypesValid & NR_INT) == 0) {
            if (_numTypesValid == NR_UNKNOWN) {
                return _parseIntValue();
            }
            if ((_numTypesValid & NR_INT) == 0) {
                convertNumberToInt();
            }
        }
        return _numberInt;
    }
    return super.getValueAsInt(0);
}","public void test02224() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 0, 0, true);
    int int0 = uTF8StreamJsonParser0.getValueAsInt();
    assertEquals(0, int0);
}",""
"// since 2.6
@Override
public int getValueAsInt(int defValue) throws IOException {
    JsonToken t = _currToken;
    if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
        // inlined 'getIntValue()'
        if ((_numTypesValid & NR_INT) == 0) {
            if (_numTypesValid == NR_UNKNOWN) {
                return _parseIntValue();
            }
            if ((_numTypesValid & NR_INT) == 0) {
                convertNumberToInt();
            }
        }
        return _numberInt;
    }
    return super.getValueAsInt(defValue);
}","public void test02325() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1577, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 98, (byte) 80, true);
    int int0 = uTF8StreamJsonParser0.getValueAsInt(0);
    assertEquals(0, int0);
}",""
"protected final String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02426() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 48, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1357, 48, false);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals("""", string0);
}",""
"protected final String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02527() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 3);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 573, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, (byte) 20, 0, false);
    JsonToken jsonToken0 = JsonToken.FIELD_NAME;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertNull(string0);
}",""
"protected final String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02628() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 3073);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 190, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 255, (byte) 31, true);
    JsonToken jsonToken0 = JsonToken.VALUE_STRING;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals("""", string0);
}",""
"protected final String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02729() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 0, 0, true);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals("""", string0);
}",""
"protected final String _getText2(JsonToken t) {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","public void test02830() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 56, 3, true);
    JsonToken jsonToken0 = JsonToken.END_OBJECT;
    String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    assertEquals(""}"", string0);
}",""
"@Override
public char[] getTextCharacters() throws IOException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                if (!_nameCopied) {
                    String name = _parsingContext.getCurrentName();
                    int nameLen = name.length();
                    if (_nameCopyBuffer == null) {
                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);
                    } else if (_nameCopyBuffer.length < nameLen) {
                        _nameCopyBuffer = new char[nameLen];
                    }
                    name.getChars(0, nameLen, _nameCopyBuffer, 0);
                    _nameCopied = true;
                }
                return _nameCopyBuffer;
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextBuffer();
            default:
                return _currToken.asCharArray();
        }
    }
    return null;
}","public void test02931() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
    byte[] byteArray0 = new byte[8];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 57, (byte) 98);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1971), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-3030), 123, true);
    char[] charArray0 = uTF8StreamJsonParser0.getTextCharacters();
    assertNull(charArray0);
}",""
"@Override
public int getTextLength() throws IOException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                return _parsingContext.getCurrentName().length();
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.size();
            default:
                return _currToken.asCharArray().length;
        }
    }
    return 0;
}","public void test03032() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 5, (-752), true);
    int int0 = uTF8StreamJsonParser0.getTextLength();
    assertEquals(0, int0);
}",""
"@Override
public int getTextOffset() throws IOException {
    // Most have offset of 0, only some may have other values:
    if (_currToken != null) {
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                return 0;
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextOffset();
            default:
        }
    }
    return 0;
}","public void test03133() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1577, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 98, (byte) 80, true);
    int int0 = uTF8StreamJsonParser0.getTextOffset();
    assertEquals(0, int0);
}",""
"@Override
public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
    // if we have already read the token, just use whatever we may have
    if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING) {
        byte[] b = getBinaryValue(b64variant);
        out.write(b);
        return b.length;
    }
    // otherwise do ""real"" incremental parsing...
    byte[] buf = _ioContext.allocBase64Buffer();
    try {
        return _readBinary(b64variant, out, buf);
    } finally {
        _ioContext.releaseBase64Buffer(buf);
    }
}","public void test03234() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 224, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 114, (-182), true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    try {
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) pipedOutputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000012; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException {
    int outputPtr = 0;
    final int outputEnd = buffer.length - 3;
    int outputCount = 0;
    while (true) {
        // first, we'll skip preceding white space, if any
        int ch;
        do {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            ch = (int) _inputBuffer[_inputPtr++] & 0xFF;
        } while (ch <= INT_SPACE);
        int bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            // reached the end, fair and square?
            if (ch == INT_QUOTE) {
                break;
            }
            bits = _decodeBase64Escape(b64variant, ch, 0);
            if (bits < 0) {
                // white space to skip
                continue;
            }
        }
        // enough room? If not, flush
        if (outputPtr > outputEnd) {
            outputCount += outputPtr;
            out.write(buffer, 0, outputPtr);
            outputPtr = 0;
        }
        int decodedData = bits;
        // then second base64 char; can't get padding yet, nor ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            bits = _decodeBase64Escape(b64variant, ch, 1);
        }
        decodedData = (decodedData << 6) | bits;
        // third base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        // First branch: can get padding (-> 1 byte)
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""' && !b64variant.usesPadding()) {
                    decodedData >>= 4;
                    buffer[outputPtr++] = (byte) decodedData;
                    break;
                }
                bits = _decodeBase64Escape(b64variant, ch, 2);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                // Ok, must get padding
                if (_inputPtr >= _inputEnd) {
                    loadMoreGuaranteed();
                }
                ch = _inputBuffer[_inputPtr++] & 0xFF;
                if (!b64variant.usesPaddingChar(ch)) {
                    throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                }
                // Got 12 bits, only need 8, need to shift
                decodedData >>= 4;
                buffer[outputPtr++] = (byte) decodedData;
                continue;
            }
        }
        // Nope, 2 or 3 bytes
        decodedData = (decodedData << 6) | bits;
        // fourth and last base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""' && !b64variant.usesPadding()) {
                    decodedData >>= 2;
                    buffer[outputPtr++] = (byte) (decodedData >> 8);
                    buffer[outputPtr++] = (byte) decodedData;
                    break;
                }
                bits = _decodeBase64Escape(b64variant, ch, 3);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                /* With padding we only get 2 bytes; but we have
                     * to shift it a bit so it is identical to triplet
                     * case with partial output.
                     * 3 chars gives 3x6 == 18 bits, of which 2 are
                     * dummies, need to discard:
                     */
                decodedData >>= 2;
                buffer[outputPtr++] = (byte) (decodedData >> 8);
                buffer[outputPtr++] = (byte) decodedData;
                continue;
            }
        }
        // otherwise, our triplet is now complete
        decodedData = (decodedData << 6) | bits;
        buffer[outputPtr++] = (byte) (decodedData >> 16);
        buffer[outputPtr++] = (byte) (decodedData >> 8);
        buffer[outputPtr++] = (byte) decodedData;
    }
    _tokenIncomplete = false;
    if (outputPtr > 0) {
        outputCount += outputPtr;
        out.write(buffer, 0, outputPtr);
    }
    return outputCount;
}","public void test03335() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    byteArray0[1] = (byte) 109;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 7, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 109, (-43), false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, (OutputStream) null, byteArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"@Override
public Boolean nextBooleanValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","public void test03436() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 52;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 52, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 6, 0, false);
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000013; line: 1, column: -3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, traversal, nextXxxValue/nextFieldName
    /**********************************************************
     */
@Override
public boolean nextFieldName(SerializableString str) throws IOException {
    // // // Note: most of code below is copied from nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        // can't have name right after name
        _nextAfterName();
        return false;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        // end-of-input
        close();
        _currToken = null;
        return false;
    }
    _binaryValue = null;
    // Closing scope?
    if (i == INT_RBRACKET) {
        _updateLocation();
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_ARRAY;
        return false;
    }
    if (i == INT_RCURLY) {
        _updateLocation();
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_OBJECT;
        return false;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.getTypeDesc() + "" entries"");
        }
        i = _skipWS();
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return false;
    }
    // // // This part differs, name parsing
    _updateNameLocation();
    if (i == INT_QUOTE) {
        // when doing literal match, must consider escaping:
        byte[] nameBytes = str.asQuotedUTF8();
        final int len = nameBytes.length;
        // 22-May-2014, tatu: Actually, let's require 4 more bytes for faster skipping
        //    of colon that follows name
        if ((_inputPtr + len + 4) < _inputEnd) {
            // maybe...
            // first check length match by
            final int end = _inputPtr + len;
            if (_inputBuffer[end] == INT_QUOTE) {
                int offset = 0;
                int ptr = _inputPtr;
                while (true) {
                    if (ptr == end) {
                        // yes, match!
                        _parsingContext.setCurrentName(str.getValue());
                        i = _skipColonFast(ptr + 1);
                        _isNextTokenNameYes(i);
                        return true;
                    }
                    if (nameBytes[offset] != _inputBuffer[ptr]) {
                        break;
                    }
                    ++offset;
                    ++ptr;
                }
            }
        }
    }
    return _isNextTokenNameMaybe(i, str);
}","public void test03537() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[24];
    byteArray0[0] = (byte) 53;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    SerializedString serializedString0 = new SerializedString("""");
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 53, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 0, 13, false);
    try {
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000014; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public long nextLongValue(long defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getLongValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
}","public void test03638() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Object object0 = new Object();
    IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    byteArray0[3] = (byte) 57;
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 97, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.nextLongValue(1817L);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 4
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"@Override
public Boolean nextBooleanValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","public void test03739() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 110;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2603, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1711, (-484), false);
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'n\u0000\u0000': was expecting 'null', 'true', 'false' or NaN
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000015; line: 1, column: -2188]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, traversal, nextXxxValue/nextFieldName
    /**********************************************************
     */
@Override
public boolean nextFieldName(SerializableString str) throws IOException {
    // // // Note: most of code below is copied from nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        // can't have name right after name
        _nextAfterName();
        return false;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        // end-of-input
        close();
        _currToken = null;
        return false;
    }
    _binaryValue = null;
    // Closing scope?
    if (i == INT_RBRACKET) {
        _updateLocation();
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_ARRAY;
        return false;
    }
    if (i == INT_RCURLY) {
        _updateLocation();
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_OBJECT;
        return false;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.getTypeDesc() + "" entries"");
        }
        i = _skipWS();
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return false;
    }
    // // // This part differs, name parsing
    _updateNameLocation();
    if (i == INT_QUOTE) {
        // when doing literal match, must consider escaping:
        byte[] nameBytes = str.asQuotedUTF8();
        final int len = nameBytes.length;
        // 22-May-2014, tatu: Actually, let's require 4 more bytes for faster skipping
        //    of colon that follows name
        if ((_inputPtr + len + 4) < _inputEnd) {
            // maybe...
            // first check length match by
            final int end = _inputPtr + len;
            if (_inputBuffer[end] == INT_QUOTE) {
                int offset = 0;
                int ptr = _inputPtr;
                while (true) {
                    if (ptr == end) {
                        // yes, match!
                        _parsingContext.setCurrentName(str.getValue());
                        i = _skipColonFast(ptr + 1);
                        _isNextTokenNameYes(i);
                        return true;
                    }
                    if (nameBytes[offset] != _inputBuffer[ptr]) {
                        break;
                    }
                    ++offset;
                    ++ptr;
                }
            }
        }
    }
    return _isNextTokenNameMaybe(i, str);
}","public void test03840() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[6];
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 58, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 12, 7, false);
    SerializedString serializedString0 = new SerializedString("""");
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"@Override
public String nextFieldName() throws IOException {
    // // // Note: this is almost a verbatim copy of nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        _nextAfterName();
        return null;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        close();
        _currToken = null;
        return null;
    }
    _binaryValue = null;
    if (i == INT_RBRACKET) {
        _updateLocation();
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_ARRAY;
        return null;
    }
    if (i == INT_RCURLY) {
        _updateLocation();
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_OBJECT;
        return null;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.getTypeDesc() + "" entries"");
        }
        i = _skipWS();
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return null;
    }
    _updateNameLocation();
    final String nameStr = _parseName(i);
    _parsingContext.setCurrentName(nameStr);
    _currToken = JsonToken.FIELD_NAME;
    i = _skipColon();
    _updateLocation();
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        _nextToken = JsonToken.VALUE_STRING;
        return nameStr;
    }
    JsonToken t;
    switch(i) {
        case '-':
            t = _parseNegNumber();
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parsePosNumber(i);
            break;
        case 'f':
            _matchToken(""false"", 1);
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchToken(""null"", 1);
            t = JsonToken.VALUE_NULL;
            break;
        case 't':
            _matchToken(""true"", 1);
            t = JsonToken.VALUE_TRUE;
            break;
        case '[':
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            t = JsonToken.START_OBJECT;
            break;
        default:
            t = _handleUnexpectedValue(i);
    }
    _nextToken = t;
    return nameStr;
}","public void test03941() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 0, (-126), false);
    try {
        uTF8StreamJsonParser0.nextFieldName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: UNKNOWN; line: 1, column: -124]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public String nextFieldName() throws IOException {
    // // // Note: this is almost a verbatim copy of nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        _nextAfterName();
        return null;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        close();
        _currToken = null;
        return null;
    }
    _binaryValue = null;
    if (i == INT_RBRACKET) {
        _updateLocation();
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_ARRAY;
        return null;
    }
    if (i == INT_RCURLY) {
        _updateLocation();
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_OBJECT;
        return null;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.getTypeDesc() + "" entries"");
        }
        i = _skipWS();
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return null;
    }
    _updateNameLocation();
    final String nameStr = _parseName(i);
    _parsingContext.setCurrentName(nameStr);
    _currToken = JsonToken.FIELD_NAME;
    i = _skipColon();
    _updateLocation();
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        _nextToken = JsonToken.VALUE_STRING;
        return nameStr;
    }
    JsonToken t;
    switch(i) {
        case '-':
            t = _parseNegNumber();
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parsePosNumber(i);
            break;
        case 'f':
            _matchToken(""false"", 1);
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchToken(""null"", 1);
            t = JsonToken.VALUE_NULL;
            break;
        case 't':
            _matchToken(""true"", 1);
            t = JsonToken.VALUE_TRUE;
            break;
        case '[':
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            t = JsonToken.START_OBJECT;
            break;
        default:
            t = _handleUnexpectedValue(i);
    }
    _nextToken = t;
    return nameStr;
}","public void test04042() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-74);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-74), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 3, false);
    try {
        uTF8StreamJsonParser0.nextFieldName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('\u00B6' (code 182)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000016; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public String nextFieldName() throws IOException {
    // // // Note: this is almost a verbatim copy of nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        _nextAfterName();
        return null;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        close();
        _currToken = null;
        return null;
    }
    _binaryValue = null;
    if (i == INT_RBRACKET) {
        _updateLocation();
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_ARRAY;
        return null;
    }
    if (i == INT_RCURLY) {
        _updateLocation();
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.getParent();
        _currToken = JsonToken.END_OBJECT;
        return null;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.getTypeDesc() + "" entries"");
        }
        i = _skipWS();
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return null;
    }
    _updateNameLocation();
    final String nameStr = _parseName(i);
    _parsingContext.setCurrentName(nameStr);
    _currToken = JsonToken.FIELD_NAME;
    i = _skipColon();
    _updateLocation();
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        _nextToken = JsonToken.VALUE_STRING;
        return nameStr;
    }
    JsonToken t;
    switch(i) {
        case '-':
            t = _parseNegNumber();
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parsePosNumber(i);
            break;
        case 'f':
            _matchToken(""false"", 1);
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchToken(""null"", 1);
            t = JsonToken.VALUE_NULL;
            break;
        case 't':
            _matchToken(""true"", 1);
            t = JsonToken.VALUE_TRUE;
            break;
        case '[':
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            t = JsonToken.START_OBJECT;
            break;
        default:
            t = _handleUnexpectedValue(i);
    }
    _nextToken = t;
    return nameStr;
}","public void test04143() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byteArrayInputStream0.read(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 0, (-126), false);
    String string0 = uTF8StreamJsonParser0.nextFieldName();
    assertNull(string0);
}",""
"@Override
public boolean isClosed() {
    return _closed;
}","public void test04244() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1868), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1868), (-1868), false);
    int int0 = uTF8StreamJsonParser0.nextIntValue(208);
    assertTrue(uTF8StreamJsonParser0.isClosed());
}",""
"@Override
public int nextIntValue(int defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","public void test04245() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[6];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1868), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1868), (-1868), false);
    int int0 = uTF8StreamJsonParser0.nextIntValue(208);
    assertEquals(208, int0);
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parsePosNumber(int c) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[0] = (char) c;
    int intLen = 1;
    int outPtr = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    // 1 == outPtr
    int end = _inputPtr + outBuf.length - 1;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // split across boundary, offline
            return _parseNumber2(outBuf, outPtr, false, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, false, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(false, intLen);
}","public void test04346() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 43, (-1812), false);
    try {
        uTF8StreamJsonParser0._parsePosNumber(48);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
        //  at [Source: UNKNOWN; line: 1, column: -1853]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parsePosNumber(int c) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[0] = (char) c;
    int intLen = 1;
    int outPtr = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    // 1 == outPtr
    int end = _inputPtr + outBuf.length - 1;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // split across boundary, offline
            return _parseNumber2(outBuf, outPtr, false, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, false, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(false, intLen);
}","public void test04447() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, (byte) 31, 1278, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parsePosNumber((-820));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 31
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, number parsing
    /**********************************************************
     */
/**
 *  Initial parsing method for number values. It needs to be able
 *  to parse enough input to be able to determine whether the
 *  value is to be considered a simple integer value, or a more
 *  generic decimal value: latter of which needs to be expressed
 *  as a floating point number. The basic rule is that if the number
 *  has no fractional or exponential part, it is an integer; otherwise
 *  a floating point number.
 * <p>
 *  Because much of input has to be processed in any case, no partial
 *  parsing is done: all input text will be stored for further
 *  processing. However, actual numeric value conversion will be
 *  deferred, since it is usually the most complicated and costliest
 *  part of processing.
 */
protected JsonToken _parsePosNumber(int c) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[0] = (char) c;
    int intLen = 1;
    int outPtr = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    // 1 == outPtr
    int end = _inputPtr + outBuf.length - 1;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // split across boundary, offline
            return _parseNumber2(outBuf, outPtr, false, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, false, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(false, intLen);
}","public void test04548() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 109;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2447), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2465, 43, true);
    try {
        uTF8StreamJsonParser0._parsePosNumber(48);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('m' (code 109)): Expected space separating root-level values
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000017; line: 1, column: -2420]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _parseNegNumber() throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    // Need to prepend sign?
    outBuf[outPtr++] = '-';
    // Must have something after sign too
    if (_inputPtr >= _inputEnd) {
        loadMoreGuaranteed();
    }
    int c = (int) _inputBuffer[_inputPtr++] & 0xFF;
    // Note: must be followed by a digit
    if (c < INT_0 || c > INT_9) {
        return _handleInvalidNumberStart(c, true);
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    int end = _inputPtr + outBuf.length - outPtr;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parseNumber2(outBuf, outPtr, true, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, true, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(true, intLen);
}","public void test04649() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 2, 3, false);
    try {
        uTF8StreamJsonParser0._parseNegNumber();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000018; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _parseNegNumber() throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    // Need to prepend sign?
    outBuf[outPtr++] = '-';
    // Must have something after sign too
    if (_inputPtr >= _inputEnd) {
        loadMoreGuaranteed();
    }
    int c = (int) _inputBuffer[_inputPtr++] & 0xFF;
    // Note: must be followed by a digit
    if (c < INT_0 || c > INT_9) {
        return _handleInvalidNumberStart(c, true);
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    int end = _inputPtr + outBuf.length - outPtr;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parseNumber2(outBuf, outPtr, true, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, true, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(true, intLen);
}","public void test04750() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-227), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 2, false);
    try {
        uTF8StreamJsonParser0._parseNegNumber();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000019; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _parseNegNumber() throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    // Need to prepend sign?
    outBuf[outPtr++] = '-';
    // Must have something after sign too
    if (_inputPtr >= _inputEnd) {
        loadMoreGuaranteed();
    }
    int c = (int) _inputBuffer[_inputPtr++] & 0xFF;
    // Note: must be followed by a digit
    if (c < INT_0 || c > INT_9) {
        return _handleInvalidNumberStart(c, true);
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    int end = _inputPtr + outBuf.length - outPtr;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parseNumber2(outBuf, outPtr, true, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, true, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(true, intLen);
}","public void test04851() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 61;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-227), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 2, false);
    try {
        uTF8StreamJsonParser0._parseNegNumber();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('=' (code 61)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000020; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _parseNegNumber() throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    // Need to prepend sign?
    outBuf[outPtr++] = '-';
    // Must have something after sign too
    if (_inputPtr >= _inputEnd) {
        loadMoreGuaranteed();
    }
    int c = (int) _inputBuffer[_inputPtr++] & 0xFF;
    // Note: must be followed by a digit
    if (c < INT_0 || c > INT_9) {
        return _handleInvalidNumberStart(c, true);
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    int end = _inputPtr + outBuf.length - outPtr;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parseNumber2(outBuf, outPtr, true, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, true, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(true, intLen);
}","public void test04952() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 53;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4850, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, (byte) 53, (byte) 53, false);
    try {
        uTF8StreamJsonParser0._parseNegNumber();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000021; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"public final boolean isNumeric() {
    return _isNumber;
}","public void test05053() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 53;
    byteArray0[1] = (byte) 53;
    byteArray0[2] = (byte) 53;
    byteArray0[3] = (byte) 53;
    byteArray0[4] = (byte) 53;
    byteArray0[5] = (byte) 53;
    byteArray0[6] = (byte) 53;
    byteArray0[7] = (byte) 53;
    byteArray0[8] = (byte) 53;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4850, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, (byte) 53, (byte) 53, false);
    JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNegNumber();
    assertTrue(jsonToken0.isNumeric());
}",""
"@Override
public Boolean nextBooleanValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","public void test05154() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 54;
    byteArray0[1] = (byte) 53;
    byteArray0[2] = (byte) 53;
    byteArray0[3] = (byte) 53;
    byteArray0[4] = (byte) (-29);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 2, false);
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('\u00E3' (code 227)): Expected space separating root-level values
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000022; line: 1, column: 9]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"public final boolean isStructEnd() {
    return _isStructEnd;
}","public void test05255() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byteArrayInputStream0.skip((byte) 73);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 43, (-1812), false);
    JsonToken jsonToken0 = uTF8StreamJsonParser0._parsePosNumber(48);
    assertFalse(jsonToken0.isStructEnd());
}","/**
 * Accessor that is functionally equivalent to:
 * <code>
 *    this == JsonToken.END_OBJECT || this == JsonToken.END_ARRAY
 * </code>
 *
 * @since 2.3
 */"
"public final boolean isStructEnd() {
    return _isStructEnd;
}","public void test05356() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 9;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-3410), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 6, 1, true);
    JsonToken jsonToken0 = uTF8StreamJsonParser0._parsePosNumber(127);
    assertFalse(jsonToken0.isStructEnd());
}","/**
 * Accessor that is functionally equivalent to:
 * <code>
 *    this == JsonToken.END_OBJECT || this == JsonToken.END_ARRAY
 * </code>
 *
 * @since 2.3
 */"
"public final String asString() {
    return _serialized;
}","public void test05457() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 51;
    byteArray0[1] = (byte) 32;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1427, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1427, 1427, false);
    JsonToken jsonToken0 = uTF8StreamJsonParser0._parsePosNumber((-2282));
    assertNull(jsonToken0.asString());
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test05558() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 125, 742);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 41, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 9, 9, true);
    try {
        uTF8StreamJsonParser0._parseName(78);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: 10]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test05659() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[2];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 34, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 605, (-662), false);
    try {
        uTF8StreamJsonParser0._parseName(34);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input: was expecting closing '\""' for name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000023; line: 1, column: -661]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseMediumName(int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Ok, got 5 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    return parseMediumName2(i, q2);
}","public void test05760() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) (-43);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-43), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 3, true);
    try {
        uTF8StreamJsonParser0.parseMediumName(2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000024; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseMediumName(int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Ok, got 5 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    return parseMediumName2(i, q2);
}","public void test05861() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[9];
    byteArray0[3] = (byte) 53;
    byteArray0[4] = (byte) 53;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-611), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 1869, false);
    try {
        uTF8StreamJsonParser0.parseMediumName(2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000025; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseMediumName(int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Ok, got 5 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    return parseMediumName2(i, q2);
}","public void test05962() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[9];
    byteArray0[3] = (byte) 53;
    byteArray0[4] = (byte) 53;
    byteArray0[5] = (byte) 53;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-611), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 1869, false);
    try {
        uTF8StreamJsonParser0.parseMediumName(2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000026; line: 1, column: 5]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseMediumName(int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Ok, got 5 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    return parseMediumName2(i, q2);
}","public void test06063() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[9];
    byteArray0[3] = (byte) 53;
    byteArray0[4] = (byte) 53;
    byteArray0[5] = (byte) 53;
    byteArray0[6] = (byte) 53;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-611), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 1869, false);
    try {
        uTF8StreamJsonParser0.parseMediumName(2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000027; line: 1, column: 6]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseMediumName2(int q3, final int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Got 9 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return parseLongName(i, q2, q3);
}","public void test06164() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[7];
    byteArray0[3] = (byte) (-11);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (-2818), false);
    try {
        uTF8StreamJsonParser0.parseMediumName2((byte) 0, 3);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: UNKNOWN; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"protected final String parseMediumName2(int q3, final int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Got 9 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return parseLongName(i, q2, q3);
}","public void test06265() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[7];
    byteArray0[3] = (byte) (-11);
    byteArray0[4] = (byte) (-11);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (-2818), false);
    try {
        uTF8StreamJsonParser0.parseMediumName2((byte) 0, 3);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: UNKNOWN; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"protected final String parseMediumName2(int q3, final int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Got 9 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return parseLongName(i, q2, q3);
}","public void test06366() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[22];
    byteArray0[1] = (byte) (-87);
    byteArray0[2] = (byte) (-87);
    byteArray0[3] = (byte) (-87);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 206, 4);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 7, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 78, true);
    try {
        uTF8StreamJsonParser0.parseMediumName2((byte) (-87), (byte) (-87));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000028; line: 1, column: 5]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"protected final String parseMediumName2(int q3, final int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Got 9 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return parseLongName(i, q2, q3);
}","public void test06467() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[22];
    byteArray0[1] = (byte) (-87);
    byteArray0[2] = (byte) (-87);
    byteArray0[3] = (byte) (-87);
    byteArray0[4] = (byte) (-87);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 206, 4);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 7, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 78, true);
    try {
        uTF8StreamJsonParser0.parseMediumName2((byte) (-87), (byte) (-87));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000029; line: 1, column: 6]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"protected final String parseLongName(int q, final int q2, int q3) throws IOException {
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    _quadBuffer[2] = q3;
    // As explained above, will ignore UTF-8 encoding at this point
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int qlen = 3;
    while ((_inputPtr + 4) <= _inputEnd) {
        int i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
    /* Let's offline if we hit buffer boundary (otherwise would
         * need to [try to] align input, which is bit complicated
         * and may not always be possible)
         */
    return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
}","public void test06568() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 0, 0, true);
    try {
        uTF8StreamJsonParser0.parseLongName(0, 1, (-3278));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000030; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseLongName(int q, final int q2, int q3) throws IOException {
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    _quadBuffer[2] = q3;
    // As explained above, will ignore UTF-8 encoding at this point
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int qlen = 3;
    while ((_inputPtr + 4) <= _inputEnd) {
        int i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
    /* Let's offline if we hit buffer boundary (otherwise would
         * need to [try to] align input, which is bit complicated
         * and may not always be possible)
         */
    return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
}","public void test06669() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[2];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byte[] byteArray1 = new byte[6];
    byteArray1[2] = (byte) 67;
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 14, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 2, 4041, true);
    try {
        uTF8StreamJsonParser0.parseLongName((-2533), 0, 2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000031; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final String parseLongName(int q, final int q2, int q3) throws IOException {
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    _quadBuffer[2] = q3;
    // As explained above, will ignore UTF-8 encoding at this point
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int qlen = 3;
    while ((_inputPtr + 4) <= _inputEnd) {
        int i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
    /* Let's offline if we hit buffer boundary (otherwise would
         * need to [try to] align input, which is bit complicated
         * and may not always be possible)
         */
    return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
}","public void test06770() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[2];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byte[] byteArray1 = new byte[6];
    byteArray1[2] = (byte) 67;
    byteArray1[3] = (byte) 42;
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 14, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 2, 4041, true);
    try {
        uTF8StreamJsonParser0.parseLongName((-2533), 0, 2);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000032; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected String slowParseName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\""' for name"");
        }
    }
    int i = _inputBuffer[_inputPtr++] & 0xFF;
    if (i == INT_QUOTE) {
        // special case, """"
        return """";
    }
    return parseEscapedName(_quadBuffer, 0, 0, i, 0);
}","public void test06871() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 109, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 7, (-2573), true);
    try {
        uTF8StreamJsonParser0.slowParseName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: UNKNOWN; line: 1, column: -2569]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called when not even first 8 bytes are guaranteed
 * to come consecutively. Happens rarely, so this is offlined;
 * plus we'll also do full checks for escaping etc.
 */"
"protected final String parseMediumName2(int q3, final int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    // Got 9 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return parseLongName(i, q2, q3);
}","public void test06972() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) 61;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 46, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (byte) (-56), false);
    try {
        uTF8StreamJsonParser0.parseMediumName2(1, 1363);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000033; line: 1, column: -43]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch, int currQuadBytes) throws IOException {
    /* 25-Nov-2008, tatu: This may seem weird, but here we do not want to worry about
         *   UTF-8 decoding yet. Rather, we'll assume that part is ok (if not it will get
         *   caught later on), and just handle quotes and backslashes here.
         */
    final int[] codes = _icLatin1;
    while (true) {
        if (codes[ch] != 0) {
            if (ch == INT_QUOTE) {
                // we are done
                break;
            }
            // Unquoted white space?
            if (ch != INT_BACKSLASH) {
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test07073() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 9, (byte) 12, true);
    int[] intArray0 = new int[3];
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.parseEscapedName(intArray0, 248, 0, 92, 1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 9
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}","/**
 * Slower parsing method which is generally branched to when
 * an escape sequence is detected (or alternatively for long
 * names, one crossing input buffer boundary).
 * Needs to be able to handle more exceptional cases, gets slower,
 * and hance is offlined to a separate method.
 */"
"protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch, int currQuadBytes) throws IOException {
    /* 25-Nov-2008, tatu: This may seem weird, but here we do not want to worry about
         *   UTF-8 decoding yet. Rather, we'll assume that part is ok (if not it will get
         *   caught later on), and just handle quotes and backslashes here.
         */
    final int[] codes = _icLatin1;
    while (true) {
        if (codes[ch] != 0) {
            if (ch == INT_QUOTE) {
                // we are done
                break;
            }
            // Unquoted white space?
            if (ch != INT_BACKSLASH) {
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test07174() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    PipedInputStream pipedInputStream0 = new PipedInputStream(15);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2529, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-2), 3605, true);
    int[] intArray0 = new int[3];
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.parseEscapedName(intArray0, 1162, 2, 2, 1050);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1162
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}","/**
 * Slower parsing method which is generally branched to when
 * an escape sequence is detected (or alternatively for long
 * names, one crossing input buffer boundary).
 * Needs to be able to handle more exceptional cases, gets slower,
 * and hance is offlined to a separate method.
 */"
"protected String _handleOddName(int ch) throws IOException {
    // [JACKSON-173]: allow single quotes
    if (ch == '\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
        return _parseAposName();
    }
    // [JACKSON-69]: allow unquoted names if feature enabled:
    if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {
        char c = (char) _decodeCharForError(ch);
        _reportUnexpectedChar(c, ""was expecting double-quote to start field name"");
    }
    /* Also: note that although we use a different table here,
         * it does NOT handle UTF-8 decoding. It'll just pass those
         * high-bit codes as acceptable for later decoding.
         */
    final int[] codes = CharTypes.getInputCodeUtf8JsNames();
    // Also: must start with a valid character...
    if (codes[ch] != 0) {
        _reportUnexpectedChar(ch, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");
    }
    /* Ok, now; instead of ultra-optimizing parsing here (as with
         * regular JSON names), let's just use the generic ""slow""
         * variant. Can measure its impact later on if need be
         */
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    while (true) {
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr] & 0xFF;
        if (codes[ch] != 0) {
            break;
        }
        ++_inputPtr;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test07275() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 43, (-1812), false);
    try {
        uTF8StreamJsonParser0._handleOddName(34);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ('\""' (code 34)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called when we see non-white space character other
 * than double quote, when expecting a field name.
 * In standard mode will just throw an exception; but
 * in non-standard modes may be able to parse name.
 */"
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test07376() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) (-55);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 605, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 0, 39, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseName(49);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected String _parseAposName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test07477() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 374, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1, true);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in field name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000034; line: 1, column: 12]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected String _parseAposName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test07578() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 5, (-752), true);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000035; line: 1, column: -755]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected String _parseAposName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test07679() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[7];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 192, 136, false);
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input: was expecting closing ''' for name
        //  at [Source: UNKNOWN; line: 1, column: 137]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected String _parseAposName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test07780() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[6];
    byteArray0[2] = (byte) 34;
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 109, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 55, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 6
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.
     */
protected String _parseAposName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for name"");
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == '\'') {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = _icLatin1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in field name"");
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","public void test07881() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[6];
    byteArray0[3] = (byte) 109;
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 109, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 55, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseAposName();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 6
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test07982() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) 7);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 10, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) 7, (byte) 7, true);
    try {
        uTF8StreamJsonParser0._parseName(142);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0x8e
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test08083() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 73;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray1 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 3946, (byte) (-56), true);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000036; line: 1, column: -3999]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected String _finishAndReturnString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                return _textBuffer.setCurrentAndReturn(outPtr);
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
    return _textBuffer.contentsAsString();
}","public void test08184() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1218, pushbackInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 1, 815, false);
    try {
        uTF8StreamJsonParser0._finishAndReturnString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000037; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"protected String _finishAndReturnString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                return _textBuffer.setCurrentAndReturn(outPtr);
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
    return _textBuffer.contentsAsString();
}","public void test08285() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 123, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 13, (-1609), true);
    try {
        uTF8StreamJsonParser0._finishAndReturnString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000038; line: 1, column: -1617]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"protected String _finishAndReturnString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                return _textBuffer.setCurrentAndReturn(outPtr);
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
    return _textBuffer.contentsAsString();
}","public void test08386() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 114;
    byteArray0[1] = (byte) 114;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 123, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 13, (-1609), true);
    try {
        uTF8StreamJsonParser0._finishAndReturnString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000039; line: 1, column: -1617]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * @since 2.6
 */"
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test08487() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    byteArray0[4] = (byte) 98;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 109, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 52, 0, true);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: UNKNOWN; line: 1, column: -41]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test08588() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) (-52);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, Integer.MAX_VALUE, 125, true);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000040; line: 1, column: -2147483519]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test08689() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    byteArray0[3] = (byte) 53;
    byteArray0[4] = (byte) (-29);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 65, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 6, true);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000041; line: 1, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, String value parsing
    /**********************************************************
     */
@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = (int) inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","public void test08790() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[9];
    byteArray0[6] = (byte) (-8);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 39, pushbackInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 6000, 727, false);
    try {
        uTF8StreamJsonParser0._finishString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0xf8
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000042; line: 1, column: -5265]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3(c);
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    // As per [JACKSON-208], call can now return:
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test08891() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-105), dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 3857, false);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000043; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3(c);
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    // As per [JACKSON-208], call can now return:
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test08992() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-56), byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, (byte) 58, (-1121), false);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000044; line: 1, column: -1177]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3(c);
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    // As per [JACKSON-208], call can now return:
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test09093() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""IbY"", true);
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 110;
    byteArray0[1] = (byte) 110;
    byteArray0[2] = (byte) 110;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1723, 1, false);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: java.lang.String@0000000045; line: 1, column: -1715]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3(c);
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    // As per [JACKSON-208], call can now return:
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test09194() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    byte[] byteArray1 = new byte[3];
    byteArray1[0] = (byte) 58;
    byteArray1[1] = (byte) (-56);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-56), byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, (byte) 58, (-1121), false);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000046; line: 1, column: -1175]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = (int) inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3(c);
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    // As per [JACKSON-208], call can now return:
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","public void test09295() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    byte[] byteArray1 = new byte[2];
    byteArray1[0] = (byte) (-128);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-419), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 80, (-419), true);
    try {
        uTF8StreamJsonParser0._skipString();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0x80
        //  at [Source: UNKNOWN; line: 1, column: -497]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method called to skim through rest of unparsed String value,
 * if it is not needed. This can be done bit faster if contents
 * need not be stored for future access.
 */"
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                if (c != '\'') {
                    // marked as special, isn't here
                    c = _decodeEscaped();
                }
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test09396() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) 109;
    byteArray0[1] = (byte) (-21);
    byteArray0[2] = (byte) (-100);
    byteArray0[3] = (byte) (-100);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-21), (byte) (-100), false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
        //  at [Source: UNKNOWN; line: 1, column: -73]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                if (c != '\'') {
                    // marked as special, isn't here
                    c = _decodeEscaped();
                }
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test09497() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[2];
    byte[] byteArray1 = new byte[1];
    byteArray1[0] = (byte) 109;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 200, dataInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 256, 256, false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000047; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"public final boolean isNumeric() {
    return _isNumber;
}","public void test09598() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[9];
    byteArray0[2] = (byte) 39;
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1847), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 2, 1321, false);
    JsonToken jsonToken0 = uTF8StreamJsonParser0._handleApos();
    assertFalse(jsonToken0.isNumeric());
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                if (c != '\'') {
                    // marked as special, isn't here
                    c = _decodeEscaped();
                }
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test09699() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray1 = new byte[8];
    byteArray1[0] = (byte) 109;
    byteArray1[1] = (byte) (-14);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 101, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 109, (byte) (-14), false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: UNKNOWN; line: 1, column: -119]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                if (c != '\'') {
                    // marked as special, isn't here
                    c = _decodeEscaped();
                }
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test097100() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) (-21);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    byte[] byteArray1 = new byte[1];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2131, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 42, (-2671), false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: java.io.ByteArrayInputStream@0000000048; line: 1, column: -2710]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                if (c != '\'') {
                    // marked as special, isn't here
                    c = _decodeEscaped();
                }
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test098101() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) (-87);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1955), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1456), (-1456), true);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 start byte 0xa9
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000049; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _parseNegNumber() throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    // Need to prepend sign?
    outBuf[outPtr++] = '-';
    // Must have something after sign too
    if (_inputPtr >= _inputEnd) {
        loadMoreGuaranteed();
    }
    int c = (int) _inputBuffer[_inputPtr++] & 0xFF;
    // Note: must be followed by a digit
    if (c < INT_0 || c > INT_9) {
        return _handleInvalidNumberStart(c, true);
    }
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    int end = _inputPtr + outBuf.length - outPtr;
    if (end > _inputEnd) {
        end = _inputEnd;
    }
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parseNumber2(outBuf, outPtr, true, intLen);
        }
        c = (int) _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == '.' || c == 'e' || c == 'E') {
        return _parseFloat(outBuf, outPtr, c, true, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(true, intLen);
}","public void test099102() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[18];
    byteArray0[0] = (byte) 73;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 73, 4, true);
    try {
        uTF8StreamJsonParser0._parseNegNumber();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000050; line: 1, column: -66]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected final void _matchToken(String matchStr, int i) throws IOException {
    final int len = matchStr.length();
    if ((_inputPtr + len) >= _inputEnd) {
        _matchToken2(matchStr, i);
        return;
    }
    do {
        if (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {
            _reportInvalidToken(matchStr.substring(0, i));
        }
        ++_inputPtr;
    } while (++i < len);
    int ch = _inputBuffer[_inputPtr] & 0xFF;
    if (ch >= '0' && ch != ']' && ch != '}') {
        // expected/allowed chars
        _checkMatchEnd(matchStr, i, ch);
    }
}","public void test100103() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[2];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-265), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 1, (byte) 109, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._matchToken(""Internal error: TypeReference constructed without actual type information"", 0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 2
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"@Override
public Boolean nextBooleanValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","public void test101104() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[8];
    byteArray0[2] = (byte) 13;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 3, true);
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000051; line: 2, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public Boolean nextBooleanValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","public void test102105() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 9;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1581, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 9, 2, true);
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: UNKNOWN; line: 1, column: -4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public Boolean nextBooleanValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","public void test103106() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[2];
    byte[] byteArray1 = new byte[9];
    byteArray1[0] = (byte) 9;
    byteArray1[1] = (byte) 9;
    byteArray1[2] = (byte) 9;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1357, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 9, 3, true);
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: UNKNOWN; line: 1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public Boolean nextBooleanValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","public void test104107() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 9;
    byteArray0[1] = (byte) 9;
    byteArray0[2] = (byte) 9;
    byteArray0[3] = (byte) 9;
    byteArray0[4] = (byte) 9;
    byteArray0[5] = (byte) 9;
    byteArray0[6] = (byte) 9;
    byteArray0[7] = (byte) 9;
    byteArray0[8] = (byte) 9;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1357, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) 9, 3, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0.nextBooleanValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.io.IOContext"", e);
    }
}",""
"@Override
protected char _decodeEscaped() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("" in character escape sequence"");
        }
    }
    int c = (int) _inputBuffer[_inputPtr++];
    switch(c) {
        // First, ones that are mapped
        case 'b':
            return '\b';
        case 't':
            return '\t';
        case 'n':
            return '\n';
        case 'f':
            return '\f';
        case 'r':
            return '\r';
        // And these are to be returned as they are
        case '""':
        case '/':
        case '\\':
            return (char) c;
        case // and finally hex-escaped
        'u':
            break;
        default:
            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));
    }
    // Ok, a hex escape. Need 4 characters
    int value = 0;
    for (int i = 0; i < 4; ++i) {
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in character escape sequence"");
            }
        }
        int ch = (int) _inputBuffer[_inputPtr++];
        int digit = CharTypes.charToHex(ch);
        if (digit < 0) {
            _reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
        }
        value = (value << 4) | digit;
    }
    return (char) value;
}","public void test105109() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 3, 1871);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1853), pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1, false);
    char char0 = uTF8StreamJsonParser0._decodeEscaped();
    assertEquals('\u0000', char0);
}",""
"@Override
protected char _decodeEscaped() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!loadMore()) {
            _reportInvalidEOF("" in character escape sequence"");
        }
    }
    int c = (int) _inputBuffer[_inputPtr++];
    switch(c) {
        // First, ones that are mapped
        case 'b':
            return '\b';
        case 't':
            return '\t';
        case 'n':
            return '\n';
        case 'f':
            return '\f';
        case 'r':
            return '\r';
        // And these are to be returned as they are
        case '""':
        case '/':
        case '\\':
            return (char) c;
        case // and finally hex-escaped
        'u':
            break;
        default:
            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));
    }
    // Ok, a hex escape. Need 4 characters
    int value = 0;
    for (int i = 0; i < 4; ++i) {
        if (_inputPtr >= _inputEnd) {
            if (!loadMore()) {
                _reportInvalidEOF("" in character escape sequence"");
            }
        }
        int ch = (int) _inputBuffer[_inputPtr++];
        int digit = CharTypes.charToHex(ch);
        if (digit < 0) {
            _reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
        }
        value = (value << 4) | digit;
    }
    return (char) value;
}","public void test106110() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[7];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 42, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (byte) 0, false);
    try {
        uTF8StreamJsonParser0._decodeEscaped();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in character escape sequence
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleUnexpectedValue(int c) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(c) {
        case ']':
        case '}':
            // Error: neither is valid at this point; valid closers have
            // been handled earlier
            _reportUnexpectedChar(c, ""expected a value"");
        case '\'':
            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
                return _handleApos();
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            if (_inputPtr >= _inputEnd) {
                if (!loadMore()) {
                    _reportInvalidEOFInValue();
                }
            }
            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);
    }
    // [Issue#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(c)) {
        _reportInvalidToken("""" + ((char) c), ""('true', 'false' or 'null')"");
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
    return null;
}","public void test107111() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[7];
    byteArray0[1] = (byte) (-56);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-3411), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 1, true);
    try {
        uTF8StreamJsonParser0._handleUnexpectedValue((byte) 73);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000052; line: 1, column: 3]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}","/**
 * Method for handling cases where first non-space character
 * of an expected value token is not legal for standard JSON content.
 */"
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test108112() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[7];
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1427, 1427);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1427, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 57, 1427, false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseName((-533));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 57
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, secondary parsing
    /**********************************************************
     */
protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = _icLatin1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","public void test109113() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1538), 2);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1822), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 402, (-1235), false);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._parseName(3831);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                if (c != '\'') {
                    // marked as special, isn't here
                    c = _decodeEscaped();
                }
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test110114() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 41;
    byteArray0[1] = (byte) (-56);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, (byte) (-56), false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000053; line: 1, column: -51]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                if (c != '\'') {
                    // marked as special, isn't here
                    c = _decodeEscaped();
                }
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test111115() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[8];
    byteArray0[0] = (byte) 109;
    byteArray0[1] = (byte) (-21);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 109, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 93, (byte) 0, false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Invalid UTF-8 middle byte 0x0
        //  at [Source: UNKNOWN; line: 1, column: -89]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public JsonToken getLastClearedToken() {
    return _lastClearedToken;
}","public void test112116() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""|i9EVahQz"", true);
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 865, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 46, 3, true);
    uTF8StreamJsonParser0._skipCR();
    assertNull(uTF8StreamJsonParser0.getLastClearedToken());
}",""
"protected void _reportInvalidToken(String matchedPart, String msg) throws IOException {
    StringBuilder sb = new StringBuilder(matchedPart);
    /* Let's just try to find what appears to be the token, using
          * regular Java identifier character rules. It's just a heuristic,
          * nothing fancy here (nor fast).
          */
    while (true) {
        if (_inputPtr >= _inputEnd && !loadMore()) {
            break;
        }
        int i = (int) _inputBuffer[_inputPtr++];
        char c = (char) _decodeCharForError(i);
        if (!Character.isJavaIdentifierPart(c)) {
            break;
        }
        sb.append(c);
    }
    _reportError(""Unrecognized token '"" + sb.toString() + ""': was expecting "" + msg);
}","public void test113117() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-781), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-2363), (-2363), false);
    try {
        uTF8StreamJsonParser0._reportInvalidToken(""N*W_yjSq?"", ""6,HVRHv*CKJgcT"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'N*W_yjSq?\u0000\u0000\u0000\u0000\u0000': was expecting 6,HVRHv*CKJgcT
        //  at [Source: UNKNOWN; line: 1, column: 11]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"@Override
public String nextTextValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _currToken = t;
        if (t == JsonToken.VALUE_STRING) {
            if (_tokenIncomplete) {
                _tokenIncomplete = false;
                return _finishAndReturnString();
            }
            return _textBuffer.contentsAsString();
        }
        if (t == JsonToken.START_ARRAY) {
            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
}","public void test114118() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 10;
    byteArray0[1] = (byte) 80;
    byteArray0[3] = (byte) 10;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 80, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) 80, (-126), false);
    try {
        uTF8StreamJsonParser0.nextTextValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'P\u0000': was expecting ('true', 'false' or 'null')
        //  at [Source: UNKNOWN; line: 2, column: 4]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                int max2 = _inputPtr + (outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = (int) inputBuffer[_inputPtr++] & 0xFF;
                if (c == '\'' || codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == '\'') {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                if (c != '\'') {
                    // marked as special, isn't here
                    c = _decodeEscaped();
                }
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","public void test115119() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[11];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 109, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 0, false);
    try {
        uTF8StreamJsonParser0._handleApos();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000054; line: 1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, binary access
    /**********************************************************
     */
/**
 * Efficient handling for incremental parsing of base64-encoded
 * textual content.
 */
@SuppressWarnings(""resource"")
protected final byte[] _decodeBase64(Base64Variant b64variant) throws IOException {
    ByteArrayBuilder builder = _getByteArrayBuilder();
    //main_loop:
    while (true) {
        // first, we'll skip preceding white space, if any
        int ch;
        do {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            ch = (int) _inputBuffer[_inputPtr++] & 0xFF;
        } while (ch <= INT_SPACE);
        int bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            // reached the end, fair and square?
            if (ch == INT_QUOTE) {
                return builder.toByteArray();
            }
            bits = _decodeBase64Escape(b64variant, ch, 0);
            if (bits < 0) {
                // white space to skip
                continue;
            }
        }
        int decodedData = bits;
        // then second base64 char; can't get padding yet, nor ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            bits = _decodeBase64Escape(b64variant, ch, 1);
        }
        decodedData = (decodedData << 6) | bits;
        // third base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        // First branch: can get padding (-> 1 byte)
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""' && !b64variant.usesPadding()) {
                    decodedData >>= 4;
                    builder.append(decodedData);
                    return builder.toByteArray();
                }
                bits = _decodeBase64Escape(b64variant, ch, 2);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                // Ok, must get padding
                if (_inputPtr >= _inputEnd) {
                    loadMoreGuaranteed();
                }
                ch = _inputBuffer[_inputPtr++] & 0xFF;
                if (!b64variant.usesPaddingChar(ch)) {
                    throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                }
                // Got 12 bits, only need 8, need to shift
                decodedData >>= 4;
                builder.append(decodedData);
                continue;
            }
        }
        // Nope, 2 or 3 bytes
        decodedData = (decodedData << 6) | bits;
        // fourth and last base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""' && !b64variant.usesPadding()) {
                    decodedData >>= 2;
                    builder.appendTwoBytes(decodedData);
                    return builder.toByteArray();
                }
                bits = _decodeBase64Escape(b64variant, ch, 3);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                /* With padding we only get 2 bytes; but we have
                     * to shift it a bit so it is identical to triplet
                     * case with partial output.
                     * 3 chars gives 3x6 == 18 bits, of which 2 are
                     * dummies, need to discard:
                     */
                decodedData >>= 2;
                builder.appendTwoBytes(decodedData);
                continue;
            }
        }
        // otherwise, our triplet is now complete
        decodedData = (decodedData << 6) | bits;
        builder.appendThreeBytes(decodedData);
    }
}","public void test117121() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1236, 1222, true);
    try {
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unexpected end-of-input in null
        //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000055; line: 1, column: -9]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",""
"/*
    /**********************************************************
    /* Internal methods, binary access
    /**********************************************************
     */
/**
 * Efficient handling for incremental parsing of base64-encoded
 * textual content.
 */
@SuppressWarnings(""resource"")
protected final byte[] _decodeBase64(Base64Variant b64variant) throws IOException {
    ByteArrayBuilder builder = _getByteArrayBuilder();
    //main_loop:
    while (true) {
        // first, we'll skip preceding white space, if any
        int ch;
        do {
            if (_inputPtr >= _inputEnd) {
                loadMoreGuaranteed();
            }
            ch = (int) _inputBuffer[_inputPtr++] & 0xFF;
        } while (ch <= INT_SPACE);
        int bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            // reached the end, fair and square?
            if (ch == INT_QUOTE) {
                return builder.toByteArray();
            }
            bits = _decodeBase64Escape(b64variant, ch, 0);
            if (bits < 0) {
                // white space to skip
                continue;
            }
        }
        int decodedData = bits;
        // then second base64 char; can't get padding yet, nor ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            bits = _decodeBase64Escape(b64variant, ch, 1);
        }
        decodedData = (decodedData << 6) | bits;
        // third base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        // First branch: can get padding (-> 1 byte)
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""' && !b64variant.usesPadding()) {
                    decodedData >>= 4;
                    builder.append(decodedData);
                    return builder.toByteArray();
                }
                bits = _decodeBase64Escape(b64variant, ch, 2);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                // Ok, must get padding
                if (_inputPtr >= _inputEnd) {
                    loadMoreGuaranteed();
                }
                ch = _inputBuffer[_inputPtr++] & 0xFF;
                if (!b64variant.usesPaddingChar(ch)) {
                    throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                }
                // Got 12 bits, only need 8, need to shift
                decodedData >>= 4;
                builder.append(decodedData);
                continue;
            }
        }
        // Nope, 2 or 3 bytes
        decodedData = (decodedData << 6) | bits;
        // fourth and last base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""' && !b64variant.usesPadding()) {
                    decodedData >>= 2;
                    builder.appendTwoBytes(decodedData);
                    return builder.toByteArray();
                }
                bits = _decodeBase64Escape(b64variant, ch, 3);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                /* With padding we only get 2 bytes; but we have
                     * to shift it a bit so it is identical to triplet
                     * case with partial output.
                     * 3 chars gives 3x6 == 18 bits, of which 2 are
                     * dummies, need to discard:
                     */
                decodedData >>= 2;
                builder.appendTwoBytes(decodedData);
                continue;
            }
        }
        // otherwise, our triplet is now complete
        decodedData = (decodedData << 6) | bits;
        builder.appendThreeBytes(decodedData);
    }
}","public void test118122() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 85;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1236, 1222, true);
    // Undeclared exception!
    try {
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8StreamJsonParser"", e);
    }
}",""
"public int getLineNr() {
    return _lineNr;
}","public void test119123() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 0, 0, true);
    JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
    assertEquals(1, jsonLocation0.getLineNr());
}","/**
 * @return Line number of the location (1-based)
 */"
"public long getCharOffset() {
    return _totalChars;
}","public void test119124() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 0, 0, true);
    JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
    assertEquals((-1L), jsonLocation0.getCharOffset());
}","/**
 * @return Character offset within underlying stream, reader or writer,
 *   if available; -1 if not.
 */"
