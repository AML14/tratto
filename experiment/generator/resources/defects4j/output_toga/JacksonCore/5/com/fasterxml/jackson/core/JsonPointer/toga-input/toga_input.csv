focal_method,test_prefix,docstring
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test000() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""UxRS~L`&zjDqX/"", 0);
    assertFalse(jsonPointer0.matches());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test001() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""UxRS~L`&zjDqX/"", 0);
    assertEquals(""~UxRS~L`&zjDqX"", jsonPointer0.getMatchingProperty());
}",""
"public boolean mayMatchElement() {
    return _matchingElementIndex >= 0;
}","public void test002() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""UxRS~L`&zjDqX/"", 0);
    assertFalse(jsonPointer0.mayMatchElement());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test003() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""UxRS~L`&zjDqX/"", 0);
    assertEquals(""UxRS~L`&zjDqX/"", jsonPointer0.toString());
}",""
"protected static JsonPointer _parseQuotedTail(String input, int i) {
    final int end = input.length();
    StringBuilder sb = new StringBuilder(Math.max(16, end));
    if (i > 2) {
        sb.append(input, 1, i - 1);
    }
    _appendEscape(sb, input.charAt(i++));
    while (i < end) {
        char c = input.charAt(i);
        if (c == '/') {
            // end is nigh!
            return new JsonPointer(input, sb.toString(), // need to push back slash
            _parseTail(input.substring(i)));
        }
        ++i;
        if (c == '~' && i < end) {
            _appendEscape(sb, input.charAt(i++));
            continue;
        }
        sb.append(c);
    }
    // end of the road, last segment
    return new JsonPointer(input, sb.toString(), EMPTY);
}","public void test014() throws Throwable {
    // Undeclared exception!
    try {
        JsonPointer._parseQuotedTail("""", 2);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * Method called to parse tail of pointer path, when a potentially
 * escaped character has been seen.
 *
 * @param input Full input for the tail being parsed
 * @param i Offset to character after tilde
 */"
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test025() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""\""9 *EsdbB"", 8);
    assertEquals(""\""9 *EsdbB"", jsonPointer0.toString());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test026() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""\""9 *EsdbB"", 8);
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test027() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""\""9 *EsdbB"", 8);
    assertEquals(""9 *Esd~B"", jsonPointer0.getMatchingProperty());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test038() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""2wKWi"", 0);
    jsonPointer0.hashCode();
    assertEquals(""~2wKWi"", jsonPointer0.getMatchingProperty());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test039() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""2wKWi"", 0);
    jsonPointer0.hashCode();
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test0410() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""\"""");
    jsonPointer0.matchElement((-1006));
    assertEquals("""", jsonPointer0.getMatchingProperty());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test0411() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""\"""");
    jsonPointer0.matchElement((-1006));
    assertEquals(""\"""", jsonPointer0.toString());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test0412() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""\"""");
    jsonPointer0.matchElement((-1006));
    assertFalse(jsonPointer0.matches());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test0413() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""\"""");
    jsonPointer0.matchElement((-1006));
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test0514() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""com.fasterxml.jackson.core.JsonPointer"");
    boolean boolean0 = jsonPointer0.mayMatchProperty();
    assertEquals(""om.fasterxml.jackson.core.JsonPointer"", jsonPointer0.getMatchingProperty());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test0515() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""com.fasterxml.jackson.core.JsonPointer"");
    boolean boolean0 = jsonPointer0.mayMatchProperty();
    assertEquals(""com.fasterxml.jackson.core.JsonPointer"", jsonPointer0.toString());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test0516() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""com.fasterxml.jackson.core.JsonPointer"");
    boolean boolean0 = jsonPointer0.mayMatchProperty();
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"public boolean mayMatchProperty() {
    return _matchingPropertyName != null;
}","public void test0517() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""com.fasterxml.jackson.core.JsonPointer"");
    boolean boolean0 = jsonPointer0.mayMatchProperty();
    assertTrue(boolean0);
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test0518() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""com.fasterxml.jackson.core.JsonPointer"");
    boolean boolean0 = jsonPointer0.mayMatchProperty();
    assertFalse(jsonPointer0.matches());
}",""
"/*
    /**********************************************************
    /* Factory methods
    /**********************************************************
     */
/**
 * Factory method that parses given input and construct matching pointer
 * instance, if it represents a valid JSON Pointer: if not, a
 * {@link IllegalArgumentException} is thrown.
 *
 * @throws IllegalArgumentException Thrown if the input does not present a valid JSON Pointer
 *   expression: currently the only such expression is one that does NOT start with
 *   a slash ('/').
 */
public static JsonPointer compile(String input) throws IllegalArgumentException {
    // First quick checks for well-known 'empty' pointer
    if ((input == null) || input.length() == 0) {
        return EMPTY;
    }
    // And then quick validity check:
    if (input.charAt(0) != '/') {
        throw new IllegalArgumentException(""Invalid input: JSON Pointer expression must start with '/': "" + ""\"""" + input + ""\"""");
    }
    return _parseTail(input);
}","public void test0619() throws Throwable {
    try {
        JsonPointer.compile(""\"" can not be represented as BigDecimal"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid input: JSON Pointer expression must start with '/': \""\"" can not be represented as BigDecimal\""
        //
        verifyException(""com.fasterxml.jackson.core.JsonPointer"", e);
    }
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test0720() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.EMPTY;
    String string0 = jsonPointer0.toString();
    assertEquals("""", string0);
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test0821() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""'"", 0);
    JsonPointer jsonPointer1 = new JsonPointer(""'"", ""'"", jsonPointer0);
    JsonPointer jsonPointer2 = jsonPointer1.tail();
    assertEquals(""~'"", jsonPointer2.getMatchingProperty());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test0822() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""'"", 0);
    JsonPointer jsonPointer1 = new JsonPointer(""'"", ""'"", jsonPointer0);
    JsonPointer jsonPointer2 = jsonPointer1.tail();
    assertEquals((-1), jsonPointer2.getMatchingIndex());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test0823() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""'"", 0);
    JsonPointer jsonPointer1 = new JsonPointer(""'"", ""'"", jsonPointer0);
    JsonPointer jsonPointer2 = jsonPointer1.tail();
    assertEquals(""'"", jsonPointer2.toString());
}",""
"public JsonPointer tail() {
    return _nextSegment;
}","public void test0824() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""'"", 0);
    JsonPointer jsonPointer1 = new JsonPointer(""'"", ""'"", jsonPointer0);
    JsonPointer jsonPointer2 = jsonPointer1.tail();
    assertNotNull(jsonPointer2);
}","/**
 * Accessor for getting a ""sub-pointer"", instance where current segment
 * has been removed and pointer includes rest of segments;
 */"
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test0925() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""#)FP\""Z"");
    JsonPointer jsonPointer1 = new JsonPointer(""|)z_l/&t?Lhvg~9=PF"", ""Re<Syn?x~0Gpvyl"", jsonPointer0);
    JsonPointer jsonPointer2 = jsonPointer1.matchProperty(""Re<Syn?x~0Gpvyl"");
    assertEquals((-1), jsonPointer2.getMatchingIndex());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test0926() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""#)FP\""Z"");
    JsonPointer jsonPointer1 = new JsonPointer(""|)z_l/&t?Lhvg~9=PF"", ""Re<Syn?x~0Gpvyl"", jsonPointer0);
    JsonPointer jsonPointer2 = jsonPointer1.matchProperty(""Re<Syn?x~0Gpvyl"");
    assertEquals((-1), jsonPointer1.getMatchingIndex());
}",""
"public JsonPointer matchProperty(String name) {
    if (_nextSegment == null || !_matchingPropertyName.equals(name)) {
        return null;
    }
    return _nextSegment;
}","public void test0927() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""#)FP\""Z"");
    JsonPointer jsonPointer1 = new JsonPointer(""|)z_l/&t?Lhvg~9=PF"", ""Re<Syn?x~0Gpvyl"", jsonPointer0);
    JsonPointer jsonPointer2 = jsonPointer1.matchProperty(""Re<Syn?x~0Gpvyl"");
    assertNotNull(jsonPointer2);
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test0928() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""#)FP\""Z"");
    JsonPointer jsonPointer1 = new JsonPointer(""|)z_l/&t?Lhvg~9=PF"", ""Re<Syn?x~0Gpvyl"", jsonPointer0);
    JsonPointer jsonPointer2 = jsonPointer1.matchProperty(""Re<Syn?x~0Gpvyl"");
    assertEquals("")FP\""Z"", jsonPointer2.getMatchingProperty());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test1029() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""3F*^fz99E<t;!CB;/"", 0);
    String string0 = jsonPointer0.getMatchingProperty();
    assertFalse(jsonPointer0.matches());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test1030() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""3F*^fz99E<t;!CB;/"", 0);
    String string0 = jsonPointer0.getMatchingProperty();
    assertEquals(""3F*^fz99E<t;!CB;/"", jsonPointer0.toString());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test1031() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""3F*^fz99E<t;!CB;/"", 0);
    String string0 = jsonPointer0.getMatchingProperty();
    assertEquals(""~3F*^fz99E<t;!CB;"", string0);
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test1032() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""3F*^fz99E<t;!CB;/"", 0);
    String string0 = jsonPointer0.getMatchingProperty();
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test1133() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    JsonPointer jsonPointer1 = new JsonPointer(""H"", ""0"", jsonPointer0);
    int int0 = jsonPointer1.getMatchingIndex();
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test1134() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    JsonPointer jsonPointer1 = new JsonPointer(""H"", ""0"", jsonPointer0);
    int int0 = jsonPointer1.getMatchingIndex();
    assertEquals(""H"", jsonPointer1.toString());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test1135() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    JsonPointer jsonPointer1 = new JsonPointer(""H"", ""0"", jsonPointer0);
    int int0 = jsonPointer1.getMatchingIndex();
    assertEquals(""0"", jsonPointer1.getMatchingProperty());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test1136() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    JsonPointer jsonPointer1 = new JsonPointer(""H"", ""0"", jsonPointer0);
    int int0 = jsonPointer1.getMatchingIndex();
    assertEquals(0, int0);
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test1137() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    JsonPointer jsonPointer1 = new JsonPointer(""H"", ""0"", jsonPointer0);
    int int0 = jsonPointer1.getMatchingIndex();
    assertFalse(jsonPointer1.matches());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test1238() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    int int0 = jsonPointer0.getMatchingIndex();
    assertEquals(4, int0);
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test1239() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    int int0 = jsonPointer0.getMatchingIndex();
    assertEquals(""04"", jsonPointer0.getMatchingProperty());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test1240() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    int int0 = jsonPointer0.getMatchingIndex();
    assertFalse(jsonPointer0.matches());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test1241() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    int int0 = jsonPointer0.getMatchingIndex();
    assertEquals(""G04"", jsonPointer0.toString());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test1342() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G0"");
    assertEquals(""G0"", jsonPointer0.toString());
}",""
"public boolean mayMatchElement() {
    return _matchingElementIndex >= 0;
}","public void test1343() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G0"");
    assertTrue(jsonPointer0.mayMatchElement());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test1344() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G0"");
    assertEquals(""0"", jsonPointer0.getMatchingProperty());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test1345() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G0"");
    assertFalse(jsonPointer0.matches());
}",""
"public static JsonPointer valueOf(String input) {
    return compile(input);
}","public void test1446() throws Throwable {
    // Undeclared exception!
    try {
        JsonPointer.valueOf(""Invalid input: JSON Pointer expression must start with '/': \"""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid input: JSON Pointer expression must start with '/': \""Invalid input: JSON Pointer expression must start with '/': \""\""
        //
        verifyException(""com.fasterxml.jackson.core.JsonPointer"", e);
    }
}","/**
 * Alias for {@link #compile}; added to make instances automatically
 * deserializable by Jackson databind.
 */"
"protected static JsonPointer _parseTail(String input) {
    final int end = input.length();
    // first char is the contextual slash, skip
    for (int i = 1; i < end; ) {
        char c = input.charAt(i);
        if (c == '/') {
            // common case, got a segment
            return new JsonPointer(input, input.substring(1, i), _parseTail(input.substring(i)));
        }
        ++i;
        // quoting is different; offline this case
        if (c == '~' && i < end) {
            // possibly, quote
            return _parseQuotedTail(input, i);
        }
        // otherwise, loop on
    }
    // end of the road, no escapes
    return new JsonPointer(input, input.substring(1), EMPTY);
}","public void test1547() throws Throwable {
    // Undeclared exception!
    try {
        JsonPointer._parseTail("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"protected static JsonPointer _parseTail(String input) {
    final int end = input.length();
    // first char is the contextual slash, skip
    for (int i = 1; i < end; ) {
        char c = input.charAt(i);
        if (c == '/') {
            // common case, got a segment
            return new JsonPointer(input, input.substring(1, i), _parseTail(input.substring(i)));
        }
        ++i;
        // quoting is different; offline this case
        if (c == '~' && i < end) {
            // possibly, quote
            return _parseQuotedTail(input, i);
        }
        // otherwise, loop on
    }
    // end of the road, no escapes
    return new JsonPointer(input, input.substring(1), EMPTY);
}","public void test1648() throws Throwable {
    // Undeclared exception!
    try {
        JsonPointer._parseTail(""p7[506"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""7[506\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}",""
"protected static JsonPointer _parseTail(String input) {
    final int end = input.length();
    // first char is the contextual slash, skip
    for (int i = 1; i < end; ) {
        char c = input.charAt(i);
        if (c == '/') {
            // common case, got a segment
            return new JsonPointer(input, input.substring(1, i), _parseTail(input.substring(i)));
        }
        ++i;
        // quoting is different; offline this case
        if (c == '~' && i < end) {
            // possibly, quote
            return _parseQuotedTail(input, i);
        }
        // otherwise, loop on
    }
    // end of the road, no escapes
    return new JsonPointer(input, input.substring(1), EMPTY);
}","public void test1749() throws Throwable {
    // Undeclared exception!
    try {
        JsonPointer._parseTail((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.JsonPointer"", e);
    }
}",""
"protected static JsonPointer _parseQuotedTail(String input, int i) {
    final int end = input.length();
    StringBuilder sb = new StringBuilder(Math.max(16, end));
    if (i > 2) {
        sb.append(input, 1, i - 1);
    }
    _appendEscape(sb, input.charAt(i++));
    while (i < end) {
        char c = input.charAt(i);
        if (c == '/') {
            // end is nigh!
            return new JsonPointer(input, sb.toString(), // need to push back slash
            _parseTail(input.substring(i)));
        }
        ++i;
        if (c == '~' && i < end) {
            _appendEscape(sb, input.charAt(i++));
            continue;
        }
        sb.append(c);
    }
    // end of the road, last segment
    return new JsonPointer(input, sb.toString(), EMPTY);
}","public void test1850() throws Throwable {
    // Undeclared exception!
    try {
        JsonPointer._parseQuotedTail((String) null, 646);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.JsonPointer"", e);
    }
}","/**
 * Method called to parse tail of pointer path, when a potentially
 * escaped character has been seen.
 *
 * @param input Full input for the tail being parsed
 * @param i Offset to character after tilde
 */"
"protected static JsonPointer _parseQuotedTail(String input, int i) {
    final int end = input.length();
    StringBuilder sb = new StringBuilder(Math.max(16, end));
    if (i > 2) {
        sb.append(input, 1, i - 1);
    }
    _appendEscape(sb, input.charAt(i++));
    while (i < end) {
        char c = input.charAt(i);
        if (c == '/') {
            // end is nigh!
            return new JsonPointer(input, sb.toString(), // need to push back slash
            _parseTail(input.substring(i)));
        }
        ++i;
        if (c == '~' && i < end) {
            _appendEscape(sb, input.charAt(i++));
            continue;
        }
        sb.append(c);
    }
    // end of the road, last segment
    return new JsonPointer(input, sb.toString(), EMPTY);
}","public void test1951() throws Throwable {
    // Undeclared exception!
    try {
        JsonPointer._parseQuotedTail(""UxRS~L`&zjDqX/"", 1143);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // start 1, end 1142, s.length() 15
        //
        verifyException(""java.lang.AbstractStringBuilder"", e);
    }
}","/**
 * Method called to parse tail of pointer path, when a potentially
 * escaped character has been seen.
 *
 * @param input Full input for the tail being parsed
 * @param i Offset to character after tilde
 */"
"protected JsonPointer(String fullString, String segment, JsonPointer next) {
    _asString = fullString;
    _nextSegment = next;
    // Ok; may always be a property
    _matchingPropertyName = segment;
    _matchingElementIndex = _parseIndex(segment);
}","public void test2052() throws Throwable {
    JsonPointer jsonPointer0 = null;
    try {
        jsonPointer0 = new JsonPointer(""3!7E"", ""3!7E"", (JsonPointer) null);
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""3!7E\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}","/**
 * Constructor used for creating non-empty Segments
 */"
"protected JsonPointer(String fullString, String segment, JsonPointer next) {
    _asString = fullString;
    _nextSegment = next;
    // Ok; may always be a property
    _matchingPropertyName = segment;
    _matchingElementIndex = _parseIndex(segment);
}","public void test2153() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.EMPTY;
    JsonPointer jsonPointer1 = null;
    try {
        jsonPointer1 = new JsonPointer((String) null, (String) null, jsonPointer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.JsonPointer"", e);
    }
}","/**
 * Constructor used for creating non-empty Segments
 */"
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test2254() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.compile(""/PV8}XI{l'YJO9E($"");
    assertEquals(""PV8}XI{l'YJO9E($"", jsonPointer0.getMatchingProperty());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test2255() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.compile(""/PV8}XI{l'YJO9E($"");
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test2256() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.compile(""/PV8}XI{l'YJO9E($"");
    assertFalse(jsonPointer0.matches());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test2257() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.compile(""/PV8}XI{l'YJO9E($"");
    assertEquals(""/PV8}XI{l'YJO9E($"", jsonPointer0.toString());
}",""
"public JsonPointer tail() {
    return _nextSegment;
}","public void test2358() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.compile("""");
    JsonPointer jsonPointer1 = jsonPointer0.tail();
    assertNull(jsonPointer1);
}","/**
 * Accessor for getting a ""sub-pointer"", instance where current segment
 * has been removed and pointer includes rest of segments;
 */"
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test2459() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""2.2250738585072012e-308"", 16);
    assertFalse(jsonPointer0.matches());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test2460() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""2.2250738585072012e-308"", 16);
    assertEquals(""2.2250738585072012e-308"", jsonPointer0.toString());
}",""
"public boolean mayMatchElement() {
    return _matchingElementIndex >= 0;
}","public void test2461() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""2.2250738585072012e-308"", 16);
    assertFalse(jsonPointer0.mayMatchElement());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test2462() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""2.2250738585072012e-308"", 16);
    assertEquals("".2250738585072/2e-308"", jsonPointer0.getMatchingProperty());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test2563() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""Re<Syn?x~0Gpvyl"", 0);
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test2564() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""Re<Syn?x~0Gpvyl"", 0);
    assertFalse(jsonPointer0.matches());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test2565() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""Re<Syn?x~0Gpvyl"", 0);
    assertEquals(""Re<Syn?x~0Gpvyl"", jsonPointer0.toString());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test2566() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""Re<Syn?x~0Gpvyl"", 0);
    assertEquals(""~Re<Syn?x~Gpvyl"", jsonPointer0.getMatchingProperty());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test2667() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""$ZxSb~"");
    assertEquals(""ZxSb~"", jsonPointer0.getMatchingProperty());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test2668() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""$ZxSb~"");
    assertFalse(jsonPointer0.matches());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test2669() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""$ZxSb~"");
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test2670() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""$ZxSb~"");
    assertEquals(""$ZxSb~"", jsonPointer0.toString());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test2771() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""|)z_l/&t?Lhvg~9=PF"");
    assertEquals(""|)z_l/&t?Lhvg~9=PF"", jsonPointer0.toString());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test2772() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""|)z_l/&t?Lhvg~9=PF"");
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test2773() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""|)z_l/&t?Lhvg~9=PF"");
    assertEquals("")z_l"", jsonPointer0.getMatchingProperty());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test2774() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""|)z_l/&t?Lhvg~9=PF"");
    assertFalse(jsonPointer0.matches());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test2875() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""3F*^fz99E<t;!CB;/"");
    assertEquals(""F*^fz99E<t;!CB;"", jsonPointer0.getMatchingProperty());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test2876() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""3F*^fz99E<t;!CB;/"");
    assertFalse(jsonPointer0.matches());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test2877() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""3F*^fz99E<t;!CB;/"");
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test2878() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""3F*^fz99E<t;!CB;/"");
    assertEquals(""3F*^fz99E<t;!CB;/"", jsonPointer0.toString());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test2979() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""~)kx^$<MFG"");
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test2980() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""~)kx^$<MFG"");
    assertEquals(""~)kx^$<MFG"", jsonPointer0.toString());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test2981() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""~)kx^$<MFG"");
    assertEquals("")kx^$<MFG"", jsonPointer0.getMatchingProperty());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test2982() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""~)kx^$<MFG"");
    assertFalse(jsonPointer0.matches());
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (!(o instanceof JsonPointer))
        return false;
    return _asString.equals(((JsonPointer) o)._asString);
}","public void test3083() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.EMPTY;
    Object object0 = new Object();
    boolean boolean0 = jsonPointer0.equals(object0);
    assertFalse(boolean0);
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (!(o instanceof JsonPointer))
        return false;
    return _asString.equals(((JsonPointer) o)._asString);
}","public void test3184() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.EMPTY;
    JsonPointer jsonPointer1 = new JsonPointer((String) null, ""3F*^fz99E<t;!CB;/"", (JsonPointer) null);
    // Undeclared exception!
    try {
        jsonPointer1.equals(jsonPointer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test3285() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""3F*^fz99E<t;!CB;/"", 0);
    boolean boolean0 = jsonPointer0.equals(jsonPointer0);
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test3286() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""3F*^fz99E<t;!CB;/"", 0);
    boolean boolean0 = jsonPointer0.equals(jsonPointer0);
    assertEquals(""~3F*^fz99E<t;!CB;"", jsonPointer0.getMatchingProperty());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test3287() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""3F*^fz99E<t;!CB;/"", 0);
    boolean boolean0 = jsonPointer0.equals(jsonPointer0);
    assertFalse(jsonPointer0.matches());
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (!(o instanceof JsonPointer))
        return false;
    return _asString.equals(((JsonPointer) o)._asString);
}","public void test3288() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""3F*^fz99E<t;!CB;/"", 0);
    boolean boolean0 = jsonPointer0.equals(jsonPointer0);
    assertTrue(boolean0);
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test3289() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""3F*^fz99E<t;!CB;/"", 0);
    boolean boolean0 = jsonPointer0.equals(jsonPointer0);
    assertEquals(""3F*^fz99E<t;!CB;/"", jsonPointer0.toString());
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (!(o instanceof JsonPointer))
        return false;
    return _asString.equals(((JsonPointer) o)._asString);
}","public void test3390() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
    boolean boolean0 = jsonPointer0.equals((Object) null);
    assertFalse(boolean0);
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test3491() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    jsonPointer0.matchElement((-1));
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test3592() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    jsonPointer0.matchElement(0);
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test3693() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""pcB%"", 1);
    JsonPointer jsonPointer1 = jsonPointer0.matchProperty(""pcB%"");
    assertEquals(""~cB%"", jsonPointer0.getMatchingProperty());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test3694() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""pcB%"", 1);
    JsonPointer jsonPointer1 = jsonPointer0.matchProperty(""pcB%"");
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test3695() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""pcB%"", 1);
    JsonPointer jsonPointer1 = jsonPointer0.matchProperty(""pcB%"");
    assertEquals(""pcB%"", jsonPointer0.toString());
}",""
"public JsonPointer matchProperty(String name) {
    if (_nextSegment == null || !_matchingPropertyName.equals(name)) {
        return null;
    }
    return _nextSegment;
}","public void test3696() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""pcB%"", 1);
    JsonPointer jsonPointer1 = jsonPointer0.matchProperty(""pcB%"");
    assertNull(jsonPointer1);
}",""
"public boolean mayMatchProperty() {
    return _matchingPropertyName != null;
}","public void test3797() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    JsonPointer jsonPointer1 = new JsonPointer(""T"", ""T"", jsonPointer0);
    assertTrue(jsonPointer1.mayMatchProperty());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test3798() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    JsonPointer jsonPointer1 = new JsonPointer(""T"", ""T"", jsonPointer0);
    JsonPointer jsonPointer2 = jsonPointer1.matchProperty(""T"");
    assertEquals((-1), jsonPointer2.getMatchingIndex());
}",""
"public JsonPointer matchProperty(String name) {
    if (_nextSegment == null || !_matchingPropertyName.equals(name)) {
        return null;
    }
    return _nextSegment;
}","public void test3799() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    JsonPointer jsonPointer1 = new JsonPointer(""T"", ""T"", jsonPointer0);
    JsonPointer jsonPointer2 = jsonPointer1.matchProperty(""T"");
    assertNotNull(jsonPointer2);
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test37100() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    JsonPointer jsonPointer1 = new JsonPointer(""T"", ""T"", jsonPointer0);
    JsonPointer jsonPointer2 = jsonPointer1.matchProperty(""T"");
    assertEquals((-1), jsonPointer1.getMatchingIndex());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test38102() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    jsonPointer0.matchProperty("""");
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test39103() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    boolean boolean0 = jsonPointer0.mayMatchElement();
    assertEquals(""04"", jsonPointer0.getMatchingProperty());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test39104() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    boolean boolean0 = jsonPointer0.mayMatchElement();
    assertFalse(jsonPointer0.matches());
}",""
"public boolean mayMatchProperty() {
    return _matchingPropertyName != null;
}","public void test39105() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    boolean boolean0 = jsonPointer0.mayMatchElement();
    assertTrue(jsonPointer0.mayMatchProperty());
}",""
"public boolean mayMatchElement() {
    return _matchingElementIndex >= 0;
}","public void test39106() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    boolean boolean0 = jsonPointer0.mayMatchElement();
    assertTrue(boolean0);
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test39107() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    boolean boolean0 = jsonPointer0.mayMatchElement();
    assertEquals(""G04"", jsonPointer0.toString());
}",""
"public boolean mayMatchElement() {
    return _matchingElementIndex >= 0;
}","public void test40108() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.EMPTY;
    boolean boolean0 = jsonPointer0.mayMatchElement();
    assertFalse(boolean0);
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test41109() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
    boolean boolean0 = jsonPointer0.matches();
    assertTrue(boolean0);
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test42110() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    boolean boolean0 = jsonPointer0.matches();
    assertFalse(boolean0);
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test42111() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    boolean boolean0 = jsonPointer0.matches();
    assertEquals(""04"", jsonPointer0.getMatchingProperty());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test42112() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    boolean boolean0 = jsonPointer0.matches();
    assertEquals(""G04"", jsonPointer0.toString());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test42113() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    boolean boolean0 = jsonPointer0.matches();
    assertEquals(4, jsonPointer0.getMatchingIndex());
}",""
"public boolean mayMatchProperty() {
    return _matchingPropertyName != null;
}","public void test42114() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    boolean boolean0 = jsonPointer0.matches();
    assertTrue(jsonPointer0.mayMatchProperty());
}",""
"public boolean mayMatchProperty() {
    return _matchingPropertyName != null;
}","public void test43115() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.valueOf(""/"");
    assertTrue(jsonPointer0.mayMatchProperty());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test43116() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.valueOf(""/"");
    assertEquals(""/"", jsonPointer0.toString());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test43117() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.valueOf(""/"");
    assertFalse(jsonPointer0.matches());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test43118() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.valueOf(""/"");
    assertEquals("""", jsonPointer0.getMatchingProperty());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test43119() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.valueOf(""/"");
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test44120() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer.valueOf("""");
    assertEquals("""", jsonPointer0.getMatchingProperty());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test45121() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    int int0 = jsonPointer0.getMatchingIndex();
    assertEquals((-1), int0);
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test46122() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    String string0 = jsonPointer0.toString();
    assertEquals(""G04"", string0);
}",""
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test46124() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    String string0 = jsonPointer0.toString();
    assertEquals(""04"", jsonPointer0.getMatchingProperty());
}",""
"public boolean mayMatchElement() {
    return _matchingElementIndex >= 0;
}","public void test46125() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    String string0 = jsonPointer0.toString();
    assertTrue(jsonPointer0.mayMatchElement());
}",""
"/* Factory method that composes a pointer instance, given a set
     * of 'raw' segments: raw meaning that no processing will be done,
     * no escaping may is present.
     * 
     * @param segments
     * 
     * @return Constructed path instance
     */
/* TODO!
    public static JsonPointer fromSegment(String... segments)
    {
        if (segments.length == 0) {
            return EMPTY;
        }
        JsonPointer prev = null;
                
        for (String segment : segments) {
            JsonPointer next = new JsonPointer()
        }
    }
    */
/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public boolean matches() {
    return _nextSegment == null;
}","public void test46126() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    String string0 = jsonPointer0.toString();
    assertFalse(jsonPointer0.matches());
}",""
"public boolean mayMatchProperty() {
    return _matchingPropertyName != null;
}","public void test46127() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseTail(""G04"");
    String string0 = jsonPointer0.toString();
    assertTrue(jsonPointer0.mayMatchProperty());
}",""
"public JsonPointer tail() {
    return _nextSegment;
}","public void test47128() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""$ZxSb~"", 0);
    JsonPointer jsonPointer1 = jsonPointer0.tail();
    assertNotNull(jsonPointer1);
}","/**
 * Accessor for getting a ""sub-pointer"", instance where current segment
 * has been removed and pointer includes rest of segments;
 */"
"public String getMatchingProperty() {
    return _matchingPropertyName;
}","public void test47129() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""$ZxSb~"", 0);
    JsonPointer jsonPointer1 = jsonPointer0.tail();
    assertEquals(""~$ZxSb~"", jsonPointer0.getMatchingProperty());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test47130() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""$ZxSb~"", 0);
    JsonPointer jsonPointer1 = jsonPointer0.tail();
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
"public boolean mayMatchProperty() {
    return _matchingPropertyName != null;
}","public void test47131() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""$ZxSb~"", 0);
    JsonPointer jsonPointer1 = jsonPointer0.tail();
    assertTrue(jsonPointer0.mayMatchProperty());
}",""
"/*
    /**********************************************************
    /* Standard method overrides
    /**********************************************************
     */
@Override
public String toString() {
    return _asString;
}","public void test47132() throws Throwable {
    JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(""$ZxSb~"", 0);
    JsonPointer jsonPointer1 = jsonPointer0.tail();
    assertEquals("""", jsonPointer1.toString());
}",""
"public int getMatchingIndex() {
    return _matchingElementIndex;
}","public void test48133() throws Throwable {
    JsonPointer jsonPointer0 = new JsonPointer();
    jsonPointer0.getMatchingProperty();
    assertEquals((-1), jsonPointer0.getMatchingIndex());
}",""
