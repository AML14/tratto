project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test009,"public void test009() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test0010,"public void test0010() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test0020,"public void test0020() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test0021,"public void test0021() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test0022,"public void test0022() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test0023,"public void test0023() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test0024,"public void test0024() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test0025,"public void test0025() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test0026,"public void test0026() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test0027,"public void test0027() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test0028,"public void test0028() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test0029,"public void test0029() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertNotNull(byteQuadsCanonicalizer0);
}",0,assertNotNull(byteQuadsCanonicalizer0)
project,0,test0030,"public void test0030() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test0031,"public void test0031() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test0032,"public void test0032() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test0033,"public void test0033() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test0034,"public void test0034() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test0035,"public void test0035() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test0036,"public void test0036() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test0037,"public void test0037() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test0038,"public void test0038() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test0039,"public void test0039() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,
project,0,test0040,"public void test0040() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test0041,"public void test0041() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test0042,"public void test0042() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test0043,"public void test0043() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,
project,0,test0044,"public void test0044() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test0045,"public void test0045() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test0047,"public void test0047() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test0048,"public void test0048() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test0049,"public void test0049() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test0050,"public void test0050() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test0051,"public void test0051() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test0052,"public void test0052() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test0053,"public void test0053() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test0054,"public void test0054() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test0055,"public void test0055() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test0056,"public void test0056() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test0057,"public void test0057() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test0058,"public void test0058() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test0059,"public void test0059() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test0060,"public void test0060() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test0061,"public void test0061() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    assertEquals(127, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test0072,"public void test0072() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test0073,"public void test0073() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test0074,"public void test0074() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test0075,"public void test0075() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test0076,"public void test0076() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test0077,"public void test0077() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test0078,"public void test0078() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test0079,"public void test0079() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test0080,"public void test0080() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test0081,"public void test0081() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test0082,"public void test0082() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test0083,"public void test0083() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test0084,"public void test0084() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(8, nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test0085,"public void test0085() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test0086,"public void test0086() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test0087,"public void test0087() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test0088,"public void test0088() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test0089,"public void test0089() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test0090,"public void test0090() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test0091,"public void test0091() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(8, nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test0092,"public void test0092() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test0093,"public void test0093() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test0094,"public void test0094() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test0095,"public void test0095() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test0096,"public void test0096() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test0098,"public void test0098() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertFalse(nonBlockingJsonParser0.canReadTypeId())
project,0,test0099,"public void test0099() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,
project,0,test00100,"public void test00100() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test00101,"public void test00101() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test00102,"public void test00102() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test00103,"public void test00103() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(127, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test00104,"public void test00104() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test00105,"public void test00105() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test00106,"public void test00106() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test00107,"public void test00107() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test00108,"public void test00108() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(8, jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test00109,"public void test00109() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(jsonToken0.isScalarValue());
}",0,
project,0,test00110,"public void test00110() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test00124,"public void test00124() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test00125,"public void test00125() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test00126,"public void test00126() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test00127,"public void test00127() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test00128,"public void test00128() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test00129,"public void test00129() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test00130,"public void test00130() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test00131,"public void test00131() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test00132,"public void test00132() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test00133,"public void test00133() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,
project,0,test00134,"public void test00134() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test00135,"public void test00135() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test00136,"public void test00136() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(8, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test00137,"public void test00137() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test00138,"public void test00138() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test00139,"public void test00139() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test00140,"public void test00140() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test00141,"public void test00141() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test00142,"public void test00142() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test00143,"public void test00143() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(8, nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test00144,"public void test00144() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test00145,"public void test00145() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertFalse(nonBlockingJsonParser0.hasCurrentToken())
project,0,test00146,"public void test00146() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test00147,"public void test00147() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test00148,"public void test00148() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test00150,"public void test00150() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test00151,"public void test00151() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test00152,"public void test00152() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test00153,"public void test00153() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test00154,"public void test00154() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test00155,"public void test00155() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(127, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test00172,"public void test00172() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    MockFile mockFile0 = new MockFile((String) null, ""KF}SmL](;"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test01190,"public void test01190() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test01191,"public void test01191() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test01201,"public void test01201() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test01202,"public void test01202() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test01203,"public void test01203() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertFalse(nonBlockingJsonParser0.canReadTypeId())
project,0,test01205,"public void test01205() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test01206,"public void test01206() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test01207,"public void test01207() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test01208,"public void test01208() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test01209,"public void test01209() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test01210,"public void test01210() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test01211,"public void test01211() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test01212,"public void test01212() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test01213,"public void test01213() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test01214,"public void test01214() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test01215,"public void test01215() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test01216,"public void test01216() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test01217,"public void test01217() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test01218,"public void test01218() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test01219,"public void test01219() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test01220,"public void test01220() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test01221,"public void test01221() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test01222,"public void test01222() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test01223,"public void test01223() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test01233,"public void test01233() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test01234,"public void test01234() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test01235,"public void test01235() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
}",0,
project,0,test01245,"public void test01245() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertFalse(iOContext0.isResourceManaged())
project,0,test01246,"public void test01246() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test01247,"public void test01247() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test01248,"public void test01248() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test01249,"public void test01249() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test01250,"public void test01250() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test01251,"public void test01251() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test01252,"public void test01252() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test01253,"public void test01253() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test01254,"public void test01254() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test01256,"public void test01256() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test01257,"public void test01257() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertEquals(8, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test01258,"public void test01258() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test01259,"public void test01259() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test01260,"public void test01260() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test01261,"public void test01261() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test01262,"public void test01262() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test01263,"public void test01263() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test01264,"public void test01264() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test01265,"public void test01265() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertEquals(8, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test01266,"public void test01266() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertFalse(nonBlockingJsonParser0.hasCurrentToken())
project,0,test01267,"public void test01267() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test01268,"public void test01268() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertTrue(jsonToken0.isScalarValue());
}",0,assertTrue(jsonToken0.isScalarValue())
project,0,test01269,"public void test01269() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test01270,"public void test01270() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test01271,"public void test01271() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test01272,"public void test01272() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertEquals(8, jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test01273,"public void test01273() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertFalse(jsonToken0.isStructStart());
}",0,
project,0,test01274,"public void test01274() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    assertTrue(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test01285,"public void test01285() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(iOContext0.isResourceManaged());
}",0,
project,0,test01286,"public void test01286() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test01287,"public void test01287() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test01288,"public void test01288() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test01289,"public void test01289() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test01290,"public void test01290() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test01291,"public void test01291() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test01292,"public void test01292() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test01293,"public void test01293() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test01294,"public void test01294() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test01296,"public void test01296() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test01297,"public void test01297() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(8, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test01298,"public void test01298() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test01299,"public void test01299() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test01300,"public void test01300() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test01301,"public void test01301() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test01302,"public void test01302() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test01303,"public void test01303() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test01304,"public void test01304() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test01305,"public void test01305() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(8, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test01306,"public void test01306() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test01307,"public void test01307() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test01308,"public void test01308() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(nonBlockingJsonParser1.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser1.getCurrentName())
project,0,test01309,"public void test01309() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(8, nonBlockingJsonParser1.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser1.getCurrentTokenId())"
project,0,test01310,"public void test01310() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(1, nonBlockingJsonParser1.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser1.getTokenLineNr())"
project,0,test01311,"public void test01311() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.isExpectedStartObjectToken());
}",1,
project,0,test01312,"public void test01312() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser1.canReadObjectId())
project,0,test01313,"public void test01313() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser1.getCurrentToken());
}",0,
project,0,test01314,"public void test01314() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser1.currentToken());
}",0,
project,0,test01315,"public void test01315() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(8, nonBlockingJsonParser1.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser1.currentTokenId())"
project,0,test01316,"public void test01316() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0L, nonBlockingJsonParser1.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser1.getTokenCharacterOffset())"
project,0,test01317,"public void test01317() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.isNaN());
}",0,assertTrue(nonBlockingJsonParser1.isNaN())
project,0,test01318,"public void test01318() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertTrue(nonBlockingJsonParser1.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser1.hasCurrentToken())
project,0,test01320,"public void test01320() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(1, nonBlockingJsonParser1.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser1.getTokenColumnNr())"
project,0,test01321,"public void test01321() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.isClosed());
}",0,assertTrue(nonBlockingJsonParser1.isClosed())
project,0,test01322,"public void test01322() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(2, nonBlockingJsonParser1.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser1.getFeatureMask())"
project,0,test01323,"public void test01323() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, nonBlockingJsonParser1.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser1.getFormatFeatures())"
project,0,test01324,"public void test01324() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.canReadTypeId());
}",0,
project,0,test01325,"public void test01325() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(nonBlockingJsonParser1.getLastClearedToken());
}",0,
project,0,test01326,"public void test01326() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser1.requiresCustomCodec())
project,0,test01327,"public void test01327() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.isExpectedStartArrayToken());
}",1,
project,0,test01328,"public void test01328() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertTrue(nonBlockingJsonParser1.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser1.canParseAsync())
project,0,test01329,"public void test01329() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    char[] charArray0 = iOContext0.allocTokenBuffer();
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 15, 2);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
}",0,
project,0,test02360,"public void test02360() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test02361,"public void test02361() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test02362,"public void test02362() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test02363,"public void test02363() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test02364,"public void test02364() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test02365,"public void test02365() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test02366,"public void test02366() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test02367,"public void test02367() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test02368,"public void test02368() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test02369,"public void test02369() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertNotNull(byteQuadsCanonicalizer0);
}",0,assertNotNull(byteQuadsCanonicalizer0)
project,0,test02370,"public void test02370() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test02371,"public void test02371() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test02372,"public void test02372() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test02373,"public void test02373() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test02374,"public void test02374() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test02375,"public void test02375() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test02376,"public void test02376() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,
project,0,test02377,"public void test02377() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test02378,"public void test02378() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test02379,"public void test02379() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test02380,"public void test02380() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test02381,"public void test02381() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test02382,"public void test02382() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test02383,"public void test02383() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test02384,"public void test02384() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test02385,"public void test02385() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test02386,"public void test02386() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test02387,"public void test02387() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test02388,"public void test02388() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test02389,"public void test02389() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test02390,"public void test02390() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test02391,"public void test02391() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test02392,"public void test02392() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test02393,"public void test02393() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test02394,"public void test02394() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test02396,"public void test02396() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test02397,"public void test02397() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test02398,"public void test02398() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,
project,0,test02399,"public void test02399() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test02400,"public void test02400() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test02401,"public void test02401() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test02412,"public void test02412() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test02413,"public void test02413() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test02414,"public void test02414() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test02415,"public void test02415() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test02416,"public void test02416() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test02417,"public void test02417() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test02418,"public void test02418() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test02419,"public void test02419() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test02420,"public void test02420() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test02421,"public void test02421() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test02422,"public void test02422() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test02423,"public void test02423() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test02424,"public void test02424() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test02425,"public void test02425() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test02426,"public void test02426() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test02427,"public void test02427() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test02428,"public void test02428() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test02429,"public void test02429() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test02430,"public void test02430() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test02431,"public void test02431() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test02432,"public void test02432() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test02433,"public void test02433() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test02434,"public void test02434() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test02435,"public void test02435() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test02436,"public void test02436() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test02437,"public void test02437() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test02439,"public void test02439() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test02440,"public void test02440() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test02441,"public void test02441() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test02442,"public void test02442() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test02443,"public void test02443() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test02444,"public void test02444() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(jsonToken1.isStructStart());
}",0,assertTrue(jsonToken1.isStructStart())
project,0,test02445,"public void test02445() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertEquals((-1), jsonToken1.id());
}",0,"assertEquals(0, jsonToken1.id())"
project,0,test02446,"public void test02446() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(jsonToken1.isScalarValue());
}",0,
project,0,test02447,"public void test02447() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertNull(jsonToken1.asString());
}",0,assertNotNull(jsonToken1.asString())
project,0,test02448,"public void test02448() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(jsonToken1.isBoolean());
}",0,assertTrue(jsonToken1.isBoolean())
project,0,test02449,"public void test02449() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(jsonToken1.isNumeric());
}",0,assertTrue(jsonToken1.isNumeric())
project,0,test02450,"public void test02450() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishKeywordToken("""", 57, jsonToken0);
    assertFalse(jsonToken1.isStructEnd());
}",0,assertTrue(jsonToken1.isStructEnd())
project,0,test03471,"public void test03471() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test03472,"public void test03472() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test03482,"public void test03482() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test03483,"public void test03483() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test03484,"public void test03484() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test03485,"public void test03485() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test03486,"public void test03486() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test03487,"public void test03487() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test03488,"public void test03488() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test03489,"public void test03489() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test03490,"public void test03490() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test03491,"public void test03491() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertNotNull(byteQuadsCanonicalizer0);
}",0,assertNotNull(byteQuadsCanonicalizer0)
project,0,test03492,"public void test03492() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test03493,"public void test03493() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test03494,"public void test03494() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test03495,"public void test03495() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,
project,0,test03496,"public void test03496() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test03497,"public void test03497() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test03498,"public void test03498() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test03499,"public void test03499() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test03500,"public void test03500() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test03501,"public void test03501() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test03502,"public void test03502() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test03503,"public void test03503() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test03504,"public void test03504() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test03506,"public void test03506() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test03507,"public void test03507() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test03508,"public void test03508() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test03509,"public void test03509() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test03510,"public void test03510() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test03511,"public void test03511() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test03512,"public void test03512() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test03513,"public void test03513() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test03514,"public void test03514() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test03515,"public void test03515() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test03516,"public void test03516() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test03517,"public void test03517() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test03518,"public void test03518() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test03519,"public void test03519() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test03520,"public void test03520() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test03521,"public void test03521() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test03522,"public void test03522() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test03523,"public void test03523() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test03533,"public void test03533() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test03534,"public void test03534() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test03535,"public void test03535() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test03536,"public void test03536() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test03537,"public void test03537() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test03538,"public void test03538() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test03539,"public void test03539() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test03540,"public void test03540() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test03541,"public void test03541() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test03542,"public void test03542() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test03543,"public void test03543() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test03544,"public void test03544() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test03545,"public void test03545() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test03546,"public void test03546() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test03548,"public void test03548() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test03549,"public void test03549() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test03550,"public void test03550() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test03551,"public void test03551() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test03552,"public void test03552() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test03553,"public void test03553() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test03554,"public void test03554() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test03555,"public void test03555() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test03556,"public void test03556() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test03557,"public void test03557() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test03558,"public void test03558() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test03559,"public void test03559() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test03560,"public void test03560() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test03561,"public void test03561() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test03562,"public void test03562() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test03563,"public void test03563() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test03564,"public void test03564() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test03565,"public void test03565() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
}",0,
project,0,test03578,"public void test03578() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[0];
    nonBlockingJsonParser0.feedInput(byteArray0, 2, 3);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    // Undeclared exception!
    try {
        nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayOutputStream0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayOutputStream"", e);
    }
}",0,
project,0,test04599,"public void test04599() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test04600,"public void test04600() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test04601,"public void test04601() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertEquals(55, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test04602,"public void test04602() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test04603,"public void test04603() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test04604,"public void test04604() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test04605,"public void test04605() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test04606,"public void test04606() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test04607,"public void test04607() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test04608,"public void test04608() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test04609,"public void test04609() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test04611,"public void test04611() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test04612,"public void test04612() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test04613,"public void test04613() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test04614,"public void test04614() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test04615,"public void test04615() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test04616,"public void test04616() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test04617,"public void test04617() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test04618,"public void test04618() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test04619,"public void test04619() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test04620,"public void test04620() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test04621,"public void test04621() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test05662,"public void test05662() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test05663,"public void test05663() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test05664,"public void test05664() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test05665,"public void test05665() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test05666,"public void test05666() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test05667,"public void test05667() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test05668,"public void test05668() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test05669,"public void test05669() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test05670,"public void test05670() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test05671,"public void test05671() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test05672,"public void test05672() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test05673,"public void test05673() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test05674,"public void test05674() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test05675,"public void test05675() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test05676,"public void test05676() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test05677,"public void test05677() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test05678,"public void test05678() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test05679,"public void test05679() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test05680,"public void test05680() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test05681,"public void test05681() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test05682,"public void test05682() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test05683,"public void test05683() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test05684,"public void test05684() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test05685,"public void test05685() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test05686,"public void test05686() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test05687,"public void test05687() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test05688,"public void test05688() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test05689,"public void test05689() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test05690,"public void test05690() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test05691,"public void test05691() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test05692,"public void test05692() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test06734,"public void test06734() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test06735,"public void test06735() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test06736,"public void test06736() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test06737,"public void test06737() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test06738,"public void test06738() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test06739,"public void test06739() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test06740,"public void test06740() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test06741,"public void test06741() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.primaryCount())"
project,0,test06742,"public void test06742() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test06743,"public void test06743() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test06744,"public void test06744() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test06745,"public void test06745() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(46, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test06746,"public void test06746() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test06747,"public void test06747() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test06748,"public void test06748() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test06749,"public void test06749() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test06750,"public void test06750() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test06751,"public void test06751() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test06752,"public void test06752() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test06753,"public void test06753() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test06754,"public void test06754() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test06755,"public void test06755() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test06756,"public void test06756() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test06757,"public void test06757() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test06758,"public void test06758() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test06759,"public void test06759() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test06760,"public void test06760() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test06762,"public void test06762() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test06763,"public void test06763() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test06764,"public void test06764() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test06765,"public void test06765() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test06775,"public void test06775() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test06776,"public void test06776() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test06777,"public void test06777() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test06778,"public void test06778() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,
project,0,test06779,"public void test06779() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test06780,"public void test06780() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test06781,"public void test06781() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test06782,"public void test06782() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.primaryCount())"
project,0,test06783,"public void test06783() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test06784,"public void test06784() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test06785,"public void test06785() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test06786,"public void test06786() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test06787,"public void test06787() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test06788,"public void test06788() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(46, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test06789,"public void test06789() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test06790,"public void test06790() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test06791,"public void test06791() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test06792,"public void test06792() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test06793,"public void test06793() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test06794,"public void test06794() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test06795,"public void test06795() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test06796,"public void test06796() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test06797,"public void test06797() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test06798,"public void test06798() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test06799,"public void test06799() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test06800,"public void test06800() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test06802,"public void test06802() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test06803,"public void test06803() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test06804,"public void test06804() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test06805,"public void test06805() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test06806,"public void test06806() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test06807,"public void test06807() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test06808,"public void test06808() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test06809,"public void test06809() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test06810,"public void test06810() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertFalse(jsonToken0.isScalarValue());
}",0,
project,0,test06811,"public void test06811() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test06812,"public void test06812() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test06813,"public void test06813() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test06823,"public void test06823() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test06824,"public void test06824() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test06825,"public void test06825() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test06826,"public void test06826() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test06827,"public void test06827() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test06828,"public void test06828() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test06829,"public void test06829() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test06830,"public void test06830() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.primaryCount())"
project,0,test06831,"public void test06831() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test06832,"public void test06832() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test06833,"public void test06833() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test06834,"public void test06834() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test06835,"public void test06835() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test06836,"public void test06836() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertTrue(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test06837,"public void test06837() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(46, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test06838,"public void test06838() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test06839,"public void test06839() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test06840,"public void test06840() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test06841,"public void test06841() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test06842,"public void test06842() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test06843,"public void test06843() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test06844,"public void test06844() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test06845,"public void test06845() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test06846,"public void test06846() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test06847,"public void test06847() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test06848,"public void test06848() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test06850,"public void test06850() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test06851,"public void test06851() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test06852,"public void test06852() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test06853,"public void test06853() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test06854,"public void test06854() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test06855,"public void test06855() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
}",0,
project,0,test06863,"public void test06863() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test06864,"public void test06864() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test06865,"public void test06865() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test06866,"public void test06866() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,
project,0,test06867,"public void test06867() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test06868,"public void test06868() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test06869,"public void test06869() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test06870,"public void test06870() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.primaryCount())"
project,0,test06871,"public void test06871() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test06872,"public void test06872() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test06873,"public void test06873() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test06874,"public void test06874() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test06875,"public void test06875() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test06876,"public void test06876() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertTrue(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test06877,"public void test06877() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(46, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test06878,"public void test06878() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test06879,"public void test06879() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test06880,"public void test06880() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test06881,"public void test06881() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test06882,"public void test06882() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test06883,"public void test06883() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test06885,"public void test06885() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test06886,"public void test06886() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test06887,"public void test06887() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test06888,"public void test06888() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test06889,"public void test06889() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test06890,"public void test06890() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test06891,"public void test06891() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test06892,"public void test06892() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test06893,"public void test06893() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test06894,"public void test06894() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test06895,"public void test06895() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.close();
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
}",0,
project,0,test07977,"public void test07977() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test07978,"public void test07978() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test07979,"public void test07979() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test07980,"public void test07980() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test07981,"public void test07981() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test07982,"public void test07982() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test07983,"public void test07983() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test07984,"public void test07984() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,
project,0,test07985,"public void test07985() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test07986,"public void test07986() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test07987,"public void test07987() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,
project,0,test07988,"public void test07988() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test07989,"public void test07989() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test07990,"public void test07990() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test07991,"public void test07991() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test07992,"public void test07992() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(8, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test07993,"public void test07993() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test07994,"public void test07994() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test07995,"public void test07995() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test07996,"public void test07996() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(127, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test07997,"public void test07997() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test07998,"public void test07998() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test07999,"public void test07999() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test071000,"public void test071000() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test071001,"public void test071001() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test071002,"public void test071002() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test071003,"public void test071003() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test071004,"public void test071004() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test071005,"public void test071005() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(8, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test071006,"public void test071006() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test071008,"public void test071008() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test071009,"public void test071009() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test071010,"public void test071010() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(jsonToken0.isStructStart());
}",0,
project,0,test071011,"public void test071011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(8, jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test071012,"public void test071012() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test071013,"public void test071013() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test071014,"public void test071014() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(jsonToken0.isScalarValue());
}",0,
project,0,test071015,"public void test071015() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test081058,"public void test081058() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test081059,"public void test081059() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test081060,"public void test081060() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test081061,"public void test081061() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test081062,"public void test081062() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test081063,"public void test081063() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test081064,"public void test081064() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test081065,"public void test081065() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test081066,"public void test081066() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test081067,"public void test081067() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test081068,"public void test081068() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test081069,"public void test081069() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test081070,"public void test081070() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test081071,"public void test081071() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test081072,"public void test081072() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test081073,"public void test081073() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test081074,"public void test081074() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test081075,"public void test081075() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test081076,"public void test081076() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test081077,"public void test081077() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test081078,"public void test081078() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test081079,"public void test081079() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test081080,"public void test081080() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test081081,"public void test081081() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test081082,"public void test081082() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test081083,"public void test081083() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test081084,"public void test081084() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test081086,"public void test081086() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test081087,"public void test081087() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test081088,"public void test081088() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test081089,"public void test081089() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test091109,"public void test091109() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test091110,"public void test091110() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test091120,"public void test091120() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test091121,"public void test091121() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test091122,"public void test091122() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test091123,"public void test091123() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test091124,"public void test091124() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test091125,"public void test091125() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,
project,0,test091126,"public void test091126() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test091127,"public void test091127() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test091128,"public void test091128() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test091129,"public void test091129() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertNotNull(byteQuadsCanonicalizer0);
}",0,assertNotNull(byteQuadsCanonicalizer0)
project,0,test091130,"public void test091130() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test091131,"public void test091131() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test091132,"public void test091132() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test091133,"public void test091133() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test091134,"public void test091134() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test091135,"public void test091135() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test091136,"public void test091136() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test091137,"public void test091137() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test091138,"public void test091138() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test091139,"public void test091139() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test091140,"public void test091140() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test091141,"public void test091141() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test091142,"public void test091142() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test091143,"public void test091143() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test091145,"public void test091145() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test091146,"public void test091146() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test091147,"public void test091147() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test091148,"public void test091148() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test091149,"public void test091149() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test091150,"public void test091150() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test091151,"public void test091151() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test091152,"public void test091152() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test091153,"public void test091153() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test091154,"public void test091154() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test091155,"public void test091155() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(33, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test091156,"public void test091156() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test091157,"public void test091157() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test091158,"public void test091158() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test091159,"public void test091159() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test091160,"public void test091160() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test091161,"public void test091161() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 33, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test101181,"public void test101181() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test101182,"public void test101182() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test101192,"public void test101192() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test101193,"public void test101193() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test101194,"public void test101194() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test101195,"public void test101195() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test101196,"public void test101196() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test101197,"public void test101197() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test101198,"public void test101198() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test101199,"public void test101199() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test101200,"public void test101200() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test101201,"public void test101201() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertNotNull(byteQuadsCanonicalizer0);
}",0,assertNotNull(byteQuadsCanonicalizer0)
project,0,test101202,"public void test101202() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test101203,"public void test101203() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test101204,"public void test101204() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test101205,"public void test101205() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test101206,"public void test101206() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test101207,"public void test101207() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test101208,"public void test101208() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test101209,"public void test101209() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test101210,"public void test101210() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test101211,"public void test101211() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,
project,0,test101212,"public void test101212() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test101213,"public void test101213() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test101214,"public void test101214() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test101215,"public void test101215() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test101216,"public void test101216() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test101217,"public void test101217() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test101219,"public void test101219() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test101220,"public void test101220() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test101221,"public void test101221() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test101222,"public void test101222() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test101223,"public void test101223() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test101224,"public void test101224() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test101225,"public void test101225() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test101226,"public void test101226() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test101227,"public void test101227() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test101228,"public void test101228() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test101229,"public void test101229() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test101230,"public void test101230() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test101231,"public void test101231() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test101232,"public void test101232() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test101233,"public void test101233() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test101243,"public void test101243() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test101244,"public void test101244() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test101245,"public void test101245() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test101246,"public void test101246() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test101247,"public void test101247() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test101248,"public void test101248() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test101249,"public void test101249() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test101250,"public void test101250() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test101251,"public void test101251() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test101252,"public void test101252() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test101253,"public void test101253() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test101254,"public void test101254() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test101255,"public void test101255() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test101256,"public void test101256() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test101257,"public void test101257() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test101258,"public void test101258() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test101260,"public void test101260() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test101261,"public void test101261() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test101262,"public void test101262() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test101263,"public void test101263() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test101264,"public void test101264() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test101265,"public void test101265() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test101266,"public void test101266() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test101267,"public void test101267() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test101268,"public void test101268() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test101269,"public void test101269() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test101270,"public void test101270() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test101271,"public void test101271() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test101272,"public void test101272() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test101273,"public void test101273() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test101274,"public void test101274() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test101275,"public void test101275() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertFalse(jsonToken0.isScalarValue());
}",0,
project,0,test101276,"public void test101276() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test101277,"public void test101277() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test101278,"public void test101278() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test101279,"public void test101279() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test101280,"public void test101280() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test101281,"public void test101281() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startPositiveNumber(3);
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test111322,"public void test111322() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test111323,"public void test111323() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test111324,"public void test111324() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test111325,"public void test111325() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test111326,"public void test111326() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test111327,"public void test111327() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test111328,"public void test111328() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test111329,"public void test111329() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test111330,"public void test111330() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test111331,"public void test111331() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test111332,"public void test111332() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test111333,"public void test111333() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test111334,"public void test111334() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test111335,"public void test111335() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test111336,"public void test111336() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test111337,"public void test111337() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test111338,"public void test111338() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test111339,"public void test111339() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test111340,"public void test111340() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test111342,"public void test111342() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test111343,"public void test111343() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test111344,"public void test111344() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test111345,"public void test111345() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test111346,"public void test111346() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test111347,"public void test111347() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test111348,"public void test111348() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test111349,"public void test111349() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test111350,"public void test111350() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test111351,"public void test111351() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test111352,"public void test111352() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test111353,"public void test111353() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test111363,"public void test111363() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test111364,"public void test111364() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test111365,"public void test111365() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test111366,"public void test111366() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test111367,"public void test111367() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test111368,"public void test111368() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test111369,"public void test111369() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test111370,"public void test111370() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test111371,"public void test111371() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test111372,"public void test111372() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test111373,"public void test111373() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test111374,"public void test111374() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test111375,"public void test111375() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test111376,"public void test111376() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test111377,"public void test111377() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test111378,"public void test111378() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test111379,"public void test111379() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test111380,"public void test111380() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test111381,"public void test111381() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test111382,"public void test111382() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test111384,"public void test111384() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test111385,"public void test111385() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test111386,"public void test111386() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test111387,"public void test111387() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test111388,"public void test111388() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test111389,"public void test111389() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test111390,"public void test111390() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test111391,"public void test111391() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test111392,"public void test111392() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test111393,"public void test111393() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test111394,"public void test111394() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test111395,"public void test111395() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test111396,"public void test111396() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test111397,"public void test111397() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test111398,"public void test111398() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(jsonToken0.isScalarValue());
}",0,assertTrue(jsonToken0.isScalarValue())
project,0,test111399,"public void test111399() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test111400,"public void test111400() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test111401,"public void test111401() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNonStdToken(1, 3);
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test141565,"public void test141565() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test141566,"public void test141566() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test141576,"public void test141576() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test141577,"public void test141577() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test141578,"public void test141578() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test141579,"public void test141579() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test141580,"public void test141580() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test141581,"public void test141581() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test141582,"public void test141582() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,
project,0,test141583,"public void test141583() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test141584,"public void test141584() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test141585,"public void test141585() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertNotNull(byteQuadsCanonicalizer0);
}",0,assertNotNull(byteQuadsCanonicalizer0)
project,0,test141586,"public void test141586() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test141587,"public void test141587() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertFalse(iOContext0.isResourceManaged())
project,0,test141588,"public void test141588() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test141589,"public void test141589() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test141590,"public void test141590() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test141591,"public void test141591() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test141592,"public void test141592() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test141593,"public void test141593() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test141594,"public void test141594() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,
project,0,test141595,"public void test141595() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test141596,"public void test141596() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test141597,"public void test141597() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test141598,"public void test141598() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test141599,"public void test141599() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test141600,"public void test141600() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test141601,"public void test141601() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test141602,"public void test141602() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test141603,"public void test141603() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test141604,"public void test141604() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test141605,"public void test141605() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test141606,"public void test141606() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertFalse(nonBlockingJsonParser0.hasCurrentToken())
project,0,test141607,"public void test141607() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test141608,"public void test141608() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test141609,"public void test141609() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test141610,"public void test141610() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test141611,"public void test141611() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test141612,"public void test141612() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test141613,"public void test141613() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test141614,"public void test141614() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test141615,"public void test141615() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test141617,"public void test141617() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test151637,"public void test151637() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test151638,"public void test151638() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test151648,"public void test151648() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test151649,"public void test151649() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test151650,"public void test151650() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test151651,"public void test151651() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test151652,"public void test151652() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test151653,"public void test151653() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test151654,"public void test151654() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test151655,"public void test151655() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test151656,"public void test151656() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test151657,"public void test151657() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertNotNull(byteQuadsCanonicalizer0);
}",0,assertNotNull(byteQuadsCanonicalizer0)
project,0,test151658,"public void test151658() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test151659,"public void test151659() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test151660,"public void test151660() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test151661,"public void test151661() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test151662,"public void test151662() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test151663,"public void test151663() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test151664,"public void test151664() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test151665,"public void test151665() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test151666,"public void test151666() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test151667,"public void test151667() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test151668,"public void test151668() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test151669,"public void test151669() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test151670,"public void test151670() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test151671,"public void test151671() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test151672,"public void test151672() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test151673,"public void test151673() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test151674,"public void test151674() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test151676,"public void test151676() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test151677,"public void test151677() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test151678,"public void test151678() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test151679,"public void test151679() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test151680,"public void test151680() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test151681,"public void test151681() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test151682,"public void test151682() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test151683,"public void test151683() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test151684,"public void test151684() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test151685,"public void test151685() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test151686,"public void test151686() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test151687,"public void test151687() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test151688,"public void test151688() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test151689,"public void test151689() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test171772,"public void test171772() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test171773,"public void test171773() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertFalse(iOContext0.isResourceManaged())
project,0,test171774,"public void test171774() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test171775,"public void test171775() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test171776,"public void test171776() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test171777,"public void test171777() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test171778,"public void test171778() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test171779,"public void test171779() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test171780,"public void test171780() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test171781,"public void test171781() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test171782,"public void test171782() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test171783,"public void test171783() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test171784,"public void test171784() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test171785,"public void test171785() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test171786,"public void test171786() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test171787,"public void test171787() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test171788,"public void test171788() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test171789,"public void test171789() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test171790,"public void test171790() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertFalse(nonBlockingJsonParser0.canReadTypeId())
project,0,test171791,"public void test171791() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,
project,0,test171792,"public void test171792() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test171793,"public void test171793() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test171794,"public void test171794() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test171795,"public void test171795() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test171796,"public void test171796() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test171797,"public void test171797() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test171798,"public void test171798() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test171799,"public void test171799() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test171800,"public void test171800() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test171801,"public void test171801() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test171803,"public void test171803() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test171804,"public void test171804() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test171805,"public void test171805() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test171806,"public void test171806() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test171807,"public void test171807() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test171808,"public void test171808() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test171809,"public void test171809() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test171810,"public void test171810() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0.nextToken();
    assertFalse(jsonToken0.isScalarValue());
}",0,assertTrue(jsonToken0.isScalarValue())
project,0,test181939,"public void test181939() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test181940,"public void test181940() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test181941,"public void test181941() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test181942,"public void test181942() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test181943,"public void test181943() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,
project,0,test181944,"public void test181944() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test181945,"public void test181945() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test181946,"public void test181946() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test181947,"public void test181947() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test181948,"public void test181948() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test181949,"public void test181949() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test181950,"public void test181950() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test181951,"public void test181951() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test181952,"public void test181952() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test181953,"public void test181953() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(46, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test181954,"public void test181954() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test181955,"public void test181955() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test181956,"public void test181956() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test181957,"public void test181957() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test181958,"public void test181958() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test181959,"public void test181959() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test181960,"public void test181960() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test181961,"public void test181961() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test181962,"public void test181962() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test181963,"public void test181963() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test181964,"public void test181964() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test181965,"public void test181965() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test181966,"public void test181966() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test181967,"public void test181967() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test181968,"public void test181968() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test181970,"public void test181970() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test181971,"public void test181971() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
}",0,
project,0,test202175,"public void test202175() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test202176,"public void test202176() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test202177,"public void test202177() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test202178,"public void test202178() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test202179,"public void test202179() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test202180,"public void test202180() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test202181,"public void test202181() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test202182,"public void test202182() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test202183,"public void test202183() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test202184,"public void test202184() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test202185,"public void test202185() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test202186,"public void test202186() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test202187,"public void test202187() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test202188,"public void test202188() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test202189,"public void test202189() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test202190,"public void test202190() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test202191,"public void test202191() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(46, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test202192,"public void test202192() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test202193,"public void test202193() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test202194,"public void test202194() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test202195,"public void test202195() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test202196,"public void test202196() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test202197,"public void test202197() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test202198,"public void test202198() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test202199,"public void test202199() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test202200,"public void test202200() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test202201,"public void test202201() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test202202,"public void test202202() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test202204,"public void test202204() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test202205,"public void test202205() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test202206,"public void test202206() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test202207,"public void test202207() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, (-3150), 0);
    assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
}",0,
project,0,test212227,"public void test212227() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test212228,"public void test212228() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test212238,"public void test212238() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test212239,"public void test212239() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test212240,"public void test212240() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test212241,"public void test212241() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test212242,"public void test212242() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test212243,"public void test212243() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test212244,"public void test212244() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test212245,"public void test212245() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test212246,"public void test212246() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test212247,"public void test212247() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertNotNull(byteQuadsCanonicalizer0);
}",0,assertNotNull(byteQuadsCanonicalizer0)
project,0,test212248,"public void test212248() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test212249,"public void test212249() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test212250,"public void test212250() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test212251,"public void test212251() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test212252,"public void test212252() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test212253,"public void test212253() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test212254,"public void test212254() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test212255,"public void test212255() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test212256,"public void test212256() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test212257,"public void test212257() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test212258,"public void test212258() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test212259,"public void test212259() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test212260,"public void test212260() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test212261,"public void test212261() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test212262,"public void test212262() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test212263,"public void test212263() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test212264,"public void test212264() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test212265,"public void test212265() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test212267,"public void test212267() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test212268,"public void test212268() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test212269,"public void test212269() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test212270,"public void test212270() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test212271,"public void test212271() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test212272,"public void test212272() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test212273,"public void test212273() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test212274,"public void test212274() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test212275,"public void test212275() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test212276,"public void test212276() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,
project,0,test212277,"public void test212277() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test212278,"public void test212278() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test212279,"public void test212279() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test222320,"public void test222320() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test222321,"public void test222321() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test222322,"public void test222322() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test222323,"public void test222323() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test222324,"public void test222324() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test222325,"public void test222325() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test222326,"public void test222326() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test222327,"public void test222327() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test222328,"public void test222328() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test222329,"public void test222329() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test222330,"public void test222330() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test222331,"public void test222331() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,
project,0,test222332,"public void test222332() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test222333,"public void test222333() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test222334,"public void test222334() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test222335,"public void test222335() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test222336,"public void test222336() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test222337,"public void test222337() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test222338,"public void test222338() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test222339,"public void test222339() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test222340,"public void test222340() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test222341,"public void test222341() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test222342,"public void test222342() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test222343,"public void test222343() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test222344,"public void test222344() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test222345,"public void test222345() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test222346,"public void test222346() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test222347,"public void test222347() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test222348,"public void test222348() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test222350,"public void test222350() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test222351,"public void test222351() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test232392,"public void test232392() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test232393,"public void test232393() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test232394,"public void test232394() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test232395,"public void test232395() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test232396,"public void test232396() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test232397,"public void test232397() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test232398,"public void test232398() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,
project,0,test232399,"public void test232399() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test232400,"public void test232400() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test232401,"public void test232401() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test232402,"public void test232402() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test232403,"public void test232403() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test232404,"public void test232404() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test232405,"public void test232405() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test232406,"public void test232406() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test232407,"public void test232407() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test232408,"public void test232408() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test232410,"public void test232410() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test232411,"public void test232411() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test232412,"public void test232412() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test232413,"public void test232413() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test232414,"public void test232414() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test232415,"public void test232415() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test232416,"public void test232416() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test232417,"public void test232417() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test232418,"public void test232418() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test232419,"public void test232419() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test232420,"public void test232420() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test232421,"public void test232421() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test232422,"public void test232422() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertEquals((-1087), nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test232423,"public void test232423() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test262691,"public void test262691() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test262692,"public void test262692() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test262693,"public void test262693() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test262694,"public void test262694() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test262695,"public void test262695() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test262696,"public void test262696() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test262697,"public void test262697() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test262698,"public void test262698() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test262699,"public void test262699() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test262700,"public void test262700() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test262701,"public void test262701() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test262702,"public void test262702() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test262703,"public void test262703() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test262704,"public void test262704() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test262705,"public void test262705() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test262706,"public void test262706() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test262707,"public void test262707() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test262708,"public void test262708() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test262709,"public void test262709() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test262710,"public void test262710() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test262711,"public void test262711() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test262712,"public void test262712() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test262713,"public void test262713() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test262715,"public void test262715() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test262716,"public void test262716() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test262717,"public void test262717() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test262718,"public void test262718() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test262719,"public void test262719() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test262720,"public void test262720() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test262721,"public void test262721() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test262722,"public void test262722() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test262723,"public void test262723() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test262724,"public void test262724() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test262725,"public void test262725() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test262726,"public void test262726() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test262727,"public void test262727() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test262728,"public void test262728() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(jsonToken0.isScalarValue());
}",0,assertTrue(jsonToken0.isScalarValue())
project,0,test262729,"public void test262729() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test262739,"public void test262739() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test262740,"public void test262740() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test262741,"public void test262741() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test262742,"public void test262742() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test262743,"public void test262743() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test262744,"public void test262744() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test262745,"public void test262745() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test262746,"public void test262746() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test262747,"public void test262747() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test262748,"public void test262748() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test262749,"public void test262749() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test262750,"public void test262750() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test262751,"public void test262751() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test262752,"public void test262752() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test262753,"public void test262753() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test262754,"public void test262754() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test262755,"public void test262755() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test262756,"public void test262756() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test262757,"public void test262757() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test262758,"public void test262758() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test262759,"public void test262759() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test262760,"public void test262760() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test262761,"public void test262761() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test262763,"public void test262763() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test262764,"public void test262764() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test262765,"public void test262765() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test262766,"public void test262766() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test262767,"public void test262767() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test262768,"public void test262768() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test262769,"public void test262769() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test262770,"public void test262770() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test262771,"public void test262771() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertFalse(jsonToken1.isStructEnd());
}",0,assertTrue(jsonToken1.isStructEnd())
project,0,test262772,"public void test262772() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertFalse(jsonToken1.isScalarValue());
}",0,
project,0,test262773,"public void test262773() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertFalse(jsonToken1.isStructStart());
}",0,assertTrue(jsonToken1.isStructStart())
project,0,test262774,"public void test262774() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertEquals((-1), jsonToken1.id());
}",0,"assertEquals(0, jsonToken1.id())"
project,0,test262775,"public void test262775() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertNull(jsonToken1.asString());
}",0,assertNotNull(jsonToken1.asString())
project,0,test262776,"public void test262776() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertFalse(jsonToken1.isNumeric());
}",0,assertTrue(jsonToken1.isNumeric())
project,0,test262777,"public void test262777() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[5];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, 0);
    assertFalse(jsonToken1.isBoolean());
}",0,assertTrue(jsonToken1.isBoolean())
project,0,test313241,"public void test313241() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test313242,"public void test313242() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test313243,"public void test313243() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test313244,"public void test313244() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test313245,"public void test313245() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test313246,"public void test313246() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test313247,"public void test313247() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test313248,"public void test313248() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test313249,"public void test313249() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test313250,"public void test313250() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test313251,"public void test313251() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test313252,"public void test313252() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test313253,"public void test313253() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test313254,"public void test313254() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test313255,"public void test313255() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test313256,"public void test313256() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test313257,"public void test313257() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test313258,"public void test313258() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test313260,"public void test313260() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test313261,"public void test313261() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test313262,"public void test313262() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test313263,"public void test313263() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test313264,"public void test313264() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test313265,"public void test313265() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test313266,"public void test313266() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test313267,"public void test313267() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test313268,"public void test313268() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test313269,"public void test313269() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test313270,"public void test313270() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test313271,"public void test313271() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test313272,"public void test313272() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals(127, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test313273,"public void test313273() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test313274,"public void test313274() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertFalse(jsonToken0.isScalarValue());
}",0,
project,0,test313275,"public void test313275() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test313276,"public void test313276() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test313277,"public void test313277() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test313278,"public void test313278() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test313279,"public void test313279() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberMinus('5');
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test363796,"public void test363796() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test363797,"public void test363797() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test363798,"public void test363798() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test363799,"public void test363799() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test363800,"public void test363800() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test363802,"public void test363802() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test363803,"public void test363803() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test363804,"public void test363804() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test363805,"public void test363805() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test363806,"public void test363806() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test363807,"public void test363807() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test363808,"public void test363808() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test363809,"public void test363809() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test363810,"public void test363810() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test363811,"public void test363811() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test363812,"public void test363812() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test363813,"public void test363813() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test363814,"public void test363814() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test363815,"public void test363815() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test363816,"public void test363816() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test363817,"public void test363817() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test363818,"public void test363818() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test363819,"public void test363819() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test363820,"public void test363820() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test363821,"public void test363821() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test363822,"public void test363822() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test363823,"public void test363823() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test363824,"public void test363824() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test363825,"public void test363825() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishErrorToken();
    assertFalse(jsonToken0.isScalarValue());
}",0,
project,0,test394051,"public void test394051() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test394052,"public void test394052() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test394053,"public void test394053() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test394054,"public void test394054() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test394055,"public void test394055() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test394056,"public void test394056() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test394057,"public void test394057() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test394058,"public void test394058() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test394059,"public void test394059() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test394060,"public void test394060() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test394061,"public void test394061() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test394062,"public void test394062() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(148, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test394063,"public void test394063() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test394064,"public void test394064() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test394065,"public void test394065() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test394066,"public void test394066() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test394067,"public void test394067() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test394068,"public void test394068() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test394069,"public void test394069() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test394070,"public void test394070() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test394071,"public void test394071() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test394072,"public void test394072() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test394074,"public void test394074() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test394075,"public void test394075() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test394076,"public void test394076() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test394077,"public void test394077() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test394078,"public void test394078() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test394079,"public void test394079() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test394080,"public void test394080() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test394081,"public void test394081() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test394082,"public void test394082() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test394092,"public void test394092() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test394093,"public void test394093() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test394094,"public void test394094() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test394095,"public void test394095() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test394096,"public void test394096() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test394097,"public void test394097() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test394098,"public void test394098() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test394099,"public void test394099() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test394100,"public void test394100() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test394101,"public void test394101() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test394102,"public void test394102() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test394103,"public void test394103() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(148, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test394104,"public void test394104() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test394105,"public void test394105() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(8, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test394106,"public void test394106() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test394107,"public void test394107() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(8, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test394108,"public void test394108() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test394109,"public void test394109() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test394110,"public void test394110() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test394111,"public void test394111() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test394112,"public void test394112() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test394113,"public void test394113() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test394114,"public void test394114() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test394115,"public void test394115() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test394116,"public void test394116() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test394117,"public void test394117() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test394118,"public void test394118() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test394119,"public void test394119() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test394120,"public void test394120() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test394122,"public void test394122() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test394123,"public void test394123() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test394124,"public void test394124() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test394125,"public void test394125() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test394126,"public void test394126() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertEquals(8, jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test394127,"public void test394127() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test394128,"public void test394128() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertTrue(jsonToken0.isScalarValue());
}",0,
project,0,test394129,"public void test394129() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test394130,"public void test394130() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 148, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test404143,"public void test404143() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertFalse(iOContext0.isResourceManaged())
project,0,test404144,"public void test404144() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    assertNull(iOContext0.getEncoding());
}",0,
project,0,test404146,"public void test404146() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test404147,"public void test404147() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test404148,"public void test404148() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test404149,"public void test404149() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,
project,0,test404150,"public void test404150() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test404151,"public void test404151() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,
project,0,test404152,"public void test404152() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.primaryCount())"
project,0,test404153,"public void test404153() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,
project,0,test404154,"public void test404154() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,
project,0,test404155,"public void test404155() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertNotNull(byteQuadsCanonicalizer0);
}",1,
project,0,test404156,"public void test404156() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertFalse(iOContext0.isResourceManaged())
project,0,test404157,"public void test404157() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test404158,"public void test404158() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test404159,"public void test404159() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test404160,"public void test404160() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test404161,"public void test404161() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,
project,0,test404162,"public void test404162() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,
project,0,test404163,"public void test404163() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test404164,"public void test404164() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.primaryCount())"
project,0,test404165,"public void test404165() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test404166,"public void test404166() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,
project,0,test404167,"public void test404167() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test404168,"public void test404168() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test404169,"public void test404169() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test404170,"public void test404170() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test404171,"public void test404171() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test404172,"public void test404172() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test404173,"public void test404173() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test404174,"public void test404174() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test404175,"public void test404175() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,
project,0,test404177,"public void test404177() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertFalse(nonBlockingJsonParser0.hasCurrentToken())
project,0,test404178,"public void test404178() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test404179,"public void test404179() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFeatureMask());
}",0,
project,0,test404180,"public void test404180() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test404181,"public void test404181() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test404182,"public void test404182() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test404183,"public void test404183() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test404184,"public void test404184() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test404185,"public void test404185() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertFalse(nonBlockingJsonParser0.canReadTypeId())
project,0,test404186,"public void test404186() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test404187,"public void test404187() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test404189,"public void test404189() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertFalse(iOContext0.isResourceManaged())
project,0,test404190,"public void test404190() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertNull(iOContext0.getEncoding());
}",0,
project,0,test404191,"public void test404191() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test404192,"public void test404192() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test404193,"public void test404193() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test404194,"public void test404194() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,
project,0,test404195,"public void test404195() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,
project,0,test404196,"public void test404196() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,
project,0,test404197,"public void test404197() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.primaryCount())"
project,0,test404198,"public void test404198() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,
project,0,test404199,"public void test404199() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,
project,0,test404200,"public void test404200() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test404201,"public void test404201() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test404202,"public void test404202() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test404203,"public void test404203() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test404204,"public void test404204() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test404205,"public void test404205() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test404206,"public void test404206() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test404207,"public void test404207() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test404209,"public void test404209() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test404210,"public void test404210() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test404211,"public void test404211() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test404212,"public void test404212() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(0, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test404213,"public void test404213() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test404214,"public void test404214() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test404215,"public void test404215() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test404216,"public void test404216() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test404217,"public void test404217() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test404218,"public void test404218() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test404219,"public void test404219() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test404220,"public void test404220() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test404221,"public void test404221() throws Throwable {
    IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    byte[] byteArray0 = new byte[9];
    nonBlockingJsonParser0.feedInput(byteArray0, 34, (byte) 116);
    assertEquals(9, byteArray0.length);
}",0,
project,0,test414295,"public void test414295() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test414296,"public void test414296() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test414297,"public void test414297() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.primaryCount())"
project,0,test414298,"public void test414298() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,
project,0,test414299,"public void test414299() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test414300,"public void test414300() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test414301,"public void test414301() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test414302,"public void test414302() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test414303,"public void test414303() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,
project,0,test414304,"public void test414304() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test414305,"public void test414305() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test414306,"public void test414306() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test414307,"public void test414307() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test414308,"public void test414308() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test414309,"public void test414309() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test414310,"public void test414310() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test414312,"public void test414312() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test414313,"public void test414313() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test414314,"public void test414314() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertFalse(nonBlockingJsonParser0.hasCurrentToken())
project,0,test414315,"public void test414315() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test414316,"public void test414316() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test414317,"public void test414317() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test414318,"public void test414318() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test414319,"public void test414319() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test414320,"public void test414320() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test414321,"public void test414321() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test414322,"public void test414322() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test414323,"public void test414323() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test414324,"public void test414324() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test414325,"public void test414325() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test414326,"public void test414326() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test414327,"public void test414327() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test414328,"public void test414328() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(jsonToken0.isScalarValue());
}",0,
project,0,test414329,"public void test414329() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test414330,"public void test414330() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test414331,"public void test414331() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test414332,"public void test414332() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test414333,"public void test414333() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNullToken();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test434424,"public void test434424() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test434425,"public void test434425() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test434435,"public void test434435() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test434436,"public void test434436() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test434437,"public void test434437() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test434438,"public void test434438() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test434439,"public void test434439() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test434440,"public void test434440() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test434441,"public void test434441() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test434442,"public void test434442() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test434443,"public void test434443() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test434444,"public void test434444() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    assertNotNull(byteQuadsCanonicalizer0);
}",0,assertNotNull(byteQuadsCanonicalizer0)
project,0,test434445,"public void test434445() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test434446,"public void test434446() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test434447,"public void test434447() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test434448,"public void test434448() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test434449,"public void test434449() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test434450,"public void test434450() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test434451,"public void test434451() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test434452,"public void test434452() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test434453,"public void test434453() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test434454,"public void test434454() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test434455,"public void test434455() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test434456,"public void test434456() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test434457,"public void test434457() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test434458,"public void test434458() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test434459,"public void test434459() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test434460,"public void test434460() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test434461,"public void test434461() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test434462,"public void test434462() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test434463,"public void test434463() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test434464,"public void test434464() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test434466,"public void test434466() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test434467,"public void test434467() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test434468,"public void test434468() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test434469,"public void test434469() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test434470,"public void test434470() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test434471,"public void test434471() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test434472,"public void test434472() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test434473,"public void test434473() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test434474,"public void test434474() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test434475,"public void test434475() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test434476,"public void test434476() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""No Base64Variant with name "", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test444558,"public void test444558() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test444559,"public void test444559() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test444560,"public void test444560() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test444561,"public void test444561() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test444562,"public void test444562() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test444563,"public void test444563() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test444564,"public void test444564() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test444565,"public void test444565() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test444566,"public void test444566() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test444567,"public void test444567() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test444568,"public void test444568() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test444569,"public void test444569() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test444570,"public void test444570() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test444571,"public void test444571() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test444572,"public void test444572() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test444573,"public void test444573() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test444574,"public void test444574() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test444575,"public void test444575() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test444576,"public void test444576() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test444577,"public void test444577() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test444578,"public void test444578() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test444580,"public void test444580() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test444581,"public void test444581() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test444582,"public void test444582() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test444583,"public void test444583() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test444584,"public void test444584() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test444585,"public void test444585() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test444586,"public void test444586() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test444587,"public void test444587() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test444588,"public void test444588() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test444589,"public void test444589() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test444590,"public void test444590() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test444591,"public void test444591() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test444592,"public void test444592() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(jsonToken0.isScalarValue());
}",0,
project,0,test444593,"public void test444593() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test444594,"public void test444594() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test444595,"public void test444595() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test444596,"public void test444596() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startAposString();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test454678,"public void test454678() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test454679,"public void test454679() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test454680,"public void test454680() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test454681,"public void test454681() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test454682,"public void test454682() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test454683,"public void test454683() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test454684,"public void test454684() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test454685,"public void test454685() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test454686,"public void test454686() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test454687,"public void test454687() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test454688,"public void test454688() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test454689,"public void test454689() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test454690,"public void test454690() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test454691,"public void test454691() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test454692,"public void test454692() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test454693,"public void test454693() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test454694,"public void test454694() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test454695,"public void test454695() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test454696,"public void test454696() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test454697,"public void test454697() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test454698,"public void test454698() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test454700,"public void test454700() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test454701,"public void test454701() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test454702,"public void test454702() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test454703,"public void test454703() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test454704,"public void test454704() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test454705,"public void test454705() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test454706,"public void test454706() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test454707,"public void test454707() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test454708,"public void test454708() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test454709,"public void test454709() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test454710,"public void test454710() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test454711,"public void test454711() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test454712,"public void test454712() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test454713,"public void test454713() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(jsonToken0.isScalarValue());
}",0,assertTrue(jsonToken0.isScalarValue())
project,0,test454714,"public void test454714() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test454715,"public void test454715() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test454716,"public void test454716() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test454727,"public void test454727() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test454728,"public void test454728() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test454729,"public void test454729() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test454730,"public void test454730() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test454731,"public void test454731() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test454732,"public void test454732() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test454733,"public void test454733() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,
project,0,test454734,"public void test454734() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test454735,"public void test454735() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test454736,"public void test454736() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test454737,"public void test454737() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test454738,"public void test454738() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(7, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test454739,"public void test454739() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test454740,"public void test454740() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test454741,"public void test454741() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test454742,"public void test454742() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(7, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test454743,"public void test454743() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test454744,"public void test454744() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(JsonToken.VALUE_NUMBER_INT, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test454745,"public void test454745() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test454746,"public void test454746() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test454747,"public void test454747() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test454749,"public void test454749() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test454750,"public void test454750() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test454751,"public void test454751() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test454752,"public void test454752() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test454753,"public void test454753() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(JsonToken.VALUE_NUMBER_INT, nonBlockingJsonParser0.currentToken());
}",0,"assertEquals(jsonToken1, nonBlockingJsonParser0.currentToken())"
project,0,test454754,"public void test454754() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test454755,"public void test454755() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test454756,"public void test454756() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test454757,"public void test454757() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test454758,"public void test454758() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test454759,"public void test454759() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertNull(jsonToken1.asString());
}",0,assertNotNull(jsonToken1.asString())
project,0,test454760,"public void test454760() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertTrue(jsonToken1.isNumeric());
}",0,
project,0,test454761,"public void test454761() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(jsonToken1.isBoolean());
}",0,assertTrue(jsonToken1.isBoolean())
project,0,test454762,"public void test454762() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(7, jsonToken1.id());
}",0,"assertEquals(0, jsonToken1.id())"
project,0,test454763,"public void test454763() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(jsonToken1.isStructEnd());
}",0,assertTrue(jsonToken1.isStructEnd())
project,0,test454764,"public void test454764() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(jsonToken1.isStructStart());
}",0,assertTrue(jsonToken1.isStructStart())
project,0,test454765,"public void test454765() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingNegZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertTrue(jsonToken1.isScalarValue());
}",0,assertTrue(jsonToken1.isScalarValue())
project,0,test464847,"public void test464847() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test464848,"public void test464848() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test464849,"public void test464849() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test464850,"public void test464850() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test464851,"public void test464851() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test464852,"public void test464852() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,
project,0,test464853,"public void test464853() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test464854,"public void test464854() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test464855,"public void test464855() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test464856,"public void test464856() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test464857,"public void test464857() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test464858,"public void test464858() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test464859,"public void test464859() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test464860,"public void test464860() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test464861,"public void test464861() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test464862,"public void test464862() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test464863,"public void test464863() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test464864,"public void test464864() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test464865,"public void test464865() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test464866,"public void test464866() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test464867,"public void test464867() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test464868,"public void test464868() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test464869,"public void test464869() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test464870,"public void test464870() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test464871,"public void test464871() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test464872,"public void test464872() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test464873,"public void test464873() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test464874,"public void test464874() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test464875,"public void test464875() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test464877,"public void test464877() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test464878,"public void test464878() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,
project,0,test464879,"public void test464879() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test464880,"public void test464880() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test464881,"public void test464881() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test464882,"public void test464882() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test464883,"public void test464883() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test464884,"public void test464884() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(jsonToken0.isScalarValue());
}",0,
project,0,test464885,"public void test464885() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    assertFalse(jsonToken0.isNumeric());
}",0,assertFalse(jsonToken0.isNumeric())
project,0,test464896,"public void test464896() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test464897,"public void test464897() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test464898,"public void test464898() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test464899,"public void test464899() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,
project,0,test464900,"public void test464900() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test464901,"public void test464901() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,
project,0,test464902,"public void test464902() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test464903,"public void test464903() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test464904,"public void test464904() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test464905,"public void test464905() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test464906,"public void test464906() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test464907,"public void test464907() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(7, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test464908,"public void test464908() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test464909,"public void test464909() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(7, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test464910,"public void test464910() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test464911,"public void test464911() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test464912,"public void test464912() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(JsonToken.VALUE_NUMBER_INT, nonBlockingJsonParser0.getCurrentToken());
}",0,"assertEquals(jsonToken1, nonBlockingJsonParser0.getCurrentToken())"
project,0,test464913,"public void test464913() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test464914,"public void test464914() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(JsonToken.VALUE_NUMBER_INT, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test464915,"public void test464915() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test464916,"public void test464916() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test464917,"public void test464917() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test464918,"public void test464918() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test464919,"public void test464919() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test464920,"public void test464920() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test464921,"public void test464921() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test464922,"public void test464922() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test464923,"public void test464923() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test464924,"public void test464924() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test464926,"public void test464926() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test464927,"public void test464927() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test464928,"public void test464928() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(jsonToken1.isStructEnd());
}",0,assertTrue(jsonToken1.isStructEnd())
project,0,test464929,"public void test464929() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(jsonToken1.isStructStart());
}",0,assertTrue(jsonToken1.isStructStart())
project,0,test464930,"public void test464930() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertEquals(7, jsonToken1.id());
}",0,"assertEquals(0, jsonToken1.id())"
project,0,test464931,"public void test464931() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertTrue(jsonToken1.isScalarValue());
}",0,assertTrue(jsonToken1.isScalarValue())
project,0,test464932,"public void test464932() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertNull(jsonToken1.asString());
}",0,assertNotNull(jsonToken1.asString())
project,0,test464933,"public void test464933() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertFalse(jsonToken1.isBoolean());
}",0,assertTrue(jsonToken1.isBoolean())
project,0,test464934,"public void test464934() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNumberLeadingZero();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishTokenWithEOF();
    assertTrue(jsonToken1.isNumeric());
}",0,assertTrue(jsonToken1.isNumeric())
project,0,test474997,"public void test474997() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test474998,"public void test474998() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test474999,"public void test474999() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test475000,"public void test475000() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test475001,"public void test475001() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(55, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test475002,"public void test475002() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test475003,"public void test475003() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test475004,"public void test475004() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test475005,"public void test475005() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test475006,"public void test475006() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test475007,"public void test475007() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test475008,"public void test475008() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test475009,"public void test475009() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test475011,"public void test475011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test475012,"public void test475012() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test475013,"public void test475013() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test475014,"public void test475014() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test475015,"public void test475015() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test475016,"public void test475016() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test475017,"public void test475017() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test475018,"public void test475018() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test475019,"public void test475019() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test475020,"public void test475020() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test475021,"public void test475021() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test475022,"public void test475022() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test475023,"public void test475023() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test475024,"public void test475024() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(jsonToken0.isScalarValue());
}",0,assertTrue(jsonToken0.isScalarValue())
project,0,test475025,"public void test475025() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test475026,"public void test475026() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 55, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test485108,"public void test485108() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test485109,"public void test485109() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test485110,"public void test485110() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test485111,"public void test485111() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test485112,"public void test485112() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test485113,"public void test485113() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test485114,"public void test485114() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test485115,"public void test485115() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test485116,"public void test485116() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test485117,"public void test485117() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test485118,"public void test485118() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test485119,"public void test485119() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test485120,"public void test485120() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test485121,"public void test485121() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test485122,"public void test485122() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test485123,"public void test485123() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test485124,"public void test485124() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test485125,"public void test485125() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test485126,"public void test485126() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test485127,"public void test485127() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test485129,"public void test485129() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test485130,"public void test485130() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test485131,"public void test485131() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test485132,"public void test485132() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test485133,"public void test485133() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test485134,"public void test485134() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test485135,"public void test485135() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test485136,"public void test485136() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test485137,"public void test485137() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test485138,"public void test485138() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test485139,"public void test485139() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals(0, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test485140,"public void test485140() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test485141,"public void test485141() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test485142,"public void test485142() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test485143,"public void test485143() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test485144,"public void test485144() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test485145,"public void test485145() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test485146,"public void test485146() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    assertFalse(jsonToken0.isScalarValue());
}",0,
project,0,test495228,"public void test495228() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test495229,"public void test495229() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test495230,"public void test495230() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test495231,"public void test495231() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test495232,"public void test495232() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test495233,"public void test495233() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test495234,"public void test495234() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test495235,"public void test495235() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test495236,"public void test495236() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test495237,"public void test495237() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test495238,"public void test495238() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test495239,"public void test495239() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test495240,"public void test495240() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test495241,"public void test495241() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test495242,"public void test495242() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test495243,"public void test495243() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test495244,"public void test495244() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test495245,"public void test495245() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test495246,"public void test495246() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test495247,"public void test495247() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test495248,"public void test495248() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test495249,"public void test495249() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,
project,0,test495250,"public void test495250() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test495251,"public void test495251() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test495252,"public void test495252() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test495253,"public void test495253() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test495254,"public void test495254() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test495255,"public void test495255() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test495256,"public void test495256() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test495257,"public void test495257() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test495258,"public void test495258() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test495260,"public void test495260() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test495261,"public void test495261() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(jsonToken0.isScalarValue());
}",0,assertFalse(jsonToken0.isScalarValue())
project,0,test495262,"public void test495262() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertNull(jsonToken0.asString());
}",0,
project,0,test495263,"public void test495263() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(jsonToken0.isNumeric());
}",0,
project,0,test495264,"public void test495264() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test495265,"public void test495265() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test495266,"public void test495266() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test505396,"public void test505396() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test505397,"public void test505397() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test505398,"public void test505398() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test505399,"public void test505399() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test505400,"public void test505400() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test505401,"public void test505401() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test505402,"public void test505402() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test505403,"public void test505403() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test505404,"public void test505404() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test505405,"public void test505405() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test505406,"public void test505406() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test505407,"public void test505407() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test505408,"public void test505408() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test505409,"public void test505409() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test505410,"public void test505410() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test505411,"public void test505411() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test505413,"public void test505413() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test505414,"public void test505414() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test505415,"public void test505415() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test505416,"public void test505416() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test505417,"public void test505417() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test505418,"public void test505418() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test505419,"public void test505419() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(46, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test505420,"public void test505420() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test505421,"public void test505421() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test505422,"public void test505422() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test505423,"public void test505423() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test505424,"public void test505424() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test505425,"public void test505425() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test505426,"public void test505426() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test505427,"public void test505427() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test505428,"public void test505428() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isStructEnd());
}",0,assertTrue(jsonToken1.isStructEnd())
project,0,test505429,"public void test505429() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isScalarValue());
}",0,
project,0,test505430,"public void test505430() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isStructStart());
}",0,assertTrue(jsonToken1.isStructStart())
project,0,test505431,"public void test505431() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(jsonToken1.asString());
}",0,assertNotNull(jsonToken1.asString())
project,0,test505432,"public void test505432() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), jsonToken1.id());
}",0,"assertEquals(0, jsonToken1.id())"
project,0,test505433,"public void test505433() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isNumeric());
}",0,assertTrue(jsonToken1.isNumeric())
project,0,test505434,"public void test505434() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 46, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startString();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isBoolean());
}",0,assertTrue(jsonToken1.isBoolean())
project,0,test515475,"public void test515475() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test515476,"public void test515476() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test515477,"public void test515477() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test515478,"public void test515478() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test515479,"public void test515479() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test515480,"public void test515480() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test515481,"public void test515481() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test515482,"public void test515482() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test515483,"public void test515483() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test515484,"public void test515484() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test515485,"public void test515485() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test515486,"public void test515486() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test515487,"public void test515487() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertFalse(nonBlockingJsonParser0.canReadTypeId())
project,0,test515489,"public void test515489() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test515490,"public void test515490() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test515491,"public void test515491() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test515492,"public void test515492() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test515493,"public void test515493() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test515494,"public void test515494() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test515495,"public void test515495() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test515496,"public void test515496() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test515497,"public void test515497() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertFalse(nonBlockingJsonParser0.hasCurrentToken())
project,0,test515498,"public void test515498() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test515499,"public void test515499() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test515500,"public void test515500() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test515501,"public void test515501() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test515502,"public void test515502() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test515503,"public void test515503() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals((-1953), nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test515504,"public void test515504() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test515505,"public void test515505() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test515506,"public void test515506() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test515516,"public void test515516() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test515517,"public void test515517() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test515518,"public void test515518() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test515519,"public void test515519() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test515520,"public void test515520() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test515521,"public void test515521() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test515522,"public void test515522() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test515523,"public void test515523() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test515524,"public void test515524() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test515525,"public void test515525() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test515526,"public void test515526() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test515527,"public void test515527() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test515529,"public void test515529() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test515530,"public void test515530() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test515531,"public void test515531() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test515532,"public void test515532() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test515533,"public void test515533() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test515534,"public void test515534() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test515535,"public void test515535() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test515536,"public void test515536() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test515537,"public void test515537() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test515538,"public void test515538() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test515539,"public void test515539() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test515540,"public void test515540() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test515541,"public void test515541() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test515542,"public void test515542() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test515543,"public void test515543() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals((-1953), nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test515544,"public void test515544() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test515545,"public void test515545() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test515546,"public void test515546() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test515547,"public void test515547() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test515548,"public void test515548() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(jsonToken0.isScalarValue());
}",0,
project,0,test515549,"public void test515549() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test515550,"public void test515550() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test515551,"public void test515551() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test515552,"public void test515552() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test515553,"public void test515553() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test515554,"public void test515554() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test515566,"public void test515566() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test515567,"public void test515567() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test515568,"public void test515568() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test515569,"public void test515569() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test515570,"public void test515570() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test515571,"public void test515571() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test515572,"public void test515572() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test515573,"public void test515573() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test515574,"public void test515574() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test515575,"public void test515575() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test515576,"public void test515576() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test515577,"public void test515577() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test515579,"public void test515579() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test515580,"public void test515580() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test515581,"public void test515581() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertFalse(nonBlockingJsonParser0.hasCurrentToken())
project,0,test515582,"public void test515582() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test515583,"public void test515583() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test515584,"public void test515584() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test515585,"public void test515585() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test515586,"public void test515586() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test515587,"public void test515587() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test515588,"public void test515588() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test515589,"public void test515589() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test515590,"public void test515590() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test515591,"public void test515591() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test515592,"public void test515592() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test515593,"public void test515593() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1953), nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test515594,"public void test515594() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test515595,"public void test515595() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test515596,"public void test515596() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test515597,"public void test515597() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test515598,"public void test515598() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isStructStart());
}",0,assertTrue(jsonToken1.isStructStart())
project,0,test515599,"public void test515599() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isStructEnd());
}",0,assertTrue(jsonToken1.isStructEnd())
project,0,test515600,"public void test515600() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isScalarValue());
}",0,assertTrue(jsonToken1.isScalarValue())
project,0,test515601,"public void test515601() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isBoolean());
}",0,assertTrue(jsonToken1.isBoolean())
project,0,test515602,"public void test515602() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isNumeric());
}",0,assertTrue(jsonToken1.isNumeric())
project,0,test515603,"public void test515603() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(jsonToken1.asString());
}",0,assertNotNull(jsonToken1.asString())
project,0,test515604,"public void test515604() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1953), byteQuadsCanonicalizer0);
    char[] charArray0 = new char[2];
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberIntegralPart(charArray0, (-1953));
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), jsonToken1.id());
}",0,"assertEquals(0, jsonToken1.id())"
project,0,test525645,"public void test525645() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test525646,"public void test525646() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test525647,"public void test525647() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test525648,"public void test525648() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test525649,"public void test525649() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test525650,"public void test525650() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test525651,"public void test525651() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test525652,"public void test525652() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test525653,"public void test525653() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test525654,"public void test525654() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test525655,"public void test525655() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test525656,"public void test525656() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test525657,"public void test525657() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test525658,"public void test525658() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test525659,"public void test525659() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test525660,"public void test525660() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test525661,"public void test525661() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test525662,"public void test525662() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test525663,"public void test525663() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test525664,"public void test525664() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,
project,0,test525665,"public void test525665() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test525666,"public void test525666() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test525668,"public void test525668() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test525669,"public void test525669() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test525670,"public void test525670() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test525671,"public void test525671() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test525672,"public void test525672() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test525673,"public void test525673() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(1176, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test525674,"public void test525674() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test525675,"public void test525675() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test525676,"public void test525676() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test525686,"public void test525686() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test525687,"public void test525687() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test525688,"public void test525688() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test525689,"public void test525689() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test525690,"public void test525690() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test525691,"public void test525691() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test525692,"public void test525692() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test525693,"public void test525693() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test525694,"public void test525694() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test525695,"public void test525695() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test525696,"public void test525696() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test525697,"public void test525697() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test525698,"public void test525698() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test525699,"public void test525699() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test525700,"public void test525700() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test525701,"public void test525701() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test525702,"public void test525702() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test525703,"public void test525703() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test525704,"public void test525704() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test525705,"public void test525705() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test525707,"public void test525707() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test525708,"public void test525708() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test525709,"public void test525709() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test525710,"public void test525710() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test525711,"public void test525711() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test525712,"public void test525712() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test525713,"public void test525713() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test525714,"public void test525714() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(1176, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test525715,"public void test525715() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test525716,"public void test525716() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test525717,"public void test525717() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test525718,"public void test525718() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test525719,"public void test525719() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test525720,"public void test525720() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test525721,"public void test525721() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertFalse(jsonToken0.isScalarValue());
}",0,
project,0,test525722,"public void test525722() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test525723,"public void test525723() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test525724,"public void test525724() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test525734,"public void test525734() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test525735,"public void test525735() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test525736,"public void test525736() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test525737,"public void test525737() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test525738,"public void test525738() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test525739,"public void test525739() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test525740,"public void test525740() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test525741,"public void test525741() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test525742,"public void test525742() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test525743,"public void test525743() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test525744,"public void test525744() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test525745,"public void test525745() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test525746,"public void test525746() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test525747,"public void test525747() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test525748,"public void test525748() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test525749,"public void test525749() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test525750,"public void test525750() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test525751,"public void test525751() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test525752,"public void test525752() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test525753,"public void test525753() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test525755,"public void test525755() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test525756,"public void test525756() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test525757,"public void test525757() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test525758,"public void test525758() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test525759,"public void test525759() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test525760,"public void test525760() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test525761,"public void test525761() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test525762,"public void test525762() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1176, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test525763,"public void test525763() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test525764,"public void test525764() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test525765,"public void test525765() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test525766,"public void test525766() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isStructStart());
}",0,assertTrue(jsonToken1.isStructStart())
project,0,test525767,"public void test525767() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), jsonToken1.id());
}",0,"assertEquals(0, jsonToken1.id())"
project,0,test525768,"public void test525768() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(jsonToken1.asString());
}",0,assertNotNull(jsonToken1.asString())
project,0,test525769,"public void test525769() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isBoolean());
}",0,assertTrue(jsonToken1.isBoolean())
project,0,test525770,"public void test525770() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isScalarValue());
}",0,assertTrue(jsonToken1.isScalarValue())
project,0,test525771,"public void test525771() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isStructEnd());
}",0,assertTrue(jsonToken1.isStructEnd())
project,0,test525772,"public void test525772() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1176, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishNumberLeadingZeroes();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isNumeric());
}",0,assertTrue(jsonToken1.isNumeric())
project,0,test535835,"public void test535835() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test535836,"public void test535836() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test535837,"public void test535837() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test535838,"public void test535838() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test535839,"public void test535839() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test535840,"public void test535840() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test535842,"public void test535842() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test535843,"public void test535843() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test535844,"public void test535844() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test535845,"public void test535845() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test535846,"public void test535846() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test535847,"public void test535847() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test535848,"public void test535848() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test535849,"public void test535849() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test535850,"public void test535850() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test535851,"public void test535851() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test535852,"public void test535852() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test535853,"public void test535853() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test535854,"public void test535854() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test535855,"public void test535855() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test535856,"public void test535856() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test535857,"public void test535857() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test535858,"public void test535858() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test535859,"public void test535859() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test535860,"public void test535860() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test535861,"public void test535861() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test535862,"public void test535862() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(jsonToken0.isScalarValue());
}",0,assertTrue(jsonToken0.isScalarValue())
project,0,test535863,"public void test535863() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test535864,"public void test535864() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startNegativeNumber();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test545927,"public void test545927() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test545928,"public void test545928() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test545929,"public void test545929() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test545930,"public void test545930() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test545931,"public void test545931() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test545933,"public void test545933() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test545934,"public void test545934() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test545935,"public void test545935() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test545936,"public void test545936() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test545937,"public void test545937() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test545938,"public void test545938() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test545939,"public void test545939() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test545940,"public void test545940() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test545941,"public void test545941() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test545942,"public void test545942() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test545943,"public void test545943() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test545944,"public void test545944() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test545945,"public void test545945() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test545946,"public void test545946() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test545947,"public void test545947() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test545948,"public void test545948() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test545949,"public void test545949() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test545950,"public void test545950() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(jsonToken0.isScalarValue());
}",0,
project,0,test545951,"public void test545951() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test545952,"public void test545952() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test545953,"public void test545953() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(jsonToken0.isStructStart());
}",0,assertFalse(jsonToken0.isStructStart())
project,0,test545954,"public void test545954() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test545955,"public void test545955() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test545956,"public void test545956() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test545966,"public void test545966() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test545967,"public void test545967() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test545968,"public void test545968() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test545969,"public void test545969() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(2, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test545970,"public void test545970() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test545972,"public void test545972() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertFalse(nonBlockingJsonParser0.canReadTypeId())
project,0,test545973,"public void test545973() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test545974,"public void test545974() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test545975,"public void test545975() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test545976,"public void test545976() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test545977,"public void test545977() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test545978,"public void test545978() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test545979,"public void test545979() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test545980,"public void test545980() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test545981,"public void test545981() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test545982,"public void test545982() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test545983,"public void test545983() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test545984,"public void test545984() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test545985,"public void test545985() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test545986,"public void test545986() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test545987,"public void test545987() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test545988,"public void test545988() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test545989,"public void test545989() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isScalarValue());
}",0,
project,0,test545990,"public void test545990() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), jsonToken1.id());
}",0,
project,0,test545991,"public void test545991() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(jsonToken1.asString());
}",0,assertNotNull(jsonToken1.asString())
project,0,test545992,"public void test545992() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isStructStart());
}",0,assertTrue(jsonToken1.isStructStart())
project,0,test545993,"public void test545993() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isStructEnd());
}",0,assertTrue(jsonToken1.isStructEnd())
project,0,test545994,"public void test545994() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isBoolean());
}",0,assertTrue(jsonToken1.isBoolean())
project,0,test545995,"public void test545995() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 2, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFalseToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isNumeric());
}",0,assertTrue(jsonToken1.isNumeric())
project,0,test556125,"public void test556125() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test556126,"public void test556126() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test556127,"public void test556127() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test556128,"public void test556128() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test556129,"public void test556129() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test556130,"public void test556130() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test556131,"public void test556131() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test556132,"public void test556132() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test556133,"public void test556133() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test556134,"public void test556134() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test556135,"public void test556135() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test556136,"public void test556136() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test556137,"public void test556137() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test556138,"public void test556138() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test556139,"public void test556139() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test556141,"public void test556141() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test556142,"public void test556142() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test556143,"public void test556143() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test556144,"public void test556144() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test556145,"public void test556145() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test556146,"public void test556146() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test556147,"public void test556147() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test556148,"public void test556148() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test556149,"public void test556149() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test556150,"public void test556150() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test556151,"public void test556151() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test556152,"public void test556152() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test556153,"public void test556153() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test556154,"public void test556154() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test556155,"public void test556155() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test556156,"public void test556156() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(JsonToken.NOT_AVAILABLE, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test556157,"public void test556157() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isScalarValue());
}",0,
project,0,test556158,"public void test556158() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isNumeric());
}",0,assertTrue(jsonToken1.isNumeric())
project,0,test556159,"public void test556159() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isStructEnd());
}",0,assertTrue(jsonToken1.isStructEnd())
project,0,test556160,"public void test556160() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(jsonToken1.asString());
}",0,assertNotNull(jsonToken1.asString())
project,0,test556161,"public void test556161() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), jsonToken1.id());
}",0,"assertEquals(0, jsonToken1.id())"
project,0,test556162,"public void test556162() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isBoolean());
}",0,assertTrue(jsonToken1.isBoolean())
project,0,test556163,"public void test556163() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 0, byteQuadsCanonicalizer0);
    JsonToken jsonToken0 = nonBlockingJsonParser0._startTrueToken();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isStructStart());
}",0,assertTrue(jsonToken1.isStructStart())
project,0,test566194,"public void test566194() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test566195,"public void test566195() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test566196,"public void test566196() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test566197,"public void test566197() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,
project,0,test566198,"public void test566198() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test566199,"public void test566199() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test566200,"public void test566200() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test566201,"public void test566201() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test566202,"public void test566202() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test566204,"public void test566204() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test566205,"public void test566205() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test566206,"public void test566206() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test566207,"public void test566207() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test566208,"public void test566208() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test566209,"public void test566209() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test566210,"public void test566210() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test566211,"public void test566211() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test566212,"public void test566212() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test566213,"public void test566213() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test566214,"public void test566214() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test566215,"public void test566215() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test566216,"public void test566216() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test566226,"public void test566226() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test566227,"public void test566227() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(iOContext0.isResourceManaged());
}",0,
project,0,test566228,"public void test566228() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test566229,"public void test566229() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test566230,"public void test566230() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test566231,"public void test566231() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test566232,"public void test566232() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test566233,"public void test566233() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test566234,"public void test566234() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test566236,"public void test566236() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test566237,"public void test566237() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test566238,"public void test566238() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test566239,"public void test566239() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test566240,"public void test566240() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test566241,"public void test566241() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test566242,"public void test566242() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test566243,"public void test566243() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,
project,0,test566244,"public void test566244() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test566245,"public void test566245() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test566246,"public void test566246() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test566247,"public void test566247() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test566248,"public void test566248() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test566249,"public void test566249() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(jsonToken0.isScalarValue());
}",0,assertTrue(jsonToken0.isScalarValue())
project,0,test566250,"public void test566250() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test566251,"public void test566251() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test566252,"public void test566252() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertEquals((-1), jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test566253,"public void test566253() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test566254,"public void test566254() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test566255,"public void test566255() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test566265,"public void test566265() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test566266,"public void test566266() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test566267,"public void test566267() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test566268,"public void test566268() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test566269,"public void test566269() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test566270,"public void test566270() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test566271,"public void test566271() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test566272,"public void test566272() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test566273,"public void test566273() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test566275,"public void test566275() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test566276,"public void test566276() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test566277,"public void test566277() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test566278,"public void test566278() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test566279,"public void test566279() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test566280,"public void test566280() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test566281,"public void test566281() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test566282,"public void test566282() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,
project,0,test566283,"public void test566283() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test566284,"public void test566284() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test566285,"public void test566285() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test566286,"public void test566286() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test566287,"public void test566287() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test566288,"public void test566288() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertEquals((-1), jsonToken1.id());
}",0,"assertEquals(0, jsonToken1.id())"
project,0,test566289,"public void test566289() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isBoolean());
}",0,assertTrue(jsonToken1.isBoolean())
project,0,test566290,"public void test566290() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isNumeric());
}",0,assertTrue(jsonToken1.isNumeric())
project,0,test566291,"public void test566291() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isStructEnd());
}",0,assertTrue(jsonToken1.isStructEnd())
project,0,test566292,"public void test566292() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isScalarValue());
}",0,
project,0,test566293,"public void test566293() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertFalse(jsonToken1.isStructStart());
}",0,assertTrue(jsonToken1.isStructStart())
project,0,test566294,"public void test566294() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1, (ByteQuadsCanonicalizer) null);
    JsonToken jsonToken0 = nonBlockingJsonParser0._finishFieldWithEscape();
    JsonToken jsonToken1 = nonBlockingJsonParser0._finishToken();
    assertNull(jsonToken1.asString());
}",0,assertNotNull(jsonToken1.asString())
project,0,test586429,"public void test586429() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test586430,"public void test586430() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test586431,"public void test586431() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test586432,"public void test586432() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test586433,"public void test586433() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test586434,"public void test586434() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test586435,"public void test586435() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test586436,"public void test586436() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test586437,"public void test586437() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test586438,"public void test586438() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test586439,"public void test586439() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test586440,"public void test586440() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test586441,"public void test586441() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test586442,"public void test586442() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertTrue(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test586443,"public void test586443() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test586444,"public void test586444() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test586445,"public void test586445() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test586446,"public void test586446() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test586447,"public void test586447() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test586448,"public void test586448() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test586449,"public void test586449() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test586450,"public void test586450() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test586451,"public void test586451() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test586453,"public void test586453() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test586454,"public void test586454() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test586455,"public void test586455() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test586456,"public void test586456() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(127, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test586457,"public void test586457() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test586458,"public void test586458() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test586459,"public void test586459() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test586460,"public void test586460() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test586461,"public void test586461() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
}",0,
project,0,test586469,"public void test586469() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test586470,"public void test586470() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test586471,"public void test586471() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test586472,"public void test586472() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test586473,"public void test586473() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test586474,"public void test586474() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test586475,"public void test586475() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test586476,"public void test586476() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test586477,"public void test586477() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test586478,"public void test586478() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test586479,"public void test586479() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test586480,"public void test586480() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test586481,"public void test586481() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test586482,"public void test586482() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertTrue(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test586483,"public void test586483() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test586484,"public void test586484() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test586485,"public void test586485() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test586486,"public void test586486() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test586487,"public void test586487() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test586488,"public void test586488() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test586489,"public void test586489() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test586490,"public void test586490() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test586491,"public void test586491() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test586493,"public void test586493() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test586494,"public void test586494() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test586495,"public void test586495() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test586496,"public void test586496() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(127, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test586497,"public void test586497() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test586498,"public void test586498() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test586499,"public void test586499() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test586500,"public void test586500() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test586501,"public void test586501() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._eofAsNextToken();
    nonBlockingJsonParser0.nextValue();
    assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
}",0,
project,0,test596539,"public void test596539() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test596540,"public void test596540() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test596541,"public void test596541() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test596542,"public void test596542() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test596543,"public void test596543() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test596544,"public void test596544() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test596545,"public void test596545() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test596546,"public void test596546() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test596547,"public void test596547() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test596548,"public void test596548() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test596549,"public void test596549() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test596550,"public void test596550() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test596551,"public void test596551() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test596553,"public void test596553() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test596554,"public void test596554() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test596555,"public void test596555() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test596556,"public void test596556() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test596557,"public void test596557() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test596558,"public void test596558() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test596559,"public void test596559() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test596560,"public void test596560() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test596561,"public void test596561() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test596562,"public void test596562() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test596563,"public void test596563() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test596564,"public void test596564() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test596565,"public void test596565() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test596566,"public void test596566() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test596567,"public void test596567() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test596568,"public void test596568() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test596569,"public void test596569() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test596570,"public void test596570() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test596580,"public void test596580() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test596581,"public void test596581() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test596582,"public void test596582() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test596583,"public void test596583() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test596584,"public void test596584() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test596585,"public void test596585() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test596586,"public void test596586() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test596587,"public void test596587() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test596588,"public void test596588() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test596589,"public void test596589() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test596590,"public void test596590() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test596591,"public void test596591() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test596592,"public void test596592() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test596593,"public void test596593() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test596594,"public void test596594() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test596595,"public void test596595() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test596596,"public void test596596() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test596597,"public void test596597() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test596598,"public void test596598() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test596599,"public void test596599() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test596600,"public void test596600() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test596601,"public void test596601() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test596603,"public void test596603() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test596604,"public void test596604() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test596605,"public void test596605() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(8, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test596606,"public void test596606() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test596607,"public void test596607() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(8, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test596608,"public void test596608() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test596609,"public void test596609() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test596610,"public void test596610() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test596611,"public void test596611() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test596612,"public void test596612() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test596613,"public void test596613() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test596614,"public void test596614() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertTrue(jsonToken0.isScalarValue());
}",0,assertTrue(jsonToken0.isScalarValue())
project,0,test596615,"public void test596615() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test596616,"public void test596616() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test596617,"public void test596617() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertEquals(8, jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test596618,"public void test596618() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[9];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 2);
    assertTrue(jsonToken0.isNumeric());
}",0,assertTrue(jsonToken0.isNumeric())
project,0,test606661,"public void test606661() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test606662,"public void test606662() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test606663,"public void test606663() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test606664,"public void test606664() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test606665,"public void test606665() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test606666,"public void test606666() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test606667,"public void test606667() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test606668,"public void test606668() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test606669,"public void test606669() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test606670,"public void test606670() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test606671,"public void test606671() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test606672,"public void test606672() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test606674,"public void test606674() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test606675,"public void test606675() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test606676,"public void test606676() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test606677,"public void test606677() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test606678,"public void test606678() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test606679,"public void test606679() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test606680,"public void test606680() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test606681,"public void test606681() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test606682,"public void test606682() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test606683,"public void test606683() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test606684,"public void test606684() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test606685,"public void test606685() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test606686,"public void test606686() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test606687,"public void test606687() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test606688,"public void test606688() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test606689,"public void test606689() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test606690,"public void test606690() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test606691,"public void test606691() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(1614, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test606692,"public void test606692() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test606702,"public void test606702() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    assertEquals(0, byteArrayBuilder0.size());
}",0,"assertEquals(0, byteArrayBuilder0.size())"
project,0,test606703,"public void test606703() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
}",0,"assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength())"
project,0,test606705,"public void test606705() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test606706,"public void test606706() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test606707,"public void test606707() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test606708,"public void test606708() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test606709,"public void test606709() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test606710,"public void test606710() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test606711,"public void test606711() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test606712,"public void test606712() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test606713,"public void test606713() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test606714,"public void test606714() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test606715,"public void test606715() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test606716,"public void test606716() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test606718,"public void test606718() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test606719,"public void test606719() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test606720,"public void test606720() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test606721,"public void test606721() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test606722,"public void test606722() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test606723,"public void test606723() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test606724,"public void test606724() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test606725,"public void test606725() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test606726,"public void test606726() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test606727,"public void test606727() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test606728,"public void test606728() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test606729,"public void test606729() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test606730,"public void test606730() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test606731,"public void test606731() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test606732,"public void test606732() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test606733,"public void test606733() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test606734,"public void test606734() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test606735,"public void test606735() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(1614, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test606736,"public void test606736() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test606737,"public void test606737() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, byteArrayBuilder0.size());
}",0,"assertEquals(1, byteArrayBuilder0.size())"
project,0,test606738,"public void test606738() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
}",0,"assertEquals(1, byteArrayBuilder0.getCurrentSegmentLength())"
project,0,test606739,"public void test606739() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    int int0 = nonBlockingJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test626933,"public void test626933() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test626934,"public void test626934() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test626935,"public void test626935() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test626936,"public void test626936() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test626937,"public void test626937() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test626938,"public void test626938() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test626939,"public void test626939() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test626940,"public void test626940() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test626941,"public void test626941() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test626942,"public void test626942() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test626943,"public void test626943() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.primaryCount())"
project,0,test626944,"public void test626944() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test626945,"public void test626945() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test626946,"public void test626946() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test626947,"public void test626947() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test626948,"public void test626948() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test626950,"public void test626950() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test626951,"public void test626951() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test626952,"public void test626952() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test626953,"public void test626953() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test626954,"public void test626954() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test626955,"public void test626955() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test626956,"public void test626956() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test626957,"public void test626957() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test626958,"public void test626958() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(8, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test626959,"public void test626959() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test626960,"public void test626960() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(8, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test626961,"public void test626961() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test626962,"public void test626962() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test626963,"public void test626963() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test626964,"public void test626964() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test626965,"public void test626965() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertEquals(8, jsonToken0.id());
}",0,"assertEquals(0, jsonToken0.id())"
project,0,test626966,"public void test626966() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertFalse(jsonToken0.isStructEnd());
}",0,assertTrue(jsonToken0.isStructEnd())
project,0,test626967,"public void test626967() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertFalse(jsonToken0.isBoolean());
}",0,assertTrue(jsonToken0.isBoolean())
project,0,test626968,"public void test626968() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertTrue(jsonToken0.isScalarValue());
}",0,
project,0,test626969,"public void test626969() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertTrue(jsonToken0.isNumeric());
}",0,
project,0,test626970,"public void test626970() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertFalse(jsonToken0.isStructStart());
}",0,assertTrue(jsonToken0.isStructStart())
project,0,test626971,"public void test626971() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    assertNull(jsonToken0.asString());
}",0,assertNotNull(jsonToken0.asString())
project,0,test626983,"public void test626983() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""Decimal point not followed by a digit"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[6];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 1, 3);
    byte[] byteArray0 = new byte[2];
    try {
        nonBlockingJsonParser0.feedInput(byteArray0, 6000, (byte) (-1));
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Still have 1 undecoded bytes, should not call 'feedInput'
        //  at [Source: UNKNOWN; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test637058,"public void test637058() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""r"", false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 1614, byteQuadsCanonicalizer0);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(43);
    try {
        nonBlockingJsonParser0.feedInput(byteArrayBuilder0.NO_BYTES, 38, 14);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Input end (14) may not be before start (38)
        //  at [Source: UNKNOWN; line: 1, column: 1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test647130,"public void test647130() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test647131,"public void test647131() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test647132,"public void test647132() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test647133,"public void test647133() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test647134,"public void test647134() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test647135,"public void test647135() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test647136,"public void test647136() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test647137,"public void test647137() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test647138,"public void test647138() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.size())"
project,0,test647139,"public void test647139() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test647140,"public void test647140() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test647142,"public void test647142() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test647143,"public void test647143() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test647144,"public void test647144() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test647145,"public void test647145() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test647146,"public void test647146() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test647147,"public void test647147() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test647148,"public void test647148() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test647149,"public void test647149() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test647150,"public void test647150() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test647151,"public void test647151() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test647152,"public void test647152() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test647153,"public void test647153() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test647154,"public void test647154() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test647155,"public void test647155() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test647156,"public void test647156() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test647157,"public void test647157() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test647158,"public void test647158() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test647159,"public void test647159() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test647160,"public void test647160() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test647161,"public void test647161() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test647162,"public void test647162() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test647163,"public void test647163() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test647164,"public void test647164() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test647165,"public void test647165() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test647166,"public void test647166() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test647167,"public void test647167() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test647168,"public void test647168() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test647169,"public void test647169() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test647170,"public void test647170() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.size())"
project,0,test647171,"public void test647171() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test647172,"public void test647172() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test647174,"public void test647174() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test647175,"public void test647175() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test647176,"public void test647176() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test647177,"public void test647177() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test647178,"public void test647178() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test647179,"public void test647179() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test647180,"public void test647180() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test647181,"public void test647181() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test647182,"public void test647182() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test647183,"public void test647183() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test647184,"public void test647184() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test647185,"public void test647185() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test647186,"public void test647186() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test647187,"public void test647187() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test647188,"public void test647188() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test647189,"public void test647189() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test647190,"public void test647190() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test647191,"public void test647191() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test647192,"public void test647192() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test647193,"public void test647193() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    nonBlockingJsonParser0._endOfInput = true;
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test657274,"public void test657274() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test657275,"public void test657275() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test657276,"public void test657276() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test657277,"public void test657277() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.totalCount())"
project,0,test657278,"public void test657278() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,
project,0,test657279,"public void test657279() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test657280,"public void test657280() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test657281,"public void test657281() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test657282,"public void test657282() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.primaryCount())"
project,0,test657283,"public void test657283() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test657284,"public void test657284() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test657285,"public void test657285() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test657286,"public void test657286() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test657288,"public void test657288() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test657289,"public void test657289() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(3, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test657290,"public void test657290() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test657291,"public void test657291() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test657292,"public void test657292() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test657293,"public void test657293() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test657294,"public void test657294() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test657295,"public void test657295() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test657296,"public void test657296() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,
project,0,test657297,"public void test657297() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test657298,"public void test657298() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test657299,"public void test657299() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test657300,"public void test657300() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test657301,"public void test657301() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test657302,"public void test657302() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test657303,"public void test657303() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertFalse(nonBlockingJsonParser0.hasCurrentToken())
project,0,test657304,"public void test657304() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test657305,"public void test657305() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 3, byteQuadsCanonicalizer0);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test667436,"public void test667436() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test667437,"public void test667437() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test667438,"public void test667438() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,
project,0,test667439,"public void test667439() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test667440,"public void test667440() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.bucketCount())"
project,0,test667441,"public void test667441() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test667442,"public void test667442() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test667443,"public void test667443() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test667444,"public void test667444() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test667445,"public void test667445() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test667446,"public void test667446() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test667447,"public void test667447() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test667448,"public void test667448() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(8, nonBlockingJsonParser0.currentTokenId());
}",0,
project,0,test667449,"public void test667449() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test667450,"public void test667450() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(8, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test667451,"public void test667451() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test667452,"public void test667452() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartObjectToken())
project,0,test667453,"public void test667453() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test667454,"public void test667454() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test667455,"public void test667455() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertTrue(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test667456,"public void test667456() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test667457,"public void test667457() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test667458,"public void test667458() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.currentToken());
}",0,
project,0,test667459,"public void test667459() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(JsonToken.VALUE_NUMBER_FLOAT, nonBlockingJsonParser0.getCurrentToken());
}",0,
project,0,test667461,"public void test667461() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test667462,"public void test667462() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test667463,"public void test667463() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(127, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test667464,"public void test667464() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",0,assertTrue(nonBlockingJsonParser0.isExpectedStartArrayToken())
project,0,test667465,"public void test667465() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test667466,"public void test667466() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test667467,"public void test667467() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 127, byteQuadsCanonicalizer0);
    char[] charArray0 = new char[1];
    JsonToken jsonToken0 = nonBlockingJsonParser0._startFloat(charArray0, 160, 102);
    boolean boolean0 = nonBlockingJsonParser0.needMoreInput();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,
project,0,test677548,"public void test677548() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test677549,"public void test677549() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test677550,"public void test677550() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test677551,"public void test677551() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test677552,"public void test677552() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test677553,"public void test677553() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test677554,"public void test677554() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test677555,"public void test677555() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test677556,"public void test677556() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test677557,"public void test677557() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test677558,"public void test677558() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertFalse(byteQuadsCanonicalizer0.maybeDirty())
project,0,test677559,"public void test677559() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test677560,"public void test677560() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test677561,"public void test677561() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test677562,"public void test677562() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test677563,"public void test677563() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test677564,"public void test677564() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test677565,"public void test677565() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test677566,"public void test677566() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test677567,"public void test677567() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test677568,"public void test677568() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals((-1087), nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFeatureMask())"
project,0,test677569,"public void test677569() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test677570,"public void test677570() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test677571,"public void test677571() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test677572,"public void test677572() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,assertTrue(nonBlockingJsonParser0.canReadTypeId())
project,0,test677574,"public void test677574() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test677575,"public void test677575() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test677576,"public void test677576() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test677577,"public void test677577() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentToken())
project,0,test677578,"public void test677578() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test677579,"public void test677579() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    nonBlockingJsonParser0.endOfInput();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test687659,"public void test687659() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test687660,"public void test687660() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test687661,"public void test687661() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, byteQuadsCanonicalizer0.size());
}",0,
project,0,test687662,"public void test687662() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, byteQuadsCanonicalizer0.totalCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.totalCount())"
project,0,test687663,"public void test687663() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertTrue(byteQuadsCanonicalizer0.maybeDirty());
}",0,assertTrue(byteQuadsCanonicalizer0.maybeDirty())
project,0,test687664,"public void test687664() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.bucketCount())"
project,0,test687665,"public void test687665() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.secondaryCount())"
project,0,test687666,"public void test687666() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.primaryCount())"
project,0,test687667,"public void test687667() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.spilloverCount())"
project,0,test687668,"public void test687668() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
}",0,"assertEquals(1, byteQuadsCanonicalizer0.tertiaryCount())"
project,0,test687669,"public void test687669() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
}",0,"assertEquals(0, byteQuadsCanonicalizer0.hashSeed())"
project,0,test687670,"public void test687670() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test687671,"public void test687671() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,
project,0,test687672,"public void test687672() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test687673,"public void test687673() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test687674,"public void test687674() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser0.hasCurrentToken())
project,0,test687675,"public void test687675() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(nonBlockingJsonParser0.currentToken());
}",0,assertNotNull(nonBlockingJsonParser0.currentToken())
project,0,test687676,"public void test687676() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
project,0,test687677,"public void test687677() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test687678,"public void test687678() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test687679,"public void test687679() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test687680,"public void test687680() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test687681,"public void test687681() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test687682,"public void test687682() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test687684,"public void test687684() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test687685,"public void test687685() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test687686,"public void test687686() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test687687,"public void test687687() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals((-1087), nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test687688,"public void test687688() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test687689,"public void test687689() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test687690,"public void test687690() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test687691,"public void test687691() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(nonBlockingJsonParser1.getCurrentToken());
}",1,
project,0,test687692,"public void test687692() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, nonBlockingJsonParser1.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser1.getCurrentTokenId())"
project,0,test687693,"public void test687693() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, nonBlockingJsonParser1.currentTokenId());
}",0,
project,0,test687694,"public void test687694() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.isNaN());
}",0,assertTrue(nonBlockingJsonParser1.isNaN())
project,0,test687695,"public void test687695() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0L, nonBlockingJsonParser1.getTokenCharacterOffset());
}",0,"assertEquals(1, nonBlockingJsonParser1.getTokenCharacterOffset())"
project,0,test687696,"public void test687696() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.hasCurrentToken());
}",0,assertTrue(nonBlockingJsonParser1.hasCurrentToken())
project,0,test687697,"public void test687697() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(1, nonBlockingJsonParser1.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser1.getTokenColumnNr())"
project,0,test687698,"public void test687698() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(1, nonBlockingJsonParser1.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser1.getTokenLineNr())"
project,0,test687699,"public void test687699() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals((-1087), nonBlockingJsonParser1.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser1.getFeatureMask())"
project,0,test687700,"public void test687700() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser1.requiresCustomCodec())
project,0,test687701,"public void test687701() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, nonBlockingJsonParser1.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser1.getFormatFeatures())"
project,0,test687702,"public void test687702() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser1.canReadObjectId())
project,0,test687704,"public void test687704() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.canReadTypeId());
}",0,
project,0,test687705,"public void test687705() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(nonBlockingJsonParser1.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser1.getCurrentName())
project,0,test687706,"public void test687706() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.isExpectedStartObjectToken());
}",1,
project,0,test687707,"public void test687707() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.isExpectedStartArrayToken());
}",1,
project,0,test687708,"public void test687708() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertFalse(nonBlockingJsonParser1.isClosed());
}",0,assertTrue(nonBlockingJsonParser1.isClosed())
project,0,test687709,"public void test687709() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(nonBlockingJsonParser1.currentToken());
}",0,assertNotNull(nonBlockingJsonParser1.currentToken())
project,0,test687710,"public void test687710() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertTrue(nonBlockingJsonParser1.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser1.canParseAsync())
project,0,test687711,"public void test687711() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertNull(nonBlockingJsonParser1.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser1.getLastClearedToken())
project,0,test687712,"public void test687712() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, (-1087), byteQuadsCanonicalizer0);
    NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser) nonBlockingJsonParser0.getNonBlockingInputFeeder();
    assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
}",0,
project,0,test697743,"public void test697743() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertNull(iOContext0.getEncoding());
}",0,assertNotNull(iOContext0.getEncoding())
project,0,test697744,"public void test697744() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
project,0,test697745,"public void test697745() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.getLastClearedToken());
}",0,assertNotNull(nonBlockingJsonParser0.getLastClearedToken())
project,0,test697746,"public void test697746() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
}",0,"assertEquals(0, nonBlockingJsonParser0.getFormatFeatures())"
project,0,test697747,"public void test697747() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
}",0,assertTrue(nonBlockingJsonParser0.requiresCustomCodec())
project,0,test697748,"public void test697748() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.canReadTypeId());
}",0,
project,0,test697750,"public void test697750() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertTrue(nonBlockingJsonParser0.canParseAsync());
}",0,assertTrue(nonBlockingJsonParser0.canParseAsync())
project,0,test697751,"public void test697751() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.canReadObjectId());
}",0,assertTrue(nonBlockingJsonParser0.canReadObjectId())
project,0,test697752,"public void test697752() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertEquals(40, nonBlockingJsonParser0.getFeatureMask());
}",0,"assertEquals(1, nonBlockingJsonParser0.getFeatureMask())"
project,0,test697753,"public void test697753() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
}",1,
project,0,test697754,"public void test697754() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenColumnNr())"
project,0,test697755,"public void test697755() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isNaN());
}",0,assertTrue(nonBlockingJsonParser0.isNaN())
project,0,test697756,"public void test697756() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertEquals(0, nonBlockingJsonParser0.currentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.currentTokenId())"
project,0,test697757,"public void test697757() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.getCurrentToken());
}",1,
project,0,test697758,"public void test697758() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
}",0,"assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId())"
project,0,test697759,"public void test697759() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.currentToken());
}",1,
project,0,test697760,"public void test697760() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenCharacterOffset())"
project,0,test697761,"public void test697761() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
}",1,
project,0,test697762,"public void test697762() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
}",0,"assertEquals(0, nonBlockingJsonParser0.getTokenLineNr())"
project,0,test697763,"public void test697763() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.hasCurrentToken());
}",0,
project,0,test697764,"public void test697764() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertFalse(nonBlockingJsonParser0.isClosed());
}",0,assertTrue(nonBlockingJsonParser0.isClosed())
project,0,test697765,"public void test697765() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    NonBlockingJsonParser nonBlockingJsonParser0 = new NonBlockingJsonParser(iOContext0, 40, (ByteQuadsCanonicalizer) null);
    assertNull(nonBlockingJsonParser0.getCurrentName());
}",0,assertNotNull(nonBlockingJsonParser0.getCurrentName())
