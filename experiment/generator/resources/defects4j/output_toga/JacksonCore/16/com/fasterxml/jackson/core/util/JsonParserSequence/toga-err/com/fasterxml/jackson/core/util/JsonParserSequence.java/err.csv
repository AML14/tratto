com.fasterxml.jackson.core.util.JsonParserSequence,@Test(timeout = 4000)
public void test079() throws Throwable {
    JsonParser[] jsonParserArray0 = new JsonParser[1];
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    StringReader stringReader0 = new StringReader(""Qm_^`doOo"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    JsonParser jsonParser0 = jsonParserSequence0.skipChildren();
    jsonParserArray0[0] = jsonParser0;
    JsonParserSequence jsonParserSequence1 = new JsonParserSequence(jsonParserArray0);
    jsonParserSequence1.close();
    jsonParserSequence1.getFormatFeatures();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.core.util.JsonParserSequence,@Test(timeout = 4000)
public void test1316() throws Throwable {
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
    Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
    RequestPayload requestPayload0 = null;
    jsonParserSequence0.nextIntValue((-1134));
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.core.util.JsonParserSequence,@Test(timeout = 4000)
public void test1619() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, ""guL5pb10+^?Ov]u\"">"", true);
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
    IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 266, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
    LinkedList<JsonParser> linkedList0 = new LinkedList<JsonParser>();
    FilteringParserDelegate[] filteringParserDelegateArray0 = new FilteringParserDelegate[6];
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    TokenFilter tokenFilter1 = tokenFilter0.includeElement(1162);
    TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
    TokenFilter tokenFilter3 = tokenFilter2.includeRootValue(1569);
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter3, false, true);
    filteringParserDelegateArray0[0] = filteringParserDelegate0;
    FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, false);
    filteringParserDelegateArray0[1] = filteringParserDelegate1;
    FilteringParserDelegate filteringParserDelegate2 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter3, true, false);
    filteringParserDelegateArray0[2] = filteringParserDelegate2;
    FilteringParserDelegate filteringParserDelegate3 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter3, true, true);
    filteringParserDelegateArray0[3] = filteringParserDelegate3;
    FilteringParserDelegate filteringParserDelegate4 = new FilteringParserDelegate(filteringParserDelegate2, tokenFilter3, false, true);
    filteringParserDelegateArray0[4] = filteringParserDelegate4;
    FilteringParserDelegate filteringParserDelegate5 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter1, false, false);
    filteringParserDelegateArray0[5] = filteringParserDelegate5;
    linkedList0.toArray(filteringParserDelegateArray0);
    jsonParserSequence0.addFlattenedActiveParsers(linkedList0);
    linkedList0.size();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/JacksonCore_16b/src/main/java/java/util/LinkedList.java
com.fasterxml.jackson.core.util.JsonParserSequence,@Test(timeout = 4000)
public void test1720() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler(106, 93);
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    JsonParser[] jsonParserArray0 = new JsonParser[1];
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3044);
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectCodec0, charsToNameCanonicalizer1);
    JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((-3247), 0);
    jsonParserArray0[0] = jsonParser0;
    JsonParserSequence jsonParserSequence0 = new JsonParserSequence(jsonParserArray0);
    ObjectCodec objectCodec1 = jsonParserSequence0.getCodec();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 2;
    byteArray0[1] = (byte) 0;
    byteArray0[2] = (byte) (-88);
    byteArray0[3] = (byte) 45;
    byteArray0[4] = (byte) 0;
    byteArray0[5] = (byte) (-27);
    byteArray0[6] = (byte) 0;
    byteArray0[7] = (byte) 63;
    byteArray0[8] = (byte) (-1);
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 106, 106, false);
    JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(uTF8StreamJsonParser0, uTF8StreamJsonParser0);
    LinkedList<JsonParser> linkedList0 = new LinkedList<JsonParser>();
    jsonParserSequence1.addFlattenedActiveParsers(linkedList0);
    linkedList0.size();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/JacksonCore_16b/src/main/java/java/util/LinkedList.java
com.fasterxml.jackson.core.util.JsonParserSequence,@Test(timeout = 4000)
public void test1821() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringReader stringReader0 = new StringReader(""Js#"");
    JsonParser[] jsonParserArray0 = new JsonParser[3];
    ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1391), stringReader0, objectCodec0, charsToNameCanonicalizer1, (char[]) null, 33, 53, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, true);
    jsonParserArray0[0] = (JsonParser) filteringParserDelegate0;
    ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec1, charsToNameCanonicalizer0, (char[]) null, 45, 53, true);
    jsonParserArray0[1] = (JsonParser) readerBasedJsonParser1;
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 45;
    byteArray0[1] = (byte) 0;
    byteArray0[2] = (byte) 0;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
    ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
    UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, dataInputStream0, objectCodec2, byteQuadsCanonicalizer1, 3);
    jsonParserArray0[2] = (JsonParser) uTF8DataInputJsonParser0;
    JsonParserSequence jsonParserSequence0 = new JsonParserSequence(jsonParserArray0);
    ObjectCodec objectCodec3 = jsonParserSequence0.getCodec();
    CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext0, (-2810), stringReader0, objectCodec3, charsToNameCanonicalizer2);
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
    JsonParser jsonParser0 = readerBasedJsonParser2.disable(jsonParser_Feature0);
    JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(jsonParser0, readerBasedJsonParser0);
    JsonParserSequence jsonParserSequence2 = JsonParserSequence.createFlattened(jsonParserSequence1, readerBasedJsonParser1);
    jsonParserSequence1.getFeatureMask();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.core.util.JsonParserSequence,@Test(timeout = 4000)
public void test1923() throws Throwable {
    JsonParser[] jsonParserArray0 = new JsonParser[5];
    int int0 = 0;
    BufferRecycler bufferRecycler0 = new BufferRecycler(0, 0);
    boolean boolean0 = true;
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
    iOContext0.withEncoding(jsonEncoding0);
    Reader reader0 = null;
    JsonParserSequence jsonParserSequence0 = new JsonParserSequence(jsonParserArray0);
    JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(jsonParserSequence0, jsonParserSequence0);
    jsonParserSequence1.getCodec();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
com.fasterxml.jackson.core.util.JsonParserSequence,@Test(timeout = 4000)
public void test2125() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    int int0 = 500;
    StringReader stringReader0 = new StringReader(""i_~,!i"");
    JsonParserSequence jsonParserSequence0 = null;
    jsonParserSequence0 = new JsonParserSequence((JsonParser[]) null);
},ERROR,java.lang.ClassCastException,class com.github.javaparser.ast.expr.AssignExpr cannot be cast to class com.github.javaparser.ast.expr.MethodCallExpr (com.github.javaparser.ast.expr.AssignExpr and com.github.javaparser.ast.expr.MethodCallExpr are in unnamed module of loader 'app')
com.fasterxml.jackson.core.util.JsonParserSequence,@Test(timeout = 4000)
public void test2226() throws Throwable {
    JsonParser[] jsonParserArray0 = new JsonParser[0];
    JsonParserSequence jsonParserSequence0 = null;
    jsonParserSequence0 = new JsonParserSequence(jsonParserArray0);
},ERROR,java.lang.ClassCastException,class com.github.javaparser.ast.expr.AssignExpr cannot be cast to class com.github.javaparser.ast.expr.MethodCallExpr (com.github.javaparser.ast.expr.AssignExpr and com.github.javaparser.ast.expr.MethodCallExpr are in unnamed module of loader 'app')
