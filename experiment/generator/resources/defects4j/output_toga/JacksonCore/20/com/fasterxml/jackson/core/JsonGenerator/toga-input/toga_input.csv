focal_method,test_prefix,docstring
"@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","public void test0000() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    double[] doubleArray0 = new double[1];
    filteringGeneratorDelegate0.writeArray(doubleArray0, 0, (-32));
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","public void test0011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    filteringGeneratorDelegate0.writeStartObject();
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test0022() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    char[] charArray0 = new char[7];
    uTF8JsonGenerator0.writeRawValue(charArray0, 1, 0);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test0033() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    uTF8JsonGenerator0.setCurrentValue((Object) null);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test0066() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
    SerializedString serializedString0 = new SerializedString(""AUTO_CLOSE_TARGET"");
    writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
    assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getOutputBuffered() {
    // Assuming tail is always valid, set to 0 on close
    return _outputTail;
}","public void test0077() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    uTF8JsonGenerator0.writeNumber(bigInteger0);
    assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
}",""
"@Override
public int getOutputBuffered() {
    // Assuming tail is always valid, set to 0 on close
    return _outputTail;
}","public void test0088() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""27e F"", true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, mockFileOutputStream0);
    uTF8JsonGenerator0.writeNumber(""Invalid UTF-8 start byte 0x"");
    assertEquals(29, uTF8JsonGenerator0.getOutputBuffered());
}",""
"@Override
public int getOutputBuffered() {
    // Assuming tail is always valid, set to 0 on close
    return _outputTail;
}","public void test0099() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeNumber((float) 3);
    assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
}",""
"/*
    /**********************************************************
    /* API
    /**********************************************************
     */
@Override
public final String getValue() {
    return _value;
}","public void test01010() throws Throwable {
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, true);
    SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
    filteringGeneratorDelegate0.writeRawValue((SerializableString) serializedString0);
    assertEquals("" "", serializedString0.getValue());
}",""
"public int getFormatFeatures() {
    return 0;
}","public void test01111() throws Throwable {
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, true, true);
    filteringGeneratorDelegate0.writeNullField("""");
    assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
}","/**
 * Bulk access method for getting state of all {@link FormatFeature}s, format-specific
 * on/off configuration settings.
 *
 * @return Bit mask that defines current states of all standard {@link FormatFeature}s.
 *
 * @since 2.6
 */"
"public int getHighestEscapedChar() {
    return 0;
}","public void test01212() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    JsonGenerator jsonGenerator0 = jsonGeneratorDelegate0.useDefaultPrettyPrinter();
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"public int getHighestEscapedChar() {
    return 0;
}","public void test01313() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    JsonGenerator jsonGenerator0 = jsonGeneratorDelegate0.setRootValueSeparator((SerializableString) null);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"public int getHighestEscapedChar() {
    return 0;
}","public void test01414() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Double double0 = new Double(3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-21), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
    DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(""VALUE_STRING"");
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
    assertEquals(127, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"public int getHighestEscapedChar() {
    return 0;
}","public void test01515() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(845.7);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
    MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(""9"");
    JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"@Override
public int getOutputBuffered() {
    // Assuming tail is always valid, set to 0 on close
    return _outputTail;
}","public void test01616() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    filteringGeneratorDelegate0.writeNumber((long) 56319);
    uTF8JsonGenerator0.setHighestNonEscapedChar((-3));
    assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
}",""
"public boolean canOmitFields() {
    return true;
}","public void test01717() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-3));
    assertTrue(jsonGenerator0.canOmitFields());
}","/**
 * Introspection method to call to check whether it is ok to omit
 * writing of Object fields or not. Most formats do allow omission,
 * but certain positional formats (such as CSV) require output of
 * placeholders, even if no real values are to be emitted.
 *
 * @since 2.3
 */"
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test01818() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"public int getHighestEscapedChar() {
    return 0;
}","public void test01819() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setFeatureMask(918);
    assertEquals(127, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"public int getHighestEscapedChar() {
    return 0;
}","public void test01920() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    JsonGenerator jsonGenerator0 = jsonGeneratorDelegate0.setFeatureMask(37);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"public int getHighestEscapedChar() {
    return 0;
}","public void test02021() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test02122() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1361, (ObjectCodec) null, mockPrintStream0);
    uTF8JsonGenerator0.isClosed();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test02223() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringReader stringReader0 = new StringReader(""luS0%?8sAWJ`lX"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[9];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, true);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 10, true);
    uTF8JsonGenerator0.getOutputContext();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test02324() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[1];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3267, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
    uTF8JsonGenerator0.getOutputBuffered();
    assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","public void test02425() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    filteringGeneratorDelegate0.getFeatureMask();
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","public void test02526() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","public void test02527() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    filteringGeneratorDelegate0.overrideStdFeatures((-1), (-1064));
    filteringGeneratorDelegate0.getFeatureMask();
    assertEquals(127, filteringGeneratorDelegate0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","public void test02628() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
    filteringGeneratorDelegate0.getCurrentValue();
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test02729() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.getCodec();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test02830() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, true);
    uTF8JsonGenerator0.getCharacterEscapes();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"public int getHighestEscapedChar() {
    return 0;
}","public void test02931() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, filterOutputStream0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"public int getHighestEscapedChar() {
    return 0;
}","public void test03032() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(845.7);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    MockFile mockFile0 = new MockFile((String) null, ""') as character #"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[7];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-1), true);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}","/**
 * Accessor method for testing what is the highest unescaped character
 * configured for this generator. This may be either positive value
 * (when escaping configuration has been set and is in effect), or
 * 0 to indicate that no additional escaping is in effect.
 * Some generators may not support additional escaping: for example,
 * generators for binary formats that do not use escaping should
 * simply return 0.
 *
 * @return Currently active limitation for highest non-escaped character,
 *   if defined; or -1 to indicate no additional escaping is performed.
 */"
"public abstract int getFeatureMask();","public void test03033() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(845.7);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    MockFile mockFile0 = new MockFile((String) null, ""') as character #"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[7];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-1), true);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(3, jsonGenerator0.getFeatureMask());
}","/**
 * Bulk access method for getting state of all standard (non-dataformat-specific)
 * {@link JsonGenerator.Feature}s.
 *
 * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
 *
 * @since 2.3
 */"
"@Override
public int getFeatureMask() {
    return _features;
}","public void test03134() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(0.0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
    DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0);
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, false);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
    filteringGeneratorDelegate0.configure(jsonGenerator_Feature0, true);
    assertEquals(4, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test03135() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(0.0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
    DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0);
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, false);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
    filteringGeneratorDelegate0.configure(jsonGenerator_Feature0, true);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"/*
    /**********************************************************
    /* Public API, convenience field write methods
    /**********************************************************
     */
/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has a String value. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeString(value);
 * </pre>
 * <p>
 *  Note: many performance-sensitive implementations override this method
 */
public void writeStringField(String fieldName, String value) throws IOException {
    writeFieldName(fieldName);
    writeString(value);
}","public void test03236() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, byteArrayOutputStream0);
    try {
        uTF8JsonGenerator0.writeStringField("""", ""': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"@Override
public final void writeStartObject() throws IOException {
    _verifyValueWrite(""start an object"");
    _writeContext = _writeContext.createChildObjectContext();
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartObject(this);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = BYTE_LCURLY;
    }
}","public void test03337() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Double double0 = new Double(3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
    uTF8JsonGenerator0.writeNumber(0.0F);
    try {
        uTF8JsonGenerator0.writeStartObject();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedOutputStream"", e);
    }
}",""
"@Override
public void writeStartArray(int size) throws IOException {
    delegate.writeStartArray(size);
}","public void test03438() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeStartArray((-3051));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"public void writeStartArray(int size) throws IOException {
    writeStartArray();
}","public void test03539() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeStartArray(256);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayOutputStream"", e);
    }
}","/**
 *  Method for writing start marker of an Array value, similar
 *  to {@link #writeStartArray()}, but also specifying how many
 *  elements will be written for the array before calling
 *  {@link #writeEndArray()}.
 * <p>
 *  Default implementation simply calls {@link #writeStartArray()}.
 *
 *  @param size Number of elements this array will have: actual
 *    number of values written (before matching call to
 *    {@link #writeEndArray()} MUST match; generator MAY verify
 *    this is the case.
 *
 *  @since 2.4
 */"
"@Override
public void writeRawValue(char[] text, int offset, int len) throws IOException {
    delegate.writeRawValue(text, offset, len);
}","public void test03640() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    char[] charArray0 = new char[6];
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeRawValue(charArray0, 3390, (-675));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"@Override
public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {
    _verifyValueWrite(WRITE_STRING);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    _writeBytes(text, offset, length);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","public void test03741() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""Vg@3etg2{x%W3m<"");
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 128);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",""
"/*
    /**********************************************************
    /* Public API, write methods, Native Ids
    /**********************************************************
     */
@Override
public void writeObjectId(Object id) throws IOException {
    delegate.writeObjectId(id);
}","public void test03842() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeObjectId((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"public final void writeObjectFieldStart(String fieldName) throws IOException {
    writeFieldName(fieldName);
    writeStartObject();
}","public void test03943() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeObjectFieldStart(""7lID5N6u):N!*r+"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  (that will contain a JSON Object value), and the START_OBJECT marker.
 *  Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeStartObject();
 * </pre>
 * <p>
 *  Note: caller still has to take care to close the Object
 *  (by calling {#link #writeEndObject}) after writing all
 *  entries of the value Object.
 */"
"public final void writeObjectField(String fieldName, Object pojo) throws IOException {
    writeFieldName(fieldName);
    writeObject(pojo);
}","public void test04044() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
    AtomicBoolean atomicBoolean0 = new AtomicBoolean();
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeObjectField(""AUTO_CLOSE_JSON_CONTENT"", atomicBoolean0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has contents of specific Java object as its value.
 *  Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeObject(pojo);
 * </pre>
 */"
"public final void writeNumberField(String fieldName, BigDecimal value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","public void test04145() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    BigDecimal bigDecimal0 = new BigDecimal(1);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeNumberField("""", bigDecimal0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has the specified numeric value.
 *  Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeNumber(value);
 * </pre>
 */"
"public final void writeNumberField(String fieldName, long value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","public void test04246() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeNumberField(""iV9+G2!3"", 0L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has the specified numeric value. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeNumber(value);
 * </pre>
 */"
"public final void writeNumberField(String fieldName, int value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","public void test04347() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeNumberField(""No Base6Variant with name "", (-4488));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has the specified numeric value. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeNumber(value);
 * </pre>
 */"
"public final void writeNumberField(String fieldName, double value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","public void test04448() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeNumberField(""No native support for writing embedded objects"", 2.147483647E9);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has the specified numeric value. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeNumber(value);
 * </pre>
 */"
"/*
    /**********************************************************
    /* Public API, write methods, other value types
    /**********************************************************
     */
@Override
public void writeNumber(short v) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeNumber(v)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNumber(v);
}","public void test04549() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeNumber((short) 425);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, write methods, other value types
    /**********************************************************
     */
@Override
public void writeNumber(short v) throws IOException {
    delegate.writeNumber(v);
}","public void test04650() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeNumber((short) 290);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayOutputStream"", e);
    }
}",""
"@Override
public void writeNumber(long v) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeNumber(v)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNumber(v);
}","public void test04751() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeNumber(0L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}",""
"@Override
public void writeNumber(double v) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeNumber(v)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNumber(v);
}","public void test04852() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeNumber((double) 2149);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}",""
"public final void writeNullField(String fieldName) throws IOException {
    writeFieldName(fieldName);
    writeNull();
}","public void test04953() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeNullField(""LD_rm]'j%/#\""ZP"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has JSON literal value null. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeNull();
 * </pre>
 */"
"@Override
public void writeEndArray() throws IOException {
    delegate.writeEndArray();
}","public void test05155() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeEndArray();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"@Override
public void writeEndArray() throws IOException {
    if (!_writeContext.inArray()) {
        _reportError(""Current context not Array but "" + _writeContext.typeDesc());
    }
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = ']';
    }
    _writeContext = _writeContext.clearAndGetParent();
}","public void test05256() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    StringWriter stringWriter0 = new StringWriter();
    AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
    IOContext iOContext0 = new IOContext(bufferRecycler0, atomicBoolean0, false);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
    try {
        writerBasedJsonGenerator0.writeEndArray();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current context not Array but root
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"public final void writeBooleanField(String fieldName, boolean value) throws IOException {
    writeFieldName(fieldName);
    writeBoolean(value);
}","public void test05357() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeBooleanField((String) null, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has a boolean value. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeBoolean(value);
 * </pre>
 */"
"@Override
public void writeBoolean(boolean state) throws IOException {
    _verifyValueWrite(WRITE_BOOLEAN);
    if ((_outputTail + 5) >= _outputEnd) {
        _flushBuffer();
    }
    byte[] keyword = state ? TRUE_BYTES : FALSE_BYTES;
    int len = keyword.length;
    System.arraycopy(keyword, 0, _outputBuffer, _outputTail, len);
    _outputTail += len;
}","public void test05458() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, true);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeBoolean(true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8JsonGenerator"", e);
    }
}",""
"public final void writeBinaryField(String fieldName, byte[] data) throws IOException {
    writeFieldName(fieldName);
    writeBinary(data);
}","public void test05559() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 6, false);
    try {
        uTF8JsonGenerator0.writeBinaryField(""F\""o?E"", byteArrayBuilder0.NO_BYTES);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that contains specified data in base64-encoded form.
 *  Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeBinary(value);
 * </pre>
 */"
"public void writeBinary(byte[] data, int offset, int len) throws IOException {
    writeBinary(Base64Variants.getDefaultVariant(), data, offset, len);
}","public void test05660() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
    byte[] byteArray0 = new byte[1];
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeBinary(byteArray0, 0, 9);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}","/**
 * Similar to {@link #writeBinary(Base64Variant,byte[],int,int)},
 * but default to using the Jackson default Base64 variant
 * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}).
 */"
"public void writeBinary(byte[] data, int offset, int len) throws IOException {
    writeBinary(Base64Variants.getDefaultVariant(), data, offset, len);
}","public void test05761() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeBinary(byteArrayBuilder0.NO_BYTES, (-1876), 0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Similar to {@link #writeBinary(Base64Variant,byte[],int,int)},
 * but default to using the Jackson default Base64 variant
 * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}).
 */"
"public void writeBinary(byte[] data) throws IOException {
    writeBinary(Base64Variants.getDefaultVariant(), data, 0, data.length);
}","public void test05862() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
    byte[] byteArray0 = new byte[3];
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeBinary(byteArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}","/**
 * Similar to {@link #writeBinary(Base64Variant,byte[],int,int)},
 * but assumes default to using the Jackson default Base64 variant
 * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}). Also
 * assumes that whole byte array is to be output.
 */"
"public int writeBinary(InputStream data, int dataLength) throws IOException {
    return writeBinary(Base64Variants.getDefaultVariant(), data, dataLength);
}","public void test05963() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1554, 421);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) 97);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}","/**
 * Similar to {@link #writeBinary(Base64Variant,InputStream,int)},
 * but assumes default to using the Jackson default Base64 variant
 * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}).
 *
 * @param data InputStream to use for reading binary data to write.
 *    Will not be closed after successful write operation
 * @param dataLength (optional) number of bytes that will be available;
 *    or -1 to be indicate it is not known. Note that implementations
 *    need not support cases where length is not known in advance; this
 *    depends on underlying data format: JSON output does NOT require length,
 *    other formats may
 */"
"public int writeBinary(InputStream data, int dataLength) throws IOException {
    return writeBinary(Base64Variants.getDefaultVariant(), data, dataLength);
}","public void test06064() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(845.7);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
    // Undeclared exception!
    try {
        writerBasedJsonGenerator0.writeBinary((InputStream) null, (-20));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.WriterBasedJsonGenerator"", e);
    }
}","/**
 * Similar to {@link #writeBinary(Base64Variant,InputStream,int)},
 * but assumes default to using the Jackson default Base64 variant
 * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}).
 *
 * @param data InputStream to use for reading binary data to write.
 *    Will not be closed after successful write operation
 * @param dataLength (optional) number of bytes that will be available;
 *    or -1 to be indicate it is not known. Note that implementations
 *    need not support cases where length is not known in advance; this
 *    depends on underlying data format: JSON output does NOT require length,
 *    other formats may
 */"
"/*
    /**********************************************************
    /* Public API, write methods, scalar arrays (2.8)
    /**********************************************************
     */
/**
 * Value write method that can be called to write a single
 * array (sequence of {@link JsonToken#START_ARRAY}, zero or
 * more {@link JsonToken#VALUE_NUMBER_INT}, {@link JsonToken#END_ARRAY})
 *
 * @since 2.8
 *
 * @param array Array that contains values to write
 * @param offset Offset of the first element to write, within array
 * @param length Number of elements in array to write, from `offset` to `offset + len - 1`
 */
public void writeArray(int[] array, int offset, int length) throws IOException {
    if (array == null) {
        throw new IllegalArgumentException(""null array"");
    }
    _verifyOffsets(array.length, offset, length);
    writeStartArray();
    for (int i = offset, end = offset + length; i < end; ++i) {
        writeNumber(array[i]);
    }
    writeEndArray();
}","public void test06165() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
    int[] intArray0 = new int[5];
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeArray(intArray0, 0, 1424);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid argument(s) (offset=0, length=1424) for input array of 5 element
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"@Override
public void setCurrentValue(Object v) {
    delegate.setCurrentValue(v);
}","public void test06266() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.setCurrentValue((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"@Override
public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {
    delegate.setCharacterEscapes(esc);
    return this;
}","public void test06367() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.setCharacterEscapes(jsonpCharacterEscapes0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"@Override
public JsonGenerator overrideStdFeatures(int values, int mask) {
    delegate.overrideStdFeatures(values, mask);
    return this;
}","public void test06468() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.overrideStdFeatures(3050, 3050);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"/*
    /**********************************************************
    /* Closeable implementation
    /**********************************************************
     */
@Override
public boolean isClosed() {
    return delegate.isClosed();
}","public void test06569() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.isClosed();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"@Override
public FormatSchema getSchema() {
    return delegate.getSchema();
}","public void test06670() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.getSchema();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"@Override
public PrettyPrinter getPrettyPrinter() {
    return delegate.getPrettyPrinter();
}","public void test06771() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.getPrettyPrinter();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"@Override
public Object getOutputTarget() {
    return delegate.getOutputTarget();
}","public void test06872() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.getOutputTarget();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"// final, can't override (and no need to)
//public final JsonGenerator configure(Feature f, boolean state)
@Override
public int getFeatureMask() {
    return delegate.getFeatureMask();
}","public void test06973() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.getFeatureMask();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"@Override
public Object getCurrentValue() {
    return delegate.getCurrentValue();
}","public void test07074() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.getCurrentValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, metadata
    /**********************************************************
     */
@Override
public ObjectCodec getCodec() {
    return delegate.getCodec();
}","public void test07175() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.getCodec();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, copy-through methods
    /**********************************************************
     */
/**
 *  Method for copying contents of the current event that
 *  the given parser instance points to.
 *  Note that the method <b>will not</b> copy any other events,
 *  such as events contained within JSON Array or Object structures.
 * <p>
 *  Calling this method will not advance the given
 *  parser, although it may cause parser to internally process
 *  more data (if it lazy loads contents of value events, for example)
 */
public void copyCurrentEvent(JsonParser p) throws IOException {
    JsonToken t = p.currentToken();
    // sanity check; what to do?
    if (t == null) {
        _reportError(""No current event to copy"");
    }
    switch(t.id()) {
        case ID_NOT_AVAILABLE:
            _reportError(""No current event to copy"");
            // never gets here
            break;
        case ID_START_OBJECT:
            writeStartObject();
            break;
        case ID_END_OBJECT:
            writeEndObject();
            break;
        case ID_START_ARRAY:
            writeStartArray();
            break;
        case ID_END_ARRAY:
            writeEndArray();
            break;
        case ID_FIELD_NAME:
            writeFieldName(p.getCurrentName());
            break;
        case ID_STRING:
            if (p.hasTextCharacters()) {
                writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());
            } else {
                writeString(p.getText());
            }
            break;
        case ID_NUMBER_INT:
            {
                NumberType n = p.getNumberType();
                if (n == NumberType.INT) {
                    writeNumber(p.getIntValue());
                } else if (n == NumberType.BIG_INTEGER) {
                    writeNumber(p.getBigIntegerValue());
                } else {
                    writeNumber(p.getLongValue());
                }
                break;
            }
        case ID_NUMBER_FLOAT:
            {
                NumberType n = p.getNumberType();
                if (n == NumberType.BIG_DECIMAL) {
                    writeNumber(p.getDecimalValue());
                } else if (n == NumberType.FLOAT) {
                    writeNumber(p.getFloatValue());
                } else {
                    writeNumber(p.getDoubleValue());
                }
                break;
            }
        case ID_TRUE:
            writeBoolean(true);
            break;
        case ID_FALSE:
            writeBoolean(false);
            break;
        case ID_NULL:
            writeNull();
            break;
        case ID_EMBEDDED_OBJECT:
            writeObject(p.getEmbeddedObject());
            break;
        default:
            _throwInternal();
    }
}","public void test07276() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.copyCurrentEvent((JsonParser) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"public final JsonGenerator configure(Feature f, boolean state) {
    if (state)
        enable(f);
    else
        disable(f);
    return this;
}","public void test07377() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.configure(jsonGenerator_Feature0, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}","/**
 * Method for enabling or disabling specified feature:
 * check {@link Feature} for list of available features.
 *
 * @return Generator itself (this), to allow chaining
 */"
"@Override
public void close() throws IOException {
    delegate.close();
}","public void test07478() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.close();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"@Override
public void close() throws IOException {
    super.close();
    /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open
         *   scopes.
         */
    // First: let's see that we still have buffers...
    if ((_outputBuffer != null) && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {
        while (true) {
            JsonStreamContext ctxt = getOutputContext();
            if (ctxt.inArray()) {
                writeEndArray();
            } else if (ctxt.inObject()) {
                writeEndObject();
            } else {
                break;
            }
        }
    }
    _flushBuffer();
    // just to ensure we don't think there's anything buffered
    _outputTail = 0;
    /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()
         *   on the underlying Reader, unless we ""own"" it, or auto-closing
         *   feature is enabled.
         *   One downside: when using UTF8Writer, underlying buffer(s)
         *   may not be properly recycled if we don't close the writer.
         */
    if (_outputStream != null) {
        if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {
            _outputStream.close();
        } else if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {
            // If we can't close it, we should at least flush
            _outputStream.flush();
        }
    }
    // Internal buffer(s) generator has can now be released as well
    _releaseBuffers();
}","public void test07579() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, false);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.close();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",""
"@Override
public void close() throws IOException {
    super.close();
    /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open
         *   scopes.
         */
    // First: let's see that we still have buffers...
    if ((_outputBuffer != null) && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {
        while (true) {
            JsonStreamContext ctxt = getOutputContext();
            if (ctxt.inArray()) {
                writeEndArray();
            } else if (ctxt.inObject()) {
                writeEndObject();
            } else {
                break;
            }
        }
    }
    _flushBuffer();
    // just to ensure we don't think there's anything buffered
    _outputTail = 0;
    /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()
         *   on the underlying Reader, unless we ""own"" it, or auto-closing
         *   feature is enabled.
         *   One downside: when using UTF8Writer, underlying buffer(s)
         *   may not be properly recycled if we don't close the writer.
         */
    if (_outputStream != null) {
        if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {
            _outputStream.close();
        } else if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {
            // If we can't close it, we should at least flush
            _outputStream.flush();
        }
    }
    // Internal buffer(s) generator has can now be released as well
    _releaseBuffers();
}","public void test07680() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 4, true);
    try {
        uTF8JsonGenerator0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedOutputStream"", e);
    }
}",""
"@Override
public boolean canWriteObjectId() {
    return delegate.canWriteObjectId();
}","public void test07781() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.canWriteObjectId();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"@Override
public boolean canWriteBinaryNatively() {
    return delegate.canWriteBinaryNatively();
}","public void test07882() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.canWriteBinaryNatively();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"protected final void _verifyOffsets(int arrayLength, int offset, int length) {
    if ((offset < 0) || (offset + length) > arrayLength) {
        throw new IllegalArgumentException(String.format(""invalid argument(s) (offset=%d, length=%d) for input array of %d element"", offset, length, arrayLength));
    }
}","public void test07983() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, tokenFilter0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2274, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, false);
    // Undeclared exception!
    try {
        ((JsonGenerator) uTF8JsonGenerator0)._verifyOffsets(0, 0, 92);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid argument(s) (offset=0, length=92) for input array of 0 element
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 * @since 2.8
 */"
"public void writeArray(double[] array, int offset, int length) throws IOException {
    if (array == null) {
        throw new IllegalArgumentException(""null array"");
    }
    _verifyOffsets(array.length, offset, length);
    writeStartArray();
    for (int i = offset, end = offset + length; i < end; ++i) {
        writeNumber(array[i]);
    }
    writeEndArray();
}","public void test08084() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""^m5qPD_X?3^lQb/y<"");
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
    double[] doubleArray0 = new double[2];
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeArray(doubleArray0, 56319, 6);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid argument(s) (offset=56319, length=6) for input array of 2 element
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 * Value write method that can be called to write a single
 * array (sequence of {@link JsonToken#START_ARRAY}, zero or
 * more {@link JsonToken#VALUE_NUMBER_FLOAT}, {@link JsonToken#END_ARRAY})
 *
 * @since 2.8
 *
 * @param array Array that contains values to write
 * @param offset Offset of the first element to write, within array
 * @param length Number of elements in array to write, from `offset` to `offset + len - 1`
 */"
"public void writeObjectRef(Object id) throws IOException {
    throw new JsonGenerationException(""No native support for writing Object Ids"", this);
}","public void test08185() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Double double0 = new Double(3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-21), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
    try {
        uTF8JsonGenerator0.writeObjectRef(""VALUE_STRING"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No native support for writing Object Ids
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 * Method that can be called to output references to native Object Ids.
 * Note that it may only be called after ensuring this is legal
 * (with {@link #canWriteObjectId()}), as not all data formats
 * have native type id support; and some may only allow them in
 * certain positions or locations.
 * If output is not allowed by the data format in this position,
 * a {@link JsonGenerationException} will be thrown.
 */"
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test08286() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    BigDecimal bigDecimal0 = BigDecimal.TEN;
    IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, false);
    File file0 = MockFile.createTempFile("" cD"", "".|bU "");
    MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
    byte[] byteArray0 = new byte[1];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 881, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
    uTF8JsonGenerator0.getPrettyPrinter();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"public void writeFieldId(long id) throws IOException {
    writeFieldName(Long.toString(id));
}","public void test08387() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    try {
        uTF8JsonGenerator0.writeFieldId(1L);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 * Alternative to {@link #writeFieldName(String)} that may be used
 * in cases where property key is of numeric type; either where
 * underlying format supports such notion (some binary formats do,
 * unlike JSON), or for convenient conversion into String presentation.
 * Default implementation will simply convert id into <code>String</code>
 * and call {@link #writeFieldName(String)}.
 *
 * @since 2.8
 */"
"@Override
public int getOutputBuffered() {
    return delegate.getOutputBuffered();
}","public void test08488() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
    AtomicBoolean atomicBoolean0 = new AtomicBoolean();
    filteringGeneratorDelegate0.writeObject(atomicBoolean0);
    assertEquals(5, filteringGeneratorDelegate0.getOutputBuffered());
}",""
"/*
   /**********************************************************
   /* Public API, write methods, primitive
   /**********************************************************
    */
// Not implemented at this level, added as placeholders
/*
    public abstract void writeNumber(int i)
    public abstract void writeNumber(long l)
    public abstract void writeNumber(double d)
    public abstract void writeNumber(float f)
    public abstract void writeNumber(BigDecimal dec)
    public abstract void writeBoolean(boolean state)
    public abstract void writeNull()
    */
/*
    /**********************************************************
    /* Public API, write methods, POJOs, trees
    /**********************************************************
     */
@Override
public void writeObject(Object value) throws IOException {
    if (value == null) {
        // important: call method that does check value write:
        writeNull();
    } else {
        /* 02-Mar-2009, tatu: we are NOT to call _verifyValueWrite here,
             *   because that will be done when codec actually serializes
             *   contained POJO. If we did call it it would advance state
             *   causing exception later on
             */
        if (_objectCodec != null) {
            _objectCodec.writeValue(this, value);
            return;
        }
        _writeSimpleObject(value);
    }
}","public void test08589() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Double double0 = new Double(3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
    try {
        uTF8JsonGenerator0.writeObject(bufferRecycler0.BYTE_READ_IO_BUFFER);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedOutputStream"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, write methods, serializing Java objects
    /**********************************************************
     */
@Override
public void writeObject(Object pojo) throws IOException, JsonProcessingException {
    if (delegateCopyMethods) {
        delegate.writeObject(pojo);
        return;
    }
    // NOTE: copied from
    if (pojo == null) {
        writeNull();
    } else {
        if (getCodec() != null) {
            getCodec().writeValue(this, pojo);
            return;
        }
        _writeSimpleObject(pojo);
    }
}","public void test08690() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeObject(filteringGeneratorDelegate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate)
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"@Override
public void writeArray(int[] array, int offset, int length) throws IOException {
    delegate.writeArray(array, offset, length);
}","public void test08791() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1554, (ObjectCodec) null, byteArrayBuilder0);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
    int[] intArray0 = new int[3];
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeArray(intArray0, (-32), 1554);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid argument(s) (offset=-32, length=1554) for input array of 3 element
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"@Override
public void copyCurrentStructure(JsonParser jp) throws IOException {
    if (delegateCopyMethods)
        delegate.copyCurrentStructure(jp);
    else
        super.copyCurrentStructure(jp);
}","public void test08892() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    StringReader stringReader0 = new StringReader(""`w&w=_+Th$N`tp"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[9];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 57343, 56320, true);
    try {
        filteringGeneratorDelegate0.copyCurrentStructure(readerBasedJsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No current event to copy
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API, copy-through methods
    /**********************************************************
     */
/**
 *  Method for copying contents of the current event that
 *  the given parser instance points to.
 *  Note that the method <b>will not</b> copy any other events,
 *  such as events contained within JSON Array or Object structures.
 * <p>
 *  Calling this method will not advance the given
 *  parser, although it may cause parser to internally process
 *  more data (if it lazy loads contents of value events, for example)
 */
public void copyCurrentEvent(JsonParser p) throws IOException {
    JsonToken t = p.currentToken();
    // sanity check; what to do?
    if (t == null) {
        _reportError(""No current event to copy"");
    }
    switch(t.id()) {
        case ID_NOT_AVAILABLE:
            _reportError(""No current event to copy"");
            // never gets here
            break;
        case ID_START_OBJECT:
            writeStartObject();
            break;
        case ID_END_OBJECT:
            writeEndObject();
            break;
        case ID_START_ARRAY:
            writeStartArray();
            break;
        case ID_END_ARRAY:
            writeEndArray();
            break;
        case ID_FIELD_NAME:
            writeFieldName(p.getCurrentName());
            break;
        case ID_STRING:
            if (p.hasTextCharacters()) {
                writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());
            } else {
                writeString(p.getText());
            }
            break;
        case ID_NUMBER_INT:
            {
                NumberType n = p.getNumberType();
                if (n == NumberType.INT) {
                    writeNumber(p.getIntValue());
                } else if (n == NumberType.BIG_INTEGER) {
                    writeNumber(p.getBigIntegerValue());
                } else {
                    writeNumber(p.getLongValue());
                }
                break;
            }
        case ID_NUMBER_FLOAT:
            {
                NumberType n = p.getNumberType();
                if (n == NumberType.BIG_DECIMAL) {
                    writeNumber(p.getDecimalValue());
                } else if (n == NumberType.FLOAT) {
                    writeNumber(p.getFloatValue());
                } else {
                    writeNumber(p.getDoubleValue());
                }
                break;
            }
        case ID_TRUE:
            writeBoolean(true);
            break;
        case ID_FALSE:
            writeBoolean(false);
            break;
        case ID_NULL:
            writeNull();
            break;
        case ID_EMBEDDED_OBJECT:
            writeObject(p.getEmbeddedObject());
            break;
        default:
            _throwInternal();
    }
}","public void test08993() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
    StringReader stringReader0 = new StringReader(""<'_$]%"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3011, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    try {
        writerBasedJsonGenerator0.copyCurrentEvent(readerBasedJsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No current event to copy
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"@Override
public int getOutputBuffered() {
    return delegate.getOutputBuffered();
}","public void test09094() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    double[] doubleArray0 = new double[1];
    filteringGeneratorDelegate0.writeArray(doubleArray0, 0, 0);
    assertEquals(2, filteringGeneratorDelegate0.getOutputBuffered());
}",""
"public void writeArray(long[] array, int offset, int length) throws IOException {
    if (array == null) {
        throw new IllegalArgumentException(""null array"");
    }
    _verifyOffsets(array.length, offset, length);
    writeStartArray();
    for (int i = offset, end = offset + length; i < end; ++i) {
        writeNumber(array[i]);
    }
    writeEndArray();
}","public void test09195() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, true);
    long[] longArray0 = new long[6];
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeArray(longArray0, 56320, (-1048));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid argument(s) (offset=56320, length=-1048) for input array of 6 element
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 * Value write method that can be called to write a single
 * array (sequence of {@link JsonToken#START_ARRAY}, zero or
 * more {@link JsonToken#VALUE_NUMBER_INT}, {@link JsonToken#END_ARRAY})
 *
 * @since 2.8
 *
 * @param array Array that contains values to write
 * @param offset Offset of the first element to write, within array
 * @param length Number of elements in array to write, from `offset` to `offset + len - 1`
 */"
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test09296() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    int[] intArray0 = new int[1];
    uTF8JsonGenerator0.writeArray(intArray0, 20, (-3105));
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getFeatureMask() {
    return _features;
}","public void test09397() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    jsonGeneratorDelegate0.configure(jsonGenerator_Feature0, true);
    assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
}",""
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test09398() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    jsonGeneratorDelegate0.configure(jsonGenerator_Feature0, true);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"/*
    /**********************************************************
    /* Public API, convenience field write methods
    /**********************************************************
     */
/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has a String value. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeString(value);
 * </pre>
 * <p>
 *  Note: many performance-sensitive implementations override this method
 */
public void writeStringField(String fieldName, String value) throws IOException {
    writeFieldName(fieldName);
    writeString(value);
}","public void test09499() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeStringField(""com.fasterxml.jackson.core.JsonGenerator$Feature"", ""com.fasterxml.jackson.core.JsonGenerator$Feature"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",""
"@Override
public boolean canOmitFields() {
    return delegate.canOmitFields();
}","public void test095100() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    boolean boolean0 = filteringGeneratorDelegate0.canOmitFields();
    assertTrue(boolean0);
}",""
"@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","public void test095101() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    boolean boolean0 = filteringGeneratorDelegate0.canOmitFields();
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",""
"public final void writeObjectFieldStart(String fieldName) throws IOException {
    writeFieldName(fieldName);
    writeStartObject();
}","public void test096102() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    try {
        jsonGeneratorDelegate0.writeObjectFieldStart(""Current context not Array but "");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  (that will contain a JSON Object value), and the START_OBJECT marker.
 *  Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeStartObject();
 * </pre>
 * <p>
 *  Note: caller still has to take care to close the Object
 *  (by calling {#link #writeEndObject}) after writing all
 *  entries of the value Object.
 */"
"@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","public void test097103() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    StringWriter stringWriter0 = new StringWriter();
    AtomicLong atomicLong0 = new AtomicLong(0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1029, (ObjectCodec) null, stringWriter0);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, true);
    jsonGeneratorDelegate0.writeOmittedField(""AUTO_CLOSE_JSON_CONTENT"");
    assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
}",""
"public final void writeBinaryField(String fieldName, byte[] data) throws IOException {
    writeFieldName(fieldName);
    writeBinary(data);
}","public void test098104() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
    byte[] byteArray0 = new byte[7];
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeBinaryField(""QUOTE_NON_NUMERIC_NUMBERS"", byteArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that contains specified data in base64-encoded form.
 *  Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeBinary(value);
 * </pre>
 */"
"public final void writeNumberField(String fieldName, long value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","public void test099105() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
    try {
        uTF8JsonGenerator0.writeNumberField(""{`8BDW3xr{$P#Bd,$"", (long) 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has the specified numeric value. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeNumber(value);
 * </pre>
 */"
"public JsonGenerator overrideFormatFeatures(int values, int mask) {
    throw new IllegalArgumentException(""No FormatFeatures defined for generator of type "" + getClass().getName());
    /*
        int oldState = getFeatureMask();
        int newState = (oldState & ~mask) | (values & mask);
        return setFeatureMask(newState);
        */
}","public void test100106() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.overrideFormatFeatures(2, 3);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 *  Bulk set method for (re)setting states of {@link FormatFeature}s,
 *  by specifying values (set / clear) along with a mask, to determine
 *  which features to change, if any.
 * <p>
 *  Default implementation will simply throw an exception to indicate that
 *  the generator implementation does not support any {@link FormatFeature}s.
 *
 *  @param values Bit mask of set/clear state for features to change
 *  @param mask Bit mask of features to change
 *
 *  @since 2.6
 */"
"/*
    /**********************************************************
    /* Public API, capability introspection (since 2.3, mostly)
    /**********************************************************
     */
@Override
public boolean canUseSchema(FormatSchema schema) {
    return delegate.canUseSchema(schema);
}","public void test101107() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""!S% B#COev&\""<^q9"");
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) 10, false);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    boolean boolean0 = jsonGeneratorDelegate0.canUseSchema((FormatSchema) null);
    assertFalse(boolean0);
}",""
"@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","public void test101108() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""!S% B#COev&\""<^q9"");
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) 10, false);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    boolean boolean0 = jsonGeneratorDelegate0.canUseSchema((FormatSchema) null);
    assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
}",""
"public final void writeObjectField(String fieldName, Object pojo) throws IOException {
    writeFieldName(fieldName);
    writeObject(pojo);
}","public void test102109() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1361, (ObjectCodec) null, mockPrintStream0);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    try {
        jsonGeneratorDelegate0.writeObjectField(""O}'}="", ""O}'}="");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has contents of specific Java object as its value.
 *  Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeObject(pojo);
 * </pre>
 */"
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test103110() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""W-n 4"");
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
    byte[] byteArray0 = new byte[2];
    uTF8JsonGenerator0.writeBinary(byteArray0);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"public final void writeNullField(String fieldName) throws IOException {
    writeFieldName(fieldName);
    writeNull();
}","public void test104111() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
    try {
        uTF8JsonGenerator0.writeNullField("""");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has JSON literal value null. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeNull();
 * </pre>
 */"
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test105112() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
    uTF8JsonGenerator0.writeStartArray(2);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","public void test106113() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
    filteringGeneratorDelegate0.writeBinary(byteArray0, 2, (-2238));
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",""
"@Override
public void writeUTF8String(byte[] text, int offset, int length) throws IOException {
    // could add support for buffering if we really want it...
    _reportUnsupportedOperation();
}","public void test107114() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter(0);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2699, (ObjectCodec) null, stringWriter0);
    byte[] byteArray0 = new byte[3];
    // Undeclared exception!
    try {
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 1, 18);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"public final void writeNumberField(String fieldName, int value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","public void test108115() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    try {
        uTF8JsonGenerator0.writeNumberField(""STRICT_DUPLICATE_DETECTION"", 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has the specified numeric value. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeNumber(value);
 * </pre>
 */"
"@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","public void test109116() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    boolean boolean0 = filteringGeneratorDelegate0.canWriteBinaryNatively();
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",""
"@Override
public boolean canWriteBinaryNatively() {
    return delegate.canWriteBinaryNatively();
}","public void test109117() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    boolean boolean0 = filteringGeneratorDelegate0.canWriteBinaryNatively();
    assertFalse(boolean0);
}",""
"public final void writeNumberField(String fieldName, double value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","public void test110118() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    try {
        filteringGeneratorDelegate0.writeNumberField(""`w&w=_+Th$N`tp"", 1.0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has the specified numeric value. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeNumber(value);
 * </pre>
 */"
"public final void writeNumberField(String fieldName, float value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","public void test111119() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    try {
        uTF8JsonGenerator0.writeNumberField(""Q$OInPz[|:#B#1.dwn"", 0.0F);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has the specified numeric value. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeNumber(value);
 * </pre>
 */"
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test112120() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Short short0 = new Short((short) 128);
    IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.getSchema();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",""
"/*
    /**********************************************************
    /* Public API, Schema configuration
    /**********************************************************
     */
/**
 *  Method to call to make this generator use specified schema.
 *  Method must be called before generating any content, right after instance
 *  has been created.
 *  Note that not all generators support schemas; and those that do usually only
 *  accept specific types of schemas: ones defined for data format this generator
 *  produces.
 * <p>
 *  If generator does not support specified schema, {@link UnsupportedOperationException}
 *  is thrown.
 *
 *  @param schema Schema to use
 *
 *  @throws UnsupportedOperationException if generator does not support schema
 */
public void setSchema(FormatSchema schema) {
    throw new UnsupportedOperationException(""Generator of type "" + getClass().getName() + "" does not support schema of type '"" + schema.getSchemaType() + ""'"");
}","public void test113121() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringReader stringReader0 = new StringReader(""luS0%?8sAWJ`lX"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[9];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, true);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 10, true);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.setSchema((FormatSchema) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"public final void writeArrayFieldStart(String fieldName) throws IOException {
    writeFieldName(fieldName);
    writeStartArray();
}","public void test114122() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    AtomicInteger atomicInteger0 = new AtomicInteger(0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, atomicInteger0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3230, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
    try {
        uTF8JsonGenerator0.writeArrayFieldStart(""AUTO_CLOSE_JSON_CONTENT"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  (that will contain a JSON Array value), and the START_ARRAY marker.
 *  Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeStartArray();
 * </pre>
 * <p>
 *  Note: caller still has to take care to close the array
 *  (by calling {#link #writeEndArray}) after writing all values
 *  of the value Array.
 */"
"@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","public void test115123() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(845.7);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
    writerBasedJsonGenerator0.writeBinary((InputStream) null, 0);
    assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
}",""
"public void writeTypeId(Object id) throws IOException {
    throw new JsonGenerationException(""No native support for writing Type Ids"", this);
}","public void test116124() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    try {
        uTF8JsonGenerator0.writeTypeId(bufferRecycler0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No native support for writing Type Ids
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 * Method that can be called to output so-called native Type Id.
 * Note that it may only be called after ensuring this is legal
 * (with {@link #canWriteTypeId()}), as not all data formats
 * have native type id support; and some may only allow them in
 * certain positions or locations.
 * If output is not allowed by the data format in this position,
 * a {@link JsonGenerationException} will be thrown.
 *
 * @since 2.3
 */"
"public final void writeNumberField(String fieldName, BigDecimal value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","public void test118126() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, true);
    BigDecimal bigDecimal0 = new BigDecimal(57343);
    try {
        uTF8JsonGenerator0.writeNumberField(""null array"", bigDecimal0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has the specified numeric value.
 *  Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeNumber(value);
 * </pre>
 */"
"/*
    /**********************************************************
    /* Public API, write methods, Native Ids (type, object)
    /**********************************************************
     */
/**
 * Method that can be called to output so-called native Object Id.
 * Note that it may only be called after ensuring this is legal
 * (with {@link #canWriteObjectId()}), as not all data formats
 * have native type id support; and some may only allow them in
 * certain positions or locations.
 * If output is not allowed by the data format in this position,
 * a {@link JsonGenerationException} will be thrown.
 *
 * @since 2.3
 */
public void writeObjectId(Object id) throws IOException {
    throw new JsonGenerationException(""No native support for writing Object Ids"", this);
}","public void test119127() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(845.7);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
    try {
        writerBasedJsonGenerator0.writeObjectId(jsonEncoding0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No native support for writing Object Ids
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",""
"public void writeEmbeddedObject(Object object) throws IOException {
    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases
    throw new JsonGenerationException(""No native support for writing embedded objects"", this);
}","public void test120128() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
    Short short0 = new Short((short) 255);
    try {
        writerBasedJsonGenerator0.writeEmbeddedObject(short0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No native support for writing embedded objects
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 * Method that can be called on backends that support passing opaque datatypes of
 * non-JSON formats
 *
 * @since 2.8
 */"
"@Override
public boolean canWriteTypeId() {
    return delegate.canWriteTypeId();
}","public void test121129() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(381);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-76), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    boolean boolean0 = filteringGeneratorDelegate0.canWriteTypeId();
    assertFalse(boolean0);
}",""
"@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","public void test121130() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(381);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-76), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    boolean boolean0 = filteringGeneratorDelegate0.canWriteTypeId();
    assertEquals(127, filteringGeneratorDelegate0.getHighestEscapedChar());
}",""
"public final void writeBooleanField(String fieldName, boolean value) throws IOException {
    writeFieldName(fieldName);
    writeBoolean(value);
}","public void test122131() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    AtomicInteger atomicInteger0 = new AtomicInteger((-1015));
    IOContext iOContext0 = new IOContext(bufferRecycler0, atomicInteger0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    try {
        uTF8JsonGenerator0.writeBooleanField(""XRAe>Ib=0>~-}OYfz5"", true);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}","/**
 *  Convenience method for outputting a field entry (""member"")
 *  that has a boolean value. Equivalent to:
 * <pre>
 *   writeFieldName(fieldName);
 *   writeBoolean(value);
 * </pre>
 */"
