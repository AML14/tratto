project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    double[] doubleArray0 = new double[1];
    filteringGeneratorDelegate0.writeArray(doubleArray0, 0, (-32));
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    filteringGeneratorDelegate0.writeStartObject();
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",0,
project,0,test0022,"public void test0022() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, """", true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    char[] charArray0 = new char[7];
    uTF8JsonGenerator0.writeRawValue(charArray0, 1, 0);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test0033,"public void test0033() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    uTF8JsonGenerator0.setCurrentValue((Object) null);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test0066,"public void test0066() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
    SerializedString serializedString0 = new SerializedString(""AUTO_CLOSE_TARGET"");
    writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
    assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar())"
project,0,test0077,"public void test0077() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    uTF8JsonGenerator0.writeNumber(bigInteger0);
    assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
}",0,
project,0,test0088,"public void test0088() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""27e F"", true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, mockFileOutputStream0);
    uTF8JsonGenerator0.writeNumber(""Invalid UTF-8 start byte 0x"");
    assertEquals(29, uTF8JsonGenerator0.getOutputBuffered());
}",0,
project,0,test0099,"public void test0099() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.writeNumber((float) 3);
    assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
}",0,
project,0,test01010,"public void test01010() throws Throwable {
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, true);
    SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
    filteringGeneratorDelegate0.writeRawValue((SerializableString) serializedString0);
    assertEquals("" "", serializedString0.getValue());
}",0,assertNotNull(serializedString0.getValue())
project,0,test01111,"public void test01111() throws Throwable {
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, true, true);
    filteringGeneratorDelegate0.writeNullField("""");
    assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
}",0,"assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures())"
project,0,test01212,"public void test01212() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    JsonGenerator jsonGenerator0 = jsonGeneratorDelegate0.useDefaultPrettyPrinter();
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test01313,"public void test01313() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    JsonGenerator jsonGenerator0 = jsonGeneratorDelegate0.setRootValueSeparator((SerializableString) null);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test01414,"public void test01414() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Double double0 = new Double(3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-21), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
    DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(""VALUE_STRING"");
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
    assertEquals(127, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test01515,"public void test01515() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(845.7);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
    MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(""9"");
    JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test01616,"public void test01616() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    filteringGeneratorDelegate0.writeNumber((long) 56319);
    uTF8JsonGenerator0.setHighestNonEscapedChar((-3));
    assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
}",0,
project,0,test01717,"public void test01717() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-3));
    assertTrue(jsonGenerator0.canOmitFields());
}",0,assertTrue(jsonGenerator0.canOmitFields())
project,0,test01818,"public void test01818() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test01819,"public void test01819() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setFeatureMask(918);
    assertEquals(127, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test01920,"public void test01920() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    JsonGenerator jsonGenerator0 = jsonGeneratorDelegate0.setFeatureMask(37);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test02021,"public void test02021() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test02122,"public void test02122() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1361, (ObjectCodec) null, mockPrintStream0);
    uTF8JsonGenerator0.isClosed();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test02223,"public void test02223() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringReader stringReader0 = new StringReader(""luS0%?8sAWJ`lX"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[9];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, true);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 10, true);
    uTF8JsonGenerator0.getOutputContext();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test02324,"public void test02324() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[1];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3267, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
    uTF8JsonGenerator0.getOutputBuffered();
    assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test02425,"public void test02425() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    filteringGeneratorDelegate0.getFeatureMask();
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",0,
project,0,test02526,"public void test02526() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",0,
project,0,test02527,"public void test02527() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    filteringGeneratorDelegate0.overrideStdFeatures((-1), (-1064));
    filteringGeneratorDelegate0.getFeatureMask();
    assertEquals(127, filteringGeneratorDelegate0.getHighestEscapedChar());
}",0,
project,0,test02628,"public void test02628() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
    filteringGeneratorDelegate0.getCurrentValue();
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",0,
project,0,test02729,"public void test02729() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.getCodec();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test02830,"public void test02830() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, true);
    uTF8JsonGenerator0.getCharacterEscapes();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test02931,"public void test02931() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, filterOutputStream0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test03032,"public void test03032() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(845.7);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    MockFile mockFile0 = new MockFile((String) null, ""') as character #"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[7];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-1), true);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(0, jsonGenerator0.getHighestEscapedChar());
}",0,
project,0,test03033,"public void test03033() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(845.7);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    MockFile mockFile0 = new MockFile((String) null, ""') as character #"");
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    byte[] byteArray0 = new byte[7];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-1), true);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
    assertEquals(3, jsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, jsonGenerator0.getFeatureMask())"
project,0,test03134,"public void test03134() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(0.0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
    DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0);
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, false);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
    filteringGeneratorDelegate0.configure(jsonGenerator_Feature0, true);
    assertEquals(4, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test03135,"public void test03135() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(0.0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
    DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0);
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, false);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
    filteringGeneratorDelegate0.configure(jsonGenerator_Feature0, true);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test03236,"public void test03236() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, byteArrayOutputStream0);
    try {
        uTF8JsonGenerator0.writeStringField("""", ""': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test03337,"public void test03337() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Double double0 = new Double(3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
    uTF8JsonGenerator0.writeNumber(0.0F);
    try {
        uTF8JsonGenerator0.writeStartObject();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedOutputStream"", e);
    }
}",1,
project,0,test03438,"public void test03438() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeStartArray((-3051));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test03539,"public void test03539() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeStartArray(256);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayOutputStream"", e);
    }
}",0,
project,0,test03640,"public void test03640() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    char[] charArray0 = new char[6];
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeRawValue(charArray0, 3390, (-675));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test03741,"public void test03741() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""Vg@3etg2{x%W3m<"");
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 128);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test03842,"public void test03842() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeObjectId((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test03943,"public void test03943() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeObjectFieldStart(""7lID5N6u):N!*r+"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",1,
project,0,test04044,"public void test04044() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
    AtomicBoolean atomicBoolean0 = new AtomicBoolean();
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeObjectField(""AUTO_CLOSE_JSON_CONTENT"", atomicBoolean0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}",0,
project,0,test04145,"public void test04145() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    BigDecimal bigDecimal0 = new BigDecimal(1);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeNumberField("""", bigDecimal0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",1,
project,0,test04246,"public void test04246() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeNumberField(""iV9+G2!3"", 0L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",1,
project,0,test04347,"public void test04347() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeNumberField(""No Base6Variant with name "", (-4488));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}",1,
project,0,test04448,"public void test04448() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeNumberField(""No native support for writing embedded objects"", 2.147483647E9);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",1,
project,0,test04549,"public void test04549() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeNumber((short) 425);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}",0,
project,0,test04650,"public void test04650() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeNumber((short) 290);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayOutputStream"", e);
    }
}",0,
project,0,test04751,"public void test04751() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeNumber(0L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}",0,
project,0,test04852,"public void test04852() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeNumber((double) 2149);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}",0,
project,0,test04953,"public void test04953() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeNullField(""LD_rm]'j%/#\""ZP"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",1,
project,0,test05155,"public void test05155() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeEndArray();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test05256,"public void test05256() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    StringWriter stringWriter0 = new StringWriter();
    AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
    IOContext iOContext0 = new IOContext(bufferRecycler0, atomicBoolean0, false);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
    try {
        writerBasedJsonGenerator0.writeEndArray();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current context not Array but root
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test05357,"public void test05357() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeBooleanField((String) null, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",1,
project,0,test05458,"public void test05458() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, true);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeBoolean(true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.UTF8JsonGenerator"", e);
    }
}",0,
project,0,test05559,"public void test05559() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 6, false);
    try {
        uTF8JsonGenerator0.writeBinaryField(""F\""o?E"", byteArrayBuilder0.NO_BYTES);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test05660,"public void test05660() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
    byte[] byteArray0 = new byte[1];
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeBinary(byteArray0, 0, 9);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test05761,"public void test05761() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeBinary(byteArrayBuilder0.NO_BYTES, (-1876), 0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test05862,"public void test05862() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
    byte[] byteArray0 = new byte[3];
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeBinary(byteArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}",0,
project,0,test05963,"public void test05963() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1554, 421);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) 97);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate"", e);
    }
}",0,
project,0,test06064,"public void test06064() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(845.7);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
    // Undeclared exception!
    try {
        writerBasedJsonGenerator0.writeBinary((InputStream) null, (-20));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.WriterBasedJsonGenerator"", e);
    }
}",0,
project,0,test06165,"public void test06165() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
    int[] intArray0 = new int[5];
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeArray(intArray0, 0, 1424);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid argument(s) (offset=0, length=1424) for input array of 5 element
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test06266,"public void test06266() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.setCurrentValue((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test06367,"public void test06367() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.setCharacterEscapes(jsonpCharacterEscapes0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test06468,"public void test06468() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.overrideStdFeatures(3050, 3050);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test06569,"public void test06569() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.isClosed();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test06670,"public void test06670() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.getSchema();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test06771,"public void test06771() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.getPrettyPrinter();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test06872,"public void test06872() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.getOutputTarget();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test06973,"public void test06973() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.getFeatureMask();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test07074,"public void test07074() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.getCurrentValue();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test07175,"public void test07175() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.getCodec();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test07276,"public void test07276() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.copyCurrentEvent((JsonParser) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test07377,"public void test07377() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.configure(jsonGenerator_Feature0, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test07478,"public void test07478() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.close();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",1,
project,0,test07579,"public void test07579() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, false);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.close();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test07680,"public void test07680() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 4, true);
    try {
        uTF8JsonGenerator0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedOutputStream"", e);
    }
}",0,
project,0,test07781,"public void test07781() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.canWriteObjectId();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test07882,"public void test07882() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.canWriteBinaryNatively();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test07983,"public void test07983() throws Throwable {
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, tokenFilter0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2274, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, false);
    // Undeclared exception!
    try {
        ((JsonGenerator) uTF8JsonGenerator0)._verifyOffsets(0, 0, 92);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid argument(s) (offset=0, length=92) for input array of 0 element
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test08084,"public void test08084() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""^m5qPD_X?3^lQb/y<"");
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
    double[] doubleArray0 = new double[2];
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeArray(doubleArray0, 56319, 6);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid argument(s) (offset=56319, length=6) for input array of 2 element
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test08185,"public void test08185() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Double double0 = new Double(3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-21), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
    try {
        uTF8JsonGenerator0.writeObjectRef(""VALUE_STRING"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No native support for writing Object Ids
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test08286,"public void test08286() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    BigDecimal bigDecimal0 = BigDecimal.TEN;
    IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, false);
    File file0 = MockFile.createTempFile("" cD"", "".|bU "");
    MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
    byte[] byteArray0 = new byte[1];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 881, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
    uTF8JsonGenerator0.getPrettyPrinter();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test08387,"public void test08387() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    try {
        uTF8JsonGenerator0.writeFieldId(1L);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test08488,"public void test08488() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
    AtomicBoolean atomicBoolean0 = new AtomicBoolean();
    filteringGeneratorDelegate0.writeObject(atomicBoolean0);
    assertEquals(5, filteringGeneratorDelegate0.getOutputBuffered());
}",0,"assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered())"
project,0,test08589,"public void test08589() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Double double0 = new Double(3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    byte[] byteArray0 = new byte[6];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
    try {
        uTF8JsonGenerator0.writeObject(bufferRecycler0.BYTE_READ_IO_BUFFER);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedOutputStream"", e);
    }
}",0,
project,0,test08690,"public void test08690() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    // Undeclared exception!
    try {
        filteringGeneratorDelegate0.writeObject(filteringGeneratorDelegate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate)
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test08791,"public void test08791() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1554, (ObjectCodec) null, byteArrayBuilder0);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
    int[] intArray0 = new int[3];
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeArray(intArray0, (-32), 1554);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid argument(s) (offset=-32, length=1554) for input array of 3 element
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test08892,"public void test08892() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    StringReader stringReader0 = new StringReader(""`w&w=_+Th$N`tp"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[9];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 57343, 56320, true);
    try {
        filteringGeneratorDelegate0.copyCurrentStructure(readerBasedJsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No current event to copy
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test08993,"public void test08993() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
    StringReader stringReader0 = new StringReader(""<'_$]%"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3011, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    try {
        writerBasedJsonGenerator0.copyCurrentEvent(readerBasedJsonParser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No current event to copy
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test09094,"public void test09094() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    double[] doubleArray0 = new double[1];
    filteringGeneratorDelegate0.writeArray(doubleArray0, 0, 0);
    assertEquals(2, filteringGeneratorDelegate0.getOutputBuffered());
}",0,"assertEquals(1, filteringGeneratorDelegate0.getOutputBuffered())"
project,0,test09195,"public void test09195() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, true);
    long[] longArray0 = new long[6];
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.writeArray(longArray0, 56320, (-1048));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid argument(s) (offset=56320, length=-1048) for input array of 6 element
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test09296,"public void test09296() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    int[] intArray0 = new int[1];
    uTF8JsonGenerator0.writeArray(intArray0, 20, (-3105));
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test09397,"public void test09397() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    jsonGeneratorDelegate0.configure(jsonGenerator_Feature0, true);
    assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
}",0,"assertEquals(0, uTF8JsonGenerator0.getFeatureMask())"
project,0,test09398,"public void test09398() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    jsonGeneratorDelegate0.configure(jsonGenerator_Feature0, true);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test09499,"public void test09499() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeStringField(""com.fasterxml.jackson.core.JsonGenerator$Feature"", ""com.fasterxml.jackson.core.JsonGenerator$Feature"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test095100,"public void test095100() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    boolean boolean0 = filteringGeneratorDelegate0.canOmitFields();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test095101,"public void test095101() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    boolean boolean0 = filteringGeneratorDelegate0.canOmitFields();
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",0,"assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar())"
project,0,test096102,"public void test096102() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    try {
        jsonGeneratorDelegate0.writeObjectFieldStart(""Current context not Array but "");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test097103,"public void test097103() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    StringWriter stringWriter0 = new StringWriter();
    AtomicLong atomicLong0 = new AtomicLong(0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1029, (ObjectCodec) null, stringWriter0);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, true);
    jsonGeneratorDelegate0.writeOmittedField(""AUTO_CLOSE_JSON_CONTENT"");
    assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
}",0,"assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar())"
project,0,test098104,"public void test098104() throws Throwable {
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
    byte[] byteArray0 = new byte[7];
    // Undeclared exception!
    try {
        jsonGeneratorDelegate0.writeBinaryField(""QUOTE_NON_NUMERIC_NUMBERS"", byteArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.util.JsonGeneratorDelegate"", e);
    }
}",0,
project,0,test099105,"public void test099105() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
    try {
        uTF8JsonGenerator0.writeNumberField(""{`8BDW3xr{$P#Bd,$"", (long) 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test100106,"public void test100106() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.overrideFormatFeatures(2, 3);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test101107,"public void test101107() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""!S% B#COev&\""<^q9"");
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) 10, false);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    boolean boolean0 = jsonGeneratorDelegate0.canUseSchema((FormatSchema) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test101108,"public void test101108() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""!S% B#COev&\""<^q9"");
    byte[] byteArray0 = new byte[9];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) 10, false);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    boolean boolean0 = jsonGeneratorDelegate0.canUseSchema((FormatSchema) null);
    assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
}",0,"assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar())"
project,0,test102109,"public void test102109() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1361, (ObjectCodec) null, mockPrintStream0);
    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
    try {
        jsonGeneratorDelegate0.writeObjectField(""O}'}="", ""O}'}="");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test103110,"public void test103110() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""W-n 4"");
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
    byte[] byteArray0 = new byte[2];
    uTF8JsonGenerator0.writeBinary(byteArray0);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test104111,"public void test104111() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
    try {
        uTF8JsonGenerator0.writeNullField("""");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test105112,"public void test105112() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
    uTF8JsonGenerator0.writeStartArray(2);
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test106113,"public void test106113() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
    filteringGeneratorDelegate0.writeBinary(byteArray0, 2, (-2238));
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",0,"assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar())"
project,0,test107114,"public void test107114() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter(0);
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2699, (ObjectCodec) null, stringWriter0);
    byte[] byteArray0 = new byte[3];
    // Undeclared exception!
    try {
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 1, 18);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test108115,"public void test108115() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    try {
        uTF8JsonGenerator0.writeNumberField(""STRICT_DUPLICATE_DETECTION"", 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test109116,"public void test109116() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    boolean boolean0 = filteringGeneratorDelegate0.canWriteBinaryNatively();
    assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
}",0,"assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar())"
project,0,test109117,"public void test109117() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    boolean boolean0 = filteringGeneratorDelegate0.canWriteBinaryNatively();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test110118,"public void test110118() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    try {
        filteringGeneratorDelegate0.writeNumberField(""`w&w=_+Th$N`tp"", 1.0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test111119,"public void test111119() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
    try {
        uTF8JsonGenerator0.writeNumberField(""Q$OInPz[|:#B#1.dwn"", 0.0F);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test112120,"public void test112120() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Short short0 = new Short((short) 128);
    IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
    uTF8JsonGenerator0.getSchema();
    assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar())"
project,0,test113121,"public void test113121() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringReader stringReader0 = new StringReader(""luS0%?8sAWJ`lX"");
    CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
    char[] charArray0 = new char[9];
    ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, true);
    ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 10, true);
    // Undeclared exception!
    try {
        uTF8JsonGenerator0.setSchema((FormatSchema) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test114122,"public void test114122() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    AtomicInteger atomicInteger0 = new AtomicInteger(0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, atomicInteger0, false);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3230, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
    try {
        uTF8JsonGenerator0.writeArrayFieldStart(""AUTO_CLOSE_JSON_CONTENT"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test115123,"public void test115123() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(845.7);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
    writerBasedJsonGenerator0.writeBinary((InputStream) null, 0);
    assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
}",0,"assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar())"
project,0,test116124,"public void test116124() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float((double) 3);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[0];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    try {
        uTF8JsonGenerator0.writeTypeId(bufferRecycler0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No native support for writing Type Ids
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test118126,"public void test118126() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, true);
    BigDecimal bigDecimal0 = new BigDecimal(57343);
    try {
        uTF8JsonGenerator0.writeNumberField(""null array"", bigDecimal0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test119127,"public void test119127() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    Float float0 = new Float(845.7);
    IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
    try {
        writerBasedJsonGenerator0.writeObjectId(jsonEncoding0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No native support for writing Object Ids
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",0,
project,0,test120128,"public void test120128() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    StringWriter stringWriter0 = new StringWriter();
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
    Short short0 = new Short((short) 255);
    try {
        writerBasedJsonGenerator0.writeEmbeddedObject(short0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No native support for writing embedded objects
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
project,0,test121129,"public void test121129() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(381);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-76), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    boolean boolean0 = filteringGeneratorDelegate0.canWriteTypeId();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test121130,"public void test121130() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(381);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-76), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
    boolean boolean0 = filteringGeneratorDelegate0.canWriteTypeId();
    assertEquals(127, filteringGeneratorDelegate0.getHighestEscapedChar());
}",0,"assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar())"
project,0,test122131,"public void test122131() throws Throwable {
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    AtomicInteger atomicInteger0 = new AtomicInteger((-1015));
    IOContext iOContext0 = new IOContext(bufferRecycler0, atomicInteger0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    byte[] byteArray0 = new byte[2];
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
    try {
        uTF8JsonGenerator0.writeBooleanField(""XRAe>Ib=0>~-}OYfz5"", true);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Can not write a field name, expecting a value
        //
        verifyException(""com.fasterxml.jackson.core.JsonGenerator"", e);
    }
}",1,
