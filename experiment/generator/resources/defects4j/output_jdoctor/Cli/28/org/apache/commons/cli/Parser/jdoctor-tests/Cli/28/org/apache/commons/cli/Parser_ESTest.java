/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 14 23:49:07 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Properties;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Parser_ESTest extends Parser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Options options0 = new Options();
        GnuParser gnuParser0 = new GnuParser();
        CommandLine commandLine0 = gnuParser0.parse(options0, (String[]) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        CommandLine commandLine0 = gnuParser0.parse(options0, (String[]) null, properties0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Option option0 = new Option("4", "4", true, "4");
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup1);
        gnuParser0.parse(options0, (String[]) null, true);
        ListIterator<OptionGroup> listIterator0 = (ListIterator<OptionGroup>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(listIterator0).hasNext();
        gnuParser0.processOption("4", listIterator0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Options options0 = new Options();
        Properties properties0 = new Properties();
        GnuParser gnuParser0 = new GnuParser();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "-";
        stringArray0[1] = "-";
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Options options0 = new Options();
        GnuParser gnuParser0 = new GnuParser();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "--";
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, false);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Options options0 = new Options();
        Properties properties0 = new Properties();
        GnuParser gnuParser0 = new GnuParser();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "-";
        stringArray0[1] = "-";
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, false);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "1";
        stringArray0[1] = "*";
        stringArray0[2] = "";
        stringArray0[3] = "--1";
        stringArray0[4] = "";
        stringArray0[5] = "";
        stringArray0[6] = "";
        gnuParser0.parse(options0, stringArray0, properties0, false);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "--1";
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        options0.addOption("1", true, "1");
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "--1";
        gnuParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Options options0 = new Options();
        Properties properties0 = new Properties();
        properties0.put("0:Ki)V)*E`Gj;P %iG", options0);
        GnuParser gnuParser0 = new GnuParser();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "0:Ki)V)*E`Gj;P %iG";
        stringArray0[1] = "--";
        gnuParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Option option0 = new Option("4", true, "4");
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        option0.setRequired(true);
        options0.addOption(option0);
        gnuParser0.parse(options0, (String[]) null, true);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        options0.addOption("1", true, "1");
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "1";
        stringArray0[1] = "*";
        stringArray0[2] = "";
        stringArray0[3] = "--1";
        stringArray0[4] = "";
        stringArray0[5] = "";
        stringArray0[6] = "";
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, false);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Option option0 = new Option("", "", true, "");
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Options options1 = options0.addOption(option0);
        options0.addOption("1", true, "1");
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "1";
        stringArray0[1] = "*";
        stringArray0[2] = "";
        stringArray0[3] = "--1";
        stringArray0[4] = "";
        stringArray0[5] = "";
        stringArray0[6] = "";
        CommandLine commandLine0 = gnuParser0.parse(options1, stringArray0, properties0, false);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        options0.addOption("1", true, "1");
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[5];
        stringArray0[0] = "*";
        stringArray0[1] = "1";
        stringArray0[2] = "--1";
        stringArray0[3] = "--1";
        stringArray0[4] = "--1";
        gnuParser0.parse(options0, stringArray0, properties0, false);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Option option0 = new Option((String) null, false, "true");
        LinkedList<String> linkedList0 = new LinkedList<String>();
        ListIterator<String> listIterator0 = linkedList0.listIterator();
        option0.setOptionalArg(true);
        basicParser0.processArgs(option0, listIterator0);
        listIterator0.hasPrevious();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Option option0 = new Option("", "", false, "");
        ListIterator<OptionGroup> listIterator0 = (ListIterator<OptionGroup>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Options options1 = options0.addOption(option0);
        option0.setRequired(true);
        String[] stringArray0 = new String[0];
        gnuParser0.parse(options1, stringArray0, false);
        gnuParser0.processOption("", listIterator0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Option option0 = new Option("4", "4", true, "4");
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        gnuParser0.parse(options0, (String[]) null, true);
        ListIterator<OptionGroup> listIterator0 = (ListIterator<OptionGroup>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn(optionGroup1).when(listIterator0).next();
        gnuParser0.processOption("4", listIterator0);
    }
}
