/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 14 22:58:06 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ListIterator;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Parser_ESTest extends Parser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[0];
        Properties properties0 = new Properties();
        CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, properties0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        CommandLine commandLine0 = gnuParser0.parse(options0, (String[]) null, false);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Options options0 = new Options();
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "-ax option from/Whis group has already been selected: '";
        PosixParser posixParser0 = new PosixParser();
        CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Options options0 = new Options();
        PosixParser posixParser0 = new PosixParser();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "-";
        stringArray0[1] = "-";
        CommandLine commandLine0 = posixParser0.parse(options0, stringArray0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "-";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Options options0 = new Options();
        PosixParser posixParser0 = new PosixParser();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "JJU";
        stringArray0[1] = "F;5S?u{LwJNOM(\"0";
        stringArray0[2] = "F;5S?u{LwJNOM(\"0";
        stringArray0[3] = "F;5S?u{LwJNOM(\"0";
        stringArray0[4] = "-JJU";
        stringArray0[5] = "F;5S?u{LwJNOM(\"0";
        stringArray0[6] = "F;5S?u{LwJNOM(\"0";
        posixParser0.parse(options0, stringArray0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Options options0 = new Options();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "-JJU";
        GnuParser gnuParser0 = new GnuParser();
        Properties properties0 = new Properties();
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Options options0 = new Options();
        options0.addOption("JJU", true, "JJU");
        String[] stringArray0 = new String[3];
        stringArray0[0] = "-JJU";
        stringArray0[1] = "JJU";
        stringArray0[2] = "-JJU";
        GnuParser gnuParser0 = new GnuParser();
        Properties properties0 = new Properties();
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "X&R:]";
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        properties0.put("K&y", options0);
        gnuParser0.parse(options0, (String[]) null, properties0, true);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(true);
        Options options1 = options0.addOptionGroup(optionGroup0);
        GnuParser gnuParser0 = new GnuParser();
        Properties properties0 = new Properties();
        gnuParser0.parse(options1, (String[]) null, properties0, true);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(true);
        Options options1 = options0.addOptionGroup(optionGroup0);
        options1.addOptionGroup(optionGroup0);
        GnuParser gnuParser0 = new GnuParser();
        Properties properties0 = new Properties();
        gnuParser0.parse(options1, (String[]) null, properties0, true);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Options options0 = new Options();
        options0.addOption("JJU", true, "JJU");
        PosixParser posixParser0 = new PosixParser();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "JJU";
        stringArray0[1] = "F;5S?u{LwJNOM(\"0";
        stringArray0[2] = "F;5S?u{LwJNOM(\"0";
        stringArray0[3] = "F;5S?u{LwJNOM(\"0";
        stringArray0[4] = "-JJU";
        stringArray0[5] = "F;5S?u{LwJNOM(\"0";
        stringArray0[6] = "F;5S?u{LwJNOM(\"0";
        CommandLine commandLine0 = posixParser0.parse(options0, stringArray0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Options options0 = new Options();
        Option option0 = new Option("CJJU", "CJJU");
        PosixParser posixParser0 = new PosixParser();
        posixParser0.parse(options0, (String[]) null);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("CJJU").when(listIterator0).next();
        doReturn("CJJU").when(listIterator0).previous();
        posixParser0.processArgs(option0, listIterator0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Options options0 = new Options();
        Option option0 = new Option("CJJU", "CJJU");
        PosixParser posixParser0 = new PosixParser();
        option0.setOptionalArg(true);
        posixParser0.parse(options0, (String[]) null);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("CJJU").when(listIterator0).next();
        doReturn("CJJU").when(listIterator0).previous();
        posixParser0.processArgs(option0, listIterator0);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("JJU", false, "F;5S?u{LwJNOM(\"0");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        PosixParser posixParser0 = new PosixParser();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "JJU";
        stringArray0[1] = "F;5S?u{LwJNOM(\"0";
        stringArray0[2] = "F;5S?u{LwJNOM(\"0";
        stringArray0[3] = "F;5S?u{LwJNOM(\"0";
        stringArray0[4] = "-JJU";
        stringArray0[5] = "F;5S?u{LwJNOM(\"0";
        stringArray0[6] = "F;5S?u{LwJNOM(\"0";
        CommandLine commandLine0 = posixParser0.parse(options1, stringArray0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("JJU", false, "F;5S?u{LwJNOM(\"0");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        PosixParser posixParser0 = new PosixParser();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "JJU";
        stringArray0[1] = "F;5S?u{LwJNOM(\"0";
        optionGroup1.setRequired(true);
        stringArray0[2] = "F;5S?u{LwJNOM(\"0";
        stringArray0[3] = "F;5S?u{LwJNOM(\"0";
        stringArray0[4] = "-JJU";
        stringArray0[5] = "F;5S?u{LwJNOM(\"0";
        stringArray0[6] = "F;5S?u{LwJNOM(\"0";
        CommandLine commandLine0 = posixParser0.parse(options1, stringArray0);
    }
}
