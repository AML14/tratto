/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 22:26:49 GMT 2023
 */
package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MultiKey<String> multiKey0 = new MultiKey<String>("<+}qzMrYq", "<+}qzMrYq", "<+}qzMrYq");
        MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
        multiKeyArray0[0] = multiKey0;
        MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
        MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
        boolean boolean0 = multiKey1.equals(multiKey2);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        String[] stringArray0 = new String[0];
        MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
        int int0 = multiKey0.size();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Object[] objectArray0 = new Object[8];
        MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
        Object object0 = multiKey0.getKey(0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        MultiKey<String> multiKey0 = new MultiKey<String>("<+}qzMrYq", "<+}qzMrYq", "<+}qzMrYq");
        String string0 = multiKey0.getKey(0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        String[] stringArray0 = new String[0];
        MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
        String[] stringArray1 = multiKey0.getKeys();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        MultiKey<MultiKey<Object>> multiKey0 = null;
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MultiKey<Object> multiKey0 = null;
        multiKey0 = new MultiKey<Object>((Object[]) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Integer integer0 = new Integer(595);
        MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
        int int0 = multiKey0.size();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Integer[] integerArray0 = new Integer[9];
        int int0 = 0;
        MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
        MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, int0, integerArray0[2]);
        multiKey1.getKey((-4358));
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Integer integer0 = new Integer(595);
        MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
        MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
        multiKey1.hashCode();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        MultiKey<String> multiKey0 = new MultiKey<String>("<+}qzMrYq", "<+}qzMrYq", "<+}qzMrYq");
        String string0 = multiKey0.toString();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Integer integer0 = new Integer(595);
        MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
        Object[] objectArray0 = multiKey0.getKeys();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Integer[] integerArray0 = new Integer[9];
        MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
        boolean boolean0 = multiKey0.equals(integerArray0[3]);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Integer[] integerArray0 = new Integer[9];
        Integer integer0 = new Integer(0);
        MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0[4], integerArray0[2], integerArray0[7], integer0);
        multiKey0.size();
    }
}
