/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 05 18:16:32 GMT 2023
 */
package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import javax.xml.namespace.QName;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.codehaus.stax2.util.StreamWriterDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ToXmlGenerator_ESTest extends ToXmlGenerator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1898, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0._releaseBuffers();
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "Underlying Stax XMLStreamWriter (of type ", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeNumber((BigDecimal) null);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1437), 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.inRoot();
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(">");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ">", writerConfig0);
        StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 698, objectMapper0, streamWriterDelegate0);
        toXmlGenerator0.writeRaw('Z');
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_LEMENT without opeR START_E&EM:NT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_LEMENT without opeR START_E&EM:NT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.setNextIsCData(true);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(".>`B'");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ".>`B'", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeStringField(".>`B'", ".>`B'");
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffxTransfomer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffxTransfomer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.setNextIsUnwrapped(true);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("JsonInclude.Value(value=");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JsonInclude.Value(value=", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeUTF8String((byte[]) null, (-1043), 38);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffixTransformer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeObject(toXmlGenerator0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0.writeRawValue((SerializableString) null);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("m");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "m", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, nonNsStreamWriter0);
        ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator) toXmlGenerator0.useDefaultPrettyPrinter();
        QName qName0 = new QName("m", "m", "m");
        toXmlGenerator1.startWrappedValue(qName0, qName0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
        toXmlGenerator0.writeNumber(bigDecimal0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("You need to upgrade to using compliant Stax implementation like Woodstox or Aalto");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "You need to upgrade to using compliant Stax implementation like Woodstox or Aalto", writerConfig0);
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
        iOContext0.setEncoding(jsonEncoding0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("You need to upgrade to using compliant Stax implementation like Woodstox or Aalto");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeObject(iOContext0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7r~{()clj!");
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7r~{()clj!");
        BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "JSON", false, mockFileOutputStream0, (-539));
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "7r~{()clj!", writerConfig0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, nonNsStreamWriter0, false);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
        boolean boolean0 = toXmlGenerator0.canWriteFormattedNumbers();
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7r~{()clj!");
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7r~{()clj!");
        BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "JSON", false, mockFileOutputStream0, (-539));
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "7r~{()clj!", writerConfig0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, nonNsStreamWriter0, false);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
        boolean boolean0 = toXmlGenerator0.canWriteFormattedNumbers();
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected character ");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Unexpected character ", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeRawUTF8String((byte[]) null, 382, (-128));
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0.writeNumber("<OV'C\"N");
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        int int0 = ToXmlGenerator.Feature.collectDefaults();
    }

    @Test(timeout = 4000)
    public void test01617() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0.initGenerator();
        toXmlGenerator0.initGenerator();
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test01718() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(">");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ">", writerConfig0);
        StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 698, objectMapper0, streamWriterDelegate0);
        toXmlGenerator0.initGenerator();
        nonNsStreamWriter0.getXmlVersion();
    }

    @Test(timeout = 4000)
    public void test01819() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(">");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ">", writerConfig0);
        StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 698, objectMapper0, streamWriterDelegate0);
        toXmlGenerator0.useDefaultPrettyPrinter();
        toXmlGenerator0.initGenerator();
        nonNsStreamWriter0.getXmlVersion();
    }

    @Test(timeout = 4000)
    public void test01920() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[\"reAndSuffixTrasfomer(M");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[\"reAndSuffixTrasfomer(M", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.useDefaultPrettyPrinter();
        toXmlGenerator0.initGenerator();
        nonNsStreamWriter0.getXmlVersion();
    }

    @Test(timeout = 4000)
    public void test01921() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[\"reAndSuffixTrasfomer(M");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[\"reAndSuffixTrasfomer(M", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.useDefaultPrettyPrinter();
        toXmlGenerator0.initGenerator();
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test02022() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, repairingNsStreamWriter0);
        JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter((PrettyPrinter) null);
        jsonGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test02123() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, repairingNsStreamWriter0);
        JsonGenerator jsonGenerator0 = toXmlGenerator0.overrideFormatFeatures(2, 2);
        jsonGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test02224() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuff5TransfSmer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuff5TransfSmer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.overrideFormatFeatures(1021, (-234));
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test02325() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-701), 0, objectMapper0, nonNsStreamWriter0);
        ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
        boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test02326() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-701), 0, objectMapper0, nonNsStreamWriter0);
        ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
        boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test02427() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7r~{()clj!");
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7r~{()clj!");
        BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "JSON", false, mockFileOutputStream0, (-539));
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "7r~{()clj!", writerConfig0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, nonNsStreamWriter0, false);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
        ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
        boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test02428() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7r~{()clj!");
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7r~{()clj!");
        BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "JSON", false, mockFileOutputStream0, (-539));
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "7r~{()clj!", writerConfig0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, nonNsStreamWriter0, false);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
        ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
        boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test02529() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("writeRaw");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "writeRaw", writerConfig0);
        ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectReader0, nonNsStreamWriter0);
        ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
        toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test02630() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffixranformer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
        toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test02731() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("[PreAndSuffixTransformer('");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffixTransformer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("a\"HB4OP$'");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
    }

    @Test(timeout = 4000)
    public void test02732() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("[PreAndSuffixTransformer('");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffixTransformer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("a\"HB4OP$'");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test02833() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[\"eASuffixTrasfomer(");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[\"eASuffixTrasfomer(", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.startWrappedValue((QName) null, (QName) null);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test02934() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "Q", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0.finishWrappedValue((QName) null, (QName) null);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test03035() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2897, 3, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("", "", "");
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
    }

    @Test(timeout = 4000)
    public void test03136() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0.useDefaultPrettyPrinter();
        QName qName0 = new QName("", "");
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
    }

    @Test(timeout = 4000)
    public void test03237() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffixTransformer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 12, 3, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixTransformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeStartObject();
        toXmlGenerator0.writeRepeatedFieldName();
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test03338() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffixTransformer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 12, 3, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixTransformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeRepeatedFieldName();
    }

    @Test(timeout = 4000)
    public void test03439() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ElEM:NT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ElEM:NT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = QName.valueOf("Can not write END_ELEMENT without open START_ElEM:NT");
        toXmlGenerator0.useDefaultPrettyPrinter();
        boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
    }

    @Test(timeout = 4000)
    public void test03440() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ElEM:NT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ElEM:NT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = QName.valueOf("Can not write END_ELEMENT without open START_ElEM:NT");
        toXmlGenerator0.useDefaultPrettyPrinter();
        boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
        toXmlGenerator0.writeObject(nonNsStreamWriter0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test03541() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffixranformer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeEndArray();
    }

    @Test(timeout = 4000)
    public void test03642() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "[PreAndSuffixTransformer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeEndObject();
    }

    @Test(timeout = 4000)
    public void test03743() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("m");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "m", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, nonNsStreamWriter0);
        ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator) toXmlGenerator0.useDefaultPrettyPrinter();
        toXmlGenerator1.setNextIsAttribute(true);
        QName qName0 = new QName("m", "m", "m");
        toXmlGenerator1.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeObject(writerConfig0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test03744() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("m");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "m", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, nonNsStreamWriter0);
        ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator) toXmlGenerator0.useDefaultPrettyPrinter();
        toXmlGenerator1.setNextIsAttribute(true);
        QName qName0 = new QName("m", "m", "m");
        toXmlGenerator1.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeObject(writerConfig0);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test03845() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_LEMENT without opeR START_E&EM:NT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_LEMENT without opeR START_E&EM:NT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeObject(writerConfig0);
    }

    @Test(timeout = 4000)
    public void test03946() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "[PreAndSuffixTransformer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0._handleEndObject();
    }

    @Test(timeout = 4000)
    public void test04047() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
        toXmlGenerator0._nextIsUnwrapped = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeObject("Can not write END_ELEMENT without open START_ELEMENT");
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test04148() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0._nextIsCData = true;
        toXmlGenerator0.writeObject(nonNsStreamWriter0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test04249() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        char[] charArray0 = new char[9];
        toXmlGenerator0.writeString(charArray0, 1, 0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test04350() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffxTransfomer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffxTransfomer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeString((char[]) null, 2, 1);
    }

    @Test(timeout = 4000)
    public void test04451() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(".>`B'");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ".>`B'", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName(".>`B'", ".>`B'");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0._nextIsAttribute = true;
        toXmlGenerator0.writeString((char[]) null, 1, 3);
    }

    @Test(timeout = 4000)
    public void test04552() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
        toXmlGenerator0._nextIsUnwrapped = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        char[] charArray0 = new char[9];
        toXmlGenerator0.writeString(charArray0, 1, 0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test04653() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
        toXmlGenerator0._nextIsUnwrapped = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        char[] charArray0 = new char[9];
        toXmlGenerator0._nextIsCData = true;
        toXmlGenerator0.writeString(charArray0, 1, 0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test04754() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_E&EM:NT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_E&EM:NT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = QName.valueOf("Can not write END_ELEMENT without open START_E&EM:NT");
        JsonGenerator jsonGenerator0 = toXmlGenerator0.useDefaultPrettyPrinter();
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        jsonGenerator0.writeString((char[]) null, (-3424), 3);
    }

    @Test(timeout = 4000)
    public void test04855() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "^3b5Cj/", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("|duy-68?A");
        toXmlGenerator0._nextIsCData = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        char[] charArray0 = new char[2];
        toXmlGenerator0.writeString(charArray0, 56319, 0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test04956() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Xwu#g'HA", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeRawValue("Xwu#g'HA");
    }

    @Test(timeout = 4000)
    public void test05057() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "C{NF$-", writerConfig0);
        StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1373, 0, objectMapper0, streamWriterDelegate0);
        toXmlGenerator0.writeRawValue("Cvf%/Ueh1'('#)@");
    }

    @Test(timeout = 4000)
    public void test05158() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Xwu#g'HA", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixranformer('", "Xwu#g'HA", "[PreAndSuffixranformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeRawValue("Xwu#g'HA");
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test05259() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Xwu#g'HA", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixranformer('", "Xwu#g'HA", "[PreAndSuffixranformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.setNextIsAttribute(true);
        toXmlGenerator0.writeRawValue("Xwu#g'HA");
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test05360() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("writeRaw");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "writeRaw", writerConfig0);
        ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectReader0, nonNsStreamWriter0);
        toXmlGenerator0.writeRawValue("", 2, 3);
    }

    @Test(timeout = 4000)
    public void test05461() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "T/]lUXv_Pw", writerConfig0);
        StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4900, 3, objectMapper0, streamWriterDelegate0);
        toXmlGenerator0.writeRawValue("", 56319, 3);
    }

    @Test(timeout = 4000)
    public void test05562() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("writeRaw");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "writeRaw", writerConfig0);
        ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectReader0, nonNsStreamWriter0);
        QName qName0 = new QName("writeRaw");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeRawValue("", 2, 3);
    }

    @Test(timeout = 4000)
    public void test05663() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("writeRaw");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "writeRaw", writerConfig0);
        ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectReader0, nonNsStreamWriter0);
        QName qName0 = new QName("writeRaw");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.setNextIsAttribute(true);
        toXmlGenerator0.writeRawValue("", 2, 3);
    }

    @Test(timeout = 4000)
    public void test05764() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Xwu#g'HA", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeRawValue((char[]) null, 1, (int) (byte) 64);
    }

    @Test(timeout = 4000)
    public void test05865() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffxTransfomer('");
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, ",D,'", writerConfig0);
        StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 8000, 3, objectMapper0, streamWriterDelegate0);
        toXmlGenerator0.writeRawValue((char[]) null, 2, 180);
    }

    @Test(timeout = 4000)
    public void test05966() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Xwu#g'HA", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixranformer('", "Xwu#g'HA", "[PreAndSuffixranformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeRawValue((char[]) null, 1, (int) (byte) 64);
    }

    @Test(timeout = 4000)
    public void test06067() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Xwu#g'HA", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixranformer('", "Xwu#g'HA", "[PreAndSuffixranformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.setNextIsAttribute(true);
        toXmlGenerator0.writeRawValue((char[]) null, 1, (int) (byte) 64);
    }

    @Test(timeout = 4000)
    public void test06168() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "S|H3;f+@@e|NUEJibj", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeRaw("S|H3;f+@@e|NUEJibj", 0, 1);
    }

    @Test(timeout = 4000)
    public void test06269() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        SimpleModule simpleModule0 = new SimpleModule();
        IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(pipedOutputStream0, writerConfig0, true);
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, streamWriterDelegate0);
        toXmlGenerator0.writeRaw("]5;F`o(l_AE'+*<9eU", 0, 2);
    }

    @Test(timeout = 4000)
    public void test06370() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        SimpleModule simpleModule0 = new SimpleModule();
        IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(pipedOutputStream0, writerConfig0, true);
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, streamWriterDelegate0);
        char[] charArray0 = new char[1];
        toXmlGenerator0.writeRaw(charArray0, 56319, 56320);
    }

    @Test(timeout = 4000)
    public void test06471() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(">C&'");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ">C&'", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        byte[] byteArray0 = new byte[0];
        toXmlGenerator0.writeBinary(byteArray0, 57343, 0);
    }

    @Test(timeout = 4000)
    public void test06572() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0.writeBinary((byte[]) null, 1897, 0);
    }

    @Test(timeout = 4000)
    public void test06673() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(">C&'");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ">C&'", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName(">C&'", ">C&'");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        byte[] byteArray0 = new byte[0];
        toXmlGenerator0.writeBinary(byteArray0, 57343, 0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test06774() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Xwu#g'HA", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixranformer('", "Xwu#g'HA", "[PreAndSuffixranformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.setNextIsAttribute(true);
        byte[] byteArray0 = new byte[3];
        toXmlGenerator0.writeBinary(byteArray0, 0, 3);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test06875() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(">C&'");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ">C&'", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName(">C&'", ">C&'");
        toXmlGenerator0._nextIsUnwrapped = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        byte[] byteArray0 = new byte[0];
        toXmlGenerator0.writeBinary(byteArray0, 57343, 0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test06976() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(3);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(charArrayWriter0, writerConfig0, "[PreAndSuff5TrasfSmer('", false, byteArrayBuilder0, 2);
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "[PreAndSuff5TrasfSmer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0.useDefaultPrettyPrinter();
        QName qName0 = new QName("[PreAndSuff5TrasfSmer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeObject(byteArrayBuilder0);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test07077() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Xwu#g'HA", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixranformer('", "Xwu#g'HA", "[PreAndSuffixranformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.setNextIsAttribute(true);
        byte[] byteArray0 = new byte[2];
        toXmlGenerator0.writeBinary(byteArray0, 0, 3);
    }

    @Test(timeout = 4000)
    public void test07178() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffixranformer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixranformer('", "[PreAndSuffixranformer('", "[PreAndSuffixranformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.setNextIsAttribute(true);
        byte[] byteArray0 = new byte[4];
        toXmlGenerator0.writeBinary(byteArray0, (-361), (int) (byte) 0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test07279() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, ",@R^:V702P=>zRt+", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0.writeBoolean(true);
    }

    @Test(timeout = 4000)
    public void test07380() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("[PreAndSuffixTrasfomer('", "[PreAndSuffixTrasfomer('");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffixTrasfomer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixTrasfomer('", "[PreAndSuffixTrasfomer('", "[PreAndSuffixTrasfomer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0._nextIsAttribute = true;
        toXmlGenerator0.writeBoolean(false);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test07481() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEENTwithout openSTART_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEENTwithout openSTART_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("Can not write END_ELEENTwithout openSTART_ELEMENT", "Can not write END_ELEENTwithout openSTART_ELEMENT", "Can not write END_ELEENTwithout openSTART_ELEMENT");
        toXmlGenerator0._nextIsUnwrapped = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeObject(iOContext0);
    }

    @Test(timeout = 4000)
    public void test07582() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_LEMENT without opeR START_E&EM:NT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_LEMENT without opeR START_E&EM:NT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = QName.valueOf("Can not write END_LEMENT without opeR START_E&EM:NT");
        ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator) toXmlGenerator0.useDefaultPrettyPrinter();
        toXmlGenerator1.startWrappedValue(qName0, qName0);
        toXmlGenerator1.writeObject(iOContext0);
    }

    @Test(timeout = 4000)
    public void test07683() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEENTwithout openSTART_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEENTwithout openSTART_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("Can not write END_ELEENTwithout openSTART_ELEMENT", "Can not write END_ELEENTwithout openSTART_ELEMENT", "Can not write END_ELEENTwithout openSTART_ELEMENT");
        toXmlGenerator0._nextIsUnwrapped = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeObject(writerConfig0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test07784() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffxTransfomer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffxTransfomer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeNumber(1);
    }

    @Test(timeout = 4000)
    public void test07885() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
        toXmlGenerator0._nextIsUnwrapped = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeObject(asciiXmlWriter0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test07986() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, ",@R^2:V702P=>@3t+", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0.writeNumber((long) 1);
    }

    @Test(timeout = 4000)
    public void test08087() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Xwu#g'HA", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixranformer('", "Xwu#g'HA", "[PreAndSuffixranformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.setNextIsAttribute(true);
        toXmlGenerator0.writeNumber((long) 3);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test08188() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(">C&'");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ">C&'", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName(">C&'", ">C&'");
        toXmlGenerator0._nextIsUnwrapped = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeNumber((long) 0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test08289() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockFile mockFile0 = new MockFile("Failed to setValue() for field ", "Failed to setValue() for field ");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Failed to setValue() for field ", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, nonNsStreamWriter0);
        QName qName0 = QName.valueOf("Failed to setValue() for field ");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeNumber((double) 56320);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test08390() throws Throwable {
        StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56319, (-1328), (ObjectCodec) null, streamWriter2Delegate0);
        toXmlGenerator0.writeNumber((double) 56319);
    }

    @Test(timeout = 4000)
    public void test08491() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Xwu#g'HA", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixranformer('", "Xwu#g'HA", "[PreAndSuffixranformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.setNextIsAttribute(true);
        toXmlGenerator0.writeNumber((double) (byte) 64);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test08592() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(">C&'");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ">C&'", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName(">C&'", ">C&'");
        toXmlGenerator0._nextIsUnwrapped = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeNumber(0.0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test08693() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockFile mockFile0 = new MockFile("Failed to setValue() for field ", "Failed to setValue() for field ");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Failed to setValue() for field ", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.useDefaultPrettyPrinter();
        QName qName0 = QName.valueOf("Failed to setValue() for field ");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeNumber((double) 56320);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test08794() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(">C&'");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ">C&'", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName(">C&'", ">C&'");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeNumber((float) 56320);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test08895() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0.writeNumber((float) 0);
    }

    @Test(timeout = 4000)
    public void test08996() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(".>`B'");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ".>`B'", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = QName.valueOf(".>`B'");
        toXmlGenerator0.setNextIsAttribute(true);
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeNumber((float) 0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test09097() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream(">C&'");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ">C&'", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName(">C&'", ">C&'");
        toXmlGenerator0._nextIsUnwrapped = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeNumber((float) 56320);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test09198() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockFile mockFile0 = new MockFile("[PreAndSffixTrdnsormer'", "[PreAndSffixTrdnsormer'");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSffixTrdnsormer'", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, nonNsStreamWriter0);
        ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator) toXmlGenerator0.useDefaultPrettyPrinter();
        QName qName0 = QName.valueOf("[PreAndSffixTrdnsormer'");
        toXmlGenerator1.startWrappedValue(qName0, qName0);
        toXmlGenerator1.writeNumber((float) 55296);
        toXmlGenerator1.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test09299() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        toXmlGenerator0.writeNumber(bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test093100() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        toXmlGenerator0.writeNumber(bigDecimal0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test094101() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("[PreAndSuffixTrasfomer('", "[PreAndSuffixTrasfomer('");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffixTrasfomer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixTrasfomer('", "[PreAndSuffixTrasfomer('", "[PreAndSuffixTrasfomer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0._nextIsAttribute = true;
        BigDecimal bigDecimal0 = new BigDecimal(56320);
        toXmlGenerator0.writeNumber(bigDecimal0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test095102() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2897, 3, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("", "", "");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.setNextIsAttribute(true);
        BigDecimal bigDecimal0 = new BigDecimal(2286L);
        toXmlGenerator0.writeNumber(bigDecimal0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test096103() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEME>T withot ope START_E1EMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEME>T withot ope START_E1EMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = QName.valueOf("Can not write END_ELEME>T withot ope START_E1EMENT");
        toXmlGenerator0._nextIsUnwrapped = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        toXmlGenerator0.writeNumber(bigDecimal0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test097104() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[\"eAndSuffixTrasfomer(");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[\"eAndSuffixTrasfomer(", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3022, 0, objectMapper0, nonNsStreamWriter0);
        QName qName0 = QName.valueOf("[\"eAndSuffixTrasfomer(");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        toXmlGenerator0.writeNumber(bigDecimal0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test098105() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        BigInteger bigInteger0 = BigInteger.ONE;
        toXmlGenerator0.writeNumber(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test099106() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffxTransfomer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[PreAndSuffxTransfomer('", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper0, nonNsStreamWriter0);
        toXmlGenerator0.writeNumber((BigInteger) null);
    }

    @Test(timeout = 4000)
    public void test100107() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        BigInteger bigInteger0 = BigInteger.ONE;
        toXmlGenerator0.writeNumber(bigInteger0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test101108() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[PreAndSuffixranformer('");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Xwu#g'HA", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("[PreAndSuffixranformer('", "Xwu#g'HA", "[PreAndSuffixranformer('");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.setNextIsAttribute(true);
        BigInteger bigInteger0 = BigInteger.ONE;
        toXmlGenerator0.writeNumber(bigInteger0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test102109() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEMENT without open START_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
        toXmlGenerator0._nextIsUnwrapped = true;
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        BigInteger bigInteger0 = BigInteger.ONE;
        toXmlGenerator0.writeNumber(bigInteger0);
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test103110() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockFile mockFile0 = new MockFile("Failed to setValue() for field ", "Failed to setValue() for field ");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Failed to setValue() for field ", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, nonNsStreamWriter0);
        JsonGenerator jsonGenerator0 = toXmlGenerator0.useDefaultPrettyPrinter();
        QName qName0 = QName.valueOf("Failed to setValue() for field ");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        BigInteger bigInteger0 = BigInteger.ONE;
        jsonGenerator0.writeNumber(bigInteger0);
        jsonGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test104111() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEME>T withot ope START_E1EMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEME>T withot ope START_E1EMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = QName.valueOf("Can not write END_ELEME>T withot ope START_E1EMENT");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeStartObject((Object) objectMapper0);
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        toXmlGenerator0.writeNumber(bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test105112() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write END_ELEENTwithout openSTART_ELEMENT");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not write END_ELEENTwithout openSTART_ELEMENT", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 965, 2, objectMapper0, nonNsStreamWriter0);
        QName qName0 = new QName("Can not write END_ELEENTwithout openSTART_ELEMENT", "Can not write END_ELEENTwithout openSTART_ELEMENT", "Can not write END_ELEENTwithout openSTART_ELEMENT");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeObject("Can not write END_ELEENTwithout openSTART_ELEMENT");
        toXmlGenerator0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test106113() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "E~d", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test107114() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, repairingNsStreamWriter0);
        toXmlGenerator0.writeStartArray(2);
        toXmlGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test108115() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
        MockPrintStream mockPrintStream0 = new MockPrintStream("[\"reAndSuffixTrasfomerM");
        AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
        NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "[\"reAndSuffixTrasfomerM", writerConfig0);
        ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
        QName qName0 = QName.valueOf("[\"reAndSuffixTrasfomerM");
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        toXmlGenerator0.writeStartObject();
        toXmlGenerator0.close();
        toXmlGenerator0.inRoot();
    }
}
