/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 17:07:59 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
        cSVFormat1.validate();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
        StringReader stringReader0 = new StringReader(" SurroundingSpaces:ignored");
        cSVFormat2.parse(stringReader0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
        StringReader stringReader0 = new StringReader(" SurroundingSpaces:ignored");
        cSVFormat2.parse(stringReader0);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
        StringReader stringReader0 = new StringReader(" SurroundingSpaces:ignored");
        cSVFormat2.parse(stringReader0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test0015() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
        StringReader stringReader0 = new StringReader(" SurroundingSpaces:ignored");
        cSVFormat2.parse(stringReader0);
        cSVFormat2.getEscape();
    }

    @Test(timeout = 4000)
    public void test0016() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
        StringReader stringReader0 = new StringReader(" SurroundingSpaces:ignored");
        cSVFormat2.parse(stringReader0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test0017() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
        StringReader stringReader0 = new StringReader(" SurroundingSpaces:ignored");
        cSVFormat2.parse(stringReader0);
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test0018() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
        StringReader stringReader0 = new StringReader(" SurroundingSpaces:ignored");
        cSVFormat2.parse(stringReader0);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
        StringReader stringReader0 = new StringReader(" SurroundingSpaces:ignored");
        cSVFormat2.parse(stringReader0);
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test00210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test00211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test00213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test00217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test00319() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        cSVFormat0.MYSQL.validate();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00420() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test00421() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test00422() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test00423() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00424() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00425() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00426() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00427() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00528() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("C<!Ss");
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00529() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("C<!Ss");
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00530() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("C<!Ss");
        cSVFormat3.isEscaping();
    }

    @Test(timeout = 4000)
    public void test00531() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("C<!Ss");
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00532() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("C<!Ss");
        cSVFormat3.isQuoting();
    }

    @Test(timeout = 4000)
    public void test00533() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("C<!Ss");
        cSVFormat3.getNullString();
    }

    @Test(timeout = 4000)
    public void test00534() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("C<!Ss");
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00535() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("C<!Ss");
        cSVFormat3.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00536() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("C<!Ss");
        cSVFormat3.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test00637() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test00638() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00639() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00640() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00641() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test00642() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test00643() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test00644() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00645() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00646() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test00747() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00748() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00749() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00750() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test00751() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00752() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test00753() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00754() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test00855() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00856() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test00857() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00858() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00859() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00860() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test00861() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00862() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test00963() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00964() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test00965() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00966() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00967() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test00968() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test00969() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00970() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01071() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
        cSVFormat4.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test01072() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test01073() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
        cSVFormat4.isEscaping();
    }

    @Test(timeout = 4000)
    public void test01074() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01075() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test01076() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
        cSVFormat3.equals((Object) cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test01077() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
        cSVFormat4.isQuoting();
    }

    @Test(timeout = 4000)
    public void test01078() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
        cSVFormat4.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test01079() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01080() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
        cSVFormat4.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test01181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test01182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test01183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test01184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test01185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test01288() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test01289() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test01290() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test01291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test01292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test01293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01395() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test01396() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test01397() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01398() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01399() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test014100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test014101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test014102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test014103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test014104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test014105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test014106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test014107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test015108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
        cSVFormat3.isEscaping();
    }

    @Test(timeout = 4000)
    public void test015109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test015110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test015111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test015112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test015113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
        cSVFormat3.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test015114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test015115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
        cSVFormat3.isQuoting();
    }

    @Test(timeout = 4000)
    public void test016116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test016117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test016118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test016119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test016120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test016121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test016122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test016123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        cSVFormat2.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test016124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test017125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test017126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test017127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
        cSVFormat3.isQuoting();
    }

    @Test(timeout = 4000)
    public void test017128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
        cSVFormat3.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test017129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
        cSVFormat3.equals((Object) cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test017130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
        cSVFormat3.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test017131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test017132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test017133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
        cSVFormat3.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test017134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
        cSVFormat3.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test017135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
        cSVFormat3.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test017136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
        cSVFormat3.isEscaping();
    }

    @Test(timeout = 4000)
    public void test018137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test018138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test018139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test018140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test018141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test018142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test018143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test018144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
        cSVFormat2.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test019145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test020146() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test020147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test020148() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test020149() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test020150() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test020151() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test020152() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test020153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        cSVFormat2.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test020154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test020155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test021156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test021157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test021158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test021159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test021160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test021161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test021162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test021163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test021164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test021165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test022166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("JTw[q9vDLA7X}");
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test022167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("JTw[q9vDLA7X}");
        cSVFormat3.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test022168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("JTw[q9vDLA7X}");
        cSVFormat3.isQuoting();
    }

    @Test(timeout = 4000)
    public void test022169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("JTw[q9vDLA7X}");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test022170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("JTw[q9vDLA7X}");
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test022171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("JTw[q9vDLA7X}");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test022172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("JTw[q9vDLA7X}");
        cSVFormat3.isEscaping();
    }

    @Test(timeout = 4000)
    public void test022173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("JTw[q9vDLA7X}");
        cSVFormat3.getNullString();
    }

    @Test(timeout = 4000)
    public void test022174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("JTw[q9vDLA7X}");
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test023175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(false);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test024176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test024177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test024178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.isQuoting();
    }

    @Test(timeout = 4000)
    public void test024179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test024180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test024181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test024182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test024183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test024184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test024185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test024186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.isEscaping();
    }

    @Test(timeout = 4000)
    public void test025187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test025188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test025189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test025190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test025191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test025192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test025193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test025194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test025195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test026196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test026197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test026198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test026199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test026200() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test026201() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test026202() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test026203() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test026204() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test026205() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test027206() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test027207() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test027208() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test027209() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test027210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test027211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test027212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test027213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test028214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test028215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat4.isQuoting();
    }

    @Test(timeout = 4000)
    public void test028216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test028217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test028218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat4.isEscaping();
    }

    @Test(timeout = 4000)
    public void test028219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test028220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat4.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test028221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test028222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat3.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test029223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test029224() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test029225() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test029226() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test029227() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test029228() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test029229() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test030230() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test030231() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test030232() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test030233() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test030234() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test030235() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test030236() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getEscape();
    }

    @Test(timeout = 4000)
    public void test030237() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test030238() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test031239() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test031240() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test031241() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
        cSVFormat1.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test031242() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test031243() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test031244() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test031245() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test031246() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test032247() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test032248() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test032249() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test032250() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getEscape();
    }

    @Test(timeout = 4000)
    public void test032251() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test032252() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test032253() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test032254() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test033255() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test033256() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.getEscape();
    }

    @Test(timeout = 4000)
    public void test033257() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test033258() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test033259() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test033260() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test033261() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test033262() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test033263() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test034264() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test034265() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test034266() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test034267() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test034268() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test034269() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test034270() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test034271() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test034272() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.getEscape();
    }

    @Test(timeout = 4000)
    public void test035273() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test035274() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test035275() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test035276() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test035277() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test035278() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test035279() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test035280() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        cSVFormat2.getEscape();
    }

    @Test(timeout = 4000)
    public void test036281() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test036282() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        cSVFormat2.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test036283() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        cSVFormat2.getEscape();
    }

    @Test(timeout = 4000)
    public void test036284() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test036285() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test036286() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test036287() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test036288() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test037289() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test037290() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test037291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test037292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test037293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test037294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test037295() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test037296() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
        cSVFormat2.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test037297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test038298() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test038299() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test038300() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test038301() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test038302() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test038303() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test038304() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test039305() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test039306() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test039307() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test039308() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test039309() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test039310() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test039311() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test040312() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        Character character0 = Character.valueOf('E');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test040313() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        Character character0 = Character.valueOf('E');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test040314() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        Character character0 = Character.valueOf('E');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test040315() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        Character character0 = Character.valueOf('E');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test040316() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        Character character0 = Character.valueOf('E');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test040317() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        Character character0 = Character.valueOf('E');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test040318() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        Character character0 = Character.valueOf('E');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test040319() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        Character character0 = Character.valueOf('E');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test040320() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
        Character character0 = Character.valueOf('E');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test041321() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test042322() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test042323() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test042324() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test042325() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test042326() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test042327() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test042328() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test042329() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test043330() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('<');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test043331() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('<');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test043332() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('<');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test043333() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('<');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test043334() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('<');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test043335() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('<');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test043336() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('<');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test043337() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('<');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test044338() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test044339() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test044340() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test044341() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
        cSVFormat2.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test044342() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test044343() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test044344() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test044345() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test044346() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test045347() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test045348() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test045349() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test045350() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test045351() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
        cSVFormat2.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test045352() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test045353() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test045354() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test045355() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test045356() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
        cSVFormat2.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test046357() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        StringReader stringReader0 = new StringReader("R&Q");
        CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test046358() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        StringReader stringReader0 = new StringReader("R&Q");
        CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test046359() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        StringReader stringReader0 = new StringReader("R&Q");
        CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test046360() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        StringReader stringReader0 = new StringReader("R&Q");
        CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test046361() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        StringReader stringReader0 = new StringReader("R&Q");
        CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test046362() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        StringReader stringReader0 = new StringReader("R&Q");
        CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test046363() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        StringReader stringReader0 = new StringReader("R&Q");
        CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test046364() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        StringReader stringReader0 = new StringReader("R&Q");
        CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test046365() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        StringReader stringReader0 = new StringReader("R&Q");
        CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test047366() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test047367() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test047368() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test047369() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test047370() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test047371() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test047372() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test048373() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test048374() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test048375() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test048376() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test049377() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test049378() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test049379() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test049380() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test049381() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test049382() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test049383() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test049384() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test050385() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test050386() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test050387() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test050388() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test050389() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test050390() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test050391() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test051392() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = cSVFormat0.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test052393() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test052394() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test052395() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test052396() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test052397() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test052398() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test052399() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test052400() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test053401() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test053402() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test053403() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test053404() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test053405() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test053406() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test053407() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test053408() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test054409() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test055410() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test055411() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test055412() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test055413() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test055414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test055415() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test055416() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test055417() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test056418() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test056419() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test056420() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test056421() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test056422() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test056423() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test056424() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test057425() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test057426() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test057427() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test057428() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test057429() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        cSVFormat1.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test057430() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test057431() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
    }

    @Test(timeout = 4000)
    public void test057432() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test058433() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test058434() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test058435() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test058436() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test059437() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test059438() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test059439() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test059440() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test060441() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test060442() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test060443() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test060444() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test060445() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test060446() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test060447() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test060449() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test061450() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        cSVFormat0.RFC4180.parse((Reader) null);
    }

    @Test(timeout = 4000)
    public void test062451() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        cSVFormat0.format((Object[]) null);
    }

    @Test(timeout = 4000)
    public void test063452() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isQuoting();
    }

    @Test(timeout = 4000)
    public void test064453() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.isQuoting();
    }

    @Test(timeout = 4000)
    public void test065454() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
        boolean boolean0 = cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test065455() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
        boolean boolean0 = cSVFormat1.isNullHandling();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test065456() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
        boolean boolean0 = cSVFormat1.isNullHandling();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test065457() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
        boolean boolean0 = cSVFormat1.isNullHandling();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test065458() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
        boolean boolean0 = cSVFormat1.isNullHandling();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test066459() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test067460() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.isEscaping();
    }

    @Test(timeout = 4000)
    public void test068461() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isEscaping();
    }

    @Test(timeout = 4000)
    public void test069462() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test070463() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test070464() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test070465() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        cSVFormat1.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test070466() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test070467() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test070468() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test070469() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test070470() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test070471() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test071472() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = cSVFormat0.getHeader();
    }

    @Test(timeout = 4000)
    public void test072473() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test073474() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        cSVFormat0.getQuotePolicy();
    }

    @Test(timeout = 4000)
    public void test074475() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = cSVFormat0.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test075476() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String string0 = cSVFormat0.getNullString();
    }

    @Test(timeout = 4000)
    public void test076477() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = cSVFormat0.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test077478() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test078479() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String string0 = cSVFormat0.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test079480() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = cSVFormat0.getEscape();
    }

    @Test(timeout = 4000)
    public void test080481() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test081482() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        cSVFormat0.withCommentStart('\r');
    }

    @Test(timeout = 4000)
    public void test082483() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        StringReader stringReader0 = new StringReader("A");
        cSVFormat1.parse(stringReader0);
    }

    @Test(timeout = 4000)
    public void test083484() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
        Character character0 = Character.valueOf('5');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        StringReader stringReader0 = new StringReader(" SurroundingSpaces:ignored");
        cSVFormat2.parse(stringReader0);
    }

    @Test(timeout = 4000)
    public void test084485() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        Object[] objectArray0 = new Object[9];
        cSVFormat2.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test085486() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
        Character character0 = Character.valueOf('{');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('o');
        Object[] objectArray0 = new Object[2];
        cSVFormat3.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test086487() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        cSVFormat1.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test086488() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test086489() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test086490() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test086491() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test086492() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test086493() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test086494() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test087495() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('Z');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("qtD`St}}MPE");
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('Z');
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
        StringReader stringReader0 = new StringReader("qtD`St}}MPE");
        cSVFormat4.parse(stringReader0);
    }

    @Test(timeout = 4000)
    public void test088496() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        Character character0 = Character.valueOf('[');
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
        StringReader stringReader0 = new StringReader("");
        cSVFormat1.parse(stringReader0);
    }

    @Test(timeout = 4000)
    public void test089497() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test090498() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String string0 = cSVFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test091499() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test092500() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        cSVFormat0.hashCode();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test092501() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        cSVFormat0.hashCode();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test092502() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        cSVFormat0.hashCode();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test092503() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        cSVFormat0.hashCode();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test093504() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test093505() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test093506() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test093507() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test094508() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        cSVFormat0.TDF.hashCode();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test094509() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        cSVFormat0.TDF.hashCode();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test094510() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        cSVFormat0.TDF.hashCode();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test094511() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        cSVFormat0.TDF.hashCode();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test095512() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("FPE.2");
        cSVFormat1.hashCode();
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test095513() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("FPE.2");
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test095514() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("FPE.2");
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test095515() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("FPE.2");
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test095516() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("FPE.2");
        cSVFormat1.hashCode();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test096517() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test096518() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test096519() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test096520() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        cSVFormat1.hashCode();
        cSVFormat1.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test096521() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test097522() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test097523() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test097524() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test097525() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test097526() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test098527() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
    }

    @Test(timeout = 4000)
    public void test098528() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test098529() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test098530() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test098531() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test098532() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test098533() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test098534() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test098535() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test099536() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test099537() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test099538() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test099539() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test099540() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test099541() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test099542() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test100543() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test100544() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test100545() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test100546() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test100547() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test101548() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test101549() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test101550() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test101551() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test101552() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test101553() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test101554() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test101555() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test102556() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test102557() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test102558() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test102559() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test102560() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test102561() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test102562() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test103563() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test103564() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test103565() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test103566() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test103567() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test103568() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test103569() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test103570() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test103571() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test104572() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test104573() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test104574() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test104575() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test104576() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test104577() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test104578() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test104579() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test104580() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test104581() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test104582() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test105583() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test105584() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test105585() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test105586() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test105587() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test105588() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test105589() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test105590() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test105591() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test105592() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test106593() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test106594() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test106595() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test106596() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test106597() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test106598() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test106599() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test106600() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test106601() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test106602() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test107603() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test107604() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test107605() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test107606() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test107607() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test107608() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test107609() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test107610() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test107611() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test108612() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('T');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test108613() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('T');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test108614() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('T');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test108615() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('T');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test108616() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('T');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test108617() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('T');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test108618() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('T');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test108619() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('T');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test108620() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('T');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test108621() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('T');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getEscape();
    }

    @Test(timeout = 4000)
    public void test109622() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test109623() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test109624() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test109625() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test109626() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isQuoting();
    }

    @Test(timeout = 4000)
    public void test109627() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test109628() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isEscaping();
    }

    @Test(timeout = 4000)
    public void test109629() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test110630() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test110631() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test110632() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test110633() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test110634() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test110635() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test110636() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test110637() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test110638() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test110639() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test111640() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test111641() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test111642() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test111643() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test111644() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test111645() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test111646() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test111647() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test111648() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test111649() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test112650() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test112651() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test112652() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getEscape();
    }

    @Test(timeout = 4000)
    public void test112653() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test112654() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test112655() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test112656() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test112657() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getCommentStart();
    }

    @Test(timeout = 4000)
    public void test112658() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test112659() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test113660() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
    }

    @Test(timeout = 4000)
    public void test114661() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test115662() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test116663() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test116664() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test116665() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test116666() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test116667() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test116668() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test116669() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test116670() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test116671() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test116672() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test117673() throws Throwable {
        CSVFormat.newFormat('\r');
    }

    @Test(timeout = 4000)
    public void test118674() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        cSVFormat0.DEFAULT.withEscape('\r');
    }

    @Test(timeout = 4000)
    public void test119675() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[3];
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeader(stringArray0);
        cSVFormat1.validate();
    }

    @Test(timeout = 4000)
    public void test120676() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test120677() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test120678() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test120679() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test120680() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test120681() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test120682() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test120683() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test121684() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test122685() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test122686() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test122687() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test122688() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test122689() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test123690() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test123691() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test123692() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test123693() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getEscape();
    }

    @Test(timeout = 4000)
    public void test123694() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getQuoteChar();
    }

    @Test(timeout = 4000)
    public void test123695() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test123696() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test123697() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test123698() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test123699() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test123700() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test124701() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        String string0 = cSVFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test125702() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoting();
    }

    @Test(timeout = 4000)
    public void test125703() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscaping();
    }

    @Test(timeout = 4000)
    public void test125704() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test125705() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullHandling();
    }

    @Test(timeout = 4000)
    public void test125706() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test125707() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test125708() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isCommentingEnabled();
    }

    @Test(timeout = 4000)
    public void test125709() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test126710() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test127711() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        cSVFormat0.isQuoting();
    }

    @Test(timeout = 4000)
    public void test127712() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[2];
        cSVFormat0.format(objectArray0);
        cSVFormat0.isEscaping();
    }
}
