/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 13:02:34 GMT 2023
 */
package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectInputValidation;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.SyncFailedException;
import java.nio.ByteOrder;
import java.util.Enumeration;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        PipedInputStream pipedInputStream1 = null;
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream("");
        int int0 = 63;
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream("");
        ByteOrder byteOrder0 = null;
        byteOrder0 = ByteOrder.LITTLE_ENDIAN;
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        fileDescriptor0.sync();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ByteOrder byteOrder0 = ByteOrder.nativeOrder();
        BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
        ByteOrder.nativeOrder();
        ByteOrder.nativeOrder();
        bitInputStream0.close();
        ByteOrder.nativeOrder();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        int int0 = (-904);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, (-904));
        bufferedInputStream0.markSupported();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
        sequenceInputStream0.reset();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        int int0 = (-1782);
        PipedInputStream pipedInputStream0 = null;
        pipedInputStream0 = new PipedInputStream((-1782));
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 1;
        byteArray0[1] = (byte) 0;
        byteArray0[2] = (byte) (-114);
        byteArray0[3] = (byte) (-17);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 8);
        byteArrayInputStream0.read();
        byteArrayInputStream0.mark(64);
        BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, (ByteOrder) null);
        bitInputStream0.clearBitCache();
        bitInputStream0.clearBitCache();
        bitInputStream0.clearBitCache();
        bitInputStream0.readBits(0);
        bitInputStream0.readBits((byte) 1);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        int int0 = (-2334);
        PipedInputStream pipedInputStream0 = null;
        pipedInputStream0 = new PipedInputStream((-2334));
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
        BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
        bitInputStream0.readBits((-1));
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
        ByteOrder byteOrder0 = ByteOrder.nativeOrder();
        BitInputStream bitInputStream0 = new BitInputStream(dataInputStream0, byteOrder0);
        bitInputStream0.close();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        ByteOrder byteOrder0 = ByteOrder.nativeOrder();
        BitInputStream bitInputStream0 = new BitInputStream(mockFileInputStream0, byteOrder0);
        bitInputStream0.readBits(2581);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
        ByteOrder.nativeOrder();
        ByteOrder.nativeOrder();
        BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
        bitInputStream0.clearBitCache();
        bitInputStream0.readBits(563);
        bitInputStream0.clearBitCache();
        int int0 = (-3454);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
        ByteOrder.nativeOrder();
        BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
        bitInputStream0.clearBitCache();
        bitInputStream0.clearBitCache();
        ByteOrder.nativeOrder();
        ByteOrder.nativeOrder();
        bitInputStream0.readBits(0);
        ByteOrder.nativeOrder();
        bitInputStream0.clearBitCache();
        bitInputStream0.clearBitCache();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ByteOrder byteOrder0 = ByteOrder.nativeOrder();
        BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
        bitInputStream0.clearBitCache();
        ByteOrder.nativeOrder();
        bitInputStream0.clearBitCache();
        int int0 = 0;
        ByteOrder.nativeOrder();
        bitInputStream0.close();
        bitInputStream0.readBits(int0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
        ByteOrder.nativeOrder();
        BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
        bitInputStream0.readBits(8);
        bitInputStream0.close();
        bitInputStream0.clearBitCache();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(1);
        pipedInputStream0.markSupported();
        pipedInputStream0.markSupported();
        ByteOrder byteOrder0 = ByteOrder.nativeOrder();
        BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
        bitInputStream0.readBits(1);
        ByteOrder.nativeOrder();
    }
}
