[
  {
    "signature": "org.apache.commons.compress.compressors.CompressorStreamFactory()",
    "name": "org.apache.commons.compress.compressors.CompressorStreamFactory",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.compressors.CompressorStreamFactory",
      "name": "CompressorStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.compressors.CompressorStreamFactory",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.compress.compressors.CompressorStreamFactory(boolean decompressUntilEOF)",
    "name": "org.apache.commons.compress.compressors.CompressorStreamFactory",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.compressors.CompressorStreamFactory",
      "name": "CompressorStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.compressors.CompressorStreamFactory",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "decompressUntilEOF"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "decompressUntilEOF"
        },
        "comment": "if true decompress until the end of the input if false stop after the first stream and leave the input position to point to the next byte after the stream. This setting applies to the gzip. decompressUntilEOF is bzip2 and xz formats only.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "setDecompressConcatenated(boolean decompressConcatenated)",
    "name": "setDecompressConcatenated",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.compressors.CompressorStreamFactory",
      "name": "CompressorStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.compressors.CompressorStreamFactory",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "decompressConcatenated"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "decompressConcatenated"
        },
        "comment": "if true decompress until the end of the input if false. decompressConcatenated is stop after the first stream and leave the input position to point to the next byte after the stream.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the constructor CompressorStreamFactory(boolean) was used to create the factory.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "createCompressorInputStream(java.io.InputStream in)",
    "name": "createCompressorInputStream",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.compressors.CompressorStreamFactory",
      "name": "CompressorStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.compressors.CompressorStreamFactory",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.compress.compressors.CompressorInputStream",
      "name": "org.apache.commons.compress.compressors.CompressorInputStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.InputStream",
            "name": "InputStream",
            "isArray": false
          },
          "name": "in"
        },
        "comment": "the input stream.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the compressor input stream.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.compress.compressors.CompressorException",
          "name": "CompressorException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the compressor name is not known.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the stream is null or does not support mark.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "createCompressorInputStream(java.lang.String name, java.io.InputStream in)",
    "name": "createCompressorInputStream",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.compressors.CompressorStreamFactory",
      "name": "CompressorStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.compressors.CompressorStreamFactory",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.compress.compressors.CompressorInputStream",
      "name": "org.apache.commons.compress.compressors.CompressorInputStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "of the compressor i.e. {@value #GZIP} {@value #BZIP2} {@value #XZ} {@value #LZMA} {@value #PACK200} {@value #SNAPPY_RAW} {@value #SNAPPY_FRAMED}. name is {@value #Z} or {@value #DEFLATE}.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.InputStream",
            "name": "InputStream",
            "isArray": false
          },
          "name": "in"
        },
        "comment": "the input stream.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "compressor input stream.",
      "kind": "RETURN",
      "condition": "true ? methodResultID.equals(args[1])"
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.compress.compressors.CompressorException",
          "name": "CompressorException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the compressor name is not known.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the name or input stream is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "createCompressorOutputStream(java.lang.String name, java.io.OutputStream out)",
    "name": "createCompressorOutputStream",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.compressors.CompressorStreamFactory",
      "name": "CompressorStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.compressors.CompressorStreamFactory",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.compress.compressors.CompressorOutputStream",
      "name": "org.apache.commons.compress.compressors.CompressorOutputStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "out"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "the compressor name i.e. {@value #GZIP} {@value #BZIP2} {@value #XZ}. name is {@value #PACK200} or {@value #DEFLATE}.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.OutputStream",
            "name": "OutputStream",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "the output stream.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the compressor output stream.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.compress.compressors.CompressorException",
          "name": "CompressorException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the archiver name is not known.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the archiver name or stream is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "getDecompressConcatenated()",
    "name": "getDecompressConcatenated",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.compressors.CompressorStreamFactory",
      "name": "CompressorStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.compressors.CompressorStreamFactory",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  }
]