[
  {
    "signature": "org.apache.commons.compress.archivers.ArchiveStreamFactory()",
    "name": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "name": "ArchiveStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.compress.archivers.ArchiveStreamFactory(java.lang.String encoding)",
    "name": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "name": "ArchiveStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "encoding"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "encoding"
        },
        "comment": "the encoding to be used.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getEntryEncoding()",
    "name": "getEntryEncoding",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "name": "ArchiveStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "entry encoding, or null for the archiver default.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setEntryEncoding(java.lang.String entryEncoding)",
    "name": "setEntryEncoding",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "name": "ArchiveStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "entryEncoding"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "entryEncoding"
        },
        "comment": "the entry encoding. entryEncoding is null uses the archiver default.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the constructor ArchiveStreamFactory(String) was used to specify the factory encoding.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "createArchiveInputStream(java.lang.String archiverName, java.io.InputStream in)",
    "name": "createArchiveInputStream",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "name": "ArchiveStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.compress.archivers.ArchiveInputStream",
      "name": "org.apache.commons.compress.archivers.ArchiveInputStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "archiverName"
      },
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "archiverName"
        },
        "comment": "the archive name i.e. {@value #AR} {@value #ARJ} {@value #ZIP} {@value #TAR} {@value #JAR} {@value #CPIO}. archiverName is {@value #DUMP} or {@value #SEVEN_Z}.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.InputStream",
            "name": "InputStream",
            "isArray": false
          },
          "name": "in"
        },
        "comment": "the input stream.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the archive input stream.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.compress.archivers.ArchiveException",
          "name": "ArchiveException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the archiver name is not known.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.compress.archivers.StreamingNotSupportedException",
          "name": "StreamingNotSupportedException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the format cannot be read from a stream.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the archiver name or stream is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "createArchiveOutputStream(java.lang.String archiverName, java.io.OutputStream out)",
    "name": "createArchiveOutputStream",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "name": "ArchiveStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.compress.archivers.ArchiveOutputStream",
      "name": "org.apache.commons.compress.archivers.ArchiveOutputStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "archiverName"
      },
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "out"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "archiverName"
        },
        "comment": "the archive name i.e. {@value #AR} {@value #ZIP} {@value #TAR}. archiverName is {@value #JAR} or {@value #CPIO}.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.OutputStream",
            "name": "OutputStream",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "the output stream.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the archive output stream.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.compress.archivers.ArchiveException",
          "name": "ArchiveException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the archiver name is not known.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.compress.archivers.StreamingNotSupportedException",
          "name": "StreamingNotSupportedException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the format cannot be written to a stream.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the archiver name or stream is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "createArchiveInputStream(java.io.InputStream in)",
    "name": "createArchiveInputStream",
    "containingClass": {
      "qualifiedName": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "name": "ArchiveStreamFactory",
      "isArray": false
    },
    "targetClass": "org.apache.commons.compress.archivers.ArchiveStreamFactory",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.compress.archivers.ArchiveInputStream",
      "name": "org.apache.commons.compress.archivers.ArchiveInputStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.InputStream",
            "name": "InputStream",
            "isArray": false
          },
          "name": "in"
        },
        "comment": "the input stream.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the archive input stream.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.compress.archivers.ArchiveException",
          "name": "ArchiveException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the archiver name is not known.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.compress.archivers.StreamingNotSupportedException",
          "name": "StreamingNotSupportedException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the format cannot be read from a stream.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the stream is null or does not support mark.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]