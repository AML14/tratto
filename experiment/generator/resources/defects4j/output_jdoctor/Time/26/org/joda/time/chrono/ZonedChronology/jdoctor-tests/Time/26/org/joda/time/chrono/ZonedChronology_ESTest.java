/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 02:23:51 GMT 2023
 */
package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicMonthOfYearDateTimeField;
import org.joda.time.chrono.BasicSingleEraDateTimeField;
import org.joda.time.chrono.BasicYearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJDayOfWeekDateTimeField;
import org.joda.time.chrono.GJEraDateTimeField;
import org.joda.time.chrono.GJYearOfEraDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.ISOYearOfEraDateTimeField;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ZonedChronology_ESTest extends ZonedChronology_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
        DurationField durationField0 = basicMonthOfYearDateTimeField0.getRangeDurationField();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicMonthOfYearDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
        int int0 = zonedChronology_ZonedDateTimeField0.getMaximumValue(43200000L);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();
        long long0 = dateTimeField0.remainder(1);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateMidnight dateMidnight0 = new DateMidnight((-2760L), dateTimeZone0);
        dateMidnight0.getMillis();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Shanghai");
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();
        int int0 = dateTimeField0.getDifference(0L, 60000L);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 40);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicMonthOfYearDateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
        zonedChronology_ZonedDateTimeField0.set(0L, "7[jQ|BOU$lydGisa", (Locale) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
        IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
        StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
        DurationField durationField0 = zonedChronology0.halfdays();
        GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(gregorianChronology0, durationField0);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
        zonedChronology_ZonedDateTimeField0.set(103507202396L, 1);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("@LNr`+O6Q$");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.weekOfWeekyear();
        long long0 = dateTimeField0.add(0L, (long) 3);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();
        DurationField durationField0 = zonedChronology0.halfdays();
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
        long long0 = zonedChronology_ZonedDateTimeField0.add((-28799999L), (-28799999L));
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Shanghai");
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();
        Locale locale0 = Locale.CHINESE;
        String string0 = dateTimeField0.getAsShortText((long) 1, locale0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
        Period period0 = new Period(localTime0, localTime0);
        int[] intArray0 = zonedChronology0.get((ReadablePeriod) period0, (-18L), (-1L));
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
        Period period0 = new Period(localTime0, localTime0);
        int[] intArray0 = zonedChronology0.get((ReadablePeriod) period0, 1L, (-1L));
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, fixedDateTimeZone0);
        zonedChronology0.getDateTimeMillis(1, (-292275054), (-2303), 1, 0, (-292275054), 0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);
        zonedChronology0.getDateTimeMillis(5306, 0, 7, (-4616));
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();
        long long0 = dateTimeField0.set(3214L, 1);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2740);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
        DurationField durationField0 = zonedChronology0.minutes();
        boolean boolean0 = durationField0.isPrecise();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, dateTimeZone0);
        long long0 = zonedChronology_ZonedDurationField0.getUnitMillis();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
        DurationField durationField0 = zonedChronology0.years();
        int int0 = durationField0.getDifference(1, 0L);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
        long long0 = zonedChronology_ZonedDurationField0.add((long) (-3), 86400000L);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
        DurationField durationField0 = basicMonthOfYearDateTimeField0.getRangeDurationField();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicMonthOfYearDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
        long long0 = zonedChronology_ZonedDateTimeField0.roundCeiling((-28800000L));
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(886);
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.hourOfHalfday();
        DurationField durationField0 = dateTimeField0.getRangeDurationField();
        durationField0.getName();
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(886);
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.hourOfHalfday();
        DurationField durationField0 = dateTimeField0.getRangeDurationField();
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        TimeZone timeZone0 = TimeZone.getTimeZone("]H(%=&g");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
        int int0 = dateTimeField0.getMinimumValue();
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1765));
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();
        DurationField durationField0 = dateTimeField0.getDurationField();
        durationField0.getName();
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1765));
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();
        DurationField durationField0 = dateTimeField0.getDurationField();
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 40);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicMonthOfYearDateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
        int int0 = zonedChronology_ZonedDateTimeField0.get(12);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        boolean boolean0 = ZonedChronology.useTimeArithmetic((DurationField) null);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);
        long long0 = zonedChronology0.getDateTimeMillis(1660L, 0, 0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
        long long0 = zonedChronology0.getDateTimeMillis(3155760000000L, 2147483061, (-1882), (-1529), (-1529));
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        long long0 = zonedChronology0.getDateTimeMillis(1, 1, 1, 0, 1, 1, 0);
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        long long0 = zonedChronology0.getDateTimeMillis(3864, 1, 1, 0);
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
        long long0 = zonedChronology0.getDateTimeMillis(1, 1, 1, 1073741824);
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        zonedChronology0.getDateTimeMillis((long) 1, 4100, 0, 1, (-2673));
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();
        long long0 = dateTimeField0.roundHalfFloor(10L);
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Shanghai");
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();
        long long0 = dateTimeField0.roundFloor(1);
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();
        long long0 = dateTimeField0.getDifferenceAsLong(0L, 1107L);
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        TimeZone timeZone0 = TimeZone.getTimeZone("]H(%=&g");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
        int int0 = dateTimeField0.getDifference(0, 30);
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        JulianChronology julianChronology0 = JulianChronology.getInstance();
        GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(julianChronology0);
        DurationField durationField0 = gJEraDateTimeField0.getDurationField();
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = null;
        zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, (DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
        IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
        StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
        Chronology chronology0 = zonedChronology0.withUTC();
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
        IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
        StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
        DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.clockhourOfHalfday();
        DurationField durationField0 = zonedChronology0.years();
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
        long long0 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(604800000L, 1209600000L);
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
        IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
        StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
        DurationField durationField0 = zonedChronology0.halfdays();
        GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(gregorianChronology0, durationField0);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
        zonedChronology_ZonedDateTimeField0.set(103507202396L, 7);
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();
        long long0 = dateTimeField0.addWrapField(10L, 1);
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(23118750);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.monthOfYear();
        long long0 = dateTimeField0.addWrapField((long) 23118750, 23118750);
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();
        long long0 = dateTimeField0.add(1000L, 4);
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();
        long long0 = dateTimeField0.add((long) 0, 0);
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
        BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("I3\"j,B<HW6Ab/|3{~");
        DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
        UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = null;
        zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(unsupportedDateTimeField0, (DateTimeZone) null, durationField0, durationField0, durationField0);
    }

    @Test(timeout = 4000)
    public void test4446() throws Throwable {
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, dateTimeZone0);
        long long0 = zonedChronology_ZonedDurationField0.getDifferenceAsLong(0L, 0L);
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);
        DurationField durationField0 = zonedChronology0.centuries();
        long long0 = durationField0.getDifferenceAsLong(0L, (-1278L));
    }

    @Test(timeout = 4000)
    public void test4648() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);
        Weeks weeks0 = Weeks.weeks(2515);
        Duration duration0 = weeks0.toStandardDuration();
        Period period0 = duration0.toPeriod();
        long long0 = zonedChronology0.add((ReadablePeriod) period0, 0L, 1427);
    }

    @Test(timeout = 4000)
    public void test4749() throws Throwable {
        Weeks weeks0 = Weeks.weeks(2515);
        PeriodType periodType0 = weeks0.getPeriodType();
        Period period0 = new Period(0L, 816L, periodType0);
        period0.size();
    }

    @Test(timeout = 4000)
    public void test4850() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
        IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
        StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
        DurationField durationField0 = zonedChronology0.halfdays();
        GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(gregorianChronology0, durationField0);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
        long long0 = zonedChronology_ZonedDateTimeField0.add(2396L, 2396L);
    }

    @Test(timeout = 4000)
    public void test4951() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
        IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
        StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
        boolean boolean0 = zonedChronology0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test5052() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
        zonedChronology0.assemble(assembledChronology_Fields0);
    }

    @Test(timeout = 4000)
    public void test5153() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
        Chronology chronology0 = zonedChronology0.withZone((DateTimeZone) null);
        chronology0.withZone(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test5254() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test5355() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        ZonedChronology.getInstance((Chronology) null, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test5456() throws Throwable {
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
        int int0 = zonedChronology_ZonedDurationField0.getValue(349L, (-1925L));
    }

    @Test(timeout = 4000)
    public void test5557() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        DurationField durationField0 = zonedChronology0.years();
        long long0 = durationField0.getMillis((-302), 43200000L);
    }

    @Test(timeout = 4000)
    public void test5658() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
        IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
        StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
        DurationField durationField0 = zonedChronology0.halfdays();
        long long0 = durationField0.getMillis(103507202396L, (long) 1);
    }

    @Test(timeout = 4000)
    public void test5759() throws Throwable {
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
        long long0 = zonedChronology_ZonedDurationField0.getValueAsLong((long) (-3), (long) 3683);
    }

    @Test(timeout = 4000)
    public void test5860() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
        DurationField durationField0 = basicMonthOfYearDateTimeField0.getRangeDurationField();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        Locale locale0 = Locale.UK;
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicMonthOfYearDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
        int int0 = zonedChronology_ZonedDateTimeField0.getMaximumTextLength(locale0);
    }

    @Test(timeout = 4000)
    public void test5961() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(ethiopicChronology0);
        SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(ethiopicChronology0, basicYearDateTimeField0, 0);
        DurationField durationField0 = skipUndoDateTimeField0.getDurationField();
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicYearDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
        Locale locale0 = Locale.forLanguageTag("G%|n]fR[");
        int int0 = zonedChronology_ZonedDateTimeField0.getMaximumShortTextLength(locale0);
    }

    @Test(timeout = 4000)
    public void test6062() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
        int[] intArray0 = new int[4];
        int int0 = dateTimeField0.getMinimumValue((ReadablePartial) localDateTime0, intArray0);
    }

    @Test(timeout = 4000)
    public void test6163() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = dateTimeField0.getAsText(1000000L, locale0);
    }

    @Test(timeout = 4000)
    public void test6264() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.year();
        Locale locale0 = Locale.KOREA;
        long long0 = dateTimeField0.set((long) 1, "7", locale0);
    }

    @Test(timeout = 4000)
    public void test6365() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
        int[] intArray0 = new int[2];
        int int0 = dateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
    }

    @Test(timeout = 4000)
    public void test6466() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        TimeZone timeZone0 = TimeZone.getTimeZone("]H(%=&g");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
        LocalTime localTime0 = new LocalTime(dateTimeZone0);
        int int0 = dateTimeField0.getMaximumValue((ReadablePartial) localTime0);
    }

    @Test(timeout = 4000)
    public void test6567() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();
        int int0 = dateTimeField0.getMinimumValue((long) 1);
    }

    @Test(timeout = 4000)
    public void test6668() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.yearOfCentury();
        SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
        DurationField durationField0 = skipDateTimeField0.getLeapDurationField();
    }

    @Test(timeout = 4000)
    public void test6769() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        TimeZone timeZone0 = TimeZone.getTimeZone("]H(%=&g");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
        GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
        DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
    }

    @Test(timeout = 4000)
    public void test6770() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        TimeZone timeZone0 = TimeZone.getTimeZone("]H(%=&g");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
        GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
        DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
        long long0 = durationField0.add((long) 30, 1);
    }

    @Test(timeout = 4000)
    public void test6871() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(gregorianChronology0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicYearDateTimeField0, fixedDateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2862, (-3928), Integer.MAX_VALUE, 2862, (-4080), (-471));
        YearMonthDay yearMonthDay0 = YearMonthDay.fromCalendarFields(mockGregorianCalendar0);
        LocalDate localDate0 = yearMonthDay0.toLocalDate();
        int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue((ReadablePartial) localDate0);
    }

    @Test(timeout = 4000)
    public void test6972() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();
        int int0 = dateTimeField0.getLeapAmount(0);
    }

    @Test(timeout = 4000)
    public void test7073() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();
        boolean boolean0 = dateTimeField0.isLenient();
    }

    @Test(timeout = 4000)
    public void test7174() throws Throwable {
        ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField) ISOYearOfEraDateTimeField.INSTANCE;
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(iSOYearOfEraDateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
        Locale locale0 = Locale.ENGLISH;
        String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText((-249), locale0);
    }

    @Test(timeout = 4000)
    public void test7275() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();
        SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0, 0);
        DurationField durationField0 = skipDateTimeField0.getRangeDurationField();
        boolean boolean0 = ZonedChronology.useTimeArithmetic(durationField0);
    }

    @Test(timeout = 4000)
    public void test7276() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();
        SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0, 0);
        DurationField durationField0 = skipDateTimeField0.getRangeDurationField();
        boolean boolean0 = ZonedChronology.useTimeArithmetic(durationField0);
        durationField0.getName();
    }

    @Test(timeout = 4000)
    public void test7377() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        TimeZone timeZone0 = TimeZone.getTimeZone("]H(%=&g");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
        Locale locale0 = Locale.GERMANY;
        String string0 = dateTimeField0.getAsText(0, locale0);
    }

    @Test(timeout = 4000)
    public void test7478() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.yearOfCentury();
        int int0 = dateTimeField0.getMaximumValue();
    }

    @Test(timeout = 4000)
    public void test7579() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();
        boolean boolean0 = dateTimeField0.isLeap(0);
    }

    @Test(timeout = 4000)
    public void test7680() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
        long long0 = zonedChronology0.getDateTimeMillis((long) 1, 0, 0, 1, 0);
    }

    @Test(timeout = 4000)
    public void test7781() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
        ZonedChronology.getInstance(zonedChronology0, (DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test7882() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
        zonedChronology0.hashCode();
    }

    @Test(timeout = 4000)
    public void test7983() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
        zonedChronology0.getDateTimeMillis(292272708, 1000, 292272708, 0, 292272708, 3122, 1000);
    }

    @Test(timeout = 4000)
    public void test8084() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
        String string0 = zonedChronology0.toString();
    }
}
