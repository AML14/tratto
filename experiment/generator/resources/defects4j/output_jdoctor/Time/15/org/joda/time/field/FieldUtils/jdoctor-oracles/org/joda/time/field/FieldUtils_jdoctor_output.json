[
  {
    "signature": "safeNegate(int value)",
    "name": "safeNegate",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the value to negate.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the negated value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is Integer.MIN_VALUE.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "safeAdd(int val1, int val2)",
    "name": "safeAdd",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "val1"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "val2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "val1"
        },
        "comment": "val1 is first. first value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "val2"
        },
        "comment": "val2 is second. second value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new total.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is too big or too small.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "safeAdd(long val1, long val2)",
    "name": "safeAdd",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "val1"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "val2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "val1"
        },
        "comment": "val1 is first. first value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "val2"
        },
        "comment": "val2 is second. second value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new total.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is too big or too small.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "safeSubtract(long val1, long val2)",
    "name": "safeSubtract",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "val1"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "val2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "val1"
        },
        "comment": "val1 is first. first value to be taken away from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "val2"
        },
        "comment": "val2 is second. second value the amount to take away.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new total.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is too big or too small.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "safeMultiply(int val1, int val2)",
    "name": "safeMultiply",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "val1"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "val2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "val1"
        },
        "comment": "val1 is first. first value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "val2"
        },
        "comment": "val2 is second. second value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new total.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is too big or too small.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "safeMultiply(long val1, int val2)",
    "name": "safeMultiply",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "val1"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "val2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "val1"
        },
        "comment": "val1 is first. first value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "val2"
        },
        "comment": "val2 is second. second value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new total.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is too big or too small.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "safeMultiply(long val1, long val2)",
    "name": "safeMultiply",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "val1"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "val2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "val1"
        },
        "comment": "val1 is first. first value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "val2"
        },
        "comment": "val2 is second. second value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new total.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is too big or too small.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "safeToInt(long value)",
    "name": "safeToInt",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the value as an int.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is too big or too small.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "safeMultiplyToInt(long val1, long val2)",
    "name": "safeMultiplyToInt",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "val1"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "val2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "val1"
        },
        "comment": "val1 is first. first value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "val2"
        },
        "comment": "val2 is second. second value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the new total.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is too big or too small.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "verifyValueBounds(org.joda.time.DateTimeField field, int value, int lowerBound, int upperBound)",
    "name": "verifyValueBounds",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DateTimeField",
          "name": "DateTimeField",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lowerBound"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "upperBound"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the value to check.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "lowerBound"
        },
        "comment": "lowerBound is lower. lower bound allowed for value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "upperBound"
        },
        "comment": "upperBound is upper. upper bound allowed for value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.joda.time.IllegalFieldValueException",
          "name": "IllegalFieldValueException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "value is not in the specified bounds.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "verifyValueBounds(org.joda.time.DateTimeFieldType fieldType, int value, int lowerBound, int upperBound)",
    "name": "verifyValueBounds",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DateTimeFieldType",
          "name": "DateTimeFieldType",
          "isArray": false
        },
        "name": "fieldType"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lowerBound"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "upperBound"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the value to check.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "lowerBound"
        },
        "comment": "lowerBound is lower. lower bound allowed for value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "upperBound"
        },
        "comment": "upperBound is upper. upper bound allowed for value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.joda.time.IllegalFieldValueException",
          "name": "IllegalFieldValueException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "value is not in the specified bounds.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "verifyValueBounds(java.lang.String fieldName, int value, int lowerBound, int upperBound)",
    "name": "verifyValueBounds",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "fieldName"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lowerBound"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "upperBound"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the value to check.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "lowerBound"
        },
        "comment": "lowerBound is lower. lower bound allowed for value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "upperBound"
        },
        "comment": "upperBound is upper. upper bound allowed for value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.joda.time.IllegalFieldValueException",
          "name": "IllegalFieldValueException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "value is not in the specified bounds.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getWrappedValue(int currentValue, int wrapValue, int minValue, int maxValue)",
    "name": "getWrappedValue",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "currentValue"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "wrapValue"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minValue"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxValue"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "currentValue"
        },
        "comment": "the current value of the data. currentValue is which may lie outside the wrapped value range.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "wrapValue"
        },
        "comment": "the value to add to current value before wrapping. This negative.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "minValue"
        },
        "comment": "the wrap range minimum value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxValue"
        },
        "comment": "the wrap range maximum value. This . maxValue is greater than minValue (checked by the method).",
        "kind": "PARAM",
        "condition": "args[3]>args[2]"
      }
    ],
    "returnTag": {
      "comment": "the wrapped value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "minValue is greater than or equal to maxValue.",
        "kind": "THROWS",
        "condition": "args[2]>=args[3]"
      }
    ]
  },
  {
    "signature": "getWrappedValue(int value, int minValue, int maxValue)",
    "name": "getWrappedValue",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minValue"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxValue"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the value to fit into the wrapped value range.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "minValue"
        },
        "comment": "the wrap range minimum value.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxValue"
        },
        "comment": "the wrap range maximum value. This . maxValue is greater than minValue (checked by the method).",
        "kind": "PARAM",
        "condition": "args[2]>args[1]"
      }
    ],
    "returnTag": {
      "comment": "the wrapped value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "minValue is greater than or equal to maxValue.",
        "kind": "THROWS",
        "condition": "args[1]>=args[2]"
      }
    ]
  },
  {
    "signature": "equals(java.lang.Object object1, java.lang.Object object2)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.joda.time.field.FieldUtils",
      "name": "FieldUtils",
      "isArray": false
    },
    "targetClass": "org.joda.time.field.FieldUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object1"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "object1"
        },
        "comment": "object1 is first. first object.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "object2"
        },
        "comment": "the second object.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if equal.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]