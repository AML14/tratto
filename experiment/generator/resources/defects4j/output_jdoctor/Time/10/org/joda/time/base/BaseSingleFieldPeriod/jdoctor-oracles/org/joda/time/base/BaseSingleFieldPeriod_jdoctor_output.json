[
  {
    "signature": "org.joda.time.base.BaseSingleFieldPeriod(int period)",
    "name": "org.joda.time.base.BaseSingleFieldPeriod",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "period"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "period"
        },
        "comment": "the period to represent.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "between(org.joda.time.ReadableInstant start, org.joda.time.ReadableInstant end, org.joda.time.DurationFieldType field)",
    "name": "between",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadableInstant",
          "name": "ReadableInstant",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadableInstant",
          "name": "ReadableInstant",
          "isArray": false
        },
        "name": "end"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.DurationFieldType",
          "name": "DurationFieldType",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadableInstant",
            "name": "ReadableInstant",
            "isArray": false
          },
          "name": "start"
        },
        "comment": "the start instant. start is validated to not be null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadableInstant",
            "name": "ReadableInstant",
            "isArray": false
          },
          "name": "end"
        },
        "comment": "the end instant. end is validated to not be null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DurationFieldType",
            "name": "DurationFieldType",
            "isArray": false
          },
          "name": "field"
        },
        "comment": "the field type to use. field is not null.",
        "kind": "PARAM",
        "condition": "(args[2]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "the period.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the instants are null or invalid.",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      }
    ]
  },
  {
    "signature": "between(org.joda.time.ReadablePartial start, org.joda.time.ReadablePartial end, org.joda.time.ReadablePeriod zeroInstance)",
    "name": "between",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePartial",
          "name": "ReadablePartial",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePartial",
          "name": "ReadablePartial",
          "isArray": false
        },
        "name": "end"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePeriod",
          "name": "ReadablePeriod",
          "isArray": false
        },
        "name": "zeroInstance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadablePartial",
            "name": "ReadablePartial",
            "isArray": false
          },
          "name": "start"
        },
        "comment": "the start partial date. start is validated to not be null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadablePartial",
            "name": "ReadablePartial",
            "isArray": false
          },
          "name": "end"
        },
        "comment": "the end partial date. end is validated to not be null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadablePeriod",
            "name": "ReadablePeriod",
            "isArray": false
          },
          "name": "zeroInstance"
        },
        "comment": "the zero instance constant. zeroInstance is not null.",
        "kind": "PARAM",
        "condition": "(args[2]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "the period.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the partials are null or invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "standardPeriodIn(org.joda.time.ReadablePeriod period, long millisPerUnit)",
    "name": "standardPeriodIn",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePeriod",
          "name": "ReadablePeriod",
          "isArray": false
        },
        "name": "period"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "millisPerUnit"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadablePeriod",
            "name": "ReadablePeriod",
            "isArray": false
          },
          "name": "period"
        },
        "comment": "the period to get the number of hours from. period is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "millisPerUnit"
        },
        "comment": "the number of milliseconds in one standard unit of this period.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the period contains imprecise duration values.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getValue()",
    "name": "getValue",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the period value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setValue(int value)",
    "name": "setValue",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the period value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getFieldType()",
    "name": "getFieldType",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DurationFieldType",
      "name": "org.joda.time.DurationFieldType",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the duration field type, not null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPeriodType()",
    "name": "getPeriodType",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.PeriodType",
      "name": "org.joda.time.PeriodType",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the period type, not null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the number of fields supported, which is one.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==1"
    },
    "throwsTags": []
  },
  {
    "signature": "getFieldType(int index)",
    "name": "getFieldType",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DurationFieldType",
      "name": "org.joda.time.DurationFieldType",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the index to retrieve which . index is zero.",
        "kind": "PARAM",
        "condition": "args[0]==0"
      }
    ],
    "returnTag": {
      "comment": "the field at the specified index.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getValue(int index)",
    "name": "getValue",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the index to retrieve which . index is zero.",
        "kind": "PARAM",
        "condition": "args[0]==0"
      }
    ],
    "returnTag": {
      "comment": "the value of the field at the specified index.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "get(org.joda.time.DurationFieldType type)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DurationFieldType",
          "name": "DurationFieldType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DurationFieldType",
            "name": "DurationFieldType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the field type to query. type is null returns zero.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      }
    ],
    "returnTag": {
      "comment": "the value of that field, zero if field not supported.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isSupported(org.joda.time.DurationFieldType type)",
    "name": "isSupported",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DurationFieldType",
          "name": "DurationFieldType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DurationFieldType",
            "name": "DurationFieldType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the type to check null which returns false.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the field is supported.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toPeriod()",
    "name": "toPeriod",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Period",
      "name": "org.joda.time.Period",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a Period representing the same number of days.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toMutablePeriod()",
    "name": "toMutablePeriod",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.MutablePeriod",
      "name": "org.joda.time.MutablePeriod",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a MutablePeriod using the same field set and values.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "equals(java.lang.Object period)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "period"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "period"
        },
        "comment": "period is readable. readable period to check against.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if all the field values are equal, false if not or the period is null or of an incorrect type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a hash code.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "compareTo(org.joda.time.base.BaseSingleFieldPeriod other)",
    "name": "compareTo",
    "containingClass": {
      "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
      "name": "BaseSingleFieldPeriod",
      "isArray": false
    },
    "targetClass": "org.joda.time.base.BaseSingleFieldPeriod",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
          "name": "BaseSingleFieldPeriod",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.base.BaseSingleFieldPeriod",
            "name": "BaseSingleFieldPeriod",
            "isArray": false
          },
          "name": "other"
        },
        "comment": "the other period. other is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "zero if equal, positive if greater, negative if less.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the other period is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ClassCastException",
          "name": "ClassCastException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the other period is of a different type.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]