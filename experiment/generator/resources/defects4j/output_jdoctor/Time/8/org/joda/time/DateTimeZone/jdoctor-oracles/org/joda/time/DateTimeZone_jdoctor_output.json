[
  {
    "signature": "org.joda.time.DateTimeZone(java.lang.String id)",
    "name": "org.joda.time.DateTimeZone",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "id"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "id"
        },
        "comment": "the id to use.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the id is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "getDefault()",
    "name": "getDefault",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "org.joda.time.DateTimeZone",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the default datetime zone object.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setDefault(org.joda.time.DateTimeZone zone)",
    "name": "setDefault",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DateTimeZone",
          "name": "DateTimeZone",
          "isArray": false
        },
        "name": "zone"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DateTimeZone",
            "name": "DateTimeZone",
            "isArray": false
          },
          "name": "zone"
        },
        "comment": "the default datetime zone object. zone is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the zone is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.SecurityException",
          "name": "SecurityException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the application has insufficient security rights.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "forID(java.lang.String id)",
    "name": "forID",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "org.joda.time.DateTimeZone",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "id"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "id"
        },
        "comment": "the ID of the datetime zone. id is null means default.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the DateTimeZone object for the ID.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the ID is not recognised.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "forOffsetHours(int hoursOffset)",
    "name": "forOffsetHours",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "org.joda.time.DateTimeZone",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hoursOffset"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "hoursOffset"
        },
        "comment": "the offset in hours from UTC from -23 to +23.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the DateTimeZone object for the offset.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the offset is too large or too small.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "forOffsetHoursMinutes(int hoursOffset, int minutesOffset)",
    "name": "forOffsetHoursMinutes",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "org.joda.time.DateTimeZone",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hoursOffset"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minutesOffset"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "hoursOffset"
        },
        "comment": "the offset in hours from UTC from -23 to +23.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "minutesOffset"
        },
        "comment": "the offset in minutes from UTC from -59 to +59.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the DateTimeZone object for the offset.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "any value is out of range the minutes are negative when the hours are positive or the resulting offset exceeds +/- 23:59:59.000.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "forOffsetMillis(int millisOffset)",
    "name": "forOffsetMillis",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "org.joda.time.DateTimeZone",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "millisOffset"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "millisOffset"
        },
        "comment": "the offset in millis from UTC from -23:59:59.999 to +23:59:59.999.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the DateTimeZone object for the offset.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "forTimeZone(java.util.TimeZone zone)",
    "name": "forTimeZone",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "org.joda.time.DateTimeZone",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimeZone",
          "name": "TimeZone",
          "isArray": false
        },
        "name": "zone"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.TimeZone",
            "name": "TimeZone",
            "isArray": false
          },
          "name": "zone"
        },
        "comment": "the zone to convert. zone is null means default.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the DateTimeZone object for the zone.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the zone is not recognised.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getAvailableIDs()",
    "name": "getAvailableIDs",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<java.lang.String>",
      "name": "java.util.Set<java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "an unmodifiable Set of String IDs.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getProvider()",
    "name": "getProvider",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.tz.Provider",
      "name": "org.joda.time.tz.Provider",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the provider.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setProvider(org.joda.time.tz.Provider provider)",
    "name": "setProvider",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.tz.Provider",
          "name": "Provider",
          "isArray": false
        },
        "name": "provider"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.tz.Provider",
            "name": "Provider",
            "isArray": false
          },
          "name": "provider"
        },
        "comment": "provider to use. provider is or null for default.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.SecurityException",
          "name": "SecurityException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "you do not have the permission DateTimeZone.setProvider.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the provider is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getNameProvider()",
    "name": "getNameProvider",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.tz.NameProvider",
      "name": "org.joda.time.tz.NameProvider",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the provider.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setNameProvider(org.joda.time.tz.NameProvider nameProvider)",
    "name": "setNameProvider",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.tz.NameProvider",
          "name": "NameProvider",
          "isArray": false
        },
        "name": "nameProvider"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.tz.NameProvider",
            "name": "NameProvider",
            "isArray": false
          },
          "name": "nameProvider"
        },
        "comment": "provider to use. nameProvider is or null for default.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.SecurityException",
          "name": "SecurityException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "you do not have the permission DateTimeZone.setNameProvider.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the provider is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getID()",
    "name": "getID",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the ID of this datetime zone.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getNameKey(long instant)",
    "name": "getNameKey",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "milliseconds from 1970-01-01T00:00:00Z to get the name for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "name key or null if id should be used for names.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getShortName(long instant)",
    "name": "getShortName",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "milliseconds from 1970-01-01T00:00:00Z to get the name for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the human-readable short name in the default locale.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getShortName(long instant, java.util.Locale locale)",
    "name": "getShortName",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      },
      {
        "type": {
          "qualifiedName": "java.util.Locale",
          "name": "Locale",
          "isArray": false
        },
        "name": "locale"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "milliseconds from 1970-01-01T00:00:00Z to get the name for.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Locale",
            "name": "Locale",
            "isArray": false
          },
          "name": "locale"
        },
        "comment": "the locale to get the name for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the human-readable short name in the specified locale.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getName(long instant)",
    "name": "getName",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "milliseconds from 1970-01-01T00:00:00Z to get the name for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the human-readable long name in the default locale.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getName(long instant, java.util.Locale locale)",
    "name": "getName",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      },
      {
        "type": {
          "qualifiedName": "java.util.Locale",
          "name": "Locale",
          "isArray": false
        },
        "name": "locale"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "milliseconds from 1970-01-01T00:00:00Z to get the name for.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Locale",
            "name": "Locale",
            "isArray": false
          },
          "name": "locale"
        },
        "comment": "the locale to get the name for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the human-readable long name in the specified locale.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getOffset(long instant)",
    "name": "getOffset",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "milliseconds from 1970-01-01T00:00:00Z to get the offset for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the millisecond offset to add to UTC to get local time.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getOffset(org.joda.time.ReadableInstant instant)",
    "name": "getOffset",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadableInstant",
          "name": "ReadableInstant",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadableInstant",
            "name": "ReadableInstant",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "instant to get the offset for. instant is null means now.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the millisecond offset to add to UTC to get local time.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getStandardOffset(long instant)",
    "name": "getStandardOffset",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "milliseconds from 1970-01-01T00:00:00Z to get the offset for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the millisecond offset to add to UTC to get local time.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isStandardOffset(long instant)",
    "name": "isStandardOffset",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "milliseconds from 1970-01-01T00:00:00Z to get the offset for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the offset at the given instant is the standard offset.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getOffsetFromLocal(long instantLocal)",
    "name": "getOffsetFromLocal",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instantLocal"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instantLocal"
        },
        "comment": "the millisecond instant relative to this time zone to get the offset for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the millisecond offset to subtract from local time to get UTC time.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "convertUTCToLocal(long instantUTC)",
    "name": "convertUTCToLocal",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instantUTC"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instantUTC"
        },
        "comment": "the UTC instant to convert to local.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the local instant with the same local time.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result overflows a long.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "name": "convertLocalToUTC",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instantLocal"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "strict"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "originalInstantUTC"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instantLocal"
        },
        "comment": "instantLocal is local. local instant to convert to UTC.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "strict"
        },
        "comment": "whether the conversion should reject non-existent local times.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "originalInstantUTC"
        },
        "comment": "originalInstantUTC is original. original instant that the calculation is based on.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the UTC instant with the same local time,.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result overflows a long.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the zone has no equivalent local time.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "convertLocalToUTC(long instantLocal, boolean strict)",
    "name": "convertLocalToUTC",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instantLocal"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "strict"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instantLocal"
        },
        "comment": "instantLocal is local. local instant to convert to UTC.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "strict"
        },
        "comment": "whether the conversion should reject non-existent local times.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the UTC instant with the same local time,.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the result overflows a long.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.joda.time.IllegalInstantException",
          "name": "IllegalInstantException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the zone has no equivalent local time.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getMillisKeepLocal(org.joda.time.DateTimeZone newZone, long oldInstant)",
    "name": "getMillisKeepLocal",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DateTimeZone",
          "name": "DateTimeZone",
          "isArray": false
        },
        "name": "newZone"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "oldInstant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DateTimeZone",
            "name": "DateTimeZone",
            "isArray": false
          },
          "name": "newZone"
        },
        "comment": "the new zone. newZone is null means default.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "oldInstant"
        },
        "comment": "the UTC millisecond instant to convert.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the UTC millisecond instant with the same local time in the new zone.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isLocalDateTimeGap(org.joda.time.LocalDateTime localDateTime)",
    "name": "isLocalDateTimeGap",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.LocalDateTime",
          "name": "LocalDateTime",
          "isArray": false
        },
        "name": "localDateTime"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.LocalDateTime",
            "name": "LocalDateTime",
            "isArray": false
          },
          "name": "localDateTime"
        },
        "comment": "the time to check. localDateTime is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "true if the given datetime refers to a gap.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "adjustOffset(long instant, boolean earlierOrLater)",
    "name": "adjustOffset",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "earlierOrLater"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "the instant to adjust.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "earlierOrLater"
        },
        "comment": "false for earlier. earlierOrLater is true for later.",
        "kind": "PARAM",
        "condition": "args[1]==true"
      }
    ],
    "returnTag": {
      "comment": "the adjusted instant millis.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isFixed()",
    "name": "isFixed",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if no transitions.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "nextTransition(long instant)",
    "name": "nextTransition",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "milliseconds from 1970-01-01T00:00:00Z.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "milliseconds from 1970-01-01T00:00:00Z.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "previousTransition(long instant)",
    "name": "previousTransition",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "milliseconds from 1970-01-01T00:00:00Z.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "milliseconds from 1970-01-01T00:00:00Z.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toTimeZone()",
    "name": "toTimeZone",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.TimeZone",
      "name": "java.util.TimeZone",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the closest matching TimeZone object.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "equals(java.lang.Object object)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "object"
        },
        "comment": "the object to compare with.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if equal, based on the ID and all internal rules.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "suitable hashcode.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the id of the zone.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "writeReplace()",
    "name": "writeReplace",
    "containingClass": {
      "qualifiedName": "org.joda.time.DateTimeZone",
      "name": "DateTimeZone",
      "isArray": false
    },
    "targetClass": "org.joda.time.DateTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a stub object to go in the stream.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]