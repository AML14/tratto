[
  {
    "signature": "org.joda.time.Partial()",
    "name": "org.joda.time.Partial",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "org.joda.time.Partial(org.joda.time.Chronology chrono)",
    "name": "org.joda.time.Partial",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.Chronology",
          "name": "Chronology",
          "isArray": false
        },
        "name": "chrono"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.Chronology",
            "name": "Chronology",
            "isArray": false
          },
          "name": "chrono"
        },
        "comment": "the chronology. chrono is null means ISO.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.joda.time.Partial(org.joda.time.DateTimeFieldType type, int value)",
    "name": "org.joda.time.Partial",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DateTimeFieldType",
          "name": "DateTimeFieldType",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DateTimeFieldType",
            "name": "DateTimeFieldType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the single type to create the partial from. type is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the value to store.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the type or value is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "org.joda.time.Partial(org.joda.time.DateTimeFieldType type, int value, org.joda.time.Chronology chronology)",
    "name": "org.joda.time.Partial",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DateTimeFieldType",
          "name": "DateTimeFieldType",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.Chronology",
          "name": "Chronology",
          "isArray": false
        },
        "name": "chronology"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DateTimeFieldType",
            "name": "DateTimeFieldType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the single type to create the partial from. type is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the value to store.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.Chronology",
            "name": "Chronology",
            "isArray": false
          },
          "name": "chronology"
        },
        "comment": "the chronology. chronology is null means ISO.",
        "kind": "PARAM",
        "condition": "args[2]==null"
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the type or value is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "org.joda.time.Partial(org.joda.time.DateTimeFieldType[] types, int[] values)",
    "name": "org.joda.time.Partial",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Lorg.joda.time.DateTimeFieldType;",
          "name": "DateTimeFieldType[]",
          "isArray": true
        },
        "name": "types"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Lorg.joda.time.DateTimeFieldType;",
            "name": "DateTimeFieldType[]",
            "isArray": true
          },
          "name": "types"
        },
        "comment": "the types to create the partial from. types is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the values to store. values is not null.",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the types or values are invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "org.joda.time.Partial(org.joda.time.DateTimeFieldType[] types, int[] values, org.joda.time.Chronology chronology)",
    "name": "org.joda.time.Partial",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Lorg.joda.time.DateTimeFieldType;",
          "name": "DateTimeFieldType[]",
          "isArray": true
        },
        "name": "types"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.Chronology",
          "name": "Chronology",
          "isArray": false
        },
        "name": "chronology"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Lorg.joda.time.DateTimeFieldType;",
            "name": "DateTimeFieldType[]",
            "isArray": true
          },
          "name": "types"
        },
        "comment": "the types to create the partial from. types is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the values to store. values is not null.",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.Chronology",
            "name": "Chronology",
            "isArray": false
          },
          "name": "chronology"
        },
        "comment": "the chronology. chronology is null means ISO.",
        "kind": "PARAM",
        "condition": "args[2]==null"
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the types or values are invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "org.joda.time.Partial(org.joda.time.ReadablePartial partial)",
    "name": "org.joda.time.Partial",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePartial",
          "name": "ReadablePartial",
          "isArray": false
        },
        "name": "partial"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "org.joda.time.Partial(org.joda.time.Partial partial, int[] values)",
    "name": "org.joda.time.Partial",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.Partial",
          "name": "Partial",
          "isArray": false
        },
        "name": "partial"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.Partial",
            "name": "Partial",
            "isArray": false
          },
          "name": "partial"
        },
        "comment": "the partial to copy.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the values to store.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the types or values are invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "org.joda.time.Partial(org.joda.time.Chronology chronology, org.joda.time.DateTimeFieldType[] types, int[] values)",
    "name": "org.joda.time.Partial",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.Chronology",
          "name": "Chronology",
          "isArray": false
        },
        "name": "chronology"
      },
      {
        "type": {
          "qualifiedName": "[Lorg.joda.time.DateTimeFieldType;",
          "name": "DateTimeFieldType[]",
          "isArray": true
        },
        "name": "types"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.Chronology",
            "name": "Chronology",
            "isArray": false
          },
          "name": "chronology"
        },
        "comment": "the chronology.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Lorg.joda.time.DateTimeFieldType;",
            "name": "DateTimeFieldType[]",
            "isArray": true
          },
          "name": "types"
        },
        "comment": "the types to create the partial from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "the values to store.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the types or values are invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the field count.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getChronology()",
    "name": "getChronology",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Chronology",
      "name": "org.joda.time.Chronology",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the chronology, never null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getField(int index, org.joda.time.Chronology chrono)",
    "name": "getField",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DateTimeField",
      "name": "org.joda.time.DateTimeField",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "org.joda.time.Chronology",
          "name": "Chronology",
          "isArray": false
        },
        "name": "chrono"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the index to retrieve.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.Chronology",
            "name": "Chronology",
            "isArray": false
          },
          "name": "chrono"
        },
        "comment": "the chronology to use.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the field.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getFieldType(int index)",
    "name": "getFieldType",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DateTimeFieldType",
      "name": "org.joda.time.DateTimeFieldType",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the index to retrieve.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the field at the specified index.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getFieldTypes()",
    "name": "getFieldTypes",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.DateTimeFieldType[]",
      "name": "org.joda.time.DateTimeFieldType[]",
      "isArray": true
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the array of field types (cloned), largest to smallest.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getValue(int index)",
    "name": "getValue",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the index.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getValues()",
    "name": "getValues",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the current values of each field (cloned), largest to smallest.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withChronologyRetainFields(org.joda.time.Chronology newChronology)",
    "name": "withChronologyRetainFields",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "org.joda.time.Partial",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.Chronology",
          "name": "Chronology",
          "isArray": false
        },
        "name": "newChronology"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.Chronology",
            "name": "Chronology",
            "isArray": false
          },
          "name": "newChronology"
        },
        "comment": "the new chronology. newChronology is null means ISO.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      }
    ],
    "returnTag": {
      "comment": "a copy of this datetime with a different chronology.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the values are invalid for the new chronology.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "with(org.joda.time.DateTimeFieldType fieldType, int value)",
    "name": "with",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "org.joda.time.Partial",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DateTimeFieldType",
          "name": "DateTimeFieldType",
          "isArray": false
        },
        "name": "fieldType"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DateTimeFieldType",
            "name": "DateTimeFieldType",
            "isArray": false
          },
          "name": "fieldType"
        },
        "comment": "the field type to set. fieldType is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the value to set.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a copy of this instance with the field set.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is null or invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "without(org.joda.time.DateTimeFieldType fieldType)",
    "name": "without",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "org.joda.time.Partial",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DateTimeFieldType",
          "name": "DateTimeFieldType",
          "isArray": false
        },
        "name": "fieldType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DateTimeFieldType",
            "name": "DateTimeFieldType",
            "isArray": false
          },
          "name": "fieldType"
        },
        "comment": "the field type to remove null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a copy of this instance with the field removed.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withField(org.joda.time.DateTimeFieldType fieldType, int value)",
    "name": "withField",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "org.joda.time.Partial",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DateTimeFieldType",
          "name": "DateTimeFieldType",
          "isArray": false
        },
        "name": "fieldType"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DateTimeFieldType",
            "name": "DateTimeFieldType",
            "isArray": false
          },
          "name": "fieldType"
        },
        "comment": "the field type to set. fieldType is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the value to set.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a copy of this instance with the field set.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is null or invalid.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withFieldAdded(org.joda.time.DurationFieldType fieldType, int amount)",
    "name": "withFieldAdded",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "org.joda.time.Partial",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DurationFieldType",
          "name": "DurationFieldType",
          "isArray": false
        },
        "name": "fieldType"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DurationFieldType",
            "name": "DurationFieldType",
            "isArray": false
          },
          "name": "fieldType"
        },
        "comment": "the field type to add to. fieldType is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "amount"
        },
        "comment": "the amount to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a copy of this instance with the field updated.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is null or invalid.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the new datetime exceeds the capacity.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withFieldAddWrapped(org.joda.time.DurationFieldType fieldType, int amount)",
    "name": "withFieldAddWrapped",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "org.joda.time.Partial",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DurationFieldType",
          "name": "DurationFieldType",
          "isArray": false
        },
        "name": "fieldType"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DurationFieldType",
            "name": "DurationFieldType",
            "isArray": false
          },
          "name": "fieldType"
        },
        "comment": "the field type to add to. fieldType is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "amount"
        },
        "comment": "the amount to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a copy of this instance with the field updated.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value is null or invalid.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the new datetime exceeds the capacity.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "withPeriodAdded(org.joda.time.ReadablePeriod period, int scalar)",
    "name": "withPeriodAdded",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "org.joda.time.Partial",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePeriod",
          "name": "ReadablePeriod",
          "isArray": false
        },
        "name": "period"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "scalar"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadablePeriod",
            "name": "ReadablePeriod",
            "isArray": false
          },
          "name": "period"
        },
        "comment": "the period to add to this one. period is null means zero.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "scalar"
        },
        "comment": "the amount of times to add. scalar is such as -1 to subtract once.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a copy of this instance with the period added.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the new datetime exceeds the capacity.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "plus(org.joda.time.ReadablePeriod period)",
    "name": "plus",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "org.joda.time.Partial",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePeriod",
          "name": "ReadablePeriod",
          "isArray": false
        },
        "name": "period"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadablePeriod",
            "name": "ReadablePeriod",
            "isArray": false
          },
          "name": "period"
        },
        "comment": "the duration to add to this one. period is null means zero.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      }
    ],
    "returnTag": {
      "comment": "a copy of this instance with the period added.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the new datetime exceeds the capacity of a long.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "minus(org.joda.time.ReadablePeriod period)",
    "name": "minus",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "org.joda.time.Partial",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePeriod",
          "name": "ReadablePeriod",
          "isArray": false
        },
        "name": "period"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadablePeriod",
            "name": "ReadablePeriod",
            "isArray": false
          },
          "name": "period"
        },
        "comment": "the period to reduce this instant by.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a copy of this instance with the period taken away.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ArithmeticException",
          "name": "ArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the new datetime exceeds the capacity of a long.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "property(org.joda.time.DateTimeFieldType type)",
    "name": "property",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.Partial$Property",
      "name": "org.joda.time.Partial$Property",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.DateTimeFieldType",
          "name": "DateTimeFieldType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.DateTimeFieldType",
            "name": "DateTimeFieldType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the field type to get the property for. type is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "the property object.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the field is null or unsupported.",
        "kind": "THROWS",
        "condition": "receiverObjectID.getFields()==null"
      }
    ]
  },
  {
    "signature": "isMatch(org.joda.time.ReadableInstant instant)",
    "name": "isMatch",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadableInstant",
          "name": "ReadableInstant",
          "isArray": false
        },
        "name": "instant"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadableInstant",
            "name": "ReadableInstant",
            "isArray": false
          },
          "name": "instant"
        },
        "comment": "an instant to check against. instant is null means now in default zone.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      }
    ],
    "returnTag": {
      "comment": "true if this partial matches the specified instant.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isMatch(org.joda.time.ReadablePartial partial)",
    "name": "isMatch",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.joda.time.ReadablePartial",
          "name": "ReadablePartial",
          "isArray": false
        },
        "name": "partial"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.joda.time.ReadablePartial",
            "name": "ReadablePartial",
            "isArray": false
          },
          "name": "partial"
        },
        "comment": "a partial to check against. partial is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "true if this partial matches the specified partial.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the partial is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the fields of the two partials do not match.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getFormatter()",
    "name": "getFormatter",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.joda.time.format.DateTimeFormatter",
      "name": "org.joda.time.format.DateTimeFormatter",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a formatter suitable for the fields in this partial, null if none is suitable.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "ISO8601 formatted string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toStringList()",
    "name": "toStringList",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a toString format that lists all the fields.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toString(java.lang.String pattern)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "pattern"
        },
        "comment": "the pattern specification. pattern is null means use toString.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "toString(java.lang.String pattern, java.util.Locale locale)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.joda.time.Partial",
      "name": "Partial",
      "isArray": false
    },
    "targetClass": "org.joda.time.Partial",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      },
      {
        "type": {
          "qualifiedName": "java.util.Locale",
          "name": "Locale",
          "isArray": false
        },
        "name": "locale"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "pattern"
        },
        "comment": "the pattern specification. pattern is null means use toString.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Locale",
            "name": "Locale",
            "isArray": false
          },
          "name": "locale"
        },
        "comment": "Locale to use. locale is null means default.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  }
]