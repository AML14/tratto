[
  {
    "signature": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator(java.lang.String name, boolean fsal, double[] c, double[][] a, double[] b, org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator prototype, double minStep, double maxStep, double scalAbsoluteTolerance, double scalRelativeTolerance)",
    "name": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
      "name": "EmbeddedRungeKuttaIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "fsal"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "c"
      },
      {
        "type": {
          "qualifiedName": "[[D",
          "name": "double[][]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator",
          "name": "RungeKuttaStepInterpolator",
          "isArray": false
        },
        "name": "prototype"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minStep"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxStep"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "scalAbsoluteTolerance"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "scalRelativeTolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "name of the method.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "fsal"
        },
        "comment": "indicate that the method is an fsal.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "c"
        },
        "comment": "time steps from Butcher array (without the first zero).",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[[D",
            "name": "double[][]",
            "isArray": true
          },
          "name": "a"
        },
        "comment": "a is internal. internal weights from Butcher array (without the first empty row).",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "b"
        },
        "comment": "propagation weights for the high order method from Butcher array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator",
            "name": "RungeKuttaStepInterpolator",
            "isArray": false
          },
          "name": "prototype"
        },
        "comment": "prototype of the step interpolator to use.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "minStep"
        },
        "comment": "minimal step (. minStep is positive even for backward integration) the last step smaller than this.",
        "kind": "PARAM",
        "condition": "args[6]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "maxStep"
        },
        "comment": "maximal step (. maxStep is positive even for backward integration).",
        "kind": "PARAM",
        "condition": "args[7]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "scalAbsoluteTolerance"
        },
        "comment": "allowed absolute error.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "scalRelativeTolerance"
        },
        "comment": "allowed relative error.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator(java.lang.String name, boolean fsal, double[] c, double[][] a, double[] b, org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator prototype, double minStep, double maxStep, double[] vecAbsoluteTolerance, double[] vecRelativeTolerance)",
    "name": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
      "name": "EmbeddedRungeKuttaIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "fsal"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "c"
      },
      {
        "type": {
          "qualifiedName": "[[D",
          "name": "double[][]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator",
          "name": "RungeKuttaStepInterpolator",
          "isArray": false
        },
        "name": "prototype"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minStep"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxStep"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "vecAbsoluteTolerance"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "vecRelativeTolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "name of the method.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "fsal"
        },
        "comment": "indicate that the method is an fsal.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "c"
        },
        "comment": "time steps from Butcher array (without the first zero).",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[[D",
            "name": "double[][]",
            "isArray": true
          },
          "name": "a"
        },
        "comment": "a is internal. internal weights from Butcher array (without the first empty row).",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "b"
        },
        "comment": "propagation weights for the high order method from Butcher array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator",
            "name": "RungeKuttaStepInterpolator",
            "isArray": false
          },
          "name": "prototype"
        },
        "comment": "prototype of the step interpolator to use.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "minStep"
        },
        "comment": "minimal step (. minStep is positive even for backward integration) the last step smaller than this.",
        "kind": "PARAM",
        "condition": "args[6]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "maxStep"
        },
        "comment": "maximal step (. maxStep is positive even for backward integration).",
        "kind": "PARAM",
        "condition": "args[7]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "vecAbsoluteTolerance"
        },
        "comment": "allowed absolute error.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "vecRelativeTolerance"
        },
        "comment": "allowed relative error.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getOrder()",
    "name": "getOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
      "name": "EmbeddedRungeKuttaIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "order of the method.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSafety()",
    "name": "getSafety",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
      "name": "EmbeddedRungeKuttaIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "safety factor.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setSafety(double safety)",
    "name": "setSafety",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
      "name": "EmbeddedRungeKuttaIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "safety"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "safety"
        },
        "comment": "safety factor.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, double t0, double[] y0, double t, double[] y)",
    "name": "integrate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
      "name": "EmbeddedRungeKuttaIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math.ode.FirstOrderDifferentialEquations",
          "name": "FirstOrderDifferentialEquations",
          "isArray": false
        },
        "name": "equations"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t0"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "y0"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "y"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getMinReduction()",
    "name": "getMinReduction",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
      "name": "EmbeddedRungeKuttaIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "minimal reduction factor.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setMinReduction(double minReduction)",
    "name": "setMinReduction",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
      "name": "EmbeddedRungeKuttaIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minReduction"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "minReduction"
        },
        "comment": "minReduction is minimal. minimal reduction factor.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getMaxGrowth()",
    "name": "getMaxGrowth",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
      "name": "EmbeddedRungeKuttaIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "maximal growth factor.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setMaxGrowth(double maxGrowth)",
    "name": "setMaxGrowth",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
      "name": "EmbeddedRungeKuttaIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxGrowth"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "maxGrowth"
        },
        "comment": "maximal growth factor.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "estimateError(double[][] yDotK, double[] y0, double[] y1, double h)",
    "name": "estimateError",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
      "name": "EmbeddedRungeKuttaIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[[D",
          "name": "double[][]",
          "isArray": true
        },
        "name": "yDotK"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "y0"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "y1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "h"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[[D",
            "name": "double[][]",
            "isArray": true
          },
          "name": "yDotK"
        },
        "comment": "derivatives computed during the first stages.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "y0"
        },
        "comment": "estimate of the step at the start of the step.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "y1"
        },
        "comment": "estimate of the step at the end of the step.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "h"
        },
        "comment": "h is current. current step.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "error ratio, greater than 1 if step should be rejected.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]