/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 15:02:10 GMT 2023
 */
package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
import org.apache.commons.math.ode.ExpandableStatefulODE;
import org.apache.commons.math.ode.FirstOrderConverter;
import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math.ode.sampling.FixedStepHandler;
import org.apache.commons.math.ode.sampling.StepHandler;
import org.apache.commons.math.ode.sampling.StepNormalizer;
import org.apache.commons.math.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        dormandPrince853Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        dormandPrince853Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        dormandPrince853Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        dormandPrince853Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        dormandPrince853Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        dormandPrince853Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        dormandPrince853Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        dormandPrince853Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        dormandPrince853Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0010() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[5];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1772.9071, (-1094.9011498412), 1772.9071, (-1094.9011498412));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[5];
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 808.516339212, doubleArray0, 0.0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test0114() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
    }

    @Test(timeout = 4000)
    public void test0115() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0116() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0117() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0118() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0119() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test0120() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0121() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0122() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0123() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0124() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
        double[] doubleArray0 = new double[1];
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(104).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test0125() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
        double[] doubleArray0 = new double[1];
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(104).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test0126() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, 0.0012326388888888888, 1677.095072, 1677.095072);
        double[] doubleArray0 = new double[1];
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(104).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0012326388888888888, doubleArray0, 684.7876108027, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0227() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
    }

    @Test(timeout = 4000)
    public void test0228() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0229() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0230() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0231() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0232() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0233() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        graggBulirschStoerIntegrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0234() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        graggBulirschStoerIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0235() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        graggBulirschStoerIntegrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0236() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        graggBulirschStoerIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0237() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0238() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0239() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
        graggBulirschStoerIntegrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0240() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
        graggBulirschStoerIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0241() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
        graggBulirschStoerIntegrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0242() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
        graggBulirschStoerIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0243() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1582.4, (-1.0), 0.0, 2527.1915914585);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
        graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0344() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
    }

    @Test(timeout = 4000)
    public void test0345() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        dormandPrince853Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0346() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        dormandPrince853Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0347() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        dormandPrince853Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0348() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        dormandPrince853Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0349() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        dormandPrince853Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0350() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        dormandPrince853Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test0351() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        dormandPrince853Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0352() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        dormandPrince853Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0353() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        dormandPrince853Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0354() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0355() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
        dormandPrince853Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0356() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
        dormandPrince853Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0357() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
        dormandPrince853Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0358() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
        dormandPrince853Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0359() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
        dormandPrince853Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0360() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
        dormandPrince853Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test0361() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
        dormandPrince853Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0362() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
        dormandPrince853Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0363() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
        double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
        dormandPrince853Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0464() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
    }

    @Test(timeout = 4000)
    public void test0465() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0466() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0467() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test0468() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0469() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0470() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0471() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0472() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0473() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0474() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0475() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0476() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0477() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test0478() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0479() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0480() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0481() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0482() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0483() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1093.2452929), (-1093.2452929), (-1093.2452929), 6275.5009334442775);
        double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0584() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
    }

    @Test(timeout = 4000)
    public void test0585() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
        graggBulirschStoerIntegrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0586() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
        graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0587() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
        graggBulirschStoerIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0588() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
        graggBulirschStoerIntegrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0589() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
        graggBulirschStoerIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0590() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test0591() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.845047803), (-565.845047803), (-1083.406), 330.933267253787);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test0692() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
    }

    @Test(timeout = 4000)
    public void test0693() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
        threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0694() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
        threeEighthesIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0695() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
        threeEighthesIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0696() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test0697() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test0698() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-414.3));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, (double[]) null, 1000.0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test0799() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test07102() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test07103() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test07104() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test07105() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test07106() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test07107() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test07108() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test07109() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test07110() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test07111() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test07112() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test07113() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    }

    @Test(timeout = 4000)
    public void test07114() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test07115() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        expandableStatefulODE0.getTime();
    }

    @Test(timeout = 4000)
    public void test07116() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-1.0));
    }

    @Test(timeout = 4000)
    public void test08117() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
    }

    @Test(timeout = 4000)
    public void test08118() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        threeEighthesIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test08119() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test08120() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        threeEighthesIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test08121() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        threeEighthesIntegrator0.setMaxEvaluations(0);
        threeEighthesIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test08122() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        threeEighthesIntegrator0.setMaxEvaluations(0);
        threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test08123() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        threeEighthesIntegrator0.setMaxEvaluations(0);
        threeEighthesIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test08124() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        threeEighthesIntegrator0.setMaxEvaluations(0);
        double[] doubleArray0 = new double[1];
        threeEighthesIntegrator0.computeDerivatives(804.250840028896, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test09125() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
    }

    @Test(timeout = 4000)
    public void test09126() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test09127() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test09128() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test09129() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test09130() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test09131() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test09132() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test09133() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test09134() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test09135() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.setMaxEvaluations((-822));
        dormandPrince853Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test09136() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.setMaxEvaluations((-822));
        dormandPrince853Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test09137() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.setMaxEvaluations((-822));
        dormandPrince853Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test09138() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.setMaxEvaluations((-822));
        dormandPrince853Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test09139() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.setMaxEvaluations((-822));
        dormandPrince853Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test09140() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.setMaxEvaluations((-822));
        dormandPrince853Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test09141() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.setMaxEvaluations((-822));
        dormandPrince853Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test09142() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.setMaxEvaluations((-822));
        dormandPrince853Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test09143() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 3.141592653589793, 3.141592653589793, 0.0);
        dormandPrince853Integrator0.setMaxEvaluations((-822));
        dormandPrince853Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test10144() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
    }

    @Test(timeout = 4000)
    public void test10145() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test10146() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test10147() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test10148() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.addEventHandler((EventHandler) null, 1344.57060599318, (-622.4274438751), 9, (UnivariateRealSolver) null);
        threeEighthesIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test10149() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.addEventHandler((EventHandler) null, 1344.57060599318, (-622.4274438751), 9, (UnivariateRealSolver) null);
        threeEighthesIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test10150() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.addEventHandler((EventHandler) null, 1344.57060599318, (-622.4274438751), 9, (UnivariateRealSolver) null);
        threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test11151() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
    }

    @Test(timeout = 4000)
    public void test11152() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
        eulerIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test11153() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
        eulerIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test11154() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
        eulerIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test11155() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
        StepNormalizer stepNormalizer0 = new StepNormalizer(1942.7446384883, fixedStepHandler0, stepNormalizerMode0);
    }

    @Test(timeout = 4000)
    public void test11156() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
        StepNormalizer stepNormalizer0 = new StepNormalizer(1942.7446384883, fixedStepHandler0, stepNormalizerMode0);
        eulerIntegrator0.addStepHandler(stepNormalizer0);
        eulerIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test11157() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
        StepNormalizer stepNormalizer0 = new StepNormalizer(1942.7446384883, fixedStepHandler0, stepNormalizerMode0);
        eulerIntegrator0.addStepHandler(stepNormalizer0);
        eulerIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test11158() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
        StepNormalizer stepNormalizer0 = new StepNormalizer(1942.7446384883, fixedStepHandler0, stepNormalizerMode0);
        eulerIntegrator0.addStepHandler(stepNormalizer0);
        eulerIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test12163() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        double[] doubleArray0 = new double[1];
        threeEighthesIntegrator0.computeDerivatives(804.250840028896, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test13164() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test13167() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test13168() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test13169() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test13170() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test13171() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test13172() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test13173() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test13174() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test13175() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test13176() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test13177() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test13178() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(419.342263060406, 1946.24493188, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 5, doubleArray0, (double) 5, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test14179() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test14182() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        adamsBashforthIntegrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test14183() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        adamsBashforthIntegrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test14184() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        adamsBashforthIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test14185() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        adamsBashforthIntegrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test14186() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        adamsBashforthIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test14187() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        adamsBashforthIntegrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test14188() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        adamsBashforthIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test14189() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        adamsBashforthIntegrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test14190() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test14191() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test14192() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    }

    @Test(timeout = 4000)
    public void test14193() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test14194() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        expandableStatefulODE0.getTime();
    }

    @Test(timeout = 4000)
    public void test14195() throws Throwable {
        double[] doubleArray0 = new double[0];
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 893.080324795, 893.080324795, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-2428.4));
    }

    @Test(timeout = 4000)
    public void test15196() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
    }

    @Test(timeout = 4000)
    public void test15197() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test15198() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        graggBulirschStoerIntegrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test15199() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        graggBulirschStoerIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test15200() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        graggBulirschStoerIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test15201() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        graggBulirschStoerIntegrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test15202() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test15203() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test15204() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
        graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
        graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test15205() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
        graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
        graggBulirschStoerIntegrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test15206() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
        graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
        graggBulirschStoerIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test15207() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
        graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
        graggBulirschStoerIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test15208() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
        graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
        graggBulirschStoerIntegrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test15209() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
        graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    }

    @Test(timeout = 4000)
    public void test15210() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
        graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test15211() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3396.3176252791), Double.NaN, (-1568.24962368321), (-1568.24962368321));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
        graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 2166.82, 0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        expandableStatefulODE0.getTime();
    }

    @Test(timeout = 4000)
    public void test16212() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
    }

    @Test(timeout = 4000)
    public void test16213() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
        midpointIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test16214() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
        midpointIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test16215() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
        midpointIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test16216() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test16217() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test16218() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        double double0 = midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 330.933267253787, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test16221() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        double double0 = midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 330.933267253787, doubleArray0);
        midpointIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test16222() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        double double0 = midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 330.933267253787, doubleArray0);
        midpointIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test16223() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        double double0 = midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 330.933267253787, doubleArray0);
        midpointIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test16224() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-588.160007279939));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        double double0 = midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 330.933267253787, doubleArray0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test17225() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
    }

    @Test(timeout = 4000)
    public void test17226() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
        graggBulirschStoerIntegrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test17227() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
        graggBulirschStoerIntegrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test17228() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
        graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test17229() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
        graggBulirschStoerIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test17230() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
        graggBulirschStoerIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test17231() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
        graggBulirschStoerIntegrator0.setMaxEvaluations(544);
        graggBulirschStoerIntegrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test17232() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
        graggBulirschStoerIntegrator0.setMaxEvaluations(544);
        graggBulirschStoerIntegrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test17233() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
        graggBulirschStoerIntegrator0.setMaxEvaluations(544);
        graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test17234() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
        graggBulirschStoerIntegrator0.setMaxEvaluations(544);
        graggBulirschStoerIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test17235() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-588.160007279939), 330.933267253787, 3443.0337974, 330.933267253787);
        graggBulirschStoerIntegrator0.setMaxEvaluations(544);
        graggBulirschStoerIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test18236() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test18239() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test18240() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test18241() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test18242() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test18243() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test18244() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test18245() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test18246() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test18247() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        dormandPrince853Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test18248() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
    }

    @Test(timeout = 4000)
    public void test18250() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        dormandPrince853Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test18251() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        dormandPrince853Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test18252() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        dormandPrince853Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test18253() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        dormandPrince853Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test18254() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        dormandPrince853Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test18255() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        dormandPrince853Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test18256() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        dormandPrince853Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test18257() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        dormandPrince853Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test18258() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        dormandPrince853Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test18259() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
        collection0.contains(eventHandler0);
    }

    @Test(timeout = 4000)
    public void test18260() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
    }

    @Test(timeout = 4000)
    public void test18263() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
        dormandPrince853Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test18264() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
        dormandPrince853Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test18265() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
        dormandPrince853Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test18266() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
        dormandPrince853Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test18267() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
        dormandPrince853Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test18268() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
        dormandPrince853Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test18269() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
        dormandPrince853Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test18270() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
        dormandPrince853Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test18271() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(844.63099033, 844.63099033, doubleArray0, doubleArray0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(eventHandler0).toString();
        dormandPrince853Integrator0.addEventHandler(eventHandler0, 844.63099033, 0.0, 782);
        Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
        dormandPrince853Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test19276() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        threeEighthesIntegrator0.clearEventHandlers();
        threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test19277() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        threeEighthesIntegrator0.clearEventHandlers();
        threeEighthesIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test19278() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        threeEighthesIntegrator0.clearEventHandlers();
        threeEighthesIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test20283() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.clearStepHandlers();
        threeEighthesIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test20284() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.clearStepHandlers();
        threeEighthesIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test20285() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.clearStepHandlers();
        threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test21290() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        int int0 = threeEighthesIntegrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test21291() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        int int0 = threeEighthesIntegrator0.getMaxEvaluations();
        threeEighthesIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test21292() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        int int0 = threeEighthesIntegrator0.getMaxEvaluations();
        threeEighthesIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test21293() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        int int0 = threeEighthesIntegrator0.getMaxEvaluations();
        threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test22306() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
    }

    @Test(timeout = 4000)
    public void test22309() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
        dormandPrince853Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test22310() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
        dormandPrince853Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test22311() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
        dormandPrince853Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test22312() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
        dormandPrince853Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test22313() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
        dormandPrince853Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test22314() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
        dormandPrince853Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test22315() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
        dormandPrince853Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test22316() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
        dormandPrince853Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test22317() throws Throwable {
        double[] doubleArray0 = new double[3];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2918.610019620804, 2918.610019620804, doubleArray0, doubleArray0);
        Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
        dormandPrince853Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test23318() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
    }

    @Test(timeout = 4000)
    public void test23319() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
        threeEighthesIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test23320() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
        threeEighthesIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test23321() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
        threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test23322() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
        double double0 = threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test23323() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
        double double0 = threeEighthesIntegrator0.getCurrentStepStart();
        threeEighthesIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test23324() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
        double double0 = threeEighthesIntegrator0.getCurrentStepStart();
        threeEighthesIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test23325() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(519.5);
        double double0 = threeEighthesIntegrator0.getCurrentStepStart();
        threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test24326() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test24329() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test24330() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test24331() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test24332() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test24333() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test24334() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test24335() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test24336() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test24337() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test24338() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        String string0 = highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test24342() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        String string0 = highamHall54Integrator0.getName();
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test24343() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        String string0 = highamHall54Integrator0.getName();
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test24344() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        String string0 = highamHall54Integrator0.getName();
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test24345() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        String string0 = highamHall54Integrator0.getName();
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test24346() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        String string0 = highamHall54Integrator0.getName();
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test24347() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        String string0 = highamHall54Integrator0.getName();
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test24348() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        String string0 = highamHall54Integrator0.getName();
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test24349() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        String string0 = highamHall54Integrator0.getName();
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test24350() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(590.3, 590.3, doubleArray0, doubleArray0);
        String string0 = highamHall54Integrator0.getName();
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test25355() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        int int0 = threeEighthesIntegrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test25356() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        int int0 = threeEighthesIntegrator0.getEvaluations();
        threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test25357() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        int int0 = threeEighthesIntegrator0.getEvaluations();
        threeEighthesIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test25358() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        int int0 = threeEighthesIntegrator0.getEvaluations();
        threeEighthesIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test26363() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test26364() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test26365() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    }

    @Test(timeout = 4000)
    public void test26366() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test26367() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        expandableStatefulODE0.getTime();
    }

    @Test(timeout = 4000)
    public void test27372() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
        threeEighthesIntegrator0.getName();
    }

    @Test(timeout = 4000)
    public void test27373() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
        threeEighthesIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test27374() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
        threeEighthesIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test27375() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test27376() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test27377() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
    }

    @Test(timeout = 4000)
    public void test27378() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test27379() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        expandableStatefulODE0.getTime();
    }

    @Test(timeout = 4000)
    public void test27380() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-622.4274438751));
        threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-1.0), 2699);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-2736.06));
    }
}
