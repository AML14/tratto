/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 04:43:57 GMT 2023
 */
package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-2480.05522);
        double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (-821.0);
        double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-821.0));
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[0];
        boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[7];
        boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        float[] floatArray0 = new float[2];
        float[] floatArray1 = new float[1];
        boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        float[] floatArray0 = new float[23];
        float[] floatArray1 = new float[0];
        boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        double double0 = MathArrays.linearCombination((double) 2231, 1762.01, 0.0, 0.0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 1.304E19;
        doubleArray0[2] = Double.POSITIVE_INFINITY;
        double double0 = MathArrays.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[3] = 3.26E18;
        double double0 = MathArrays.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[3] = 3.834E-20;
        double double0 = MathArrays.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        long[][] longArray0 = new long[2][0];
        long[] longArray1 = new long[8];
        longArray1[0] = 2937L;
        longArray0[0] = longArray1;
        MathArrays.checkNonNegative(longArray0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        long[] longArray0 = new long[2];
        longArray0[0] = 100L;
        MathArrays.checkNonNegative(longArray0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = Double.NaN;
        doubleArray0[1] = (-3239.4);
        MathArrays.checkPositive(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        long[][] longArray0 = new long[3][5];
        long[] longArray1 = new long[2];
        longArray0[0] = longArray1;
        MathArrays.checkRectangular(longArray0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        long[][] longArray0 = new long[0][7];
        MathArrays.checkRectangular(longArray0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[1] = 3995.29744;
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        String[] stringArray0 = new String[8];
        stringArray0[0] = "";
        stringArray0[1] = "";
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double((-58.37));
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        int[] intArray0 = new int[1];
        intArray0[0] = 1066;
        int int0 = MathArrays.distanceInf(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 6623593.361970729;
        double double0 = MathArrays.distance(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 142;
        int int0 = MathArrays.distance1(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[1] = (-2.6919816358913188E22);
        double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (-1.0);
        double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[5];
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = new double[6];
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        double[] doubleArray0 = new double[7];
        double[] doubleArray1 = new double[8];
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = (-1.0);
        double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        double[] doubleArray0 = new double[7];
        double[] doubleArray1 = new double[2];
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (-550.682);
        MathArrays.scaleInPlace((-2110.891841), doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        double[] doubleArray0 = new double[1];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[4] = (-2551.8);
        double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
        double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        double double0 = MathArrays.linearCombination((-1819.8342), 0.0, (-1819.8342), (-1819.8342), (-1819.8342), (-1819.8342), 0.0, 3.32);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        double double0 = MathArrays.linearCombination(1234.5736213204275, 100.0, (-1.0), (-2006.80231954626), 0.0, 2670.4115015352363, (-1052.0847), 1234.5736213204275);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 1234.5736213204275);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        double double0 = MathArrays.linearCombination((-20.0), (-20.0), 3488.314585954745, (-20.0), 3488.314585954745, 3995.29744);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        double double0 = MathArrays.linearCombination(0.0, 0.0, 1.0E-5, 1.304E19);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        double double0 = MathArrays.linearCombination(546.13186165, (-740.699253979), 1242.7670124, 0.0);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        double[] doubleArray0 = new double[1];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        int[] intArray0 = new int[4];
        intArray0[0] = 1364;
        int[] intArray1 = new int[8];
        int int0 = MathArrays.distanceInf(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[2] = 64.448060412;
        double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-464.6));
        double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test04445() throws Throwable {
        int[] intArray0 = new int[1];
        intArray0[0] = 783;
        int[] intArray1 = new int[9];
        int int0 = MathArrays.distance1(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test04546() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (-1.0);
        double[] doubleArray1 = new double[5];
        double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test04647() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = new int[3];
        intArray1[0] = 9;
        double double0 = MathArrays.distance(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test04748() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (-2446.0);
        double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
        double double0 = MathArrays.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test04850() throws Throwable {
        int[] intArray0 = new int[6];
        int[] intArray1 = MathArrays.copyOf(intArray0, 119);
    }

    @Test(timeout = 4000)
    public void test04951() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = MathArrays.copyOf(intArray0, 0);
    }

    @Test(timeout = 4000)
    public void test05052() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = MathArrays.copyOf(intArray0);
    }

    @Test(timeout = 4000)
    public void test05154() throws Throwable {
        double[] doubleArray0 = new double[7];
        double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
    }

    @Test(timeout = 4000)
    public void test05255() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test05357() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = MathArrays.scale((-107.611519), doubleArray0);
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
    }

    @Test(timeout = 4000)
    public void test05458() throws Throwable {
        double[] doubleArray0 = new double[3];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
    }

    @Test(timeout = 4000)
    public void test05559() throws Throwable {
        MathArrays.scaleInPlace(0.25, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test05660() throws Throwable {
        MathArrays.scale(0.0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test05761() throws Throwable {
        MathArrays.safeNorm((double[]) null);
    }

    @Test(timeout = 4000)
    public void test05862() throws Throwable {
        MathArrays.normalizeArray((double[]) null, 392.948);
    }

    @Test(timeout = 4000)
    public void test05963() throws Throwable {
        MathArrays.linearCombination((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test06064() throws Throwable {
        double[] doubleArray0 = new double[0];
        MathArrays.linearCombination(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test06165() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test06266() throws Throwable {
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test06367() throws Throwable {
        double[] doubleArray0 = new double[0];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test06468() throws Throwable {
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test06569() throws Throwable {
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test06670() throws Throwable {
        MathArrays.ebeDivide((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test06771() throws Throwable {
        MathArrays.ebeAdd((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test06872() throws Throwable {
        MathArrays.distanceInf((int[]) null, (int[]) null);
    }

    @Test(timeout = 4000)
    public void test06973() throws Throwable {
        int[] intArray0 = new int[8];
        int[] intArray1 = new int[0];
        MathArrays.distanceInf(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test07074() throws Throwable {
        MathArrays.distanceInf((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test07175() throws Throwable {
        double[] doubleArray0 = new double[1];
        double[] doubleArray1 = new double[4];
        MathArrays.distanceInf(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test07276() throws Throwable {
        MathArrays.distance1((int[]) null, (int[]) null);
    }

    @Test(timeout = 4000)
    public void test07377() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = new int[5];
        MathArrays.distance1(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test07478() throws Throwable {
        MathArrays.distance1((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test07579() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[1];
        MathArrays.distance1(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test07680() throws Throwable {
        MathArrays.distance((int[]) null, (int[]) null);
    }

    @Test(timeout = 4000)
    public void test07781() throws Throwable {
        int[] intArray0 = new int[6];
        int[] intArray1 = new int[1];
        MathArrays.distance(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test07882() throws Throwable {
        MathArrays.distance((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test07983() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        MathArrays.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test08084() throws Throwable {
        MathArrays.copyOf((int[]) null, 0);
    }

    @Test(timeout = 4000)
    public void test08185() throws Throwable {
        MathArrays.copyOf((int[]) null);
    }

    @Test(timeout = 4000)
    public void test08286() throws Throwable {
        MathArrays.copyOf((double[]) null, 0);
    }

    @Test(timeout = 4000)
    public void test08387() throws Throwable {
        double[] doubleArray0 = new double[9];
        MathArrays.copyOf(doubleArray0, (-977));
    }

    @Test(timeout = 4000)
    public void test08488() throws Throwable {
        MathArrays.copyOf((double[]) null);
    }

    @Test(timeout = 4000)
    public void test08589() throws Throwable {
        double[] doubleArray0 = new double[1];
        double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1325);
        // Undeclared exception!
        MathArrays.convolve(doubleArray1, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test08690() throws Throwable {
        MathArrays.checkRectangular((long[][]) null);
    }

    @Test(timeout = 4000)
    public void test08791() throws Throwable {
        MathArrays.checkPositive((double[]) null);
    }

    @Test(timeout = 4000)
    public void test08892() throws Throwable {
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, true);
    }

    @Test(timeout = 4000)
    public void test08993() throws Throwable {
        double[] doubleArray0 = new double[0];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
    }

    @Test(timeout = 4000)
    public void test09094() throws Throwable {
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test09195() throws Throwable {
        double[] doubleArray0 = new double[9];
        MathArrays.checkOrder(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test09296() throws Throwable {
        MathArrays.checkOrder((double[]) null);
    }

    @Test(timeout = 4000)
    public void test09397() throws Throwable {
        double[] doubleArray0 = new double[0];
        MathArrays.checkOrder(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test09498() throws Throwable {
        MathArrays.checkNonNegative((long[][]) null);
    }

    @Test(timeout = 4000)
    public void test09599() throws Throwable {
        MathArrays.checkNonNegative((long[]) null);
    }

    @Test(timeout = 4000)
    public void test096100() throws Throwable {
        Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
        doReturn((Class) null).when(field0).getRuntimeClass();
        MathArrays.buildArray(field0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test097101() throws Throwable {
        Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
        doReturn((Class) null).when(field0).getRuntimeClass();
        MathArrays.buildArray(field0, 2608);
    }

    @Test(timeout = 4000)
    public void test098102() throws Throwable {
        Class<FieldElement> class0 = FieldElement.class;
        Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
        doReturn(class0).when(field0).getRuntimeClass();
        MathArrays.buildArray(field0, (-969));
    }

    @Test(timeout = 4000)
    public void test099103() throws Throwable {
        Class<FieldElement> class0 = FieldElement.class;
        Double double0 = new Double(3.834E-20);
        FieldElement<Integer> fieldElement0 = (FieldElement<Integer>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
        Pair<Double, FieldElement<Integer>> pair0 = new Pair<Double, FieldElement<Integer>>(double0, fieldElement0);
        Field<Pair<Double, FieldElement<Integer>>> field0 = (Field<Pair<Double, FieldElement<Integer>>>) mock(Field.class, new ViolatedAssumptionAnswer());
        doReturn(class0).when(field0).getRuntimeClass();
        doReturn(pair0).when(field0).getZero();
        MathArrays.buildArray(field0, 3786);
    }

    @Test(timeout = 4000)
    public void test100104() throws Throwable {
        double[] doubleArray0 = new double[1];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        double[][] doubleArray1 = new double[4][4];
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test101105() throws Throwable {
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        double[][] doubleArray0 = new double[1][5];
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test102106() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[1] = 599.7;
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
    }

    @Test(timeout = 4000)
    public void test103107() throws Throwable {
        double[] doubleArray0 = new double[8];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test104108() throws Throwable {
        int[] intArray0 = new int[6];
        MathArrays.copyOf(intArray0, (-3361));
    }

    @Test(timeout = 4000)
    public void test105109() throws Throwable {
        Class<FieldElement> class0 = FieldElement.class;
        Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
        doReturn(class0).when(field0).getRuntimeClass();
        doReturn((Object) null).when(field0).getZero();
        Object[] objectArray0 = MathArrays.buildArray(field0, 2608);
    }

    @Test(timeout = 4000)
    public void test106110() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
        MathArrays.linearCombination(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test107111() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[0];
        MathArrays.convolve(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test108112() throws Throwable {
        double[] doubleArray0 = new double[0];
        MathArrays.convolve(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test109113() throws Throwable {
        Class<FieldElement> class0 = FieldElement.class;
        Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
        doReturn(class0).when(field0).getRuntimeClass();
        doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
        Object[][] objectArray0 = MathArrays.buildArray(field0, 109, 1914);
    }

    @Test(timeout = 4000)
    public void test110114() throws Throwable {
        double[] doubleArray0 = new double[3];
        Class<FieldElement> class0 = FieldElement.class;
        Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
        doReturn(class0).when(field0).getRuntimeClass();
        doReturn(doubleArray0[0]).when(field0).getZero();
        MathArrays.buildArray(field0, 241, 241);
    }

    @Test(timeout = 4000)
    public void test111115() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = Double.NaN;
        doubleArray0[1] = 468546.3197148148;
        double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
    }

    @Test(timeout = 4000)
    public void test112116() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = Double.NaN;
        MathArrays.normalizeArray(doubleArray0, 3.834E-20);
    }

    @Test(timeout = 4000)
    public void test113117() throws Throwable {
        double[] doubleArray0 = new double[4];
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
    }

    @Test(timeout = 4000)
    public void test114118() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[1] = 716.96956;
        double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
        boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test115120() throws Throwable {
        double[] doubleArray0 = new double[1];
        double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1325);
        boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test116122() throws Throwable {
        double[] doubleArray0 = new double[7];
        boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test117123() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test118124() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test119125() throws Throwable {
        boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test120126() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) 150;
        double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
        boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test121128() throws Throwable {
        double[] doubleArray0 = new double[3];
        boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test122129() throws Throwable {
        double[] doubleArray0 = new double[4];
        boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test123130() throws Throwable {
        boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test124131() throws Throwable {
        float[] floatArray0 = new float[8];
        floatArray0[1] = 1762.97F;
        float[] floatArray1 = new float[8];
        boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test125132() throws Throwable {
        float[] floatArray0 = new float[8];
        boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
    }

    @Test(timeout = 4000)
    public void test126133() throws Throwable {
        float[] floatArray0 = new float[4];
        float[] floatArray1 = new float[8];
        boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test127134() throws Throwable {
        boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
    }

    @Test(timeout = 4000)
    public void test128135() throws Throwable {
        float[] floatArray0 = new float[0];
        boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
    }

    @Test(timeout = 4000)
    public void test129136() throws Throwable {
        float[] floatArray0 = new float[0];
        boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
    }

    @Test(timeout = 4000)
    public void test130137() throws Throwable {
        float[] floatArray0 = new float[7];
        floatArray0[0] = (float) 147;
        float[] floatArray1 = new float[7];
        boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test131138() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = new float[5];
        boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test132139() throws Throwable {
        float[] floatArray0 = new float[0];
        boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
    }

    @Test(timeout = 4000)
    public void test133140() throws Throwable {
        float[] floatArray0 = new float[0];
        boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
    }

    @Test(timeout = 4000)
    public void test134141() throws Throwable {
        float[] floatArray0 = new float[2];
        boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
    }

    @Test(timeout = 4000)
    public void test135142() throws Throwable {
        boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
    }

    @Test(timeout = 4000)
    public void test136143() throws Throwable {
        double double0 = MathArrays.linearCombination((-940.0194), (-940.0194), Double.NaN, 2466.439, (-4031.26377258), (-940.0194), (-940.0194), (-940.0194));
    }

    @Test(timeout = 4000)
    public void test137144() throws Throwable {
        double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.32);
    }

    @Test(timeout = 4000)
    public void test138145() throws Throwable {
        double double0 = MathArrays.linearCombination(Double.NaN, 0.0, 389.70562938315, 3.834E-20, 389.70562938315, Double.NaN);
    }

    @Test(timeout = 4000)
    public void test139146() throws Throwable {
        double double0 = MathArrays.linearCombination(0.0, 1.304E19, 0.0, (-2064.40309500868), (-2064.40309500868), 1.304E19);
    }

    @Test(timeout = 4000)
    public void test140147() throws Throwable {
        double double0 = MathArrays.linearCombination(1.0, (double) 150, 1.34217729E8, Double.NaN);
    }

    @Test(timeout = 4000)
    public void test141148() throws Throwable {
        double double0 = MathArrays.linearCombination(0.0, (double) 0, 333.279, (double) 0);
    }

    @Test(timeout = 4000)
    public void test142149() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = Double.POSITIVE_INFINITY;
        double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test143150() throws Throwable {
        double[] doubleArray0 = new double[8];
        double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test144151() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1);
        MathArrays.linearCombination(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test145152() throws Throwable {
        double[] doubleArray0 = new double[1];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        double[][] doubleArray1 = new double[6][0];
        doubleArray1[0] = null;
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test146153() throws Throwable {
        MathArrays.sortInPlace((double[]) null, (double[][]) null);
    }

    @Test(timeout = 4000)
    public void test147154() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 3.834E-20;
        double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
        double double0 = MathArrays.safeNorm(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test148155() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 1.304E19;
        doubleArray0[2] = 1.304E19;
        double double0 = MathArrays.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test149156() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = Double.NaN;
        double double0 = MathArrays.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test150157() throws Throwable {
        double[] doubleArray0 = new double[9];
        double double0 = MathArrays.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test151158() throws Throwable {
        long[][] longArray0 = new long[2][0];
        long[] longArray1 = new long[8];
        longArray1[2] = (-2715L);
        longArray0[0] = longArray1;
        MathArrays.checkNonNegative(longArray0);
    }

    @Test(timeout = 4000)
    public void test152159() throws Throwable {
        long[] longArray0 = new long[4];
        longArray0[2] = (-1442L);
        MathArrays.checkNonNegative(longArray0);
    }

    @Test(timeout = 4000)
    public void test153160() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 1.1902911999999998E39;
        MathArrays.checkPositive(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test154161() throws Throwable {
        double[] doubleArray0 = new double[0];
        MathArrays.checkPositive(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test155162() throws Throwable {
        long[][] longArray0 = new long[8][4];
        long[] longArray1 = new long[9];
        longArray0[0] = longArray1;
        MathArrays.checkRectangular(longArray0);
    }

    @Test(timeout = 4000)
    public void test156163() throws Throwable {
        long[][] longArray0 = new long[2][4];
        MathArrays.checkRectangular(longArray0);
    }

    @Test(timeout = 4000)
    public void test157164() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[1] = (double) (-628);
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
    }

    @Test(timeout = 4000)
    public void test158165() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 179;
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
    }

    @Test(timeout = 4000)
    public void test159166() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 179;
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test160167() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 1.304E19;
        doubleArray0[2] = 1.304E19;
        doubleArray0[3] = 1.304E19;
        doubleArray0[4] = 1.304E19;
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        double[][] doubleArray1 = new double[4][8];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        doubleArray1[3] = doubleArray0;
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
    }

    @Test(timeout = 4000)
    public void test161168() throws Throwable {
        double[] doubleArray0 = new double[2];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
    }

    @Test(timeout = 4000)
    public void test162169() throws Throwable {
        double[] doubleArray0 = new double[2];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
    }

    @Test(timeout = 4000)
    public void test163170() throws Throwable {
        Integer[] integerArray0 = new Integer[6];
        Integer integer0 = new Integer(1319);
        integerArray0[0] = integer0;
        Integer integer1 = new Integer(206);
        integerArray0[1] = integer1;
        integerArray0[2] = integerArray0[0];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test164171() throws Throwable {
        String[] stringArray0 = new String[9];
        stringArray0[0] = "number of elements should be positive ({0})";
        stringArray0[1] = "7p#q|m7c]#<BcH+^y";
        stringArray0[2] = "0wvZ;11}";
        stringArray0[3] = "}Q??yHm xO";
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test165172() throws Throwable {
        String[] stringArray0 = new String[9];
        stringArray0[0] = "number of elements should be positive ({0})";
        stringArray0[1] = "7p#q|m7c]#<BcH+^y";
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test166173() throws Throwable {
        Double[] doubleArray0 = new Double[3];
        doubleArray0[0] = (Double) 1.34217729E8;
        doubleArray0[1] = (Double) 1.34217729E8;
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test167174() throws Throwable {
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "";
        stringArray0[3] = "dk";
        stringArray0[4] = ";Fk";
        boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test168175() throws Throwable {
        String[] stringArray0 = new String[3];
        stringArray0[0] = "";
        stringArray0[1] = "2~G8wy:3bctW0";
        stringArray0[2] = ",,0\"";
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test169176() throws Throwable {
        Double[] doubleArray0 = new Double[5];
        doubleArray0[0] = (Double) 1.1902911999999998E39;
        doubleArray0[1] = (Double) 1.1902911999999998E39;
        doubleArray0[2] = (Double) 1.1902911999999998E39;
        doubleArray0[3] = (Double) 1.1902911999999998E39;
        doubleArray0[4] = (Double) 1.1902911999999998E39;
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
        boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test170177() throws Throwable {
        double[] doubleArray0 = new double[2];
        double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test171178() throws Throwable {
        int[] intArray0 = new int[2];
        double double0 = MathArrays.distance(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test172179() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[5];
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test173180() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
        double[] doubleArray2 = new double[9];
        boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
    }

    @Test(timeout = 4000)
    public void test174182() throws Throwable {
        double[] doubleArray0 = new double[7];
        double[] doubleArray1 = new double[2];
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test175183() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[0];
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test176184() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[6];
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test177185() throws Throwable {
        double[] doubleArray0 = new double[2];
        MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
        double[][] doubleArray1 = new double[0][1];
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test178186() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[][] doubleArray1 = new double[3][2];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test179187() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[][] doubleArray1 = new double[4][6];
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test180188() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = MathArrays.copyOf(intArray0);
    }

    @Test(timeout = 4000)
    public void test181190() throws Throwable {
        Class<FieldElement> class0 = FieldElement.class;
        Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
        doReturn(class0).when(field0).getRuntimeClass();
        doReturn((Object) null).when(field0).getZero();
        MathArrays.buildArray(field0, (-1570), (-13));
    }

    @Test(timeout = 4000)
    public void test182191() throws Throwable {
        double[] doubleArray0 = new double[1];
        double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test183193() throws Throwable {
        double[] doubleArray0 = new double[1];
        MathArrays.checkOrder(doubleArray0);
    }
}
