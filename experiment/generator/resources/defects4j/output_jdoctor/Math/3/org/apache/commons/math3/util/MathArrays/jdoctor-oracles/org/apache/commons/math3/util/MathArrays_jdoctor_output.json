[
  {
    "signature": "scale(double val, double[] arr)",
    "name": "scale",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "arr"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "arr"
        },
        "comment": "Array to scale.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "val"
        },
        "comment": "Scalar.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "scaled copy of array with each entry multiplied by val.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "scaleInPlace(double val, double[] arr)",
    "name": "scaleInPlace",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "arr"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "arr"
        },
        "comment": "Array to scale.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "val"
        },
        "comment": "Scalar.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "ebeAdd(double[] a, double[] b)",
    "name": "ebeAdd",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "a"
        },
        "comment": "a is First. First term of the addition.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "b"
        },
        "comment": "b is Second. Second term of the addition.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array r where r[i] = a[i] + b[i].",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "ebeSubtract(double[] a, double[] b)",
    "name": "ebeSubtract",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "a"
        },
        "comment": "a is First. First term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "b"
        },
        "comment": "Element to be subtracted.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array r where r[i] = a[i] - b[i].",
      "kind": "RETURN",
      "condition": "true ? methodResultID==args[0]"
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "ebeMultiply(double[] a, double[] b)",
    "name": "ebeMultiply",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "a"
        },
        "comment": "a is First. First factor of the multiplication.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "b"
        },
        "comment": "b is Second. Second factor of the multiplication.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array r where r[i] = a[i] * b[i].",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "ebeDivide(double[] a, double[] b)",
    "name": "ebeDivide",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "a"
        },
        "comment": "Numerator of the division.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "b"
        },
        "comment": "Denominator of the division.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array r where r[i] = a[i] / b[i].",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the array lengths differ.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "distance1(double[] p1, double[] p2)",
    "name": "distance1",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "p1"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "p2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "p1"
        },
        "comment": "p1 is first. first point.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "p2"
        },
        "comment": "p2 is second. second point.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the L1 distance between the two points.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "distance1(int[] p1, int[] p2)",
    "name": "distance1",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "p1"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "p2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "p1"
        },
        "comment": "p1 is first. first point.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "p2"
        },
        "comment": "p2 is second. second point.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the L1 distance between the two points.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "distance(double[] p1, double[] p2)",
    "name": "distance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "p1"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "p2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "p1"
        },
        "comment": "p1 is first. first point.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "p2"
        },
        "comment": "p2 is second. second point.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the L2 distance between the two points.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "distance(int[] p1, int[] p2)",
    "name": "distance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "p1"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "p2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "p1"
        },
        "comment": "p1 is first. first point.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "p2"
        },
        "comment": "p2 is second. second point.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the L2 distance between the two points.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "distanceInf(double[] p1, double[] p2)",
    "name": "distanceInf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "p1"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "p2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "p1"
        },
        "comment": "p1 is first. first point.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "p2"
        },
        "comment": "p2 is second. second point.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the L&infin; distance between the two points.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "distanceInf(int[] p1, int[] p2)",
    "name": "distanceInf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "p1"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "p2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "p1"
        },
        "comment": "p1 is first. first point.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "p2"
        },
        "comment": "p2 is second. second point.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the L&infin; distance between the two points.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isMonotonic(T[] val, org.apache.commons.math3.util.MathArrays$OrderDirection dir, boolean strict)",
    "name": "isMonotonic",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Comparable;",
          "name": "Comparable[]",
          "isArray": true
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.MathArrays$OrderDirection",
          "name": "OrderDirection",
          "isArray": false
        },
        "name": "dir"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "strict"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Comparable;",
            "name": "Comparable[]",
            "isArray": true
          },
          "name": "val"
        },
        "comment": "Values.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.util.MathArrays$OrderDirection",
            "name": "OrderDirection",
            "isArray": false
          },
          "name": "dir"
        },
        "comment": "Ordering direction.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "strict"
        },
        "comment": "Whether the order should be strict.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if sorted, false otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isMonotonic(double[] val, org.apache.commons.math3.util.MathArrays$OrderDirection dir, boolean strict)",
    "name": "isMonotonic",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.MathArrays$OrderDirection",
          "name": "OrderDirection",
          "isArray": false
        },
        "name": "dir"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "strict"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "val"
        },
        "comment": "Values.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.util.MathArrays$OrderDirection",
            "name": "OrderDirection",
            "isArray": false
          },
          "name": "dir"
        },
        "comment": "Ordering direction.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "strict"
        },
        "comment": "Whether the order should be strict.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if sorted, false otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "checkOrder(double[] val, org.apache.commons.math3.util.MathArrays$OrderDirection dir, boolean strict, boolean abort)",
    "name": "checkOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.MathArrays$OrderDirection",
          "name": "OrderDirection",
          "isArray": false
        },
        "name": "dir"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "strict"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "abort"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "val"
        },
        "comment": "Values.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.util.MathArrays$OrderDirection",
            "name": "OrderDirection",
            "isArray": false
          },
          "name": "dir"
        },
        "comment": "Ordering direction.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "strict"
        },
        "comment": "Whether the order should be strict.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "abort"
        },
        "comment": "Whether to throw an exception if the check fails.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array is sorted.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NonMonotonicSequenceException",
          "name": "NonMonotonicSequenceException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the array is not sorted and abort is true.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkOrder(double[] val, org.apache.commons.math3.util.MathArrays$OrderDirection dir, boolean strict)",
    "name": "checkOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.MathArrays$OrderDirection",
          "name": "OrderDirection",
          "isArray": false
        },
        "name": "dir"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "strict"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "val"
        },
        "comment": "Values.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.util.MathArrays$OrderDirection",
            "name": "OrderDirection",
            "isArray": false
          },
          "name": "dir"
        },
        "comment": "Ordering direction.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "strict"
        },
        "comment": "Whether the order should be strict.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NonMonotonicSequenceException",
          "name": "NonMonotonicSequenceException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the array is not sorted.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkOrder(double[] val)",
    "name": "checkOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "val"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "val"
        },
        "comment": "Values.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NonMonotonicSequenceException",
          "name": "NonMonotonicSequenceException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the array is not sorted.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkRectangular(long[][] in)",
    "name": "checkRectangular",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[[J",
          "name": "long[][]",
          "isArray": true
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[[J",
            "name": "long[][]",
            "isArray": true
          },
          "name": "in"
        },
        "comment": "array to be tested.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "input array is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "input array is not rectangular.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkPositive(double[] in)",
    "name": "checkPositive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "in"
        },
        "comment": "Array to be tested.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NotStrictlyPositiveException",
          "name": "NotStrictlyPositiveException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "any entries of the array are not strictly positive.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "checkNonNegative(long[] in)",
    "name": "checkNonNegative",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "in"
        },
        "comment": "Array to be tested.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NotPositiveException",
          "name": "NotPositiveException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "any array entries are less than 0.",
        "kind": "THROWS",
        "condition": "args[0].length<0"
      }
    ]
  },
  {
    "signature": "checkNonNegative(long[][] in)",
    "name": "checkNonNegative",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[[J",
          "name": "long[][]",
          "isArray": true
        },
        "name": "in"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[[J",
            "name": "long[][]",
            "isArray": true
          },
          "name": "in"
        },
        "comment": "Array to be tested.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NotPositiveException",
          "name": "NotPositiveException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "any array entries are less than 0.",
        "kind": "THROWS",
        "condition": "args[0].length<0"
      }
    ]
  },
  {
    "signature": "safeNorm(double[] v)",
    "name": "safeNorm",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "v"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "v"
        },
        "comment": "Vector of doubles.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the 2-norm of the vector.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "sortInPlace(double[] x, double[]... yList)",
    "name": "sortInPlace",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "[[D",
          "name": "double[][]",
          "isArray": true
        },
        "name": "yList"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "x"
        },
        "comment": "Array to be sorted and used as a pattern for permutation of the other arrays.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[[D",
            "name": "double[][]",
            "isArray": true
          },
          "name": "yList"
        },
        "comment": "Set of arrays whose permutations of entries will follow those performed on x.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "any y is not the same size as x.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "x or any y is null.",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      }
    ]
  },
  {
    "signature": "sortInPlace(double[] x, org.apache.commons.math3.util.MathArrays$OrderDirection dir, double[]... yList)",
    "name": "sortInPlace",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.MathArrays$OrderDirection",
          "name": "OrderDirection",
          "isArray": false
        },
        "name": "dir"
      },
      {
        "type": {
          "qualifiedName": "[[D",
          "name": "double[][]",
          "isArray": true
        },
        "name": "yList"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "x"
        },
        "comment": "Array to be sorted and used as a pattern for permutation of the other arrays.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.util.MathArrays$OrderDirection",
            "name": "OrderDirection",
            "isArray": false
          },
          "name": "dir"
        },
        "comment": "Order direction.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[[D",
            "name": "double[][]",
            "isArray": true
          },
          "name": "yList"
        },
        "comment": "Set of arrays whose permutations of entries will follow those performed on x.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "any y is not the same size as x.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "x or any y is null.",
        "kind": "THROWS",
        "condition": "args[0]==null || args[2]==null"
      }
    ]
  },
  {
    "signature": "copyOf(int[] source)",
    "name": "copyOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "source"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "source"
        },
        "comment": "Array to be copied.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the copied array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "copyOf(double[] source)",
    "name": "copyOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "source"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "source"
        },
        "comment": "Array to be copied.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the copied array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "copyOf(int[] source, int len)",
    "name": "copyOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "len"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "source"
        },
        "comment": "Array to be copied.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "len"
        },
        "comment": "Number of entries to copy. If smaller then the source length the copy . len is truncated if larger Number will padded with zeroes.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the copied array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "copyOf(double[] source, int len)",
    "name": "copyOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "len"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "source"
        },
        "comment": "Array to be copied.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "len"
        },
        "comment": "Number of entries to copy. If smaller then the source length the copy . len is truncated if larger Number will padded with zeroes.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the copied array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "linearCombination(double[] a, double[] b)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "a"
        },
        "comment": "Factors.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "b"
        },
        "comment": "Factors.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "&Sigma;i ai bi.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "arrays dimensions don't match.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "linearCombination(double a1, double b1, double a2, double b2)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a1"
        },
        "comment": "a1 is first. first factor of the first term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b1"
        },
        "comment": "b1 is second. second factor of the first term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a2"
        },
        "comment": "a2 is first. first factor of the second term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b2"
        },
        "comment": "b2 is second. second factor of the second term.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a1&times;b1 + a2&times;b2.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==args[1]+args[2]"
    },
    "throwsTags": []
  },
  {
    "signature": "linearCombination(double a1, double b1, double a2, double b2, double a3, double b3)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a3"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b3"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a1"
        },
        "comment": "a1 is first. first factor of the first term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b1"
        },
        "comment": "b1 is second. second factor of the first term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a2"
        },
        "comment": "a2 is first. first factor of the second term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b2"
        },
        "comment": "b2 is second. second factor of the second term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a3"
        },
        "comment": "a3 is first. first factor of the third term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b3"
        },
        "comment": "b3 is second. second factor of the third term.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a1&times;b1 + a2&times;b2 + a3&times;b3.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==args[1]+args[2]"
    },
    "throwsTags": []
  },
  {
    "signature": "linearCombination(double a1, double b1, double a2, double b2, double a3, double b3, double a4, double b4)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a3"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b3"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a4"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b4"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a1"
        },
        "comment": "a1 is first. first factor of the first term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b1"
        },
        "comment": "b1 is second. second factor of the first term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a2"
        },
        "comment": "a2 is first. first factor of the second term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b2"
        },
        "comment": "b2 is second. second factor of the second term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a3"
        },
        "comment": "a3 is first. first factor of the third term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b3"
        },
        "comment": "b3 is second. second factor of the third term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a4"
        },
        "comment": "a4 is first. first factor of the third term.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b4"
        },
        "comment": "b4 is second. second factor of the third term.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a1&times;b1 + a2&times;b2 + a3&times;b3 + a4&times;b4.",
      "kind": "RETURN",
      "condition": "true ? methodResultID==args[1]+args[2]"
    },
    "throwsTags": []
  },
  {
    "signature": "equals(float[] x, float[] y)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "x"
        },
        "comment": "x is first. first array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "y"
        },
        "comment": "y is second. second array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the values are both null or have same dimension and equal elements.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "equalsIncludingNaN(float[] x, float[] y)",
    "name": "equalsIncludingNaN",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "x"
        },
        "comment": "x is first. first array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "y"
        },
        "comment": "y is second. second array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the values are both null or have same dimension and equal elements.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "equals(double[] x, double[] y)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "x"
        },
        "comment": "x is First. First array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "y"
        },
        "comment": "y is Second. Second array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the values are both null or have same dimension and equal elements.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "equalsIncludingNaN(double[] x, double[] y)",
    "name": "equalsIncludingNaN",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "x"
        },
        "comment": "x is First. First array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "y"
        },
        "comment": "y is Second. Second array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the values are both null or have same dimension and equal elements.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "normalizeArray(double[] values, double normalizedSum)",
    "name": "normalizeArray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "normalizedSum"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "values"
        },
        "comment": "Input array to be normalized.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "normalizedSum"
        },
        "comment": "Target sum for the normalized array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the normalized array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.MathArithmeticException",
          "name": "MathArithmeticException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the input array contains infinite elements or sums to zero.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.MathIllegalArgumentException",
          "name": "MathIllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the target sum is infinite or NaN.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "buildArray(org.apache.commons.math3.Field<T> field, int length)",
    "name": "buildArray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.Field",
          "name": "Field",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.Field",
            "name": "Field",
            "isArray": false
          },
          "name": "field"
        },
        "comment": "field to which array elements belong.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "of the array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "buildArray(org.apache.commons.math3.Field<T> field, int rows, int columns)",
    "name": "buildArray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[][]",
      "name": "T[][]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.Field",
          "name": "Field",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rows"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "columns"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.Field",
            "name": "Field",
            "isArray": false
          },
          "name": "field"
        },
        "comment": "field to which array elements belong.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "rows"
        },
        "comment": "number of rows in the array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "columns"
        },
        "comment": "number of columns ( negative to build partial arrays in the same way new Field[rows][] works).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "convolve(double[] x, double[] h)",
    "name": "convolve",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.MathArrays",
      "name": "MathArrays",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.MathArrays",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "h"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "x"
        },
        "comment": "First sequence. Typically this sequence will represent an input signal to a system.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "h"
        },
        "comment": "h is Second. Second sequence. Typically this sequence will represent the impulse response of the system.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the convolution of x and h. This array's length will be x.length + h.length - 1.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "either x or h is null.",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NoDataException",
          "name": "NoDataException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "either x or h is empty.",
        "kind": "THROWS",
        "condition": "args[0].length==0 || args[1].length==0"
      }
    ]
  }
]