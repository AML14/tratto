[
  {
    "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> checker)",
    "name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
      "name": "SimplexOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.optim.ConvergenceChecker",
          "name": "ConvergenceChecker",
          "isArray": false
        },
        "name": "checker"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.optim.ConvergenceChecker",
            "name": "ConvergenceChecker",
            "isArray": false
          },
          "name": "checker"
        },
        "comment": "Convergence checker.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(double rel, double abs)",
    "name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
      "name": "SimplexOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "rel"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "abs"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "rel"
        },
        "comment": "Relative threshold.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "abs"
        },
        "comment": "Absolute threshold.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "optimize(org.apache.commons.math3.optim.OptimizationData... optData)",
    "name": "optimize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
      "name": "SimplexOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.optim.PointValuePair",
      "name": "org.apache.commons.math3.optim.PointValuePair",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Lorg.apache.commons.math3.optim.OptimizationData;",
          "name": "OptimizationData[]",
          "isArray": true
        },
        "name": "optData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Lorg.apache.commons.math3.optim.OptimizationData;",
            "name": "OptimizationData[]",
            "isArray": true
          },
          "name": "optData"
        },
        "comment": "Optimization data. In addition to those documented in MultivariateOptimizer#parseOptimizationData(OptimizationData[]) MultivariateOptimizer this method will register the following data: AbstractSimplex.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "@inheritDoc}.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "doOptimize()",
    "name": "doOptimize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
      "name": "SimplexOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.optim.PointValuePair",
      "name": "org.apache.commons.math3.optim.PointValuePair",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "parseOptimizationData(org.apache.commons.math3.optim.OptimizationData... optData)",
    "name": "parseOptimizationData",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
      "name": "SimplexOptimizer",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Lorg.apache.commons.math3.optim.OptimizationData;",
          "name": "OptimizationData[]",
          "isArray": true
        },
        "name": "optData"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Lorg.apache.commons.math3.optim.OptimizationData;",
            "name": "OptimizationData[]",
            "isArray": true
          },
          "name": "optData"
        },
        "comment": "Optimization data. The following data . optData is looked for: AbstractSimplex.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  }
]