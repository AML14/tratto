/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 09:32:19 GMT 2023
 */
package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.util.OpenIntToDoubleHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class OpenMapRealVector_ESTest extends OpenMapRealVector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(0.0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(0.0);
        openMapRealVector1.getDimension();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(0.0);
        openMapRealVector0.getDimension();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-30));
        OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
        OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
        openMapRealVector_OpenMapEntry0.setValue((-30));
        double double0 = openMapRealVector1.dotProduct(openMapRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-30));
        OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
        OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
        openMapRealVector_OpenMapEntry0.setValue((-30));
        double double0 = openMapRealVector1.dotProduct(openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.unitVector();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double[] doubleArray1 = openMapRealVector0.toArray();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double[] doubleArray1 = openMapRealVector0.toArray();
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getSparcity();
        openMapRealVector0.getDimension();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(2904.7477);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        openMapRealVector1.equals((Object) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(2904.7477);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(2904.7477);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(2904.7477);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(31, 2642.9524372);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
        openMapRealVector0.setSubVector(31, (RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.getDimension();
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test0819() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test0920() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test1021() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealVector realVector0 = openMapRealVector0.add(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);
        openMapRealVector1.equals((Object) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test1022() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealVector realVector0 = openMapRealVector0.add(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test1023() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealVector realVector0 = openMapRealVector0.add(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);
    }

    @Test(timeout = 4000)
    public void test1024() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealVector realVector0 = openMapRealVector0.add(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test1125() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7);
        OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
        openMapRealVector_OpenMapSparseIterator0.remove();
    }

    @Test(timeout = 4000)
    public void test1226() throws Throwable {
        double[] doubleArray0 = new double[16];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test1227() throws Throwable {
        double[] doubleArray0 = new double[16];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
        Double[] doubleArray1 = new Double[1];
        doubleArray1[0] = (Double) openMapRealVector0.DEFAULT_ZERO_TOLERANCE;
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test1328() throws Throwable {
        Double[] doubleArray0 = new Double[8];
        doubleArray0[0] = (Double) 1.0E-12;
        OpenMapRealVector openMapRealVector0 = null;
        openMapRealVector0 = new OpenMapRealVector(doubleArray0, 393.1155872284155);
    }

    @Test(timeout = 4000)
    public void test1429() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test1430() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test1431() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
        openMapRealVector1.equals((Object) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test1532() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        openMapRealVector0.add((RealVector) arrayRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test1633() throws Throwable {
        double[] doubleArray0 = new double[12];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealVector realVector0 = openMapRealVector0.add((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test1634() throws Throwable {
        double[] doubleArray0 = new double[12];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealVector realVector0 = openMapRealVector0.add((RealVector) openMapRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test1635() throws Throwable {
        double[] doubleArray0 = new double[12];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealVector realVector0 = openMapRealVector0.add((RealVector) openMapRealVector0);
        realVector0.equals((Object) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test1736() throws Throwable {
        double[] doubleArray0 = new double[16];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
        openMapRealVector2.getSparcity();
    }

    @Test(timeout = 4000)
    public void test1737() throws Throwable {
        double[] doubleArray0 = new double[16];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
        openMapRealVector2.equals((Object) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test1738() throws Throwable {
        double[] doubleArray0 = new double[16];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
    }

    @Test(timeout = 4000)
    public void test1839() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = (-1474.733152693);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
        openMapRealVector2.getSparcity();
    }

    @Test(timeout = 4000)
    public void test1840() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = (-1474.733152693);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test1941() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 5;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 5);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
        openMapRealVector1.getDimension();
    }

    @Test(timeout = 4000)
    public void test1942() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 5;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 5);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test2043() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);
        openMapRealVector1.getDimension();
    }

    @Test(timeout = 4000)
    public void test2044() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test2045() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector();
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);
        openMapRealVector1.equals((Object) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test2146() throws Throwable {
        double[] doubleArray0 = new double[12];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test2147() throws Throwable {
        double[] doubleArray0 = new double[12];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
        openMapRealVector1.getDimension();
    }

    @Test(timeout = 4000)
    public void test2248() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.dotProduct(openMapRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test2249() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.dotProduct(openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test2350() throws Throwable {
        double[] doubleArray0 = new double[7];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.dotProduct(doubleArray0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test2451() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
        boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test2453() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
        boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test2554() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
        openMapRealVector1.equals((Object) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test2555() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test2556() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2657() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test2658() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test2659() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test2660() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
        openMapRealVector1.equals((Object) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test2761() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test2762() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2763() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
        openMapRealVector1.equals((Object) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test2864() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-37.594487));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(1, 1);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test2865() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-37.594487));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(1, 1);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test2866() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-37.594487));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(1, 1);
        openMapRealVector1.getDimension();
    }

    @Test(timeout = 4000)
    public void test2967() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(Integer.MAX_VALUE, (-286.019692818355));
        OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
        doReturn(Integer.MAX_VALUE).when(openIntToDoubleHashMap_Iterator0).key();
        OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
        openMapRealVector_OpenMapEntry0.setValue(1.0E-12);
        openMapRealVector0.getSubVector(32, 32);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test3068() throws Throwable {
        double[] doubleArray0 = new double[16];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
        double[] doubleArray1 = openMapRealVector0.getData();
    }

    @Test(timeout = 4000)
    public void test3069() throws Throwable {
        double[] doubleArray0 = new double[16];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
        double[] doubleArray1 = openMapRealVector0.getData();
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test3170() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1499.91);
        double double0 = openMapRealVector1.getDistance((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test3171() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1499.91);
        double double0 = openMapRealVector1.getDistance((RealVector) openMapRealVector0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test3272() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(31, 2642.9524372);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
        double double0 = openMapRealVector0.getDistance((RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test3373() throws Throwable {
        double[] doubleArray0 = new double[12];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getL1Distance(openMapRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test3374() throws Throwable {
        double[] doubleArray0 = new double[12];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getL1Distance(openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test3475() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 3060.547789164;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(1, 1252);
        openMapRealVector1.getL1Distance(openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test3576() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test3677() throws Throwable {
        double[] doubleArray0 = new double[2];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test3678() throws Throwable {
        double[] doubleArray0 = new double[2];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test3779() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getLInfNorm();
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test3780() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getLInfNorm();
    }

    @Test(timeout = 4000)
    public void test3881() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test3882() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test3983() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        openMapRealVector0.mapSinToSelf();
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1.0);
        double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test3984() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        openMapRealVector0.mapSinToSelf();
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1.0);
        double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test4085() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-30));
        OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
        OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
        openMapRealVector_OpenMapEntry0.setValue((-30));
        double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test4086() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-30));
        OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
        OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
        openMapRealVector_OpenMapEntry0.setValue((-30));
        double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test4187() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-30));
        OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
        doReturn(2146857538).when(openIntToDoubleHashMap_Iterator0).key();
        OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
        openMapRealVector_OpenMapEntry0.setValue(1.0E-12);
        double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test4188() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-30));
        OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
        doReturn(2146857538).when(openIntToDoubleHashMap_Iterator0).key();
        OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
        openMapRealVector_OpenMapEntry0.setValue(1.0E-12);
        double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test4289() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(31, 2642.9524372);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
        openMapRealVector0.unitize();
        double double0 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);
    }

    @Test(timeout = 4000)
    public void test4290() throws Throwable {
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(31, 2642.9524372);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
        openMapRealVector0.unitize();
        double double0 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test4391() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test4392() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.isInfinite();
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test4493() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        boolean boolean0 = openMapRealVector0.isInfinite();
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test4494() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        boolean boolean0 = openMapRealVector0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test4595() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2593.85329175));
        OpenMapRealVector openMapRealVector1 = (OpenMapRealVector) openMapRealVector0.mapPow((-2593.85329175));
        boolean boolean0 = openMapRealVector1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test4596() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2593.85329175));
        OpenMapRealVector openMapRealVector1 = (OpenMapRealVector) openMapRealVector0.mapPow((-2593.85329175));
        boolean boolean0 = openMapRealVector1.isInfinite();
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test4597() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2593.85329175));
        OpenMapRealVector openMapRealVector1 = (OpenMapRealVector) openMapRealVector0.mapPow((-2593.85329175));
        boolean boolean0 = openMapRealVector1.isInfinite();
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test4698() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-597.076839365));
        boolean boolean0 = openMapRealVector0.isNaN();
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test4699() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-597.076839365));
        boolean boolean0 = openMapRealVector0.isNaN();
    }

    @Test(timeout = 4000)
    public void test47100() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.isNaN();
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test47101() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.isNaN();
    }

    @Test(timeout = 4000)
    public void test48102() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test48103() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
        realMatrix0.getColumnDimension();
    }

    @Test(timeout = 4000)
    public void test48104() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
        realMatrix0.getRowDimension();
    }

    @Test(timeout = 4000)
    public void test49105() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test49106() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);
        openMapRealVector1.equals((Object) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test50107() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.setSubVector(0, doubleArray0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test51108() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-30));
        openMapRealVector0.set((-30));
        openMapRealVector0.getDimension();
    }

    @Test(timeout = 4000)
    public void test52109() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2593.85329175));
        openMapRealVector0.set(1455.0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test53110() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1499.91);
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract((RealVector) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test53111() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1499.91);
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract((RealVector) openMapRealVector0);
        openMapRealVector2.equals((Object) openMapRealVector1);
    }

    @Test(timeout = 4000)
    public void test53112() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1499.91);
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract((RealVector) openMapRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test53113() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1499.91);
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract((RealVector) openMapRealVector0);
        openMapRealVector2.getSparcity();
    }

    @Test(timeout = 4000)
    public void test54114() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealVector realVector0 = openMapRealVector0.add(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);
    }

    @Test(timeout = 4000)
    public void test54115() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealVector realVector0 = openMapRealVector0.add(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test54116() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealVector realVector0 = openMapRealVector0.add(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(realVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test55117() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = Double.NaN;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.hashCode();
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test56118() throws Throwable {
        double[] doubleArray0 = new double[7];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test56119() throws Throwable {
        double[] doubleArray0 = new double[7];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test57120() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector0);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test57121() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test58122() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test58123() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.equals((Object) null);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test59124() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.equals(":/`q:0[Oe7aJ");
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test59125() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.equals(":/`q:0[Oe7aJ");
    }

    @Test(timeout = 4000)
    public void test60126() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 1);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
    }

    @Test(timeout = 4000)
    public void test60127() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 1);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        openMapRealVector1.getDimension();
    }

    @Test(timeout = 4000)
    public void test60128() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 1);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test60129() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 1);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        openMapRealVector1.equals((Object) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test61130() throws Throwable {
        double[] doubleArray0 = new double[7];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, Double.NaN);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        openMapRealVector0.getSparcity();
    }

    @Test(timeout = 4000)
    public void test61131() throws Throwable {
        double[] doubleArray0 = new double[7];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, Double.NaN);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
    }

    @Test(timeout = 4000)
    public void test61132() throws Throwable {
        double[] doubleArray0 = new double[7];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, Double.NaN);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        openMapRealVector1.getSparcity();
    }

    @Test(timeout = 4000)
    public void test61133() throws Throwable {
        double[] doubleArray0 = new double[7];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, Double.NaN);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        openMapRealVector1.equals((Object) openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test62134() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
        boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test62135() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
        boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
        openMapRealVector1.getSparcity();
    }
}
