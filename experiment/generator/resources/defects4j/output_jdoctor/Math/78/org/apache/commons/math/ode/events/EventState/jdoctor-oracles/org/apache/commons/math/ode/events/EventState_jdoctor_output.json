[
  {
    "signature": "org.apache.commons.math.ode.events.EventState(org.apache.commons.math.ode.events.EventHandler handler, double maxCheckInterval, double convergence, int maxIterationCount)",
    "name": "org.apache.commons.math.ode.events.EventState",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.events.EventState",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math.ode.events.EventHandler",
          "name": "EventHandler",
          "isArray": false
        },
        "name": "handler"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxCheckInterval"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "convergence"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxIterationCount"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math.ode.events.EventHandler",
            "name": "EventHandler",
            "isArray": false
          },
          "name": "handler"
        },
        "comment": "event handler.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "maxCheckInterval"
        },
        "comment": "maxCheckInterval is maximal. maximal time interval between switching function checks (this interval prevents missing sign changes in case the integration steps becomes very large).",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "convergence"
        },
        "comment": "convergence threshold in the event time search.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxIterationCount"
        },
        "comment": "maxIterationCount is upper. upper limit of the iteration count in the event time search.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getEventHandler()",
    "name": "getEventHandler",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math.ode.events.EventHandler",
      "name": "org.apache.commons.math.ode.events.EventHandler",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "underlying event handler.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMaxCheckInterval()",
    "name": "getMaxCheckInterval",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "maximal time interval between events handler checks.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getConvergence()",
    "name": "getConvergence",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "convergence threshold for event localization.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMaxIterationCount()",
    "name": "getMaxIterationCount",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "upper limit in the iteration count for event localization.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "reinitializeBegin(double tStart, double[] yStart)",
    "name": "reinitializeBegin",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "tStart"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "yStart"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "tStart"
        },
        "comment": "value of the independent time variable at the beginning of the step.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "yStart"
        },
        "comment": "array containing the current value of the state vector at the beginning of the step.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.ode.events.EventException",
          "name": "EventException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the event handler value cannot be evaluated at the beginning of the step.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator interpolator)",
    "name": "evaluateStep",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math.ode.sampling.StepInterpolator",
          "name": "StepInterpolator",
          "isArray": false
        },
        "name": "interpolator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math.ode.sampling.StepInterpolator",
            "name": "StepInterpolator",
            "isArray": false
          },
          "name": "interpolator"
        },
        "comment": "step interpolator for the proposed step.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the event handler triggers an event before the end of the proposed step (this implies the step should be rejected).",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.ode.DerivativeException",
          "name": "DerivativeException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the interpolator fails to compute the switching function somewhere within the step.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.ode.events.EventException",
          "name": "EventException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the switching function cannot be evaluated.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.ConvergenceException",
          "name": "ConvergenceException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an event cannot be located.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getEventTime()",
    "name": "getEventTime",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "occurrence time of the event triggered in the current step.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "stepAccepted(double t, double[] y)",
    "name": "stepAccepted",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "t"
        },
        "comment": "value of the independent time variable at the end of the step.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "y"
        },
        "comment": "array containing the current value of the state vector at the end of the step.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.ode.events.EventException",
          "name": "EventException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the value of the event handler cannot be evaluated.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "stop()",
    "name": "stop",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the integration should be stopped.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "reset(double t, double[] y)",
    "name": "reset",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.ode.events.EventState",
      "name": "EventState",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.ode.events.EventState",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "t"
        },
        "comment": "value of the independent time variable at the beginning of the next step.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "y"
        },
        "comment": "array were to put the desired state vector at the beginning of the next step.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the integrator should reset the derivatives too.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.ode.events.EventException",
          "name": "EventException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the state cannot be reseted by the event handler.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]