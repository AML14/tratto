[
  {
    "signature": "org.apache.commons.math.distribution.NormalDistributionImpl(double mean, double sd)",
    "name": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "mean"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "sd"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "mean"
        },
        "comment": "Mean for this distribution.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "sd"
        },
        "comment": "Standard deviation for this distribution.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "org.apache.commons.math.distribution.NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy)",
    "name": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "mean"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "sd"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "inverseCumAccuracy"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "mean"
        },
        "comment": "Mean for this distribution.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "sd"
        },
        "comment": "Standard deviation for this distribution.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "inverseCumAccuracy"
        },
        "comment": "Inverse cumulative probability accuracy.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.exception.NotStrictlyPositiveException",
          "name": "NotStrictlyPositiveException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "sd <= 0.",
        "kind": "THROWS",
        "condition": "args[1]<=0"
      }
    ]
  },
  {
    "signature": "org.apache.commons.math.distribution.NormalDistributionImpl()",
    "name": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getMean()",
    "name": "getMean",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getStandardDeviation()",
    "name": "getStandardDeviation",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "density(double x)",
    "name": "density",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "cumulativeProbability(double x)",
    "name": "cumulativeProbability",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "Value at which the CDF is evaluated.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "CDF evaluated at x.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.MathException",
          "name": "MathException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the algorithm fails to converge.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getSolverAbsoluteAccuracy()",
    "name": "getSolverAbsoluteAccuracy",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the solver absolute accuracy.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "inverseCumulativeProbability(double p)",
    "name": "inverseCumulativeProbability",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "p"
        },
        "comment": "Desired probability.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x, such that P(X < x) = p.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.MathException",
          "name": "MathException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the inverse cumulative probability cannot be computed due to convergence or other numerical errors.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.exception.OutOfRangeException",
          "name": "OutOfRangeException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "p is not a valid probability.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "sample()",
    "name": "sample",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a random value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math.MathException",
          "name": "MathException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an error occurs generating the random value.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getDomainLowerBound(double p)",
    "name": "getDomainLowerBound",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "p"
        },
        "comment": "p is Desired. Desired probability for the critical value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the domain value lower bound, i.e. P(X < 'lower bound') < p.",
      "kind": "RETURN",
      "condition": "true ? methodResultID<args[0]"
    },
    "throwsTags": []
  },
  {
    "signature": "getDomainUpperBound(double p)",
    "name": "getDomainUpperBound",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "p"
        },
        "comment": "p is Desired. Desired probability for the critical value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the domain value upper bound, i.e. P(X < 'upper bound') > p.",
      "kind": "RETURN",
      "condition": "true ? methodResultID>args[0]"
    },
    "throwsTags": []
  },
  {
    "signature": "getInitialDomain(double p)",
    "name": "getInitialDomain",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math.distribution.NormalDistributionImpl",
      "name": "NormalDistributionImpl",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "p"
        },
        "comment": "p is Desired. Desired probability for the critical value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the initial domain value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]