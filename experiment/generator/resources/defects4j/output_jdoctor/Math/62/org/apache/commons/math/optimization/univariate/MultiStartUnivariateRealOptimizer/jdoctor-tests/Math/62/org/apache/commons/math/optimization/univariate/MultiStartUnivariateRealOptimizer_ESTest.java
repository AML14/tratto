/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 16:32:47 GMT 2023
 */
package org.apache.commons.math.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;
import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
import org.apache.commons.math.optimization.ConvergenceChecker;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BaseUnivariateRealOptimizer;
import org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer;
import org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair;
import org.apache.commons.math.random.JDKRandomGenerator;
import org.apache.commons.math.random.MersenneTwister;
import org.apache.commons.math.random.RandomAdaptor;
import org.apache.commons.math.random.RandomGenerator;
import org.apache.commons.math.random.Well1024a;
import org.apache.commons.math.random.Well19937a;
import org.apache.commons.math.random.Well19937c;
import org.apache.commons.math.random.Well44497a;
import org.apache.commons.math.random.Well44497b;
import org.apache.commons.math.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MultiStartUnivariateRealOptimizer_ESTest extends MultiStartUnivariateRealOptimizer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 0L);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 68, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 68, 68, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(100);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[3] = (byte) 3;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 555, well19937c0);
        well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 869, (double) 0L);
        multiStartUnivariateRealOptimizer0.getOptima();
        multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(33);
        multiStartUnivariateRealOptimizer0.getEvaluations();
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 100;
        doubleArray0[1] = 253.362;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        System.setCurrentTimeMillis(869);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[3] = (byte) 3;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        well19937c0.nextBoolean();
        well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        multiStartUnivariateRealOptimizer0.getOptima();
        multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(2450);
        multiStartUnivariateRealOptimizer0.getEvaluations();
        Random.setNextRandom(245616);
        Random.setNextRandom(245616);
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 100;
        doubleArray0[1] = (-126.151);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType1 = GoalType.MAXIMIZE;
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, (-1.0), 2853.149559891947, 4003.82806161574);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test0210() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0211() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0212() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    }

    @Test(timeout = 4000)
    public void test0213() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
    }

    @Test(timeout = 4000)
    public void test0214() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
    }

    @Test(timeout = 4000)
    public void test0215() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test0216() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test0217() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0218() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0219() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        univariateRealPointValuePair1.getPoint();
    }

    @Test(timeout = 4000)
    public void test0220() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        univariateRealPointValuePair1.getValue();
    }

    @Test(timeout = 4000)
    public void test0221() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    }

    @Test(timeout = 4000)
    public void test0224() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test0225() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test0226() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0227() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0228() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    }

    @Test(timeout = 4000)
    public void test0231() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        univariateRealPointValuePairArray1.equals((Object) univariateRealPointValuePairArray0);
    }

    @Test(timeout = 4000)
    public void test0232() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test0233() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test0234() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0235() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0236() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    }

    @Test(timeout = 4000)
    public void test0240() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(2450);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test0241() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(2450);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test0242() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(2450);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0243() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(2450);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0244() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) 5;
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(2450);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0346() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a();
    }

    @Test(timeout = 4000)
    public void test0347() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0348() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0349() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    }

    @Test(timeout = 4000)
    public void test0350() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0351() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0352() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0453() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test0454() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test0455() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
    }

    @Test(timeout = 4000)
    public void test0456() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
    }

    @Test(timeout = 4000)
    public void test0459() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test0460() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test0461() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0462() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0463() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    }

    @Test(timeout = 4000)
    public void test0466() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        polynomialFunction0.degree();
    }

    @Test(timeout = 4000)
    public void test0467() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0470() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        polynomialFunction0.degree();
    }

    @Test(timeout = 4000)
    public void test0471() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test0472() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test0473() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        univariateRealPointValuePair1.getPoint();
    }

    @Test(timeout = 4000)
    public void test0474() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        univariateRealPointValuePair1.getValue();
    }

    @Test(timeout = 4000)
    public void test0475() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0476() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0477() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    }

    @Test(timeout = 4000)
    public void test0485() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 1, 1.0, (-2945.7451));
    }

    @Test(timeout = 4000)
    public void test0586() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
    }

    @Test(timeout = 4000)
    public void test0587() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
    }

    @Test(timeout = 4000)
    public void test0588() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0589() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0590() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
    }

    @Test(timeout = 4000)
    public void test0591() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        polynomialFunction0.degree();
    }

    @Test(timeout = 4000)
    public void test0592() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0595() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        polynomialFunction1.equals((Object) polynomialFunction0);
    }

    @Test(timeout = 4000)
    public void test0596() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        polynomialFunction1.degree();
    }

    @Test(timeout = 4000)
    public void test0597() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test05100() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        polynomialFunction0.equals((Object) polynomialFunction1);
    }

    @Test(timeout = 4000)
    public void test05101() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        polynomialFunction1.equals((Object) polynomialFunction0);
    }

    @Test(timeout = 4000)
    public void test05102() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        polynomialFunction2.equals((Object) polynomialFunction0);
    }

    @Test(timeout = 4000)
    public void test05103() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        polynomialFunction2.equals((Object) polynomialFunction1);
    }

    @Test(timeout = 4000)
    public void test05104() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        polynomialFunction0.degree();
    }

    @Test(timeout = 4000)
    public void test05105() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        polynomialFunction1.degree();
    }

    @Test(timeout = 4000)
    public void test05106() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        polynomialFunction2.degree();
    }

    @Test(timeout = 4000)
    public void test05107() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
    }

    @Test(timeout = 4000)
    public void test05116() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
        polynomialFunction3.equals((Object) polynomialFunction0);
    }

    @Test(timeout = 4000)
    public void test05117() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
        polynomialFunction3.equals((Object) polynomialFunction1);
    }

    @Test(timeout = 4000)
    public void test05118() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
        polynomialFunction3.equals((Object) polynomialFunction2);
    }

    @Test(timeout = 4000)
    public void test05119() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
        polynomialFunction0.equals((Object) polynomialFunction2);
    }

    @Test(timeout = 4000)
    public void test05120() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
        polynomialFunction0.equals((Object) polynomialFunction1);
    }

    @Test(timeout = 4000)
    public void test05121() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
        polynomialFunction1.equals((Object) polynomialFunction2);
    }

    @Test(timeout = 4000)
    public void test05122() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
        polynomialFunction1.equals((Object) polynomialFunction0);
    }

    @Test(timeout = 4000)
    public void test05123() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
        polynomialFunction3.degree();
    }

    @Test(timeout = 4000)
    public void test05124() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
        polynomialFunction0.degree();
    }

    @Test(timeout = 4000)
    public void test05125() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
        polynomialFunction1.degree();
    }

    @Test(timeout = 4000)
    public void test05126() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 3694;
        Well44497b well44497b0 = new Well44497b();
        boolean boolean0 = well44497b0.nextBoolean();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (double) 3694;
        doubleArray0[1] = (double) 3694;
        doubleArray0[2] = (double) 3694;
        doubleArray0[3] = (double) 3694;
        doubleArray0[4] = (double) 3694;
        doubleArray0[5] = (double) 3694;
        doubleArray0[6] = (double) 3694;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
        PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
    }

    @Test(timeout = 4000)
    public void test06138() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[1];
        intArray0[0] = (-1);
        Well1024a well1024a0 = new Well1024a(intArray0);
    }

    @Test(timeout = 4000)
    public void test06141() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[1];
        intArray0[0] = (-1);
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 878, well1024a0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test06142() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[1];
        intArray0[0] = (-1);
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 878, well1024a0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test06143() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[1];
        intArray0[0] = (-1);
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 878, well1024a0);
    }

    @Test(timeout = 4000)
    public void test06146() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[1];
        intArray0[0] = (-1);
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 878, well1024a0);
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 213;
        doubleArray0[1] = (double) (-1);
        PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
        polynomialFunctionLagrangeForm0.degree();
    }

    @Test(timeout = 4000)
    public void test06147() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[1];
        intArray0[0] = (-1);
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 878, well1024a0);
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 213;
        doubleArray0[1] = (double) (-1);
        PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test06150() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[1];
        intArray0[0] = (-1);
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 878, well1024a0);
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 213;
        doubleArray0[1] = (double) (-1);
        PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunctionLagrangeForm0, goalType0, (-586.2123524978173), (double) (-1));
    }

    @Test(timeout = 4000)
    public void test07151() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test07152() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test07153() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
    }

    @Test(timeout = 4000)
    public void test07154() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
    }

    @Test(timeout = 4000)
    public void test07157() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test07158() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test07159() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test07160() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test07161() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
    }

    @Test(timeout = 4000)
    public void test07164() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        polynomialFunction0.degree();
    }

    @Test(timeout = 4000)
    public void test07165() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test07168() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        polynomialFunction0.degree();
    }

    @Test(timeout = 4000)
    public void test07169() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test07170() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        univariateRealPointValuePair1.getValue();
    }

    @Test(timeout = 4000)
    public void test07172() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        univariateRealPointValuePair1.getPoint();
    }

    @Test(timeout = 4000)
    public void test07173() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test07174() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test07175() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
    }

    @Test(timeout = 4000)
    public void test07183() throws Throwable {
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int[] intArray0 = new int[4];
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        intArray0[3] = 1;
        Well1024a well1024a0 = new Well1024a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) 1;
        doubleArray0[4] = (double) 1;
        doubleArray0[5] = (double) 1;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        GoalType goalType1 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 1, 1.0, (-2945.7451));
    }

    @Test(timeout = 4000)
    public void test08184() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test08185() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test08186() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
    }

    @Test(timeout = 4000)
    public void test08187() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
    }

    @Test(timeout = 4000)
    public void test08188() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
    }

    @Test(timeout = 4000)
    public void test08190() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test08191() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test08192() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test08193() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test08194() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    }

    @Test(timeout = 4000)
    public void test08195() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
    }

    @Test(timeout = 4000)
    public void test08196() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
    }

    @Test(timeout = 4000)
    public void test08197() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test08198() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test08199() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test08200() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test08201() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        univariateRealPointValuePair1.getValue();
    }

    @Test(timeout = 4000)
    public void test08202() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        univariateRealPointValuePair1.getPoint();
    }

    @Test(timeout = 4000)
    public void test08203() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    }

    @Test(timeout = 4000)
    public void test08206() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test08207() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test08208() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test08209() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test08210() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
    }

    @Test(timeout = 4000)
    public void test08213() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        univariateRealPointValuePairArray1.equals((Object) univariateRealPointValuePairArray0);
    }

    @Test(timeout = 4000)
    public void test08214() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test08215() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test08216() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test08217() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test08218() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
    }

    @Test(timeout = 4000)
    public void test08222() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(2450);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        univariateRealPointValuePair0.getPoint();
    }

    @Test(timeout = 4000)
    public void test08223() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(2450);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        univariateRealPointValuePair0.getValue();
    }

    @Test(timeout = 4000)
    public void test08224() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(2450);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test08225() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(2450);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test08226() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
        UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(2450);
        int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test09228() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
    }

    @Test(timeout = 4000)
    public void test09229() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test09230() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test09231() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
    }

    @Test(timeout = 4000)
    public void test09232() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test09233() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test09234() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    }

    @Test(timeout = 4000)
    public void test09236() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
        multiStartUnivariateRealOptimizer1.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test09237() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
        multiStartUnivariateRealOptimizer1.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test09238() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
    }

    @Test(timeout = 4000)
    public void test09239() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
        int int0 = multiStartUnivariateRealOptimizer1.getEvaluations();
        multiStartUnivariateRealOptimizer1.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test09240() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
        int int0 = multiStartUnivariateRealOptimizer1.getEvaluations();
        multiStartUnivariateRealOptimizer1.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test09241() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
        int int0 = multiStartUnivariateRealOptimizer1.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test09242() throws Throwable {
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(convergenceChecker0).toString();
        BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MersenneTwister mersenneTwister0 = new MersenneTwister(53);
        MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
        int int0 = multiStartUnivariateRealOptimizer1.getEvaluations();
        multiStartUnivariateRealOptimizer1.getOptima();
    }

    @Test(timeout = 4000)
    public void test10243() throws Throwable {
        System.setCurrentTimeMillis(0L);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 2450;
        Well19937c well19937c0 = new Well19937c(2450);
    }

    @Test(timeout = 4000)
    public void test10244() throws Throwable {
        System.setCurrentTimeMillis(0L);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 2450;
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
    }

    @Test(timeout = 4000)
    public void test10246() throws Throwable {
        System.setCurrentTimeMillis(0L);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 2450;
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test10247() throws Throwable {
        System.setCurrentTimeMillis(0L);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 2450;
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test10248() throws Throwable {
        System.setCurrentTimeMillis(0L);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 2450;
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
    }

    @Test(timeout = 4000)
    public void test10249() throws Throwable {
        System.setCurrentTimeMillis(0L);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 2450;
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
    }

    @Test(timeout = 4000)
    public void test10250() throws Throwable {
        System.setCurrentTimeMillis(0L);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 2450;
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
    }

    @Test(timeout = 4000)
    public void test10251() throws Throwable {
        System.setCurrentTimeMillis(0L);
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 2450;
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 5;
        byteArray0[1] = (byte) 3;
        byteArray0[2] = (byte) (-1);
        byteArray0[3] = (byte) 0;
        well19937c0.nextBytes(byteArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        boolean boolean0 = well19937c0.nextBoolean();
        float float0 = well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
    }

    @Test(timeout = 4000)
    public void test11252() throws Throwable {
        int int0 = 0;
        RandomGenerator randomGenerator0 = null;
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test11253() throws Throwable {
        int int0 = 0;
        RandomGenerator randomGenerator0 = null;
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test11254() throws Throwable {
        int int0 = 0;
        RandomGenerator randomGenerator0 = null;
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
    }

    @Test(timeout = 4000)
    public void test11255() throws Throwable {
        int int0 = 0;
        RandomGenerator randomGenerator0 = null;
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
        multiStartUnivariateRealOptimizer1.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test11256() throws Throwable {
        int int0 = 0;
        RandomGenerator randomGenerator0 = null;
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
        multiStartUnivariateRealOptimizer1.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test11257() throws Throwable {
        int int0 = 0;
        RandomGenerator randomGenerator0 = null;
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
    }

    @Test(timeout = 4000)
    public void test11258() throws Throwable {
        int int0 = 0;
        RandomGenerator randomGenerator0 = null;
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
        multiStartUnivariateRealOptimizer1.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test11259() throws Throwable {
        int int0 = 0;
        RandomGenerator randomGenerator0 = null;
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
        multiStartUnivariateRealOptimizer1.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test11260() throws Throwable {
        int int0 = 0;
        RandomGenerator randomGenerator0 = null;
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    }

    @Test(timeout = 4000)
    public void test11261() throws Throwable {
        int int0 = 0;
        RandomGenerator randomGenerator0 = null;
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
        multiStartUnivariateRealOptimizer0.setConvergenceChecker((ConvergenceChecker<UnivariateRealPointValuePair>) null);
    }

    @Test(timeout = 4000)
    public void test12262() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
    }

    @Test(timeout = 4000)
    public void test12263() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        float float0 = well1024a0.nextFloat();
    }

    @Test(timeout = 4000)
    public void test12264() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        float float0 = well1024a0.nextFloat();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test12265() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        float float0 = well1024a0.nextFloat();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test12266() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        float float0 = well1024a0.nextFloat();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
    }

    @Test(timeout = 4000)
    public void test12267() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        float float0 = well1024a0.nextFloat();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(116);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test12268() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        float float0 = well1024a0.nextFloat();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(116);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test12269() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        float float0 = well1024a0.nextFloat();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(116);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 116, well1024a0);
        multiStartUnivariateRealOptimizer1.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test12270() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        float float0 = well1024a0.nextFloat();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(116);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 116, well1024a0);
        multiStartUnivariateRealOptimizer1.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test12271() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        float float0 = well1024a0.nextFloat();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(116);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 116, well1024a0);
    }

    @Test(timeout = 4000)
    public void test12272() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        float float0 = well1024a0.nextFloat();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(116);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 116, well1024a0);
        GoalType goalType0 = GoalType.MINIMIZE;
        multiStartUnivariateRealOptimizer1.optimize((PolynomialFunction) null, goalType0, 1485.7335344, (double) 0.37931466F);
    }

    @Test(timeout = 4000)
    public void test13273() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1039, (RandomGenerator) null);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test13274() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1039, (RandomGenerator) null);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test13275() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1039, (RandomGenerator) null);
    }

    @Test(timeout = 4000)
    public void test13276() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1039, (RandomGenerator) null);
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 1039;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        polynomialFunction0.degree();
    }

    @Test(timeout = 4000)
    public void test13277() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1039, (RandomGenerator) null);
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 1039;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test13280() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1039, (RandomGenerator) null);
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 1039;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 1039, 1.0, (-0.16666666666666666));
    }

    @Test(timeout = 4000)
    public void test14281() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
    }

    @Test(timeout = 4000)
    public void test14282() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test14283() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test14284() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
    }

    @Test(timeout = 4000)
    public void test14285() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test14286() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test14287() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test14288() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test14289() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test14290() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer1.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test14291() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer1.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test14292() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-2728), well1024a0);
    }

    @Test(timeout = 4000)
    public void test14293() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well1024a well1024a0 = new Well1024a();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-2728), well1024a0);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 1;
        doubleArray0[2] = (double) 1;
        doubleArray0[3] = (double) (-2728);
        PolynomialFunctionNewtonForm polynomialFunctionNewtonForm0 = null;
        polynomialFunctionNewtonForm0 = new PolynomialFunctionNewtonForm(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test15294() throws Throwable {
        int int0 = 112;
        Well19937c well19937c0 = new Well19937c((long) 112);
    }

    @Test(timeout = 4000)
    public void test15295() throws Throwable {
        int int0 = 112;
        Well19937c well19937c0 = new Well19937c((long) 112);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 112, well19937c0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test15296() throws Throwable {
        int int0 = 112;
        Well19937c well19937c0 = new Well19937c((long) 112);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 112, well19937c0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test15297() throws Throwable {
        int int0 = 112;
        Well19937c well19937c0 = new Well19937c((long) 112);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 112, well19937c0);
    }

    @Test(timeout = 4000)
    public void test15298() throws Throwable {
        int int0 = 112;
        Well19937c well19937c0 = new Well19937c((long) 112);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 112, well19937c0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(112);
    }

    @Test(timeout = 4000)
    public void test16299() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[2];
        intArray0[0] = (-1468);
        intArray0[1] = (-1468);
        Well44497a well44497a0 = new Well44497a(intArray0);
    }

    @Test(timeout = 4000)
    public void test16302() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[2];
        intArray0[0] = (-1468);
        intArray0[1] = (-1468);
        Well44497a well44497a0 = new Well44497a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-1468), well44497a0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test16303() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[2];
        intArray0[0] = (-1468);
        intArray0[1] = (-1468);
        Well44497a well44497a0 = new Well44497a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-1468), well44497a0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test16304() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[2];
        intArray0[0] = (-1468);
        intArray0[1] = (-1468);
        Well44497a well44497a0 = new Well44497a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-1468), well44497a0);
    }

    @Test(timeout = 4000)
    public void test16307() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[2];
        intArray0[0] = (-1468);
        intArray0[1] = (-1468);
        Well44497a well44497a0 = new Well44497a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-1468), well44497a0);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) (-1468);
        doubleArray0[1] = (double) (-1468);
        doubleArray0[2] = (double) (-1468);
        doubleArray0[3] = (double) (-1468);
        PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
        polynomialFunctionLagrangeForm0.degree();
    }

    @Test(timeout = 4000)
    public void test16308() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[2];
        intArray0[0] = (-1468);
        intArray0[1] = (-1468);
        Well44497a well44497a0 = new Well44497a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-1468), well44497a0);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) (-1468);
        doubleArray0[1] = (double) (-1468);
        doubleArray0[2] = (double) (-1468);
        doubleArray0[3] = (double) (-1468);
        PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test16311() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[2];
        intArray0[0] = (-1468);
        intArray0[1] = (-1468);
        Well44497a well44497a0 = new Well44497a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-1468), well44497a0);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) (-1468);
        doubleArray0[1] = (double) (-1468);
        doubleArray0[2] = (double) (-1468);
        doubleArray0[3] = (double) (-1468);
        PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunctionLagrangeForm0, goalType0, (double) (-1468), (-1468.0));
    }

    @Test(timeout = 4000)
    public void test17312() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
    }

    @Test(timeout = 4000)
    public void test17313() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
    }

    @Test(timeout = 4000)
    public void test17314() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test17315() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test17316() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
    }

    @Test(timeout = 4000)
    public void test17317() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test17318() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test17319() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test17320() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int1 = 52;
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
        multiStartUnivariateRealOptimizer1.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test17321() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int1 = 52;
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
        multiStartUnivariateRealOptimizer1.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test17322() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int1 = 52;
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
    }

    @Test(timeout = 4000)
    public void test17323() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int1 = 52;
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 185;
        doubleArray0[1] = (double) 52;
        int int2 = randomAdaptor0.nextInt(52);
    }

    @Test(timeout = 4000)
    public void test17326() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int1 = 52;
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 185;
        doubleArray0[1] = (double) 52;
        int int2 = randomAdaptor0.nextInt(52);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
        multiStartUnivariateRealOptimizer1.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test17327() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int1 = 52;
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 185;
        doubleArray0[1] = (double) 52;
        int int2 = randomAdaptor0.nextInt(52);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
        multiStartUnivariateRealOptimizer1.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test17328() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int1 = 52;
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 185;
        doubleArray0[1] = (double) 52;
        int int2 = randomAdaptor0.nextInt(52);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    }

    @Test(timeout = 4000)
    public void test17329() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int1 = 52;
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 185;
        doubleArray0[1] = (double) 52;
        int int2 = randomAdaptor0.nextInt(52);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
        doubleArray0[2] = (double) 0L;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        polynomialFunction0.degree();
    }

    @Test(timeout = 4000)
    public void test17330() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int1 = 52;
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 185;
        doubleArray0[1] = (double) 52;
        int int2 = randomAdaptor0.nextInt(52);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
        doubleArray0[2] = (double) 0L;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test17333() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        long long0 = 0L;
        Well19937a well19937a0 = new Well19937a(0L);
        RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int1 = 52;
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 185;
        doubleArray0[1] = (double) 52;
        int int2 = randomAdaptor0.nextInt(52);
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
        doubleArray0[2] = (double) 0L;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        multiStartUnivariateRealOptimizer1.optimize(polynomialFunction0, goalType0, (double) 0L, (double) 46);
    }

    @Test(timeout = 4000)
    public void test18334() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister(1);
    }

    @Test(timeout = 4000)
    public void test18335() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister(1);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 5116, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test18336() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister(1);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 5116, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test18337() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister(1);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 5116, mersenneTwister0);
    }

    @Test(timeout = 4000)
    public void test18338() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister(1);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 5116, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations((-2676));
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test18339() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MersenneTwister mersenneTwister0 = new MersenneTwister(1);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 5116, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations((-2676));
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test19340() throws Throwable {
        MersenneTwister mersenneTwister0 = new MersenneTwister();
    }

    @Test(timeout = 4000)
    public void test19341() throws Throwable {
        MersenneTwister mersenneTwister0 = new MersenneTwister();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test19342() throws Throwable {
        MersenneTwister mersenneTwister0 = new MersenneTwister();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test19343() throws Throwable {
        MersenneTwister mersenneTwister0 = new MersenneTwister();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, mersenneTwister0);
    }

    @Test(timeout = 4000)
    public void test19344() throws Throwable {
        MersenneTwister mersenneTwister0 = new MersenneTwister();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(0);
    }

    @Test(timeout = 4000)
    public void test20345() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a((long) 0);
    }

    @Test(timeout = 4000)
    public void test20346() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a((long) 0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well512a0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test20347() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a((long) 0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well512a0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test20348() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a((long) 0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well512a0);
    }

    @Test(timeout = 4000)
    public void test20349() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a((long) 0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well512a0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test20350() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a((long) 0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well512a0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test20351() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well512a well512a0 = new Well512a((long) 0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well512a0);
        int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test21352() throws Throwable {
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
    }

    @Test(timeout = 4000)
    public void test21353() throws Throwable {
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, jDKRandomGenerator0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test21354() throws Throwable {
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, jDKRandomGenerator0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test21355() throws Throwable {
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, jDKRandomGenerator0);
    }

    @Test(timeout = 4000)
    public void test21356() throws Throwable {
        JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, jDKRandomGenerator0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (-181.00352113), 907.7648312, 907.7648312);
    }

    @Test(timeout = 4000)
    public void test22357() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 3765;
        Well1024a well1024a0 = new Well1024a((long) 3765);
    }

    @Test(timeout = 4000)
    public void test22358() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 3765;
        Well1024a well1024a0 = new Well1024a((long) 3765);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test22359() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 3765;
        Well1024a well1024a0 = new Well1024a((long) 3765);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test22360() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 3765;
        Well1024a well1024a0 = new Well1024a((long) 3765);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
    }

    @Test(timeout = 4000)
    public void test22361() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 3765;
        Well1024a well1024a0 = new Well1024a((long) 3765);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[9];
        intArray0[0] = 3765;
        intArray0[1] = 3765;
        intArray0[2] = 3765;
        intArray0[3] = 3765;
        intArray0[4] = 3765;
        intArray0[5] = 4531;
        intArray0[6] = 3765;
        intArray0[7] = 3765;
        intArray0[8] = 3765;
        Well44497a well44497a0 = new Well44497a(intArray0);
    }

    @Test(timeout = 4000)
    public void test22364() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 3765;
        Well1024a well1024a0 = new Well1024a((long) 3765);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[9];
        intArray0[0] = 3765;
        intArray0[1] = 3765;
        intArray0[2] = 3765;
        intArray0[3] = 3765;
        intArray0[4] = 3765;
        intArray0[5] = 4531;
        intArray0[6] = 3765;
        intArray0[7] = 3765;
        intArray0[8] = 3765;
        Well44497a well44497a0 = new Well44497a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>((BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) null, 4531, well44497a0);
        multiStartUnivariateRealOptimizer1.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test22365() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 3765;
        Well1024a well1024a0 = new Well1024a((long) 3765);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[9];
        intArray0[0] = 3765;
        intArray0[1] = 3765;
        intArray0[2] = 3765;
        intArray0[3] = 3765;
        intArray0[4] = 3765;
        intArray0[5] = 4531;
        intArray0[6] = 3765;
        intArray0[7] = 3765;
        intArray0[8] = 3765;
        Well44497a well44497a0 = new Well44497a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>((BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) null, 4531, well44497a0);
        multiStartUnivariateRealOptimizer1.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test22366() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 3765;
        Well1024a well1024a0 = new Well1024a((long) 3765);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[9];
        intArray0[0] = 3765;
        intArray0[1] = 3765;
        intArray0[2] = 3765;
        intArray0[3] = 3765;
        intArray0[4] = 3765;
        intArray0[5] = 4531;
        intArray0[6] = 3765;
        intArray0[7] = 3765;
        intArray0[8] = 3765;
        Well44497a well44497a0 = new Well44497a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>((BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) null, 4531, well44497a0);
    }

    @Test(timeout = 4000)
    public void test22369() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 3765;
        Well1024a well1024a0 = new Well1024a((long) 3765);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[9];
        intArray0[0] = 3765;
        intArray0[1] = 3765;
        intArray0[2] = 3765;
        intArray0[3] = 3765;
        intArray0[4] = 3765;
        intArray0[5] = 4531;
        intArray0[6] = 3765;
        intArray0[7] = 3765;
        intArray0[8] = 3765;
        Well44497a well44497a0 = new Well44497a(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>((BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) null, 4531, well44497a0);
        multiStartUnivariateRealOptimizer1.getConvergenceChecker();
    }

    @Test(timeout = 4000)
    public void test23370() throws Throwable {
        Well1024a well1024a0 = new Well1024a((long) (-571));
    }

    @Test(timeout = 4000)
    public void test23371() throws Throwable {
        Well1024a well1024a0 = new Well1024a((long) (-571));
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, (-571), well1024a0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test23372() throws Throwable {
        Well1024a well1024a0 = new Well1024a((long) (-571));
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, (-571), well1024a0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test23373() throws Throwable {
        Well1024a well1024a0 = new Well1024a((long) (-571));
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, (-571), well1024a0);
    }

    @Test(timeout = 4000)
    public void test23374() throws Throwable {
        Well1024a well1024a0 = new Well1024a((long) (-571));
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, (-571), well1024a0);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-1777.9833);
        doubleArray0[1] = (double) (-571);
        doubleArray0[2] = (double) (-571);
        doubleArray0[3] = (double) (-571);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        polynomialFunction0.degree();
    }

    @Test(timeout = 4000)
    public void test23375() throws Throwable {
        Well1024a well1024a0 = new Well1024a((long) (-571));
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, (-571), well1024a0);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-1777.9833);
        doubleArray0[1] = (double) (-571);
        doubleArray0[2] = (double) (-571);
        doubleArray0[3] = (double) (-571);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test23378() throws Throwable {
        Well1024a well1024a0 = new Well1024a((long) (-571));
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, (-571), well1024a0);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-1777.9833);
        doubleArray0[1] = (double) (-571);
        doubleArray0[2] = (double) (-571);
        doubleArray0[3] = (double) (-571);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType0 = GoalType.MINIMIZE;
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (-1777.9833), (-571.0), (-571.0));
    }

    @Test(timeout = 4000)
    public void test24379() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 0;
        int[] intArray0 = new int[2];
        intArray0[0] = 0;
        intArray0[1] = 205;
        MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
    }

    @Test(timeout = 4000)
    public void test24382() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 0;
        int[] intArray0 = new int[2];
        intArray0[0] = 0;
        intArray0[1] = 205;
        MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test24383() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 0;
        int[] intArray0 = new int[2];
        intArray0[0] = 0;
        intArray0[1] = 205;
        MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test24384() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 0;
        int[] intArray0 = new int[2];
        intArray0[0] = 0;
        intArray0[1] = 205;
        MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
    }

    @Test(timeout = 4000)
    public void test24387() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 0;
        int[] intArray0 = new int[2];
        intArray0[0] = 0;
        intArray0[1] = 205;
        MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        polynomialFunction0.degree();
    }

    @Test(timeout = 4000)
    public void test24388() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 0;
        int[] intArray0 = new int[2];
        intArray0[0] = 0;
        intArray0[1] = 205;
        MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test24391() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 0;
        int[] intArray0 = new int[2];
        intArray0[0] = 0;
        intArray0[1] = 205;
        MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        float float0 = mersenneTwister0.nextFloat();
    }

    @Test(timeout = 4000)
    public void test24394() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int int0 = 0;
        int[] intArray0 = new int[2];
        intArray0[0] = 0;
        intArray0[1] = 205;
        MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        float float0 = mersenneTwister0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (-392.5242693624), 884.3);
    }

    @Test(timeout = 4000)
    public void test25395() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 4420;
        Well512a well512a0 = new Well512a();
    }

    @Test(timeout = 4000)
    public void test25396() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 4420;
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test25397() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 4420;
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test25398() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 4420;
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
    }

    @Test(timeout = 4000)
    public void test25399() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 4420;
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test25400() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 4420;
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test25401() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 4420;
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test25403() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 4420;
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
        multiStartUnivariateRealOptimizer0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test25404() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 4420;
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test25405() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 4420;
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
    }

    @Test(timeout = 4000)
    public void test25406() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        int int0 = 4420;
        Well512a well512a0 = new Well512a();
        well512a0.setSeed(4420);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
        int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
        ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
        PolynomialFunction polynomialFunction0 = null;
        GoalType goalType0 = GoalType.MAXIMIZE;
        double double0 = 0.0;
        multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 0, 0.0, (double) 0);
    }

    @Test(timeout = 4000)
    public void test26407() throws Throwable {
        System.setCurrentTimeMillis(0L);
        UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn(47, 47, 68, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
        doReturn(555, 33, 68, 68, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
        doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class), any(org.apache.commons.math.optimization.GoalType.class), anyDouble(), anyDouble());
        Well19937c well19937c0 = new Well19937c(2450);
        well19937c0.setSeed(0L);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
        well19937c0.nextBoolean();
        well19937c0.nextFloat();
        GoalType goalType0 = GoalType.MINIMIZE;
        multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        multiStartUnivariateRealOptimizer0.getOptima();
        multiStartUnivariateRealOptimizer0.getOptima();
        Random.setNextRandom(2450);
        multiStartUnivariateRealOptimizer0.getEvaluations();
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) 100;
        doubleArray0[1] = (-126.151);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        GoalType goalType1 = GoalType.MAXIMIZE;
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, (-1.0), 2853.149559891947, 4003.82806161574);
        multiStartUnivariateRealOptimizer0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test27408() throws Throwable {
        double[] doubleArray0 = new double[2];
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        double[] doubleArray1 = new double[8];
        doubleArray1[1] = (-1.0);
        doubleArray1[3] = (-1.0);
        doubleArray1[5] = 1325.0;
        doubleArray1[7] = (-1.0);
    }

    @Test(timeout = 4000)
    public void test28409() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        int[] intArray0 = new int[7];
        intArray0[0] = 2327;
        intArray0[1] = 2327;
        intArray0[2] = 2327;
        intArray0[3] = 2327;
        intArray0[4] = 2327;
        intArray0[5] = 2327;
        intArray0[6] = 2327;
        MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
        mersenneTwister0.nextDouble();
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2327, mersenneTwister0);
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(multiStartUnivariateRealOptimizer0, 2327, mersenneTwister0);
        BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
        MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer2 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, 2327, mersenneTwister0);
        multiStartUnivariateRealOptimizer2.getConvergenceChecker();
        multiStartUnivariateRealOptimizer1.setConvergenceChecker((ConvergenceChecker<UnivariateRealPointValuePair>) null);
        BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer2 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer3 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer2, 2327, mersenneTwister0);
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 2327;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = (double) 2327;
        doubleArray0[4] = (double) 2327;
        doubleArray0[5] = (double) 2327;
        doubleArray0[6] = (double) 2327;
        doubleArray0[7] = (double) 2327;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test29410() throws Throwable {
        BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
        Well19937a well19937a0 = new Well19937a((-1L));
        MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, well19937a0);
        multiStartUnivariateRealOptimizer0.getOptima();
    }

    @Test(timeout = 4000)
    public void test30411() throws Throwable {
        int[] intArray0 = new int[6];
        Well1024a well1024a0 = new Well1024a(intArray0);
    }
}
