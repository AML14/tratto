/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 20:06:25 GMT 2023
 */
package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        MathUtils.lcm(3000, 3000);
        MathUtils.sign(0L);
        MathUtils.cosh((-4.9E-324));
        double double0 = MathUtils.EPSILON;
        long default0;
        default0 = MathUtils.mulAndCheck((-24L), 0L);
        assertTrue(true ? default0 == (-24L) * 0L : true);
        MathUtils.scalb(3000, 3000);
        MathUtils.sign((double) 3000);
        MathUtils.cosh((-2093.952733));
        long default1;
        if (3000 < 0) {
            try {
                default1 = MathUtils.factorial(3000);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default1 = MathUtils.factorial(3000);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        long default2;
        default2 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default2 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default3;
        default3 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default3 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        long default4;
        default4 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default4 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default5;
        default5 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default5 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        long default6;
        default6 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default6 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default7;
        default7 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default7 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        long default8;
        default8 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default8 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default9;
        default9 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default9 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
        double double4 = MathUtils.sinh(2746.4256);
    }

    @Test(timeout = 4000)
    public void test0015() throws Throwable {
        long default10;
        default10 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default10 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default11;
        default11 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default11 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
        double double4 = MathUtils.sinh(2746.4256);
        long long0;
        long0 = MathUtils.addAndCheck((long) 0, 2855L);
        assertTrue(true ? long0 == (long) 0 + 2855L : true);
    }

    @Test(timeout = 4000)
    public void test0016() throws Throwable {
        long default12;
        default12 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default12 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default13;
        default13 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default13 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
        double double4 = MathUtils.sinh(2746.4256);
        long long0;
        long0 = MathUtils.addAndCheck((long) 0, 2855L);
        assertTrue(true ? long0 == (long) 0 + 2855L : true);
        int int0 = MathUtils.gcd(0, 945);
    }

    @Test(timeout = 4000)
    public void test0017() throws Throwable {
        long default14;
        default14 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default14 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default15;
        default15 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default15 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
        double double4 = MathUtils.sinh(2746.4256);
        long long0;
        long0 = MathUtils.addAndCheck((long) 0, 2855L);
        assertTrue(true ? long0 == (long) 0 + 2855L : true);
        int int0 = MathUtils.gcd(0, 945);
        float float2 = MathUtils.indicator(0.0F);
    }

    @Test(timeout = 4000)
    public void test0018() throws Throwable {
        long default16;
        default16 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default16 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default17;
        default17 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default17 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
        double double4 = MathUtils.sinh(2746.4256);
        long long0;
        long0 = MathUtils.addAndCheck((long) 0, 2855L);
        assertTrue(true ? long0 == (long) 0 + 2855L : true);
        int int0 = MathUtils.gcd(0, 945);
        float float2 = MathUtils.indicator(0.0F);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        long default18;
        default18 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default18 == 0L + 0L : true);
        MathUtils.equals((double) 0L, (double) 0L);
        double double0 = MathUtils.SAFE_MIN;
        long default19;
        default19 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default19 == 0L - 0L : true);
        double double1 = MathUtils.indicator(1335.70629);
        double double2 = MathUtils.EPSILON;
        short short0 = MathUtils.sign((short) 1);
        float float0 = MathUtils.round((float) (short) 1, 0, (int) (short) 1);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.5;
        doubleArray0[1] = (double) (short) 1;
        doubleArray0[2] = 2746.4256;
        MathUtils.hash(doubleArray0);
        MathUtils.hash(0.0);
        double double3 = MathUtils.factorialDouble((short) 1);
        float float1 = MathUtils.round((float) 0L, (int) (short) 1);
        double double4 = MathUtils.sinh(2746.4256);
        long long0;
        long0 = MathUtils.addAndCheck((long) 0, 2855L);
        assertTrue(true ? long0 == (long) 0 + 2855L : true);
        int int0 = MathUtils.gcd(0, 945);
        float float2 = MathUtils.indicator(0.0F);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.hash(0.0);
        float float3 = MathUtils.sign(0.0F);
    }

    @Test(timeout = 4000)
    public void test00210() throws Throwable {
        MathUtils.nextAfter(4.9E-324, 0.0);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 4.9E-324;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        MathUtils.hash(doubleArray0);
        byte default20;
        default20 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default20 == (byte) 0 : true);
        MathUtils.sign(1530.2847F);
        MathUtils.scalb(0.0, (byte) 0);
        MathUtils.gcd((byte) 1, (-1));
        MathUtils.round(0.0, 1083);
        MathUtils.sign(1814L);
        int default21;
        default21 = MathUtils.addAndCheck(1762, (int) (byte) 0);
        assertTrue(true ? default21 == 1762 + (int) (byte) 0 : true);
        MathUtils.indicator((float) 1);
        long default22;
        default22 = MathUtils.indicator((long) 1083);
        assertTrue(true ? default22 == (long) 1083 : true);
        byte default23;
        default23 = MathUtils.sign((byte) (-111));
        assertTrue(true ? default23 == (byte) (-111) : true);
        double default24;
        if (1083 < 0) {
            try {
                default24 = MathUtils.factorialDouble(1083);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default24 = MathUtils.factorialDouble(1083);
        }
        MathUtils.binomialCoefficientLog(1762, (byte) (-111));
        MathUtils.hash(doubleArray0);
        long default25;
        default25 = MathUtils.addAndCheck((-4640L), (-4640L));
        assertTrue(true ? default25 == (-4640L) + (-4640L) : true);
        double default26;
        if ((-1) < 0) {
            try {
                default26 = MathUtils.factorialDouble((-1));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default26 = MathUtils.factorialDouble((-1));
        }
    }

    @Test(timeout = 4000)
    public void test00311() throws Throwable {
        double double0 = MathUtils.SAFE_MIN;
        double default27;
        default27 = MathUtils.normalizeAngle(0.0, 2.2250738585072014E-308);
        assertTrue(true ? default27 == 0.0 - 0.0 : true);
        MathUtils.sinh(0.0);
        MathUtils.equals(0.0, 0.0);
        MathUtils.sinh(0.0);
        MathUtils.round(0.0, 1, 1);
        MathUtils.round(0.0F, 283);
        MathUtils.equals((-110.3522941595321), 0.0);
        long default28;
        default28 = MathUtils.addAndCheck((long) 1, 4774L);
        assertTrue(true ? default28 == (long) 1 + 4774L : true);
        MathUtils.binomialCoefficient(4, (-4276));
        MathUtils.nextAfter(0.0F, 1);
        MathUtils.round(0.0, 188);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 2.2250738585072014E-308;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 2874.20586468;
        MathUtils.equals(doubleArray0, doubleArray0);
        long default29;
        if (1 < 0) {
            try {
                default29 = MathUtils.factorial(1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default29 = MathUtils.factorial(1);
        }
        MathUtils.binomialCoefficient(0, 0);
        MathUtils.binomialCoefficient((-2315), (-1));
    }

    @Test(timeout = 4000)
    public void test00412() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
    }

    @Test(timeout = 4000)
    public void test00413() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
    }

    @Test(timeout = 4000)
    public void test00414() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
    }

    @Test(timeout = 4000)
    public void test00415() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
    }

    @Test(timeout = 4000)
    public void test00416() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
    }

    @Test(timeout = 4000)
    public void test00417() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default30;
        default30 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default30 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test00418() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default31;
        default31 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default31 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals((double) 884287158, 0.0);
        float float0;
        float0 = MathUtils.sign((float) 0L);
        assertTrue(true ? float0 == (float) 0L : true);
    }

    @Test(timeout = 4000)
    public void test00419() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default32;
        default32 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default32 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals((double) 884287158, 0.0);
        float float0;
        float0 = MathUtils.sign((float) 0L);
        assertTrue(true ? float0 == (float) 0L : true);
        byte byte0;
        byte0 = MathUtils.indicator((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
    }

    @Test(timeout = 4000)
    public void test00420() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default33;
        default33 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default33 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals((double) 884287158, 0.0);
        float float0;
        float0 = MathUtils.sign((float) 0L);
        assertTrue(true ? float0 == (float) 0L : true);
        byte byte0;
        byte0 = MathUtils.indicator((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
        int int1 = MathUtils.hash((-1.0));
    }

    @Test(timeout = 4000)
    public void test00421() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default34;
        default34 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default34 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals((double) 884287158, 0.0);
        float float0;
        float0 = MathUtils.sign((float) 0L);
        assertTrue(true ? float0 == (float) 0L : true);
        byte byte0;
        byte0 = MathUtils.indicator((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
        int int1 = MathUtils.hash((-1.0));
        byte default35;
        default35 = MathUtils.sign((byte) 1);
        assertTrue(true ? default35 == (byte) 1 : true);
        double double3 = MathUtils.sinh(0.5);
    }

    @Test(timeout = 4000)
    public void test00422() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default36;
        default36 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default36 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals((double) 884287158, 0.0);
        float float0;
        float0 = MathUtils.sign((float) 0L);
        assertTrue(true ? float0 == (float) 0L : true);
        byte byte0;
        byte0 = MathUtils.indicator((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
        int int1 = MathUtils.hash((-1.0));
        byte default37;
        default37 = MathUtils.sign((byte) 1);
        assertTrue(true ? default37 == (byte) 1 : true);
        double double3 = MathUtils.sinh(0.5);
        long long1 = MathUtils.sign((long) (-1074790400));
    }

    @Test(timeout = 4000)
    public void test00423() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, 1);
        long long0;
        long0 = MathUtils.subAndCheck(4312L, 4312L);
        assertTrue(true ? long0 == 4312L - 4312L : true);
        int int0 = MathUtils.gcd(0, 3320);
        double double1 = MathUtils.nextAfter(3320, 0.0);
        double double2 = MathUtils.indicator((double) 4312L);
        MathUtils.scalb(0.0, 0);
        long default38;
        default38 = MathUtils.mulAndCheck(0L, 4312L);
        assertTrue(true ? default38 == 0L * 4312L : true);
        MathUtils.hash(571.8459247721023);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (double) 3320;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = 3319.9999999999995;
        doubleArray0[4] = (double) 4312L;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.equals((double) 884287158, 0.0);
        float float0;
        float0 = MathUtils.sign((float) 0L);
        assertTrue(true ? float0 == (float) 0L : true);
        byte byte0;
        byte0 = MathUtils.indicator((byte) 0);
        assertTrue(true ? byte0 == (byte) 0 : true);
        int int1 = MathUtils.hash((-1.0));
        byte default39;
        default39 = MathUtils.sign((byte) 1);
        assertTrue(true ? default39 == (byte) 1 : true);
        double double3 = MathUtils.sinh(0.5);
        long long1 = MathUtils.sign((long) (-1074790400));
        long long2;
        long2 = MathUtils.indicator((long) (byte) 0);
        assertTrue(true ? long2 == (long) (byte) 0 : true);
    }

    @Test(timeout = 4000)
    public void test00524() throws Throwable {
        MathUtils.binomialCoefficientDouble(0, 0);
        MathUtils.hash((double) 0);
        MathUtils.lcm((-3869), 52);
        MathUtils.sign((double) 201188);
        byte default40;
        default40 = MathUtils.sign((byte) 0);
        assertTrue(true ? default40 == (byte) 0 : true);
        MathUtils.gcd(52, 1);
        MathUtils.sign(52);
        MathUtils.sign((long) 201188);
        int default41;
        default41 = MathUtils.subAndCheck(0, 6603);
        assertTrue(true ? default41 == 0 - 6603 : true);
        long default42;
        default42 = MathUtils.mulAndCheck((long) 1, (-2588L));
        assertTrue(true ? default42 == (long) 1 * (-2588L) : true);
        MathUtils.sign((-243.34741F));
        MathUtils.scalb((-3869), 1);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) 201188;
        doubleArray0[1] = 1.0;
        doubleArray0[2] = 1.0;
        doubleArray0[3] = (double) 0;
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.hash((double) 1);
        int default43;
        default43 = MathUtils.subAndCheck(1892, 31);
        assertTrue(true ? default43 == 1892 - 31 : true);
        MathUtils.binomialCoefficientLog((-3869), 1);
    }

    @Test(timeout = 4000)
    public void test00625() throws Throwable {
        assertTrue((-0.7478510541174533) > 0);
        assertTrue((-0.7478510541174533) > 0);
        double default44;
        default44 = MathUtils.log((-0.7478510541174533), (-0.7478510541174533));
        MathUtils.cosh(Double.NaN);
        long long0;
        long0 = MathUtils.subAndCheck(3487L, (-2147483648L));
        assertTrue(true ? long0 == 3487L - (-2147483648L) : true);
    }

    @Test(timeout = 4000)
    public void test00626() throws Throwable {
        assertTrue((-0.7478510541174533) > 0);
        assertTrue((-0.7478510541174533) > 0);
        double default45;
        default45 = MathUtils.log((-0.7478510541174533), (-0.7478510541174533));
        MathUtils.cosh(Double.NaN);
        long long0;
        long0 = MathUtils.subAndCheck(3487L, (-2147483648L));
        assertTrue(true ? long0 == 3487L - (-2147483648L) : true);
        double double0 = MathUtils.nextAfter(Double.NaN, (-10.928587103411145));
    }

    @Test(timeout = 4000)
    public void test00627() throws Throwable {
        assertTrue((-0.7478510541174533) > 0);
        assertTrue((-0.7478510541174533) > 0);
        double default46;
        default46 = MathUtils.log((-0.7478510541174533), (-0.7478510541174533));
        MathUtils.cosh(Double.NaN);
        long long0;
        long0 = MathUtils.subAndCheck(3487L, (-2147483648L));
        assertTrue(true ? long0 == 3487L - (-2147483648L) : true);
        double double0 = MathUtils.nextAfter(Double.NaN, (-10.928587103411145));
        double double1 = MathUtils.binomialCoefficientLog(356, 356);
    }

    @Test(timeout = 4000)
    public void test00628() throws Throwable {
        assertTrue((-0.7478510541174533) > 0);
        assertTrue((-0.7478510541174533) > 0);
        double default47;
        default47 = MathUtils.log((-0.7478510541174533), (-0.7478510541174533));
        MathUtils.cosh(Double.NaN);
        long long0;
        long0 = MathUtils.subAndCheck(3487L, (-2147483648L));
        assertTrue(true ? long0 == 3487L - (-2147483648L) : true);
        double double0 = MathUtils.nextAfter(Double.NaN, (-10.928587103411145));
        double double1 = MathUtils.binomialCoefficientLog(356, 356);
        int int0 = MathUtils.sign(356);
    }

    @Test(timeout = 4000)
    public void test00729() throws Throwable {
        long default48;
        default48 = MathUtils.mulAndCheck(0L, 0L);
        assertTrue(true ? default48 == 0L * 0L : true);
        long default49;
        default49 = MathUtils.mulAndCheck(0L, 0L);
        assertTrue(true ? default49 == 0L * 0L : true);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-110.3522941595321);
        doubleArray0[1] = (double) 0L;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = (double) 0L;
        doubleArray0[4] = (double) 0L;
        MathUtils.equals(doubleArray0, doubleArray0);
        double[] doubleArray1 = new double[6];
        doubleArray1[0] = (-110.3522941595321);
        doubleArray1[1] = (double) 0L;
        doubleArray1[2] = (-110.3522941595321);
        doubleArray1[3] = (double) 0L;
        doubleArray1[4] = (double) 0L;
        doubleArray1[5] = (-110.3522941595321);
        int int0 = MathUtils.hash(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test00730() throws Throwable {
        long default50;
        default50 = MathUtils.mulAndCheck(0L, 0L);
        assertTrue(true ? default50 == 0L * 0L : true);
        long default51;
        default51 = MathUtils.mulAndCheck(0L, 0L);
        assertTrue(true ? default51 == 0L * 0L : true);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-110.3522941595321);
        doubleArray0[1] = (double) 0L;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = (double) 0L;
        doubleArray0[4] = (double) 0L;
        MathUtils.equals(doubleArray0, doubleArray0);
        double[] doubleArray1 = new double[6];
        doubleArray1[0] = (-110.3522941595321);
        doubleArray1[1] = (double) 0L;
        doubleArray1[2] = (-110.3522941595321);
        doubleArray1[3] = (double) 0L;
        doubleArray1[4] = (double) 0L;
        doubleArray1[5] = (-110.3522941595321);
        int int0 = MathUtils.hash(doubleArray1);
        int default52;
        default52 = MathUtils.addAndCheck(2068852981, 2068852981);
        assertTrue(true ? default52 == 2068852981 + 2068852981 : true);
    }

    @Test(timeout = 4000)
    public void test00831() throws Throwable {
        MathUtils.equals(379.65915000474, 0.0);
        MathUtils.binomialCoefficient(52, 0);
        long default53;
        default53 = MathUtils.mulAndCheck((long) 52, (long) 52);
        assertTrue(true ? default53 == (long) 52 * (long) 52 : true);
        long default54;
        default54 = MathUtils.indicator((long) 52);
        assertTrue(true ? default54 == (long) 52 : true);
        MathUtils.sign(2704L);
        MathUtils.binomialCoefficientLog(1535, 31);
        long default55;
        default55 = MathUtils.addAndCheck(0L, (long) 0);
        assertTrue(true ? default55 == 0L + (long) 0 : true);
        MathUtils.sign((short) 1143);
        MathUtils.sign(52);
        MathUtils.binomialCoefficientLog((short) 1143, (-1386));
        MathUtils.indicator((-872));
        MathUtils.nextAfter(0L, (-1386));
        MathUtils.factorialLog(1535);
        MathUtils.cosh((-1.0));
        MathUtils.lcm(0, (-1477));
        MathUtils.gcd((-1386), 2737);
    }

    @Test(timeout = 4000)
    public void test00932() throws Throwable {
        MathUtils.sign((-816.297189));
        long default56;
        default56 = MathUtils.mulAndCheck((-3840L), (-377L));
        assertTrue(true ? default56 == (-3840L) * (-377L) : true);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 1447680L;
        doubleArray0[1] = (double) (-377L);
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = (-1.0);
        MathUtils.hash(doubleArray0);
        float default57;
        default57 = MathUtils.sign((float) 395698079);
        assertTrue(true ? default57 == (float) 395698079 : true);
        long default58;
        default58 = MathUtils.subAndCheck((-377L), 1L);
        assertTrue(true ? default58 == (-377L) - 1L : true);
        MathUtils.gcd(395698079, 395698079);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.sign(395698079);
        MathUtils.round((float) (-3840L), 395698079, 1);
    }

    @Test(timeout = 4000)
    public void test01033() throws Throwable {
        int default59;
        default59 = MathUtils.mulAndCheck(31, (-4501));
        assertTrue(true ? default59 == 31 * (-4501) : true);
        MathUtils.sign(699L);
        short default60;
        default60 = MathUtils.indicator((short) 0);
        assertTrue(true ? (default60 == (short) 0 || default60 == -1) : true);
        MathUtils.indicator((double) (-139531));
        MathUtils.sign((long) 31);
        MathUtils.sign(0.0F);
        MathUtils.equals((double[]) null, (double[]) null);
        MathUtils.nextAfter(10.0, 1L);
        long default61;
        default61 = MathUtils.indicator(15L);
        assertTrue(true ? default61 == 15L : true);
        MathUtils.cosh(699L);
        MathUtils.sign((-181.1638149));
        MathUtils.equals(6.283185307179586, 3319.9999999999995);
        MathUtils.sign((short) 29);
    }

    @Test(timeout = 4000)
    public void test01134() throws Throwable {
        MathUtils.equals(379.65915000474, 0.0);
        MathUtils.binomialCoefficient(52, 0);
        long default62;
        default62 = MathUtils.mulAndCheck((long) 52, (long) 52);
        assertTrue(true ? default62 == (long) 52 * (long) 52 : true);
        long default63;
        default63 = MathUtils.indicator((long) 52);
        assertTrue(true ? default63 == (long) 52 : true);
        MathUtils.sign(2704L);
        MathUtils.binomialCoefficientLog(1535, 31);
        long default64;
        default64 = MathUtils.addAndCheck(0L, (long) 0);
        assertTrue(true ? default64 == 0L + (long) 0 : true);
        MathUtils.sign((short) 1143);
        MathUtils.sign(52);
        MathUtils.binomialCoefficientLog((short) 1143, (-1386));
        MathUtils.indicator(1);
        MathUtils.nextAfter(0L, (-1386));
        MathUtils.factorialLog(1535);
        MathUtils.cosh((-1.0));
        MathUtils.lcm(0, (-1477));
        MathUtils.gcd((-1386), 2737);
        long default65;
        default65 = MathUtils.subAndCheck((long) (short) 1143, 1509L);
        assertTrue(true ? default65 == (long) (short) 1143 - 1509L : true);
    }

    @Test(timeout = 4000)
    public void test01235() throws Throwable {
        long default66;
        if (0 < 0) {
            try {
                default66 = MathUtils.factorial(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default66 = MathUtils.factorial(0);
        }
        MathUtils.sign(0);
        MathUtils.round((float) 1L, 0);
        byte default67;
        default67 = MathUtils.indicator((byte) (-121));
        assertTrue(true ? default67 == (byte) (-121) : true);
        MathUtils.sign((int) (byte) (-1));
        MathUtils.sinh(1L);
        long default68;
        default68 = MathUtils.mulAndCheck((-1L), (long) (byte) (-121));
        assertTrue(true ? default68 == (-1L) * (long) (byte) (-121) : true);
        MathUtils.binomialCoefficient(0, (-1));
        byte default69;
        default69 = MathUtils.indicator((byte) (-1));
        assertTrue(true ? default69 == (byte) (-1) : true);
        MathUtils.round((-180.6522257959), (int) (byte) (-1));
        long default70;
        default70 = MathUtils.subAndCheck((long) (byte) (-1), 0L);
        assertTrue(true ? default70 == (long) (byte) (-1) - 0L : true);
        long default71;
        if (0 < 0) {
            try {
                default71 = MathUtils.factorial(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default71 = MathUtils.factorial(0);
        }
        MathUtils.cosh(1.1752011936438016);
        int default72;
        default72 = MathUtils.mulAndCheck((-1330), (-1));
        assertTrue(true ? default72 == (-1330) * (-1) : true);
        MathUtils.indicator(21.6F);
        int default73;
        default73 = MathUtils.subAndCheck(1508, (-1));
        assertTrue(true ? default73 == 1508 - (-1) : true);
    }

    @Test(timeout = 4000)
    public void test01336() throws Throwable {
        int int0 = 300;
        int default74;
        default74 = MathUtils.mulAndCheck(300, 1);
        assertTrue(true ? default74 == 300 * 1 : true);
        MathUtils.scalb((-2900.8202145115297), (-929));
        MathUtils.sign((-2900.8202145115297));
        int int1 = 453;
        MathUtils.binomialCoefficientLog(453, 1);
        MathUtils.equals(0.0, (double) 300);
        MathUtils.sign((long) 300);
        long default75;
        default75 = MathUtils.mulAndCheck((long) (-929), (long) 453);
        assertTrue(true ? default75 == (long) (-929) * (long) 453 : true);
        MathUtils.factorialLog(453);
        MathUtils.sign((-3894));
        MathUtils.binomialCoefficientDouble((-1), (-929));
    }

    @Test(timeout = 4000)
    public void test01437() throws Throwable {
        MathUtils.indicator((-1474.277532));
        byte default76;
        default76 = MathUtils.sign((byte) 4);
        assertTrue(true ? default76 == (byte) 4 : true);
        MathUtils.sign((short) (-241));
    }

    @Test(timeout = 4000)
    public void test01538() throws Throwable {
        double double0 = (-1712.611);
        MathUtils.cosh((-1712.611));
        long default77;
        default77 = MathUtils.indicator((-1L));
        assertTrue(true ? default77 == (-1L) : true);
        short default78;
        default78 = MathUtils.indicator((short) (-241));
        assertTrue(true ? (default78 == (short) (-241) || default78 == -1) : true);
        int default79;
        default79 = MathUtils.subAndCheck((-1), 31);
        assertTrue(true ? default79 == (-1) - 31 : true);
        long default80;
        if ((-32) < 0) {
            try {
                default80 = MathUtils.factorial((-32));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default80 = MathUtils.factorial((-32));
        }
    }

    @Test(timeout = 4000)
    public void test01639() throws Throwable {
        MathUtils.nextAfter((-2200.8951), (-2200.8951));
        MathUtils.cosh((-2200.8951));
        MathUtils.sign(Float.NaN);
        MathUtils.sign((-912.0F));
        int int0 = (-2147234663);
        MathUtils.binomialCoefficientDouble((-2147234663), (-2147234663));
    }

    @Test(timeout = 4000)
    public void test01740() throws Throwable {
        long default81;
        default81 = MathUtils.subAndCheck(0L, 0L);
        assertTrue(true ? default81 == 0L - 0L : true);
        double default82;
        default82 = MathUtils.normalizeAngle(1.0, 10.0);
        assertTrue(true ? default82 == 1.0 - 1.0 : true);
    }

    @Test(timeout = 4000)
    public void test01841() throws Throwable {
        MathUtils.gcd(0, (-1));
        long default83;
        if (1 < 0) {
            try {
                default83 = MathUtils.factorial(1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default83 = MathUtils.factorial(1);
        }
        MathUtils.cosh(0);
    }

    @Test(timeout = 4000)
    public void test01942() throws Throwable {
        int default84;
        default84 = MathUtils.addAndCheck(53, 0);
        assertTrue(true ? default84 == 53 + 0 : true);
        MathUtils.gcd(0, 0);
        MathUtils.indicator((double) 0);
    }

    @Test(timeout = 4000)
    public void test02043() throws Throwable {
        MathUtils.sinh((-1754.10975657812));
        MathUtils.round(0.0F, 0);
    }

    @Test(timeout = 4000)
    public void test02144() throws Throwable {
        MathUtils.binomialCoefficientDouble((-330), (-1));
    }

    @Test(timeout = 4000)
    public void test02245() throws Throwable {
        MathUtils.equals(0.0, 0.0);
        int default85;
        default85 = MathUtils.subAndCheck(31, (-1));
        assertTrue(true ? default85 == 31 - (-1) : true);
    }

    @Test(timeout = 4000)
    public void test02346() throws Throwable {
        MathUtils.scalb(0.0, 822);
        MathUtils.scalb(822, 0);
    }

    @Test(timeout = 4000)
    public void test02447() throws Throwable {
        MathUtils.lcm(3517, 0);
        MathUtils.round((float) 0, 0, 0);
        double default86;
        default86 = MathUtils.normalizeAngle(1.0F, 1637.4906461181);
        assertTrue(true ? default86 == 1.0F - 1.0F : true);
    }

    @Test(timeout = 4000)
    public void test02548() throws Throwable {
        long default87;
        default87 = MathUtils.subAndCheck(2123L, 4503599627370495L);
        assertTrue(true ? default87 == 2123L - 4503599627370495L : true);
    }

    @Test(timeout = 4000)
    public void test02649() throws Throwable {
        int int0 = (-2255);
        MathUtils.sign((-2255));
        MathUtils.indicator(0.0F);
        MathUtils.binomialCoefficient((-2255), (-1));
    }

    @Test(timeout = 4000)
    public void test02750() throws Throwable {
        double double0 = (-1505.4677638);
        MathUtils.nextAfter((-1505.4677638), 0.0);
        int int0 = (-367);
        MathUtils.binomialCoefficient((-367), (-367));
    }

    @Test(timeout = 4000)
    public void test02851() throws Throwable {
        MathUtils.sign(0);
        MathUtils.round(1.0, 0);
        MathUtils.binomialCoefficient(0, 0);
        long default88;
        default88 = MathUtils.mulAndCheck(1L, 0L);
        assertTrue(true ? default88 == 1L * 0L : true);
        int default89;
        default89 = MathUtils.mulAndCheck((-1175), 0);
        assertTrue(true ? default89 == (-1175) * 0 : true);
        MathUtils.sinh(0.0);
    }

    @Test(timeout = 4000)
    public void test02952() throws Throwable {
        int default90;
        default90 = MathUtils.mulAndCheck(0, (-1));
        assertTrue(true ? default90 == 0 * (-1) : true);
        short default91;
        default91 = MathUtils.indicator((short) (-204));
        assertTrue(true ? (default91 == (short) (-204) || default91 == -1) : true);
    }

    @Test(timeout = 4000)
    public void test03053() throws Throwable {
        byte default92;
        default92 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default92 == (byte) 0 : true);
        MathUtils.normalizeAngle((byte) 0, (byte) 1);
        long default93;
        default93 = MathUtils.mulAndCheck((-2323L), (long) (byte) 0);
        assertTrue(true ? default93 == (-2323L) * (long) (byte) 0 : true);
    }

    @Test(timeout = 4000)
    public void test03154() throws Throwable {
        long long0 = 0L;
        long default94;
        default94 = MathUtils.addAndCheck(0L, 0L);
        assertTrue(true ? default94 == 0L + 0L : true);
        int int0 = 0;
        MathUtils.round((float) 0L, 0, 3511);
    }

    @Test(timeout = 4000)
    public void test03255() throws Throwable {
        MathUtils.round((-1617.9F), 0);
        MathUtils.binomialCoefficientLog(4, 0);
        MathUtils.nextAfter(0, (-1618.0F));
    }

    @Test(timeout = 4000)
    public void test03356() throws Throwable {
        MathUtils.sign((-759.6439791));
        assertTrue(0.0 > 0);
        assertTrue((-583.3606628057408) > 0);
        double default95;
        default95 = MathUtils.log(0.0, (-583.3606628057408));
    }

    @Test(timeout = 4000)
    public void test03457() throws Throwable {
        int int0 = 0;
        int int1 = 1800;
        int default96;
        default96 = MathUtils.subAndCheck(0, 1800);
        assertTrue(true ? default96 == 0 - 1800 : true);
        byte byte0 = (byte) 0;
        byte default97;
        default97 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default97 == (byte) 0 : true);
        int int2 = 0;
        MathUtils.binomialCoefficientLog((-1800), 0);
    }

    @Test(timeout = 4000)
    public void test03558() throws Throwable {
        long default98;
        default98 = MathUtils.subAndCheck(1626L, 0L);
        assertTrue(true ? default98 == 1626L - 0L : true);
        int int0 = 0;
        MathUtils.binomialCoefficient(0, 0);
        int default99;
        default99 = MathUtils.mulAndCheck(1, 0);
        assertTrue(true ? default99 == 1 * 0 : true);
        MathUtils.sinh(1);
        MathUtils.indicator((float) 1626L);
        MathUtils.round((double) 0, 1);
        long default100;
        default100 = MathUtils.mulAndCheck((-1L), (long) 0);
        assertTrue(true ? default100 == (-1L) * (long) 0 : true);
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 0L;
        doubleArray0[1] = (double) 0L;
        doubleArray0[2] = (double) 0L;
        doubleArray0[3] = (double) 1626L;
        doubleArray0[4] = (double) 1L;
        doubleArray0[5] = (double) 0L;
        MathUtils.equals(doubleArray0, doubleArray0);
        short default101;
        default101 = MathUtils.indicator((short) 451);
        assertTrue(true ? (default101 == (short) 451 || default101 == -1) : true);
        MathUtils.normalizeAngle(0L, 2.2909552562);
        int default102;
        default102 = MathUtils.mulAndCheck(1639, (-1057));
        assertTrue(true ? default102 == 1639 * (-1057) : true);
        long default103;
        if (0 < 0) {
            try {
                default103 = MathUtils.factorial(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default103 = MathUtils.factorial(0);
        }
        MathUtils.round((float) 0, 2068, (-1));
    }

    @Test(timeout = 4000)
    public void test03659() throws Throwable {
        MathUtils.factorialLog(0);
        MathUtils.round((-850.8327063), 0);
        MathUtils.indicator((-851.0));
        assertTrue((-850.8327063) > 0);
        assertTrue(829.6205 > 0);
        double default104;
        default104 = MathUtils.log((-850.8327063), 829.6205);
        MathUtils.gcd(0, (-2127031421));
    }

    @Test(timeout = 4000)
    public void test03760() throws Throwable {
        MathUtils.round(0.0F, 0, 0);
        MathUtils.equals(2.0, 2.0);
        MathUtils.round(2.0, 0);
        MathUtils.scalb((-503.9778030393684), 0);
    }

    @Test(timeout = 4000)
    public void test03861() throws Throwable {
        MathUtils.sign((-3029.091F));
        MathUtils.nextAfter((-3029.091F), (-1.0F));
        MathUtils.binomialCoefficientDouble(4, 4);
        long default105;
        default105 = MathUtils.indicator((-1L));
        assertTrue(true ? default105 == (-1L) : true);
        MathUtils.lcm(4, 0);
    }

    @Test(timeout = 4000)
    public void test03962() throws Throwable {
        int default106;
        default106 = MathUtils.subAndCheck(4718, 4718);
        assertTrue(true ? default106 == 4718 - 4718 : true);
        int default107;
        default107 = MathUtils.mulAndCheck(4718, 0);
        assertTrue(true ? default107 == 4718 * 0 : true);
        long default108;
        default108 = MathUtils.subAndCheck(207L, 207L);
        assertTrue(true ? default108 == 207L - 207L : true);
        MathUtils.sign(1.0);
    }

    @Test(timeout = 4000)
    public void test04063() throws Throwable {
        byte default109;
        default109 = MathUtils.indicator((byte) 1);
        assertTrue(true ? default109 == (byte) 1 : true);
        MathUtils.indicator((-1.0F));
        MathUtils.sign((short) (byte) 1);
        MathUtils.sign(0.0F);
        byte default110;
        default110 = MathUtils.indicator((byte) 1);
        assertTrue(true ? default110 == (byte) 1 : true);
    }

    @Test(timeout = 4000)
    public void test04164() throws Throwable {
        MathUtils.binomialCoefficientLog(0, 0);
        MathUtils.scalb(0, (-1));
        MathUtils.equals((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test04265() throws Throwable {
        MathUtils.indicator((-1));
        MathUtils.sign((-620.0F));
        byte default111;
        default111 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default111 == (byte) 0 : true);
    }

    @Test(timeout = 4000)
    public void test04366() throws Throwable {
        MathUtils.hash(1276.5594546284);
    }

    @Test(timeout = 4000)
    public void test04467() throws Throwable {
        short short0 = (short) 2846;
        MathUtils.sign((short) 2846);
        int int0 = 0;
        MathUtils.indicator(0);
        int int1 = 31;
        MathUtils.scalb((short) 1, 31);
        int int2 = (-176);
        MathUtils.binomialCoefficient((-176), (-1207));
    }

    @Test(timeout = 4000)
    public void test04568() throws Throwable {
        short default112;
        default112 = MathUtils.indicator((short) 0);
        assertTrue(true ? (default112 == (short) 0 || default112 == -1) : true);
        MathUtils.sign((short) (-1));
        MathUtils.cosh(1.0);
        MathUtils.log(0.0, (short) (-1));
        MathUtils.factorial((short) (-1));
    }

    @Test(timeout = 4000)
    public void test04669() throws Throwable {
        int default113;
        default113 = MathUtils.addAndCheck((-1), 0);
        assertTrue(true ? default113 == (-1) + 0 : true);
        int int0 = 0;
        int default114;
        default114 = MathUtils.subAndCheck(0, 819);
        assertTrue(true ? default114 == 0 - 819 : true);
        int int1 = 3677;
        MathUtils.round((double) (-1), 0, 3677);
    }

    @Test(timeout = 4000)
    public void test04770() throws Throwable {
        MathUtils.gcd(1, 1);
    }

    @Test(timeout = 4000)
    public void test04871() throws Throwable {
        MathUtils.lcm((-479), (-1));
        long default115;
        if ((-1) < 0) {
            try {
                default115 = MathUtils.factorial((-1));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default115 = MathUtils.factorial((-1));
        }
    }

    @Test(timeout = 4000)
    public void test04972() throws Throwable {
        long default116;
        default116 = MathUtils.indicator(0L);
        assertTrue(true ? default116 == 0L : true);
        MathUtils.sign(2);
        MathUtils.binomialCoefficientLog(1, 0);
        MathUtils.sinh(1);
        MathUtils.sign(0L);
    }

    @Test(timeout = 4000)
    public void test05073() throws Throwable {
        MathUtils.sign(0.0);
        int int0 = (-1956);
        MathUtils.gcd((-1956), (-1956));
        int int1 = 3585;
        MathUtils.binomialCoefficient(663, 3585);
    }

    @Test(timeout = 4000)
    public void test05174() throws Throwable {
        MathUtils.binomialCoefficientDouble(2421, (-3779));
        MathUtils.sign(Double.NaN);
        byte default117;
        default117 = MathUtils.indicator((byte) (-36));
        assertTrue(true ? default117 == (byte) (-36) : true);
        MathUtils.normalizeAngle(Double.NaN, (byte) (-36));
        int default118;
        default118 = MathUtils.mulAndCheck(2421, 0);
        assertTrue(true ? default118 == 2421 * 0 : true);
        int int0 = 31;
        MathUtils.binomialCoefficient(1851, 31);
    }

    @Test(timeout = 4000)
    public void test05275() throws Throwable {
        MathUtils.scalb((-3868.132), 0);
        MathUtils.binomialCoefficientDouble(0, 0);
        byte default119;
        default119 = MathUtils.sign((byte) 95);
        assertTrue(true ? default119 == (byte) 95 : true);
        int default120;
        default120 = MathUtils.mulAndCheck(0, 0);
        assertTrue(true ? default120 == 0 * 0 : true);
        MathUtils.factorialLog((-2545));
    }

    @Test(timeout = 4000)
    public void test05376() throws Throwable {
        MathUtils.sign((short) 0);
        int int0 = 712;
        double default121;
        if (712 < 0) {
            try {
                default121 = MathUtils.factorialDouble(712);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default121 = MathUtils.factorialDouble(712);
        }
        MathUtils.round(Double.POSITIVE_INFINITY, (int) (short) 0, (-1634));
        byte default122;
        default122 = MathUtils.indicator((byte) (-127));
        assertTrue(true ? default122 == (byte) (-127) : true);
        int default123;
        default123 = MathUtils.mulAndCheck(0, (int) (short) 0);
        assertTrue(true ? default123 == 0 * (int) (short) 0 : true);
        MathUtils.sign((-1025.8123F));
        MathUtils.factorialDouble((byte) (-1));
    }

    @Test(timeout = 4000)
    public void test05477() throws Throwable {
        int int0 = 0;
        int default124;
        default124 = MathUtils.mulAndCheck(0, 0);
        assertTrue(true ? default124 == 0 * 0 : true);
        MathUtils.round(0.0F, 0);
        MathUtils.binomialCoefficientDouble(0, 1);
    }

    @Test(timeout = 4000)
    public void test05578() throws Throwable {
        double default125;
        if (941 < 0) {
            try {
                default125 = MathUtils.factorialDouble(941);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default125 = MathUtils.factorialDouble(941);
        }
        MathUtils.indicator(1.0);
        MathUtils.sign(2976L);
        MathUtils.sinh(1.0);
    }

    @Test(timeout = 4000)
    public void test05679() throws Throwable {
        long default126;
        default126 = MathUtils.mulAndCheck((-2696L), (-2696L));
        assertTrue(true ? default126 == (-2696L) * (-2696L) : true);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) 7268416L;
        doubleArray0[1] = (double) (-2696L);
        doubleArray0[2] = (double) (-2696L);
        MathUtils.equals(doubleArray0, doubleArray0);
        assertTrue((-2696.0) > 0);
        assertTrue((-2696.0) > 0);
        double default127;
        default127 = MathUtils.log((-2696.0), (-2696.0));
    }

    @Test(timeout = 4000)
    public void test05780() throws Throwable {
        MathUtils.sign((-110L));
    }

    @Test(timeout = 4000)
    public void test05881() throws Throwable {
        MathUtils.nextAfter((-1934.03970552), (-1934.03970552));
        long default128;
        default128 = MathUtils.addAndCheck(4503599627370496L, 4503599627370496L);
        assertTrue(true ? default128 == 4503599627370496L + 4503599627370496L : true);
        MathUtils.round(0.0F, 2671);
        int default129;
        default129 = MathUtils.subAndCheck(2671, 2671);
        assertTrue(true ? default129 == 2671 - 2671 : true);
        MathUtils.round(3885.95470837, 4, 0);
        MathUtils.indicator(994);
    }

    @Test(timeout = 4000)
    public void test05982() throws Throwable {
        MathUtils.sign(2944);
        double[] doubleArray0 = new double[0];
        MathUtils.equals(doubleArray0, doubleArray0);
        int default130;
        default130 = MathUtils.addAndCheck(2944, 31);
        assertTrue(true ? default130 == 2944 + 31 : true);
        MathUtils.factorialLog(786);
    }

    @Test(timeout = 4000)
    public void test06083() throws Throwable {
        MathUtils.equals(1083.8, 1083.8);
        MathUtils.round((-2676.102F), 0, 0);
        MathUtils.sign((-2677.0F));
        long default131;
        default131 = MathUtils.addAndCheck((-1967L), (-2288L));
        assertTrue(true ? default131 == (-1967L) + (-2288L) : true);
        MathUtils.factorialLog(0);
        assertTrue((-1.0F) > 0);
        assertTrue((-1266.6) > 0);
        double default132;
        default132 = MathUtils.log((-1.0F), (-1266.6));
        int default133;
        default133 = MathUtils.subAndCheck(0, 839);
        assertTrue(true ? default133 == 0 - 839 : true);
        MathUtils.round((-1094.1), 839, 52);
    }

    @Test(timeout = 4000)
    public void test06184() throws Throwable {
        long default134;
        default134 = MathUtils.mulAndCheck(0L, 2033L);
        assertTrue(true ? default134 == 0L * 2033L : true);
        long default135;
        default135 = MathUtils.mulAndCheck(2033L, 2033L);
        assertTrue(true ? default135 == 2033L * 2033L : true);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) 0L;
        doubleArray0[1] = (double) 2033L;
        doubleArray0[2] = (double) 0L;
        MathUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test06285() throws Throwable {
        MathUtils.binomialCoefficientLog((-1109), (-1109));
    }

    @Test(timeout = 4000)
    public void test06386() throws Throwable {
        MathUtils.cosh(0.0);
        long default136;
        if (1 < 0) {
            try {
                default136 = MathUtils.factorial(1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default136 = MathUtils.factorial(1);
        }
        MathUtils.round((double) 1L, 1);
        long default137;
        default137 = MathUtils.addAndCheck((long) 1, 1L);
        assertTrue(true ? default137 == (long) 1 + 1L : true);
        double double0 = Double.POSITIVE_INFINITY;
        MathUtils.nextAfter(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        MathUtils.nextAfter(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        byte default138;
        default138 = MathUtils.indicator((byte) 37);
        assertTrue(true ? default138 == (byte) 37 : true);
        byte default139;
        default139 = MathUtils.indicator((byte) 1);
        assertTrue(true ? default139 == (byte) 1 : true);
        MathUtils.round(0.0, (int) (byte) 1, (int) (byte) 37);
    }

    @Test(timeout = 4000)
    public void test06487() throws Throwable {
        MathUtils.round(54.987404F, 1, 1);
        short default140;
        default140 = MathUtils.indicator((short) 0);
        assertTrue(true ? (default140 == (short) 0 || default140 == -1) : true);
        MathUtils.hash((double) 54.9F);
        MathUtils.cosh(1);
        long default141;
        default141 = MathUtils.indicator(2147483647L);
        assertTrue(true ? default141 == 2147483647L : true);
        int default142;
        default142 = MathUtils.addAndCheck(1, 1);
        assertTrue(true ? default142 == 1 + 1 : true);
        long default143;
        default143 = MathUtils.addAndCheck(3230L, (long) 1);
        assertTrue(true ? default143 == 3230L + (long) 1 : true);
        MathUtils.sign((long) 4944691);
        MathUtils.binomialCoefficient(1, 4944691);
    }

    @Test(timeout = 4000)
    public void test06588() throws Throwable {
        MathUtils.sign(0.0F);
        short default144;
        default144 = MathUtils.indicator((short) (-206));
        assertTrue(true ? (default144 == (short) (-206) || default144 == -1) : true);
        MathUtils.nextAfter((short) (-1), 0.0);
        MathUtils.hash((double) 0.0F);
        MathUtils.binomialCoefficientLog(0, (short) (-206));
        MathUtils.nextAfter(1.0, 2601.66);
        MathUtils.sinh(0);
        double default145;
        if (0 < 0) {
            try {
                default145 = MathUtils.factorialDouble(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default145 = MathUtils.factorialDouble(0);
        }
        MathUtils.sign((int) (short) (-206));
        MathUtils.factorialLog(4061);
        float default146;
        default146 = MathUtils.sign((float) (-1));
        assertTrue(true ? default146 == (float) (-1) : true);
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 2601.66;
        doubleArray0[1] = 1.0000000000000002;
        doubleArray0[2] = 29687.671918251523;
        doubleArray0[3] = (double) (short) (-206);
        doubleArray0[4] = 0.0;
        doubleArray0[5] = (double) (short) (-1);
        doubleArray0[6] = (double) 0.0F;
        doubleArray0[7] = (double) 0.0F;
        doubleArray0[8] = 29687.671918251523;
        MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test06689() throws Throwable {
        MathUtils.sinh(3018.52846);
        long default147;
        default147 = MathUtils.mulAndCheck((-9218868437227405313L), (-2831L));
        assertTrue(true ? default147 == (-9218868437227405313L) * (-2831L) : true);
    }

    @Test(timeout = 4000)
    public void test06790() throws Throwable {
        MathUtils.equals((-2317.8935063303857), (-2317.8935063303857));
        int default148;
        default148 = MathUtils.addAndCheck(31, 31);
        assertTrue(true ? default148 == 31 + 31 : true);
        MathUtils.sign(0.0F);
        MathUtils.equals((double) 31, 321.5);
        MathUtils.sign(1445L);
        MathUtils.indicator(1);
        double default149;
        if (52 < 0) {
            try {
                default149 = MathUtils.factorialDouble(52);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default149 = MathUtils.factorialDouble(52);
        }
        MathUtils.equals((double) 1L, 4.9E-324);
        MathUtils.gcd(2, 1);
    }

    @Test(timeout = 4000)
    public void test06891() throws Throwable {
        MathUtils.hash(0.0);
        MathUtils.sinh(0.0);
        MathUtils.round((-1.0), 0, 0);
        long default150;
        default150 = MathUtils.addAndCheck((long) 0, 1999L);
        assertTrue(true ? default150 == (long) 0 + 1999L : true);
        MathUtils.round(1748.0F, 1119);
        double default151;
        if (1801 < 0) {
            try {
                default151 = MathUtils.factorialDouble(1801);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default151 = MathUtils.factorialDouble(1801);
        }
        MathUtils.round((-1.0), 1, 0);
    }

    @Test(timeout = 4000)
    public void test06992() throws Throwable {
        MathUtils.lcm(2282, 2282);
        MathUtils.round((double) 2282, 3060);
        MathUtils.sign(0);
        MathUtils.binomialCoefficientDouble(0, 421);
    }

    @Test(timeout = 4000)
    public void test07093() throws Throwable {
        MathUtils.lcm(0, 1253);
        MathUtils.sign(31);
        MathUtils.gcd(1, 22);
        MathUtils.log(22, 1);
        double[] doubleArray0 = new double[0];
        MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test07194() throws Throwable {
        int default152;
        default152 = MathUtils.mulAndCheck(0, (-4501));
        assertTrue(true ? default152 == 0 * (-4501) : true);
        MathUtils.sign(678L);
        short default153;
        default153 = MathUtils.indicator((short) 0);
        assertTrue(true ? (default153 == (short) 0 || default153 == -1) : true);
        MathUtils.indicator((double) 0);
        MathUtils.sign((long) 0);
        MathUtils.sign(0.0F);
        long default154;
        default154 = MathUtils.mulAndCheck((-104L), 9223372036854774099L);
        assertTrue(true ? default154 == (-104L) * 9223372036854774099L : true);
    }

    @Test(timeout = 4000)
    public void test07295() throws Throwable {
        long default155;
        default155 = MathUtils.mulAndCheck((-2593L), 899L);
        assertTrue(true ? default155 == (-2593L) * 899L : true);
        MathUtils.sign((short) (-615));
        MathUtils.indicator((-860.92F));
        int int0 = 0;
        MathUtils.lcm(0, 0);
    }

    @Test(timeout = 4000)
    public void test07396() throws Throwable {
        MathUtils.sinh(0.0);
        MathUtils.round(0.0, 0, 0);
        MathUtils.sign(0.0F);
    }

    @Test(timeout = 4000)
    public void test07497() throws Throwable {
        MathUtils.lcm(840, 840);
        MathUtils.sign(840);
        MathUtils.sign((short) (-1));
        byte byte0 = (byte) 0;
        byte default156;
        default156 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default156 == (byte) 0 : true);
        MathUtils.sign(0.0F);
        MathUtils.normalizeAngle(0.0, 1);
        MathUtils.normalizeAngle(840, 0.0F);
        long default157;
        default157 = MathUtils.subAndCheck((long) 1, 517L);
        assertTrue(true ? default157 == (long) 1 - 517L : true);
        MathUtils.indicator((int) (byte) 0);
        long default158;
        default158 = MathUtils.indicator(517L);
        assertTrue(true ? default158 == 517L : true);
        long default159;
        default159 = MathUtils.subAndCheck(0L, (long) (byte) 1);
        assertTrue(true ? default159 == 0L - (long) (byte) 1 : true);
        MathUtils.sign((short) (-1));
        int default160;
        default160 = MathUtils.addAndCheck((int) (short) (-1), 974);
        assertTrue(true ? default160 == (int) (short) (-1) + 974 : true);
        short default161;
        default161 = MathUtils.indicator((short) (-1));
        assertTrue(true ? (default161 == (short) (-1) || default161 == -1) : true);
        MathUtils.indicator((-1.0F));
        MathUtils.gcd(973, 516);
        MathUtils.binomialCoefficient(974, 840);
    }

    @Test(timeout = 4000)
    public void test07598() throws Throwable {
        int default162;
        default162 = MathUtils.mulAndCheck((-2144), 0);
        assertTrue(true ? default162 == (-2144) * 0 : true);
        int default163;
        default163 = MathUtils.addAndCheck(0, 0);
        assertTrue(true ? default163 == 0 + 0 : true);
        double default164;
        if (0 < 0) {
            try {
                default164 = MathUtils.factorialDouble(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default164 = MathUtils.factorialDouble(0);
        }
    }

    @Test(timeout = 4000)
    public void test07699() throws Throwable {
        MathUtils.nextAfter(0.0, 0.0);
        MathUtils.hash((-2574.0));
        MathUtils.indicator(1070.411672413604);
        long default165;
        if ((-1062986752) < 0) {
            try {
                default165 = MathUtils.factorial((-1062986752));
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default165 = MathUtils.factorial((-1062986752));
        }
    }

    @Test(timeout = 4000)
    public void test077100() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (-2876.801556);
        doubleArray0[1] = 3.141592653589793;
        doubleArray0[2] = (-3070.78921);
        doubleArray0[3] = 0.0;
        doubleArray0[4] = (-2453.60306502094);
        doubleArray0[5] = (-2290.1434776);
        doubleArray0[6] = 1108.064798174;
        MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test078101() throws Throwable {
        MathUtils.scalb(1.0, 0);
        MathUtils.binomialCoefficient(1105, 0);
        MathUtils.sign((-1));
        MathUtils.equals(1199.58787, (double) 1105);
        long default166;
        default166 = MathUtils.indicator((-1L));
        assertTrue(true ? default166 == (-1L) : true);
        MathUtils.sign(3971L);
        int default167;
        default167 = MathUtils.subAndCheck(0, 0);
        assertTrue(true ? default167 == 0 - 0 : true);
    }

    @Test(timeout = 4000)
    public void test079102() throws Throwable {
        long default168;
        default168 = MathUtils.addAndCheck(0L, (-2067L));
        assertTrue(true ? default168 == 0L + (-2067L) : true);
        MathUtils.lcm(1359, (-1614));
        int default169;
        default169 = MathUtils.addAndCheck((-243), 0);
        assertTrue(true ? default169 == (-243) + 0 : true);
        int default170;
        default170 = MathUtils.mulAndCheck(731142, 1359);
        assertTrue(true ? default170 == 731142 * 1359 : true);
        MathUtils.factorialLog(1359);
        MathUtils.indicator(Float.NaN);
        MathUtils.scalb((-1.0), (-1614));
        MathUtils.lcm((-422), 853);
        MathUtils.gcd(0, 0);
        short default171;
        default171 = MathUtils.indicator((short) 0);
        assertTrue(true ? (default171 == (short) 0 || default171 == -1) : true);
    }

    @Test(timeout = 4000)
    public void test080103() throws Throwable {
        double default172;
        default172 = MathUtils.normalizeAngle(0.0, 1.0);
        assertTrue(true ? default172 == 0.0 - 0.0 : true);
        MathUtils.sign(616.1991F);
        byte default173;
        default173 = MathUtils.sign((byte) 0);
        assertTrue(true ? default173 == (byte) 0 : true);
        long default174;
        default174 = MathUtils.indicator(0L);
        assertTrue(true ? default174 == 0L : true);
        MathUtils.sign(0);
    }

    @Test(timeout = 4000)
    public void test081104() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (-322.307296);
        doubleArray0[1] = (-1.0);
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 244.86671;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 0.0;
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.binomialCoefficientLog(0, 0);
        assertTrue(244.86671 > 0);
        assertTrue(0.0 > 0);
        double default175;
        default175 = MathUtils.log(244.86671, 0.0);
    }

    @Test(timeout = 4000)
    public void test082105() throws Throwable {
        byte byte0 = (byte) 0;
        byte default176;
        default176 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default176 == (byte) 0 : true);
        int int0 = 0;
        int default177;
        default177 = MathUtils.subAndCheck(0, (int) (byte) 1);
        assertTrue(true ? default177 == 0 - (int) (byte) 1 : true);
        MathUtils.sign((-2087.4907F));
        int int1 = (-3156);
        MathUtils.lcm((-3156), (-3156));
        MathUtils.binomialCoefficientDouble(3156, (byte) 1);
        MathUtils.binomialCoefficientDouble((-1518), (-3156));
    }

    @Test(timeout = 4000)
    public void test083106() throws Throwable {
        int default178;
        default178 = MathUtils.addAndCheck(52, (-1));
        assertTrue(true ? default178 == 52 + (-1) : true);
        MathUtils.binomialCoefficientLog(52, 51);
        MathUtils.sign(38L);
    }

    @Test(timeout = 4000)
    public void test084107() throws Throwable {
        MathUtils.sign(4);
        MathUtils.sign((long) 1);
        byte default179;
        default179 = MathUtils.sign((byte) (-29));
        assertTrue(true ? default179 == (byte) (-29) : true);
        byte default180;
        default180 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default180 == (byte) 0 : true);
        MathUtils.sign((long) 4);
        int default181;
        default181 = MathUtils.addAndCheck(0, 1);
        assertTrue(true ? default181 == 0 + 1 : true);
        long default182;
        default182 = MathUtils.indicator(1L);
        assertTrue(true ? default182 == 1L : true);
        assertTrue(0.0 > 0);
        assertTrue(0.0 > 0);
        double default183;
        default183 = MathUtils.log(0.0, 0.0);
        MathUtils.binomialCoefficientDouble(0, (-1));
        long default184;
        default184 = MathUtils.mulAndCheck((long) 1, (long) 0);
        assertTrue(true ? default184 == (long) 1 * (long) 0 : true);
        double default185;
        default185 = MathUtils.normalizeAngle(0.0, 0.0);
        assertTrue(true ? default185 == 0.0 - 0.0 : true);
        MathUtils.cosh(1L);
        long default186;
        default186 = MathUtils.mulAndCheck(57L, 0L);
        assertTrue(true ? default186 == 57L * 0L : true);
        MathUtils.nextAfter(0.0, (-4.9E-324));
        MathUtils.round((-1.0F), (-1), 0);
        short default187;
        default187 = MathUtils.indicator((short) (byte) 0);
        assertTrue(true ? (default187 == (short) (byte) 0 || default187 == -1) : true);
        MathUtils.round((double) (-10.0F), 0, 1282);
    }

    @Test(timeout = 4000)
    public void test085108() throws Throwable {
        MathUtils.indicator(544);
        MathUtils.log(544, 544);
        MathUtils.indicator(544);
        MathUtils.normalizeAngle(113.58579447, 1);
        MathUtils.round(325.309F, 1, 1);
    }

    @Test(timeout = 4000)
    public void test086109() throws Throwable {
        MathUtils.sign((-3029.091F));
        MathUtils.nextAfter((-3029.091F), (-1.0F));
        MathUtils.binomialCoefficientDouble(4, 4);
        MathUtils.lcm(4, 0);
        long default188;
        if (373 < 0) {
            try {
                default188 = MathUtils.factorial(373);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default188 = MathUtils.factorial(373);
        }
    }

    @Test(timeout = 4000)
    public void test087110() throws Throwable {
        double default189;
        default189 = MathUtils.normalizeAngle(1069.1507236483772, (-850.954521));
        assertTrue(true ? default189 == 1069.1507236483772 - 1069.1507236483772 : true);
        int int0 = 2;
        int default190;
        default190 = MathUtils.addAndCheck(1052, 2);
        assertTrue(true ? default190 == 1052 + 2 : true);
        long default191;
        if (1054 < 0) {
            try {
                default191 = MathUtils.factorial(1054);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default191 = MathUtils.factorial(1054);
        }
    }

    @Test(timeout = 4000)
    public void test088111() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 3946.2302;
        doubleArray0[1] = Double.NaN;
        doubleArray0[2] = (-1720.5420547137624);
        doubleArray0[3] = (-4.9E-324);
        doubleArray0[4] = 2403.7689728;
        doubleArray0[5] = (-4.9E-324);
        MathUtils.equals(doubleArray0, doubleArray0);
        int default192;
        default192 = MathUtils.addAndCheck(828, 828);
        assertTrue(true ? default192 == 828 + 828 : true);
        MathUtils.sign((short) 0);
        MathUtils.sign((short) 0);
        short default193;
        default193 = MathUtils.indicator((short) 0);
        assertTrue(true ? (default193 == (short) 0 || default193 == -1) : true);
        long default194;
        default194 = MathUtils.subAndCheck((long) (short) 0, 9218868437227405312L);
        assertTrue(true ? default194 == (long) (short) 0 - 9218868437227405312L : true);
        MathUtils.indicator(11);
    }

    @Test(timeout = 4000)
    public void test089112() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 1.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = (-2237.0);
        doubleArray0[3] = (-5515.636800492);
        doubleArray0[4] = Double.NaN;
        doubleArray0[5] = (-1.0);
        doubleArray0[6] = (-2617.34607633);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.sign((short) 899);
        short default195;
        default195 = MathUtils.indicator((short) 899);
        assertTrue(true ? (default195 == (short) 899 || default195 == -1) : true);
        MathUtils.hash((-1.0));
        assertTrue(1.0 > 0);
        assertTrue(0.0 > 0);
        double default196;
        default196 = MathUtils.log(1.0, 0.0);
        MathUtils.round(784.95306F, (int) (short) 1);
        MathUtils.indicator(0.0);
        MathUtils.lcm(0, (short) 899);
        MathUtils.hash((-354.11686));
    }

    @Test(timeout = 4000)
    public void test090113() throws Throwable {
        double default197;
        if (0 < 0) {
            try {
                default197 = MathUtils.factorialDouble(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default197 = MathUtils.factorialDouble(0);
        }
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        doubleArray0[1] = 1186.58;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 1.0;
        doubleArray0[4] = (double) 0;
        doubleArray0[5] = 1.0;
        MathUtils.equals((double[]) null, doubleArray0);
        long default198;
        default198 = MathUtils.indicator((-455L));
        assertTrue(true ? default198 == (-455L) : true);
        MathUtils.cosh(0);
        MathUtils.indicator((double) 0);
        MathUtils.gcd(0, 0);
        MathUtils.binomialCoefficient(2804, 0);
        int default199;
        default199 = MathUtils.subAndCheck(0, 1);
        assertTrue(true ? default199 == 0 - 1 : true);
        MathUtils.nextAfter(1.0, 0.0);
        double default200;
        if (2804 < 0) {
            try {
                default200 = MathUtils.factorialDouble(2804);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default200 = MathUtils.factorialDouble(2804);
        }
        MathUtils.nextAfter(0.0, 1186.58);
        MathUtils.binomialCoefficientLog(351, (-1));
        long default201;
        default201 = MathUtils.mulAndCheck((-455L), (-1630L));
        assertTrue(true ? default201 == (-455L) * (-1630L) : true);
        MathUtils.equals((double[]) null, (double[]) null);
        assertTrue(0.9999999999999999 > 0);
        assertTrue(1.0 > 0);
        double default202;
        default202 = MathUtils.log(0.9999999999999999, 1.0);
        MathUtils.scalb(1186.58, 0);
        byte default203;
        default203 = MathUtils.indicator((byte) (-1));
        assertTrue(true ? default203 == (byte) (-1) : true);
        MathUtils.hash(0.0);
        MathUtils.indicator((float) (-1630L));
    }

    @Test(timeout = 4000)
    public void test091114() throws Throwable {
        double double0 = (-1853.67);
        assertTrue(1470.7 > 0);
        assertTrue((-1853.67) > 0);
        double default204;
        default204 = MathUtils.log(1470.7, (-1853.67));
        MathUtils.sign((short) 0);
        MathUtils.indicator(1);
        MathUtils.indicator(Double.NaN);
        MathUtils.lcm((short) 0, 0);
    }

    @Test(timeout = 4000)
    public void test092115() throws Throwable {
        assertTrue(0.0 > 0);
        assertTrue(0.0 > 0);
        double default205;
        default205 = MathUtils.log(0.0, 0.0);
        MathUtils.cosh(Double.NaN);
        long default206;
        default206 = MathUtils.subAndCheck(3438L, (-2147483648L));
        assertTrue(true ? default206 == 3438L - (-2147483648L) : true);
        MathUtils.nextAfter(Double.NaN, 0.0);
        MathUtils.binomialCoefficientLog(356, 356);
        MathUtils.sign(356);
        long default207;
        default207 = MathUtils.indicator(2147487086L);
        assertTrue(true ? default207 == 2147487086L : true);
        MathUtils.scalb(2147487086L, 1);
        MathUtils.binomialCoefficient(1, (-1));
    }

    @Test(timeout = 4000)
    public void test093116() throws Throwable {
        long long0 = 9223372036854775807L;
        long default208;
        default208 = MathUtils.subAndCheck((-2147483648L), 9223372036854775807L);
        assertTrue(true ? default208 == (-2147483648L) - 9223372036854775807L : true);
    }

    @Test(timeout = 4000)
    public void test094117() throws Throwable {
        MathUtils.factorialLog(1354);
        MathUtils.round((float) 1354, 1354);
        MathUtils.round(0.0, 1354);
        MathUtils.round(Float.NaN, 1354, 0);
        MathUtils.sign(1.0F);
        MathUtils.binomialCoefficientDouble(2, 2);
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[1] = (double) Float.NaN;
        doubleArray0[2] = (double) 2;
        doubleArray0[3] = 8413.972595307363;
        doubleArray0[4] = (double) 1354;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = 0.0;
        doubleArray0[7] = (double) 2;
        doubleArray0[8] = (double) 0;
        double[] doubleArray1 = new double[1];
        doubleArray1[0] = 1.0;
        MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test095118() throws Throwable {
        int int0 = 0;
        MathUtils.sinh(0);
        double default209;
        if (0 < 0) {
            try {
                default209 = MathUtils.factorialDouble(0);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default209 = MathUtils.factorialDouble(0);
        }
        long long0 = (-9218868437227405313L);
        // Undeclared exception!
        MathUtils.factorialLog(2113929216);
    }

    @Test(timeout = 4000)
    public void test096119() throws Throwable {
        MathUtils.sinh(52);
        MathUtils.indicator(934.227F);
        byte default210;
        default210 = MathUtils.indicator((byte) 31);
        assertTrue(true ? default210 == (byte) 31 : true);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) 52;
        MathUtils.equals(doubleArray0, doubleArray0);
        byte default211;
        default211 = MathUtils.sign((byte) 31);
        assertTrue(true ? default211 == (byte) 31 : true);
        MathUtils.sign(4503599627370495L);
        MathUtils.factorial((byte) 1);
        MathUtils.sign(462.4014F);
        long default212;
        default212 = MathUtils.indicator((long) (byte) 1);
        assertTrue(true ? default212 == (long) (byte) 1 : true);
        MathUtils.sinh(Double.NEGATIVE_INFINITY);
        long default213;
        default213 = MathUtils.indicator((-1L));
        assertTrue(true ? default213 == (-1L) : true);
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 1080.976317389;
        doubleArray1[1] = (double) 4503599627370495L;
        doubleArray1[2] = (double) 1.0F;
        doubleArray1[3] = (double) 462.4014F;
        doubleArray1[5] = (double) 934.227F;
        doubleArray1[6] = (double) 2147483647L;
        MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test097120() throws Throwable {
        MathUtils.binomialCoefficient(758, 758);
        MathUtils.indicator((-3704));
        MathUtils.nextAfter((-5328384.368904361), (-2618.33587));
        MathUtils.round((float) 1L, (-3704), 2);
        byte byte0 = (byte) (-124);
        byte default214;
        default214 = MathUtils.sign((byte) (-124));
        assertTrue(true ? default214 == (byte) (-124) : true);
        int int0 = (-794);
        MathUtils.factorialLog((-794));
    }

    @Test(timeout = 4000)
    public void test098121() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 2937.58149819;
        doubleArray0[1] = 6.283185307179586;
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = (-43.8565267608);
        doubleArray0[4] = 1.1102230246251565E-16;
        doubleArray0[5] = (-921.80277);
        doubleArray0[6] = 1.0;
        doubleArray0[7] = (-2076.6398838);
        doubleArray0[8] = 0.0;
        MathUtils.hash(doubleArray0);
        MathUtils.indicator(1390893829);
        MathUtils.hash(doubleArray0);
        MathUtils.sign(0.0);
        int default215;
        default215 = MathUtils.mulAndCheck(1390893829, (-1));
        assertTrue(true ? default215 == 1390893829 * (-1) : true);
        int default216;
        default216 = MathUtils.subAndCheck(1390893829, 1);
        assertTrue(true ? default216 == 1390893829 - 1 : true);
        MathUtils.round((float) 1390893829, (-1390893829));
        long default217;
        default217 = MathUtils.mulAndCheck(3223L, (long) 1);
        assertTrue(true ? default217 == 3223L * (long) 1 : true);
        int default218;
        default218 = MathUtils.mulAndCheck(2022, 1390893829);
        assertTrue(true ? default218 == 2022 * 1390893829 : true);
    }

    @Test(timeout = 4000)
    public void test099122() throws Throwable {
        MathUtils.sign((-816.297189));
        MathUtils.sign((-377L));
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) (-1L);
        doubleArray0[1] = (double) (-377L);
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = (-1.0);
        MathUtils.hash(doubleArray0);
        float default219;
        default219 = MathUtils.sign((float) 1697859743);
        assertTrue(true ? default219 == (float) 1697859743 : true);
        long default220;
        default220 = MathUtils.subAndCheck((-377L), 1L);
        assertTrue(true ? default220 == (-377L) - 1L : true);
        MathUtils.gcd(1697859743, 1697859743);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.sign(1697859743);
        MathUtils.round((float) (-3840L), 1697859743, 1);
        MathUtils.indicator((float) 1L);
        long default221;
        default221 = MathUtils.mulAndCheck((long) 1697859743, (long) 1697859743);
        assertTrue(true ? default221 == (long) 1697859743 * (long) 1697859743 : true);
        double default222;
        if (1697859743 < 0) {
            try {
                default222 = MathUtils.factorialDouble(1697859743);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default222 = MathUtils.factorialDouble(1697859743);
        }
    }

    @Test(timeout = 4000)
    public void test100123() throws Throwable {
        int int0 = 779;
        MathUtils.factorialLog(779);
        MathUtils.sign(4411.838655764204);
        MathUtils.lcm(779, 1286);
        long default223;
        default223 = MathUtils.mulAndCheck(4503599627370496L, (long) 1001794);
        assertTrue(true ? default223 == 4503599627370496L * (long) 1001794 : true);
    }

    @Test(timeout = 4000)
    public void test101124() throws Throwable {
        MathUtils.nextAfter(2.2250738585072014E-308, (-1766.6440045686));
        MathUtils.round(Double.NaN, 4132, (-763));
    }

    @Test(timeout = 4000)
    public void test102125() throws Throwable {
        int default224;
        default224 = MathUtils.mulAndCheck((-1), (-1));
        assertTrue(true ? default224 == (-1) * (-1) : true);
        MathUtils.binomialCoefficientDouble(1, (-2857));
        MathUtils.indicator((-2857));
        MathUtils.binomialCoefficient(1, (-1705));
        MathUtils.binomialCoefficientDouble(0, (-1264));
        MathUtils.sign(2186.2F);
        int default225;
        default225 = MathUtils.mulAndCheck(31, 31);
        assertTrue(true ? default225 == 31 * 31 : true);
        MathUtils.factorialLog(4362);
        // Undeclared exception!
        MathUtils.binomialCoefficient(3182, (-3431));
    }

    @Test(timeout = 4000)
    public void test103126() throws Throwable {
        MathUtils.cosh(6.283185307179586);
        short default226;
        default226 = MathUtils.indicator((short) (-1));
        assertTrue(true ? (default226 == (short) (-1) || default226 == -1) : true);
        short default227;
        default227 = MathUtils.indicator((short) (-1));
        assertTrue(true ? (default227 == (short) (-1) || default227 == -1) : true);
        int int0 = 2;
        MathUtils.binomialCoefficientLog(2, 2);
        int int1 = 2;
        MathUtils.round((-3167.637F), 2, 2);
        int int2 = 4240;
        double default228;
        if (4240 < 0) {
            try {
                default228 = MathUtils.factorialDouble(4240);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default228 = MathUtils.factorialDouble(4240);
        }
        MathUtils.binomialCoefficientDouble(0, 118);
    }

    @Test(timeout = 4000)
    public void test104127() throws Throwable {
        double default229;
        default229 = MathUtils.normalizeAngle(0.0, 0.0);
        assertTrue(true ? default229 == 0.0 - 0.0 : true);
        double default230;
        default230 = MathUtils.normalizeAngle(1.0, 0.0);
        assertTrue(true ? default230 == 1.0 - 1.0 : true);
        long default231;
        default231 = MathUtils.indicator(0L);
        assertTrue(true ? default231 == 0L : true);
        MathUtils.indicator(0);
        MathUtils.lcm(4954, 0);
        MathUtils.binomialCoefficientDouble(4954, 578);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) 1;
        doubleArray0[1] = (double) 4954;
        doubleArray0[2] = (double) 1;
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.indicator((-44));
        MathUtils.equals(doubleArray0, (double[]) null);
        int default232;
        default232 = MathUtils.mulAndCheck(1, 0);
        assertTrue(true ? default232 == 1 * 0 : true);
        assertTrue(4954.0 > 0);
        assertTrue(1752.95617 > 0);
        double default233;
        default233 = MathUtils.log(4954.0, 1752.95617);
        MathUtils.gcd((-1), 2585);
        int default234;
        default234 = MathUtils.addAndCheck(0, (-1349));
        assertTrue(true ? default234 == 0 + (-1349) : true);
        MathUtils.cosh(2585);
    }

    @Test(timeout = 4000)
    public void test105128() throws Throwable {
        long default235;
        default235 = MathUtils.mulAndCheck(0L, 0L);
        assertTrue(true ? default235 == 0L * 0L : true);
        long default236;
        default236 = MathUtils.mulAndCheck(0L, 0L);
        assertTrue(true ? default236 == 0L * 0L : true);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) 0L;
        doubleArray0[2] = (double) 0L;
        MathUtils.equals(doubleArray0, doubleArray0);
        double[] doubleArray1 = new double[3];
        doubleArray1[0] = (double) 0L;
        doubleArray1[1] = (-252.3568776820009);
        doubleArray1[2] = (double) 0L;
        MathUtils.equals(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test106129() throws Throwable {
        assertTrue(0.0 > 0);
        assertTrue(0.0 > 0);
        double default237;
        default237 = MathUtils.log(0.0, 0.0);
        MathUtils.cosh(Double.NaN);
        long default238;
        default238 = MathUtils.subAndCheck(3438L, (-1676L));
        assertTrue(true ? default238 == 3438L - (-1676L) : true);
        MathUtils.nextAfter(Double.NaN, (-0.0177823110247029));
        MathUtils.binomialCoefficientLog(356, 356);
        MathUtils.sign(356);
        long default239;
        default239 = MathUtils.subAndCheck(5114L, (long) 1);
        assertTrue(true ? default239 == 5114L - (long) 1 : true);
        long default240;
        default240 = MathUtils.indicator((-931L));
        assertTrue(true ? default240 == (-931L) : true);
        MathUtils.scalb(Double.NEGATIVE_INFINITY, 1);
        MathUtils.indicator(51.7F);
    }

    @Test(timeout = 4000)
    public void test107130() throws Throwable {
        double double0 = MathUtils.SAFE_MIN;
        double default241;
        default241 = MathUtils.normalizeAngle(0.0, 2.2250738585072014E-308);
        assertTrue(true ? default241 == 0.0 - 0.0 : true);
        MathUtils.sinh(0.0);
        MathUtils.equals(0.0, 0.0);
        MathUtils.sinh(0.0);
        MathUtils.round(0.0, 1, 1);
        MathUtils.round(0.0F, 283);
        MathUtils.equals((-110.3522941595321), 0.0);
        long default242;
        default242 = MathUtils.addAndCheck((long) 1, 4774L);
        assertTrue(true ? default242 == (long) 1 + 4774L : true);
        MathUtils.binomialCoefficient(4, (-4276));
        MathUtils.nextAfter(0.0F, 1);
        MathUtils.round(0.0, 188);
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 2.2250738585072014E-308;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 2874.20586468;
        MathUtils.equals(doubleArray0, doubleArray0);
        long default243;
        if (1 < 0) {
            try {
                default243 = MathUtils.factorial(1);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default243 = MathUtils.factorial(1);
        }
        MathUtils.binomialCoefficient(0, 0);
        MathUtils.sign(148);
        MathUtils.scalb(Double.POSITIVE_INFINITY, 3295);
    }

    @Test(timeout = 4000)
    public void test108131() throws Throwable {
        MathUtils.binomialCoefficientDouble(0, 0);
        MathUtils.hash((double) 0);
        MathUtils.lcm((-3869), 52);
        MathUtils.sign((double) 201188);
        byte default244;
        default244 = MathUtils.sign((byte) 0);
        assertTrue(true ? default244 == (byte) 0 : true);
        MathUtils.gcd(52, 1);
        MathUtils.sign(52);
        MathUtils.sign((long) 201188);
        int default245;
        default245 = MathUtils.subAndCheck(0, 6603);
        assertTrue(true ? default245 == 0 - 6603 : true);
        long default246;
        default246 = MathUtils.mulAndCheck((long) 1, (-2588L));
        assertTrue(true ? default246 == (long) 1 * (-2588L) : true);
        MathUtils.sign((-243.34741F));
        MathUtils.scalb((-3869), 1);
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) 201188;
        doubleArray0[1] = 1.0;
        doubleArray0[2] = 1.0;
        doubleArray0[3] = (double) 0;
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.hash((double) 1);
        int default247;
        default247 = MathUtils.subAndCheck(1892, 31);
        assertTrue(true ? default247 == 1892 - 31 : true);
        byte default248;
        default248 = MathUtils.indicator((byte) 52);
        assertTrue(true ? default248 == (byte) 52 : true);
        long default249;
        default249 = MathUtils.mulAndCheck((-9223372036854775808L), 1L);
        assertTrue(true ? default249 == (-9223372036854775808L) * 1L : true);
    }

    @Test(timeout = 4000)
    public void test109132() throws Throwable {
        MathUtils.sign((-816.297189));
        long default250;
        default250 = MathUtils.mulAndCheck((-3840L), (-377L));
        assertTrue(true ? default250 == (-3840L) * (-377L) : true);
        double[] doubleArray0 = new double[5];
        doubleArray0[1] = (double) (-377L);
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = (-1.0);
        MathUtils.hash(doubleArray0);
        float default251;
        default251 = MathUtils.sign((float) 490948767);
        assertTrue(true ? default251 == (float) 490948767 : true);
        long default252;
        default252 = MathUtils.subAndCheck((-377L), (-377L));
        assertTrue(true ? default252 == (-377L) - (-377L) : true);
        MathUtils.gcd(490948767, 490948767);
        MathUtils.sign(490948767);
        MathUtils.round((float) (-3840L), 490948767, 1);
        // Undeclared exception!
        MathUtils.binomialCoefficientDouble(490948767, (-2183));
    }

    @Test(timeout = 4000)
    public void test110133() throws Throwable {
        MathUtils.sign((-816.297189));
        long default253;
        default253 = MathUtils.mulAndCheck((-3840L), (-377L));
        assertTrue(true ? default253 == (-3840L) * (-377L) : true);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 1447680L;
        doubleArray0[1] = (double) (-377L);
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = (-1.0);
        MathUtils.hash(doubleArray0);
        float default254;
        default254 = MathUtils.sign((float) 395698079);
        assertTrue(true ? default254 == (float) 395698079 : true);
        long default255;
        default255 = MathUtils.subAndCheck((-377L), 1447680L);
        assertTrue(true ? default255 == (-377L) - 1447680L : true);
        MathUtils.gcd(395698079, 395698079);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.sign(395698079);
        MathUtils.round((float) (-3840L), 395698079, 1);
        MathUtils.nextAfter((-2145.3777), (-377L));
        int int0 = 5316;
        MathUtils.indicator(5316);
        MathUtils.indicator(0.0F);
        int default256;
        default256 = MathUtils.mulAndCheck(395698079, (-639));
        assertTrue(true ? default256 == 395698079 * (-639) : true);
    }

    @Test(timeout = 4000)
    public void test111134() throws Throwable {
        MathUtils.nextAfter(4.9E-324, 0.0);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 4.9E-324;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        MathUtils.hash(doubleArray0);
        byte default257;
        default257 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default257 == (byte) 0 : true);
        MathUtils.sign(1530.2847F);
        MathUtils.scalb(0.0, (byte) 0);
        MathUtils.gcd((byte) 1, (-1));
        int int0 = 1083;
        MathUtils.round(0.0, 1083);
        MathUtils.sign(1814L);
        MathUtils.lcm(1083, 28658942);
    }

    @Test(timeout = 4000)
    public void test112135() throws Throwable {
        MathUtils.sign((-816.297189));
        double[] doubleArray0 = new double[5];
        doubleArray0[1] = (double) (-377L);
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = (-1.0);
        MathUtils.hash(doubleArray0);
        float default258;
        default258 = MathUtils.sign((float) 490948767);
        assertTrue(true ? default258 == (float) 490948767 : true);
        long default259;
        default259 = MathUtils.subAndCheck((-377L), 1L);
        assertTrue(true ? default259 == (-377L) - 1L : true);
        MathUtils.gcd(490948767, 490948767);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.sign(490948767);
        MathUtils.equals(1.0, 530.0596236264574);
        MathUtils.round((float) 490948767, (-1), 7);
        short default260;
        default260 = MathUtils.indicator((short) (-1017));
        assertTrue(true ? (default260 == (short) (-1017) || default260 == -1) : true);
    }

    @Test(timeout = 4000)
    public void test113136() throws Throwable {
        assertTrue(0.0 > 0);
        assertTrue(0.0 > 0);
        double default261;
        default261 = MathUtils.log(0.0, 0.0);
        MathUtils.cosh(Double.NaN);
        long default262;
        default262 = MathUtils.subAndCheck(3438L, (-2147483648L));
        assertTrue(true ? default262 == 3438L - (-2147483648L) : true);
        MathUtils.nextAfter(Double.NaN, 0.0);
        MathUtils.binomialCoefficientLog(356, 356);
        MathUtils.sign(356);
        MathUtils.binomialCoefficient(4360, 1);
        short default263;
        default263 = MathUtils.indicator((short) 834);
        assertTrue(true ? (default263 == (short) 834 || default263 == -1) : true);
    }

    @Test(timeout = 4000)
    public void test114137() throws Throwable {
        MathUtils.sign((-816.297189));
        long default264;
        default264 = MathUtils.mulAndCheck((-3840L), (-377L));
        assertTrue(true ? default264 == (-3840L) * (-377L) : true);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 1447680L;
        doubleArray0[1] = (double) (-377L);
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = (-1.0);
        MathUtils.hash(doubleArray0);
        float default265;
        default265 = MathUtils.sign((float) 395698079);
        assertTrue(true ? default265 == (float) 395698079 : true);
        long default266;
        default266 = MathUtils.subAndCheck((-377L), (-377L));
        assertTrue(true ? default266 == (-377L) - (-377L) : true);
        MathUtils.gcd(395698079, 395698079);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.sign(395698079);
        MathUtils.round((float) (-3840L), 395698079, 1);
        MathUtils.sign(Float.NaN);
    }

    @Test(timeout = 4000)
    public void test115138() throws Throwable {
        MathUtils.sign((-815.850163223983));
        long default267;
        default267 = MathUtils.mulAndCheck((-3840L), (-377L));
        assertTrue(true ? default267 == (-3840L) * (-377L) : true);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 1447680L;
        doubleArray0[1] = (double) (-377L);
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = (-1.0);
        MathUtils.hash((double[]) null);
        float default268;
        default268 = MathUtils.sign((float) 0);
        assertTrue(true ? default268 == (float) 0 : true);
        long default269;
        default269 = MathUtils.subAndCheck((-377L), 1L);
        assertTrue(true ? default269 == (-377L) - 1L : true);
        MathUtils.gcd(0, 0);
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.sign(0);
        MathUtils.round((float) (-3840L), 0, 1);
        int default270;
        default270 = MathUtils.mulAndCheck(2964, 2972);
        assertTrue(true ? default270 == 2964 * 2972 : true);
        MathUtils.indicator((-1.0));
        MathUtils.nextAfter((-3839.0F), (-1.0));
    }

    @Test(timeout = 4000)
    public void test116139() throws Throwable {
        assertTrue(0.0 > 0);
        assertTrue(0.0 > 0);
        double default271;
        default271 = MathUtils.log(0.0, 0.0);
        MathUtils.cosh(Double.NaN);
        long default272;
        default272 = MathUtils.subAndCheck(3463L, (-2147483648L));
        assertTrue(true ? default272 == 3463L - (-2147483648L) : true);
        MathUtils.nextAfter(Double.NaN, 0.0);
        MathUtils.binomialCoefficientLog(356, 356);
        MathUtils.sign(356);
        MathUtils.sign(2147483648L);
        MathUtils.binomialCoefficientLog(2803, 1);
    }

    @Test(timeout = 4000)
    public void test117140() throws Throwable {
        assertTrue(0.0 > 0);
        assertTrue(0.0 > 0);
        double default273;
        default273 = MathUtils.log(0.0, 0.0);
        double double0 = MathUtils.SAFE_MIN;
        long default274;
        default274 = MathUtils.subAndCheck(3463L, (-2147483648L));
        assertTrue(true ? default274 == 3463L - (-2147483648L) : true);
        MathUtils.nextAfter(Double.NaN, 0.15728391532667219);
        MathUtils.binomialCoefficientLog(356, 356);
        MathUtils.sign(356);
        MathUtils.gcd(356, 356);
        long default275;
        if (2147483645 < 0) {
            try {
                default275 = MathUtils.factorial(2147483645);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default275 = MathUtils.factorial(2147483645);
        }
    }

    @Test(timeout = 4000)
    public void test118141() throws Throwable {
        MathUtils.sign((-816.297189));
        long default276;
        default276 = MathUtils.mulAndCheck((-3840L), (-377L));
        assertTrue(true ? default276 == (-3840L) * (-377L) : true);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 1447680L;
        doubleArray0[1] = (double) (-377L);
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = (-1.0);
        MathUtils.hash((-1.0));
        float default277;
        default277 = MathUtils.sign((float) (-1074790400));
        assertTrue(true ? default277 == (float) (-1074790400) : true);
        long default278;
        default278 = MathUtils.subAndCheck((-377L), 1L);
        assertTrue(true ? default278 == (-377L) - 1L : true);
        MathUtils.gcd((-1074790400), (-1074790400));
        MathUtils.equals(doubleArray0, doubleArray0);
        MathUtils.sign((-2145386496));
        MathUtils.round((float) (-3840L), (-1074790400), 1);
    }

    @Test(timeout = 4000)
    public void test119142() throws Throwable {
        assertTrue(0.0 > 0);
        assertTrue(0.0 > 0);
        double default279;
        default279 = MathUtils.log(0.0, 0.0);
        MathUtils.cosh(Double.NaN);
        long default280;
        default280 = MathUtils.subAndCheck(3463L, (-9223372036854775780L));
        assertTrue(true ? default280 == 3463L - (-9223372036854775780L) : true);
    }

    @Test(timeout = 4000)
    public void test120143() throws Throwable {
        MathUtils.nextAfter(4.9E-324, 0.0);
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 4.9E-324;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        MathUtils.hash(doubleArray0);
        byte default281;
        default281 = MathUtils.indicator((byte) 0);
        assertTrue(true ? default281 == (byte) 0 : true);
        MathUtils.sign(1530.2847F);
        MathUtils.scalb(0.0, (byte) 0);
        MathUtils.gcd((byte) 1, (-1));
        MathUtils.round(0.0, 1083);
        MathUtils.sign(1814L);
        MathUtils.indicator((float) 1);
        long default282;
        default282 = MathUtils.indicator((long) 1083);
        assertTrue(true ? default282 == (long) 1083 : true);
        byte default283;
        default283 = MathUtils.sign((byte) (-111));
        assertTrue(true ? default283 == (byte) (-111) : true);
        double default284;
        if (1083 < 0) {
            try {
                default284 = MathUtils.factorialDouble(1083);
                fail();
            } catch (java.lang.IllegalArgumentException e) {
                // Successfully thrown exception
            }
        } else {
            default284 = MathUtils.factorialDouble(1083);
        }
        // Undeclared exception!
        MathUtils.binomialCoefficientLog(28658942, (byte) (-111));
    }

    @Test(timeout = 4000)
    public void test121144() throws Throwable {
        long default285;
        default285 = MathUtils.indicator((-4138L));
        assertTrue(true ? default285 == (-4138L) : true);
        MathUtils.gcd(31, 31);
        MathUtils.cosh((-1L));
        long default286;
        default286 = MathUtils.subAndCheck(9223372036854775807L, (-1572L));
        assertTrue(true ? default286 == 9223372036854775807L - (-1572L) : true);
    }

    @Test(timeout = 4000)
    public void test122145() throws Throwable {
        int int0 = 7449;
        int default287;
        default287 = MathUtils.subAndCheck(7449, (-2147483645));
        assertTrue(true ? default287 == 7449 - (-2147483645) : true);
    }
}
