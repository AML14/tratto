[
  {
    "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer optimizer)",
    "name": "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
      "name": "HarmonicFitter",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer",
          "name": "DifferentiableMultivariateVectorOptimizer",
          "isArray": false
        },
        "name": "optimizer"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer",
            "name": "DifferentiableMultivariateVectorOptimizer",
            "isArray": false
          },
          "name": "optimizer"
        },
        "comment": "Optimizer to use for the fitting.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "fit(double[] initialGuess)",
    "name": "fit",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
      "name": "HarmonicFitter",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "initialGuess"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "initialGuess"
        },
        "comment": "First guess values in the following order: Amplitude Angular frequency Phase.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the parameters of the harmonic function that best fits the observed points (in the same order as above).",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "fit()",
    "name": "fit",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
      "name": "HarmonicFitter",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the parameters of the harmonic function that best fits the observed points (see the other fit(double[]) fit method.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NumberIsTooSmallException",
          "name": "NumberIsTooSmallException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the sample is too short for the the first guess to be computed.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.ZeroException",
          "name": "ZeroException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the first guess cannot be computed because the abscissa range is zero.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]