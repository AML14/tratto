/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 19:16:45 GMT 2023
 */
package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.TextBuffer;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ReaderBasedJsonParser_ESTest extends ReaderBasedJsonParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2181, (-2966), false);
        readerBasedJsonParser0._reportInvalidToken("", "");
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "p_t+Z5.", false);
        StringReader stringReader0 = new StringReader("N9v");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 53, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._skipCR();
        readerBasedJsonParser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("was expecting a colon to separate field name and value");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 1, true);
        readerBasedJsonParser0._handleApos();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("#{JavKs!AIJv(cvN");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 114, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._handleOddName(1718);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("x|R!R5YnYXU%cz3uk ");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._parseName();
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[6];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2863, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1629, 3, false);
        readerBasedJsonParser0._parseName();
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("No digit following minus sign");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 410, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 98, 0, false);
        readerBasedJsonParser0._parseNegNumber();
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("x|R!R5YnYXU%cz3uk ");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("E4&OL`r@");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2095), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._closeInput();
        readerBasedJsonParser0.getTokenLineNr();
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("{SPa0Upf-4=\"dp'");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 1, false);
        readerBasedJsonParser0._handleApos();
        readerBasedJsonParser0.nextFieldName((SerializableString) null);
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("S");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[6];
        byte[] byteArray0 = new byte[4];
        ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
        CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
        stringReader0.read(charBuffer0);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1818, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, (-2001), false);
        readerBasedJsonParser0.nextLongValue(0);
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, (-1664), false);
        boolean boolean0 = readerBasedJsonParser0.loadMore();
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "\"Na [AVw_`e-v 6If", true);
        StringReader stringReader0 = new StringReader("m2g");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 2, true);
        String string0 = readerBasedJsonParser0.getValueAsString((String) null);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader(": was expecting closing '");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        String string0 = readerBasedJsonParser0.getValueAsString("");
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "%eq=-#$> K%q5", false);
        StringReader stringReader0 = new StringReader("%eq=-#$> K%q5");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 108, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        char char0 = readerBasedJsonParser0.getNextChar((String) null);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("0123456789ABCDEF");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 57, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 39, 0, false);
        char char0 = readerBasedJsonParser0.getNextChar("0123456789ABCDEF");
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1089), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        readerBasedJsonParser0.getInputSource();
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "exM*tBz6;Ush", false);
        StringReader stringReader0 = new StringReader("cg5J<");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2, 33, false);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getColumnNr();
    }

    @Test(timeout = 4000)
    public void test01718() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "exM*tBz6;Ush", false);
        StringReader stringReader0 = new StringReader("cg5J<");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2, 33, false);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "exM*tBz6;Ush", false);
        StringReader stringReader0 = new StringReader("cg5J<");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2, 33, false);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getByteOffset();
    }

    @Test(timeout = 4000)
    public void test01720() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "exM*tBz6;Ush", false);
        StringReader stringReader0 = new StringReader("cg5J<");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2, 33, false);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getLineNr();
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2907, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-464), (-1354), true);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test01822() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2907, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-464), (-1354), true);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getByteOffset();
    }

    @Test(timeout = 4000)
    public void test01823() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2907, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-464), (-1354), true);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getLineNr();
    }

    @Test(timeout = 4000)
    public void test01824() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2907, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-464), (-1354), true);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getColumnNr();
    }

    @Test(timeout = 4000)
    public void test01925() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("Illegal character '");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        String string0 = readerBasedJsonParser0._getText2(jsonToken0);
    }

    @Test(timeout = 4000)
    public void test02026() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "No native support for writing Object Ids", true);
        StringReader stringReader0 = new StringReader("No native support for writing Object Ids");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2, 42, false);
        readerBasedJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test02127() throws Throwable {
        StringReader stringReader0 = new StringReader("C");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 97, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-1658), 33, false);
        readerBasedJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test02228() throws Throwable {
        TextBuffer textBuffer0 = mock(TextBuffer.class, new ViolatedAssumptionAnswer());
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn(textBuffer0).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("d-Ab, s&(&");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
    }

    @Test(timeout = 4000)
    public void test02329() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[6];
        stringReader0.close();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        readerBasedJsonParser0.nextTextValue();
    }

    @Test(timeout = 4000)
    public void test02430() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("Numeric value (");
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Numeric value (", false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 200, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._releaseBuffers();
        readerBasedJsonParser0.nextLongValue(1);
    }

    @Test(timeout = 4000)
    public void test02531() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("END_OBJECT");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1077, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextLongValue((-767L));
    }

    @Test(timeout = 4000)
    public void test02632() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("Numeric value (");
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Numeric value (", false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 200, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._releaseBuffers();
        readerBasedJsonParser0.nextIntValue((-93));
    }

    @Test(timeout = 4000)
    public void test02733() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("PUbu!sgUHcd,");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        IOContext iOContext0 = new IOContext(bufferRecycler0, jsonToken0, true);
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-3089), 33, true);
        readerBasedJsonParser0.nextIntValue((-1507));
    }

    @Test(timeout = 4000)
    public void test02834() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.util.BufferRecycler");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 93, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextIntValue(0);
    }

    @Test(timeout = 4000)
    public void test02935() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("{SPa0Upf-4=\"dp'");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        iOContext0.allocTokenBuffer((-831));
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 1, true);
        readerBasedJsonParser0._handleApos();
        readerBasedJsonParser0.nextFieldName((SerializableString) null);
    }

    @Test(timeout = 4000)
    public void test03036() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("ucw1hC>t");
        stringReader0.close();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        SerializedString serializedString0 = new SerializedString("ALLOW_UNQUOTED_FIELD_NAMES");
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test03137() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 44, (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 241, 3, true);
        readerBasedJsonParser0.nextFieldName();
    }

    @Test(timeout = 4000)
    public void test03238() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "No native support for writing Object Ids", true);
        StringReader stringReader0 = new StringReader("No native support for writing Object Ids");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2, 42, false);
        readerBasedJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test03339() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader(">");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 52, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-3451), 3434, true);
        readerBasedJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test03440() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("0aT|;,");
        stringReader0.close();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test03541() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(")f");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-643), stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2000, 76, true);
        readerBasedJsonParser0.loadMore();
    }

    @Test(timeout = 4000)
    public void test03642() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 80, false);
        readerBasedJsonParser0.getNextChar("^/w6!AHT|_?9\"HS");
    }

    @Test(timeout = 4000)
    public void test03743() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        StringReader stringReader0 = new StringReader("$g2F .-q-");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._releaseBuffers();
        readerBasedJsonParser0._skipString();
    }

    @Test(timeout = 4000)
    public void test03844() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[9];
        charArray0[2] = 'Z';
        charArray0[3] = 'o';
        charArray0[4] = 'M';
        charArray0[5] = '^';
        charArray0[6] = 'u';
        charArray0[7] = 'y';
        charArray0[8] = '~';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 102, true);
        readerBasedJsonParser0._skipString();
    }

    @Test(timeout = 4000)
    public void test03945() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 37, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 37, 0, true);
        readerBasedJsonParser0._skipCR();
    }

    @Test(timeout = 4000)
    public void test04046() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        StringReader stringReader0 = new StringReader("Expected space separating root-level values");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1628), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._reportInvalidToken((String) null, "Expected space separating root-level values");
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(") in base64 content");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1833), 3, false);
        readerBasedJsonParser0._reportInvalidToken(") in base64 content", ") in base64 content");
    }

    @Test(timeout = 4000)
    public void test04248() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, " entries", true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        stringReader0.close();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._reportInvalidToken(" entries", " entries");
    }

    @Test(timeout = 4000)
    public void test04349() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2, 33, true);
        readerBasedJsonParser0._reportInvalidToken("AGA>WK6e]DB");
    }

    @Test(timeout = 4000)
    public void test04450() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
        StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.util.ByteArrayBuilder");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-4584), (-3406), false);
        readerBasedJsonParser0._reportInvalidToken("");
    }

    @Test(timeout = 4000)
    public void test04551() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("Sr@Z0NMVAHrq!5$");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        stringReader0.close();
        readerBasedJsonParser0._reportInvalidToken("Sr@Z0NMVAHrq!5$");
    }

    @Test(timeout = 4000)
    public void test04652() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 33, true);
        readerBasedJsonParser0._releaseBuffers();
    }

    @Test(timeout = 4000)
    public void test04753() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        StringReader stringReader0 = new StringReader("]LaKF/X[ 7ir8a|h\"");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        iOContext0.allocTokenBuffer();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-791), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, (-2395), true);
        readerBasedJsonParser0._releaseBuffers();
    }

    @Test(timeout = 4000)
    public void test04854() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("ALLOW_UNQUOTED_CONTROL_CHARS");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 8, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._parsePosNumber(2574);
    }

    @Test(timeout = 4000)
    public void test04955() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("': expected '");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 612, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._parseNegNumber();
    }

    @Test(timeout = 4000)
    public void test05056() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-1677), 33, false);
        readerBasedJsonParser0._parseNegNumber();
    }

    @Test(timeout = 4000)
    public void test05157() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("9SxjiGjL){%");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._parseName();
    }

    @Test(timeout = 4000)
    public void test05258() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("Unrecognized token '");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 2, false);
        readerBasedJsonParser0._parseName();
    }

    @Test(timeout = 4000)
    public void test05359() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("[Euail03_c");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._parseAposName();
    }

    @Test(timeout = 4000)
    public void test05460() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.ReaderBasedJsonParser", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2774, 2, true);
        readerBasedJsonParser0._parseAposName();
    }

    @Test(timeout = 4000)
    public void test05561() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "No native support for writing Object Ids", true);
        StringReader stringReader0 = new StringReader("No native support for writing Object Ids");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 123, 1583, true);
        readerBasedJsonParser0._matchToken("No native support for writing Object Ids", 1);
    }

    @Test(timeout = 4000)
    public void test05662() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("Leading zeroes not allowed");
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-250), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1049), 1359, true);
        readerBasedJsonParser0._matchToken("Leading zeroes not allowed", 91);
    }

    @Test(timeout = 4000)
    public void test05763() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        stringReader0.close();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, (-651), true);
        readerBasedJsonParser0._matchToken("", (-1628));
    }

    @Test(timeout = 4000)
    public void test05864() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "c4M`oY=", true);
        StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 262111, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 50, (-1628), false);
        readerBasedJsonParser0._matchToken("Unexpected end-of-input within/between ", 3);
    }

    @Test(timeout = 4000)
    public void test05965() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        doReturn((Object) null).when(iOContext0).getSourceReference();
        StringReader stringReader0 = new StringReader(": expected close marker for ");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 52, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, (-488), true);
        readerBasedJsonParser0._handleOddValue(2);
    }

    @Test(timeout = 4000)
    public void test06066() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("Pbyz7~!Ld0!");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-707), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 5, 1092, true);
        readerBasedJsonParser0._handleOddName((-3366));
    }

    @Test(timeout = 4000)
    public void test06167() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("}");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 278, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._handleInvalidNumberStart(0, false);
    }

    @Test(timeout = 4000)
    public void test06268() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("[Euail03_c");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._handleApos();
    }

    @Test(timeout = 4000)
    public void test06369() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("LONG");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1659, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-2), 3, true);
        readerBasedJsonParser0._handleApos();
    }

    @Test(timeout = 4000)
    public void test06470() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        stringReader0.close();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-18), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._handleApos();
    }

    @Test(timeout = 4000)
    public void test06571() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("NaN");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 3, 1491, false);
        readerBasedJsonParser0._finishString2();
    }

    @Test(timeout = 4000)
    public void test06672() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 4306, 3471, true);
        readerBasedJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test06773() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("u0SEW x@'eK&^kn");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        stringReader0.close();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test06874() throws Throwable {
        StringReader stringReader0 = new StringReader("xs{*:,");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = null;
        readerBasedJsonParser0 = new ReaderBasedJsonParser((IOContext) null, (-1936), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-1886), (-1057), false);
    }

    @Test(timeout = 4000)
    public void test06975() throws Throwable {
        StringReader stringReader0 = new StringReader("'null', 'true', 'false' or NaN");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = null;
        readerBasedJsonParser0 = new ReaderBasedJsonParser((IOContext) null, 2028, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    }

    @Test(timeout = 4000)
    public void test07076() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        iOContext0.allocTokenBuffer((-2384));
        ReaderBasedJsonParser readerBasedJsonParser0 = null;
        readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, objectCodec0, (CharsToNameCanonicalizer) null);
    }

    @Test(timeout = 4000)
    public void test07177() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2371), (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextToken();
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test07278() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(objectCodec0).toString();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 224, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        ObjectCodec objectCodec1 = readerBasedJsonParser0.getCodec();
    }

    @Test(timeout = 4000)
    public void test07379() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        doReturn((Object) null).when(iOContext0).getSourceReference();
        StringReader stringReader0 = new StringReader("[Euail03_c");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getLineNr();
    }

    @Test(timeout = 4000)
    public void test07380() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        doReturn((Object) null).when(iOContext0).getSourceReference();
        StringReader stringReader0 = new StringReader("[Euail03_c");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getColumnNr();
    }

    @Test(timeout = 4000)
    public void test07381() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        doReturn((Object) null).when(iOContext0).getSourceReference();
        StringReader stringReader0 = new StringReader("[Euail03_c");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test07382() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        doReturn((Object) null).when(iOContext0).getSourceReference();
        StringReader stringReader0 = new StringReader("[Euail03_c");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getByteOffset();
    }

    @Test(timeout = 4000)
    public void test07483() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("Numeric value (");
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Numeric value (", false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 200, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
        jsonLocation0.getByteOffset();
    }

    @Test(timeout = 4000)
    public void test07484() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("Numeric value (");
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Numeric value (", false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 200, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test07485() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("Numeric value (");
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Numeric value (", false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 200, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
        jsonLocation0.getColumnNr();
    }

    @Test(timeout = 4000)
    public void test07486() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("Numeric value (");
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Numeric value (", false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 200, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
        jsonLocation0.getLineNr();
    }

    @Test(timeout = 4000)
    public void test07587() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("JSON");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 8, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._matchToken("", 7);
    }

    @Test(timeout = 4000)
    public void test07688() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "c4M`oY=", true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 262144, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 50, (-1628), false);
        readerBasedJsonParser0._matchToken("", 3);
    }

    @Test(timeout = 4000)
    public void test07789() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2345, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1583, (-1072), false);
        readerBasedJsonParser0._decodeEscaped();
    }

    @Test(timeout = 4000)
    public void test07890() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("fIQW_s");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        char char0 = readerBasedJsonParser0._decodeEscaped();
    }

    @Test(timeout = 4000)
    public void test07991() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("l}pT@=^i#iE7\"4(ELY");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, (-1705), (-1705), false);
        readerBasedJsonParser0._decodeEscaped();
    }

    @Test(timeout = 4000)
    public void test08092() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.util.BufferRecycler");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 93, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        boolean boolean0 = readerBasedJsonParser0.loadMore();
    }

    @Test(timeout = 4000)
    public void test08093() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.util.BufferRecycler");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 93, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        boolean boolean0 = readerBasedJsonParser0.loadMore();
        char char0 = readerBasedJsonParser0._decodeEscaped();
    }

    @Test(timeout = 4000)
    public void test08194() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[6];
        charArray0[0] = ' ';
        charArray0[1] = 'T';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2843, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 2843, false);
        readerBasedJsonParser0.nextFieldName();
    }

    @Test(timeout = 4000)
    public void test08295() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[6];
        charArray0[0] = ' ';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2843, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 2843, false);
        readerBasedJsonParser0.nextFieldName();
    }

    @Test(timeout = 4000)
    public void test08396() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[6];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2843, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 2843, false);
        readerBasedJsonParser0.nextFieldName();
    }

    @Test(timeout = 4000)
    public void test08497() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("CGJH~jCSix\"<");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-2751), 226, false);
        readerBasedJsonParser0._skipCR();
    }

    @Test(timeout = 4000)
    public void test08598() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        StringReader stringReader0 = new StringReader("Leading zeroes not allowed");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._skipString();
    }

    @Test(timeout = 4000)
    public void test08699() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(": 3Pu}b<Sk2:aXr");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 5, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test087100() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("f.5):l?YuDHA~");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2091), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getNextChar("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
        readerBasedJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test088101() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "No native support for writing Object Ids", false);
        StringReader stringReader0 = new StringReader("No native support for writing Object Ids");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2, 42, false);
        readerBasedJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test089102() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader(": was expecting closing '");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test090103() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("ItgL7&BPR'If");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2282, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
    }

    @Test(timeout = 4000)
    public void test091104() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1089), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._handleOddName(33);
    }

    @Test(timeout = 4000)
    public void test092105() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1089), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._isNextTokenNameMaybe(39, "");
    }

    @Test(timeout = 4000)
    public void test093106() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader(": was expecting closing '");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        String string0 = readerBasedJsonParser0._parseAposName();
    }

    @Test(timeout = 4000)
    public void test094107() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("8t9z*>z]*");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        char[] charArray0 = new char[6];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 51, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 2, true);
        readerBasedJsonParser0._parseAposName();
    }

    @Test(timeout = 4000)
    public void test095108() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("Malformed numeric value '");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4066), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.loadMore();
        readerBasedJsonParser0._parseName();
    }

    @Test(timeout = 4000)
    public void test096109() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1100, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-2323), 0, true);
        readerBasedJsonParser0._parseName();
    }

    @Test(timeout = 4000)
    public void test097110() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("JF,RkA_3PQ}d65nKt6B");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        charArray0[0] = '-';
        charArray0[1] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 33, true);
        readerBasedJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test098111() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 33, true);
        readerBasedJsonParser0._parsePosNumber(33);
    }

    @Test(timeout = 4000)
    public void test099112() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1165, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 1, true);
        readerBasedJsonParser0._parsePosNumber(3);
    }

    @Test(timeout = 4000)
    public void test100113() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2371), (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextBooleanValue();
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test101114() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1089), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        long long0 = readerBasedJsonParser0.nextLongValue(33);
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test101115() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1089), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        long long0 = readerBasedJsonParser0.nextLongValue(33);
    }

    @Test(timeout = 4000)
    public void test102116() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 984, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.nextIntValue(2760);
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test102117() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 984, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.nextIntValue(2760);
    }

    @Test(timeout = 4000)
    public void test103118() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("8w1h>t");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        SerializedString serializedString0 = new SerializedString("ALLOW_UNQUOTED_FIELD_NAMES");
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test104119() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        charArray0[0] = '\"';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 33, true);
        SerializedString serializedString0 = new SerializedString("8=c|A'");
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        readerBasedJsonParser0.hasTextCharacters();
    }

    @Test(timeout = 4000)
    public void test105120() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1089), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._isNextTokenNameMaybe((-1089), (String) null);
    }

    @Test(timeout = 4000)
    public void test106121() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("{SPa0Upf-4=\"dp'");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 1, true);
        readerBasedJsonParser0._handleApos();
        readerBasedJsonParser0.nextFieldName((SerializableString) null);
    }

    @Test(timeout = 4000)
    public void test107122() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("{SPa0Upf-4=\"dp'");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 1, true);
        readerBasedJsonParser0.nextFieldName((SerializableString) null);
        readerBasedJsonParser0.getTokenCharacterOffset();
    }

    @Test(timeout = 4000)
    public void test108123() throws Throwable {
        StringReader stringReader0 = new StringReader("fIQW_s");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1382), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test109124() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("0aT|;,");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test110125() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("JF,RkA_3PQ}d65nKt6B");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        charArray0[0] = '-';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 33, true);
        readerBasedJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test111126() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        charArray0[0] = '\"';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 33, true);
        readerBasedJsonParser0.nextToken();
        readerBasedJsonParser0.hasTextCharacters();
    }

    @Test(timeout = 4000)
    public void test112127() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Decimal point not followed by a digit", true);
        StringReader stringReader0 = new StringReader("Leading zeroes not allowed");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 40, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        readerBasedJsonParser0._readBinary((Base64Variant) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES);
    }

    @Test(timeout = 4000)
    public void test113128() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        readerBasedJsonParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
    }

    @Test(timeout = 4000)
    public void test114129() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        StringReader stringReader0 = new StringReader("$g2F .-q-");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getBinaryValue((Base64Variant) null);
    }

    @Test(timeout = 4000)
    public void test115130() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(")f");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-643), stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2000, 76, true);
        int int0 = readerBasedJsonParser0.getTextOffset();
    }

    @Test(timeout = 4000)
    public void test116131() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "%eq=-#$> K%q5", false);
        StringReader stringReader0 = new StringReader("%eq=-#$> K%q5");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 108, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.getTextLength();
    }

    @Test(timeout = 4000)
    public void test117132() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 33, true);
        char[] charArray1 = readerBasedJsonParser0.getTextCharacters();
    }

    @Test(timeout = 4000)
    public void test118133() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 33, true);
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
        String string0 = readerBasedJsonParser0._getText2(jsonToken0);
    }

    @Test(timeout = 4000)
    public void test119134() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        String string0 = readerBasedJsonParser0._getText2(jsonToken0);
    }

    @Test(timeout = 4000)
    public void test120135() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("E4&OL`r@");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2095), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        String string0 = readerBasedJsonParser0.getValueAsString("q");
    }

    @Test(timeout = 4000)
    public void test121137() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        String string0 = readerBasedJsonParser0.getValueAsString();
    }

    @Test(timeout = 4000)
    public void test122138() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        StringReader stringReader0 = new StringReader("]LaKF/X[ 7ir8a|h\"");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-791), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, (-2395), true);
        String string0 = readerBasedJsonParser0.getText();
    }

    @Test(timeout = 4000)
    public void test123139() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 10, (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 51, 0, false);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test124140() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("[Euail03_c");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2900, 33, true);
        readerBasedJsonParser0._finishString2();
    }

    @Test(timeout = 4000)
    public void test125141() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        StringReader stringReader0 = new StringReader("': expected '");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 612, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._parseNegNumber();
    }

    @Test(timeout = 4000)
    public void test126142() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "No native support for writing Object Ids", true);
        StringReader stringReader0 = new StringReader("No native support for writing Object Ids");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2, 42, false);
        readerBasedJsonParser0.getNextChar(":tJlpjcwY!cYj.ZQG");
    }

    @Test(timeout = 4000)
    public void test127143() throws Throwable {
        char[] charArray0 = new char[0];
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn(charArray0).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        doReturn(false).when(iOContext0).isResourceManaged();
        StringReader stringReader0 = new StringReader("[Euail03_c");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextIntValue(3);
    }

    @Test(timeout = 4000)
    public void test128144() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1089), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        readerBasedJsonParser0._releaseBuffers();
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test129145() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1089), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        StringWriter stringWriter0 = new StringWriter(268);
        int int0 = readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
    }

    @Test(timeout = 4000)
    public void test130146() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 33, true);
        StringWriter stringWriter0 = new StringWriter(33);
        readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
    }

    @Test(timeout = 4000)
    public void test131147() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("u0SEW x@'eK&^kn");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2230, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
    }

    @Test(timeout = 4000)
    public void test132148() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("[Euail03_c");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        readerBasedJsonParser0.setCodec(objectCodec1);
        readerBasedJsonParser0.hasTextCharacters();
    }

    @Test(timeout = 4000)
    public void test133149() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "No native support for writing Object Ids", false);
        StringReader stringReader0 = new StringReader("No native support for writing Object Ids");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2, 42, false);
        Object object0 = readerBasedJsonParser0.getInputSource();
    }

    @Test(timeout = 4000)
    public void test134150() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._reportInvalidToken("");
    }
}
