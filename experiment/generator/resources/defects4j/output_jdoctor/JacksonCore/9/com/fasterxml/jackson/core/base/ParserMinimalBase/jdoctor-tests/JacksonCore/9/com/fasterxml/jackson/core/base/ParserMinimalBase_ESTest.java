/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 18:38:08 GMT 2023
 */
package com.fasterxml.jackson.core.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.ParserMinimalBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ParserMinimalBase_ESTest extends ParserMinimalBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte) (-18), (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        boolean boolean0 = readerBasedJsonParser0.hasTokenId((byte) (-18));
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("pnb");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 5, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.close();
        readerBasedJsonParser0.getTokenLineNr();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("fXZVY_3`\n:xMp:O3");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.overrideCurrentName("Unexpected end-of-String in base64 content");
        readerBasedJsonParser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader(" of 4-char base64 unit: padding only legal as 3rd or 4th character");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2408, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, (-541), true);
        ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser) readerBasedJsonParser0.skipChildren();
        readerBasedJsonParser1.getTokenLineNr();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("US-ASCII");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        boolean boolean0 = readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("Failed to decode VALUE_STRING as base64 (");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1666), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-2235), 0, true);
        boolean boolean0 = readerBasedJsonParser0.hasTextCharacters();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[6];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 58, (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, (-1), true);
        String string0 = readerBasedJsonParser0.getValueAsString((String) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Short short0 = new Short((short) 774);
        IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
        PipedInputStream pipedInputStream0 = new PipedInputStream(3434);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[6];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (short) 774, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1243, (-1867), false);
        String string0 = uTF8StreamJsonParser0.getValueAsString("HV!E|@^;:4a");
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("zthxQl");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 255, true);
        String string0 = readerBasedJsonParser0.getValueAsString("");
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Double double0 = new Double(0.0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[0];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 101, true);
        long long0 = uTF8StreamJsonParser0.getValueAsLong((long) 0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        PipedInputStream pipedInputStream0 = new PipedInputStream(3);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[4];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3839, 0, false);
        long long0 = uTF8StreamJsonParser0.getValueAsLong((-474L));
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 37, (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 37, false);
        int int0 = readerBasedJsonParser0.getValueAsInt(37);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-929), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2805, 154, false);
        int int0 = uTF8StreamJsonParser0.getValueAsInt((-1214));
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Short short0 = new Short((short) 8);
        IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
        StringReader stringReader0 = new StringReader("Expected space separating root-level values");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        double double0 = readerBasedJsonParser0.getValueAsDouble((double) 3);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("' (code ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1130, 2, false);
        double double0 = readerBasedJsonParser0.getValueAsDouble((-1765.601919391));
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 39, 0, false);
        boolean boolean0 = readerBasedJsonParser0.getValueAsBoolean(false);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1774, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.getTextOffset();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Double double0 = new Double(0.0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[0];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 101, true);
        int int0 = uTF8StreamJsonParser0.getTextLength();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("OmsjU;A*2A$S");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 629, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, (-86), false);
        char[] charArray1 = readerBasedJsonParser0.getTextCharacters();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Long long0 = new Long(3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
        StringReader stringReader0 = new StringReader("N");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        String string0 = readerBasedJsonParser0.getText();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Double double0 = new Double(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
        StringReader stringReader0 = new StringReader("Illegal character '");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2517, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        JsonStreamContext jsonStreamContext0 = readerBasedJsonParser0.getParsingContext();
        jsonStreamContext0.getCurrentName();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Double double0 = new Double(0.0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[0];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 101, true);
        String string0 = uTF8StreamJsonParser0.getCurrentName();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        byte[] byteArray0 = ParserMinimalBase._asciiBytes("");
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        byte[] byteArray0 = new byte[5];
        String string0 = ParserMinimalBase._ascii(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
        MockFile mockFile0 = new MockFile("d ppfPQKc~cCoP'31}F");
        File file0 = MockFile.createTempFile("d ppfPQKc~cCoP'31}F", "=fS/>*3)!w", (File) mockFile0);
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 11, 3, false);
        uTF8StreamJsonParser0.nextValue();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Double double0 = new Double(1);
        IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 33, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 110, 33, false);
        uTF8StreamJsonParser0.nextValue();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("9!o$Q");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2378, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 0, false);
        readerBasedJsonParser0.nextValue();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("=fS/>*3)!w");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Byte byte0 = new Byte((byte) 92);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getBinaryValue((Base64Variant) null);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        StringReader stringReader0 = new StringReader("Ck");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 32, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, true);
        readerBasedJsonParser0.close();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Boolean boolean0 = Boolean.FALSE;
        IOContext iOContext0 = new IOContext(bufferRecycler0, boolean0, false);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[9];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 42, 42, false);
        long long0 = uTF8StreamJsonParser0.getValueAsLong((long) (byte) 5);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
        int int0 = readerBasedJsonParser0.getValueAsInt(0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        byte[] byteArray0 = ParserMinimalBase._asciiBytes(": ");
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        String string0 = ParserMinimalBase._getCharDesc(1321);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("' (code ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1130, 2, false);
        String string0 = readerBasedJsonParser0.getValueAsString();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Double double0 = new Double(0.0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[0];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 101, true);
        double double1 = uTF8StreamJsonParser0.getValueAsDouble(0.0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Byte byte0 = new Byte((byte) 92);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        long long0 = readerBasedJsonParser0.getValueAsLong();
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("=fS/>*3)!w");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.getValueAsInt();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Byte byte0 = new Byte((byte) 92);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        boolean boolean0 = readerBasedJsonParser0.getValueAsBoolean(true);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Long long0 = new Long(3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
        StringReader stringReader0 = new StringReader("N");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.clearCurrentToken();
        readerBasedJsonParser0.isExpectedStartArrayToken();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
        StringReader stringReader0 = new StringReader("'");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1521), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
        jsonParser0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
        readerBasedJsonParser0.nextValue();
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "'\u0529' (code 1321 / 0x529)", false);
        StringReader stringReader0 = new StringReader("'\u0529' (code 1321 / 0x529)");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 8000, 33, true);
        boolean boolean0 = readerBasedJsonParser0.isExpectedStartObjectToken();
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-929), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2805, 154, false);
        boolean boolean0 = uTF8StreamJsonParser0.isExpectedStartArrayToken();
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-28), 2365, false);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        boolean boolean0 = uTF8StreamJsonParser0.hasToken(jsonToken0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[4];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Long long0 = new Long((-1336L));
        IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 46, true);
        boolean boolean0 = uTF8StreamJsonParser0.hasTokenId(2);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
        StringReader stringReader0 = new StringReader("n4T 6o#NP @");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 31, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        boolean boolean0 = readerBasedJsonParser0.hasTokenId(0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Byte byte0 = new Byte((byte) 92);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        boolean boolean0 = readerBasedJsonParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
        StringReader stringReader0 = new StringReader("n4T 6o#NP @");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 31, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
        StringReader stringReader0 = new StringReader(">-oENL`");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getCurrentToken();
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[1];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 3, true);
        uTF8StreamJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("=fS/>*3)!w");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getLastClearedToken();
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        ParserMinimalBase._ascii((byte[]) null);
    }
}
