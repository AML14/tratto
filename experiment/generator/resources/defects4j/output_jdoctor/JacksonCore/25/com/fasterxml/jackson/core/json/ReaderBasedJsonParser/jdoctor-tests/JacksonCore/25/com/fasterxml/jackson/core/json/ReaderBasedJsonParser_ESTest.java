/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 19:30:24 GMT 2023
 */
package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.TextBuffer;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ReaderBasedJsonParser_ESTest extends ReaderBasedJsonParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Numeric value (", true);
        StringReader stringReader0 = new StringReader("Numeric value (");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextLongValue(0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader(")G;ihw");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 41, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "T<;),L'&}K,+B", false);
        StringReader stringReader0 = new StringReader("jv%i#IWVpcB'");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._skipCR();
        readerBasedJsonParser0.getTokenColumnNr();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("zp7|p`M!Vu[mEF1");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1989), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 4337, 3, false);
        readerBasedJsonParser0._skipString();
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("/'-W");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 10, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 10, 3, true);
        readerBasedJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("H`$W- -S6D0VUsR:");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        readerBasedJsonParser0._parseName();
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("X],\"h[");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._parseNegNumber();
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 16, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._isNextTokenNameMaybe(187, "^dX;K");
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextLongValue(0L);
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("P");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 4, 1, true);
        String string0 = readerBasedJsonParser0.getValueAsString((String) null);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "$|?3QfvU", false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 118, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        String string0 = readerBasedJsonParser0.getValueAsString("");
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        charArray0[0] = '0';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1503, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 68, false);
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        char char0 = readerBasedJsonParser0.getNextChar("", jsonToken0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        charArray0[0] = 'P';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 11, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 1, true);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        char char0 = readerBasedJsonParser0.getNextChar((String) null, jsonToken0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("{r");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 0, false);
        char char0 = readerBasedJsonParser0.getNextChar("{r");
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("05*d{g1+");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        char char0 = readerBasedJsonParser0.getNextChar("tSzMo;]t");
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
        char[] charArray0 = new char[7];
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 708, 68, true);
        Object object0 = readerBasedJsonParser0.getInputSource();
    }

    @Test(timeout = 4000)
    public void test01617() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        char[] charArray0 = iOContext0.allocConcatBuffer();
        StringReader stringReader0 = new StringReader("$GM*`]sMnX1a3I>");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-235), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1670, 759, true);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getByteOffset();
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        char[] charArray0 = iOContext0.allocConcatBuffer();
        StringReader stringReader0 = new StringReader("$GM*`]sMnX1a3I>");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-235), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1670, 759, true);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test01619() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        char[] charArray0 = iOContext0.allocConcatBuffer();
        StringReader stringReader0 = new StringReader("$GM*`]sMnX1a3I>");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-235), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1670, 759, true);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getLineNr();
    }

    @Test(timeout = 4000)
    public void test01620() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        char[] charArray0 = iOContext0.allocConcatBuffer();
        StringReader stringReader0 = new StringReader("$GM*`]sMnX1a3I>");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-235), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1670, 759, true);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getColumnNr();
    }

    @Test(timeout = 4000)
    public void test01721() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-821), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        ObjectCodec objectCodec0 = readerBasedJsonParser0.getCodec();
    }

    @Test(timeout = 4000)
    public void test01822() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("*[J@csH8_f&m+g\"e");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        boolean boolean0 = readerBasedJsonParser0._loadMore();
    }

    @Test(timeout = 4000)
    public void test01923() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
        StringReader stringReader0 = new StringReader("was expecting double-quote to start field name");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 117, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2275, 4279, false);
        readerBasedJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test02024() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("name");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
    }

    @Test(timeout = 4000)
    public void test02125() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("],)+]A:i ~]{WiMRK");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 53, 512, false);
        readerBasedJsonParser0.nextTextValue();
    }

    @Test(timeout = 4000)
    public void test02226() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1644), (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 614, 12, true);
        readerBasedJsonParser0.nextLongValue((-2489L));
    }

    @Test(timeout = 4000)
    public void test02327() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\nRequest payload : ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1833), 3, false);
        readerBasedJsonParser0.nextLongValue(1);
    }

    @Test(timeout = 4000)
    public void test02428() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("dte0H^>rv|}~6> 2$q");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 34, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextIntValue(2);
    }

    @Test(timeout = 4000)
    public void test02529() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("Qitww4{XU~9**b-~_");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-936), 33, true);
        SerializedString serializedString0 = new SerializedString("");
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test02630() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("-R");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 56320, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-921), 44, false);
        readerBasedJsonParser0.nextFieldName();
    }

    @Test(timeout = 4000)
    public void test02731() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 34, true);
        readerBasedJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test02832() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 768, 2, true);
        JsonToken jsonToken0 = JsonToken.VALUE_NULL;
        readerBasedJsonParser0.getNextChar("", jsonToken0);
    }

    @Test(timeout = 4000)
    public void test02933() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 482, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 0, 0, false);
        readerBasedJsonParser0.getNextChar("");
    }

    @Test(timeout = 4000)
    public void test03034() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader(",}EVw}os8");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1, (-541), true);
        readerBasedJsonParser0._skipString();
    }

    @Test(timeout = 4000)
    public void test03135() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        charArray0[3] = ':';
        charArray0[4] = '@';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 115, false);
        readerBasedJsonParser0._skipString();
    }

    @Test(timeout = 4000)
    public void test03236() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("cJc,om$/?");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 49, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 78, 1, true);
        IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 2132, stringReader0, objectCodec1, charsToNameCanonicalizer0);
        readerBasedJsonParser1._closeInput();
        readerBasedJsonParser0._skipString();
    }

    @Test(timeout = 4000)
    public void test03337() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 722, 857, true);
        readerBasedJsonParser0._reportInvalidToken("}", "gP'~*ht,!G}CFXWjX");
    }

    @Test(timeout = 4000)
    public void test03438() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("Zm?C");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 0, false);
        readerBasedJsonParser0._reportInvalidToken("KwhP7o?*Kf>OmNbG", "Zm?C");
    }

    @Test(timeout = 4000)
    public void test03539() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "$|?3QfvU", false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 0, 3, true);
        readerBasedJsonParser0._reportInvalidToken("$|?3QfvU");
    }

    @Test(timeout = 4000)
    public void test03640() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("FH[(2qit*!=/)A[Dr");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 35, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 2, true);
        readerBasedJsonParser0._reportInvalidToken("FH[(2qit*!=/)A[Dr");
    }

    @Test(timeout = 4000)
    public void test03741() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("' (code 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1278, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._reportInvalidToken("' (code 0x");
    }

    @Test(timeout = 4000)
    public void test03842() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "i%l", true);
        StringReader stringReader0 = new StringReader("z ]NV8");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 0, true);
        readerBasedJsonParser0._releaseBuffers();
    }

    @Test(timeout = 4000)
    public void test03943() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("RH@Amv\u00079P&@k^>");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 102, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 1391, 0, false);
        readerBasedJsonParser0._parsePosNumber(1);
    }

    @Test(timeout = 4000)
    public void test04044() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("('true', 'false' or 'null')");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-584), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        readerBasedJsonParser0._parsePosNumber(3);
    }

    @Test(timeout = 4000)
    public void test04145() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("zp7|p`M!Vu[mEF1");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._releaseBuffers();
        readerBasedJsonParser0._parseName();
    }

    @Test(timeout = 4000)
    public void test04246() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("t`S6=-9:c1");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1907), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2895, 2, true);
        readerBasedJsonParser0._parseName();
    }

    @Test(timeout = 4000)
    public void test04347() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._parseAposName();
    }

    @Test(timeout = 4000)
    public void test04448() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "GUma$#P>.|", false);
        StringReader stringReader0 = new StringReader("GUma$#P>.|");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._matchToken("GUma$#P>.|", 57);
    }

    @Test(timeout = 4000)
    public void test04549() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("): ");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[6];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-933), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-772), 0, true);
        readerBasedJsonParser0._matchToken("): ", 114);
    }

    @Test(timeout = 4000)
    public void test04650() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("ixV");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 1, (-851), true);
        readerBasedJsonParser0._loadMoreGuaranteed();
    }

    @Test(timeout = 4000)
    public void test04751() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("t`S6=-9:c1");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1907), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2895, 2, true);
        readerBasedJsonParser0._loadMoreGuaranteed();
    }

    @Test(timeout = 4000)
    public void test04852() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("F3~)kx^$<MFG|r");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._loadMore();
    }

    @Test(timeout = 4000)
    public void test04953() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 2, false);
        readerBasedJsonParser0._handleOddValue(0);
    }

    @Test(timeout = 4000)
    public void test05054() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 3, 2501, false);
        readerBasedJsonParser0._handleOddValue((-315));
    }

    @Test(timeout = 4000)
    public void test05155() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 78, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._handleOddName((-1195));
    }

    @Test(timeout = 4000)
    public void test05256() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 46, true);
        readerBasedJsonParser0._handleOddName(0);
    }

    @Test(timeout = 4000)
    public void test05357() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-985), (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 33, false);
        readerBasedJsonParser0._handleOddName((-985));
    }

    @Test(timeout = 4000)
    public void test05458() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 156, (-1927), false);
        readerBasedJsonParser0._handleInvalidNumberStart((-1927), false);
    }

    @Test(timeout = 4000)
    public void test05559() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ":", true);
        StringReader stringReader0 = new StringReader(":");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 48, 2623, true);
        readerBasedJsonParser0._finishString2();
    }

    @Test(timeout = 4000)
    public void test05660() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("CfxRdb%");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3015), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 0, true);
        readerBasedJsonParser0._finishString2();
    }

    @Test(timeout = 4000)
    public void test05761() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2286), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test05862() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        StringReader stringReader0 = new StringReader("t`S6=-9:c1");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3023), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 1748, true);
        readerBasedJsonParser0._decodeEscaped();
    }

    @Test(timeout = 4000)
    public void test05963() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 55, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 3, false);
        readerBasedJsonParser0._decodeEscaped();
    }

    @Test(timeout = 4000)
    public void test06064() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = null;
        readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectCodec0, (CharsToNameCanonicalizer) null, charArray0, 0, 0, true);
    }

    @Test(timeout = 4000)
    public void test06165() throws Throwable {
        StringReader stringReader0 = new StringReader("'null', 'true', 'false' or NaN");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = null;
        readerBasedJsonParser0 = new ReaderBasedJsonParser((IOContext) null, 2028, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
    }

    @Test(timeout = 4000)
    public void test06266() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("jnNE,o[*.");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        iOContext0.allocTokenBuffer();
        ReaderBasedJsonParser readerBasedJsonParser0 = null;
        readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1062, stringReader0, objectCodec0, charsToNameCanonicalizer0);
    }

    @Test(timeout = 4000)
    public void test06367() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(objectCodec0).toString();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 378, 754, false);
        ObjectCodec objectCodec1 = readerBasedJsonParser0.getCodec();
    }

    @Test(timeout = 4000)
    public void test06468() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test06469() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getColumnNr();
    }

    @Test(timeout = 4000)
    public void test06470() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getByteOffset();
    }

    @Test(timeout = 4000)
    public void test06471() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
        jsonLocation0.getLineNr();
    }

    @Test(timeout = 4000)
    public void test06572() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("ALLOW_SINGLE_QUOTES");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        IOContext iOContext0 = new IOContext(bufferRecycler0, "ALLOW_SINGLE_QUOTES", true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
        readerBasedJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test06673() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("cJc,om$/?");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 49, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 78, 1, true);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test06674() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("cJc,om$/?");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 49, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 78, 1, true);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
        jsonLocation0.getColumnNr();
    }

    @Test(timeout = 4000)
    public void test06675() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("cJc,om$/?");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 49, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 78, 1, true);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
        jsonLocation0.getLineNr();
    }

    @Test(timeout = 4000)
    public void test06676() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("cJc,om$/?");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 49, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 78, 1, true);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
        jsonLocation0.getByteOffset();
    }

    @Test(timeout = 4000)
    public void test06777() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("dv~XX,h");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 13, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 13, 0, false);
        readerBasedJsonParser0._matchToken("mZeY", 1);
    }

    @Test(timeout = 4000)
    public void test06878() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("H`$W- -S6D0VUsR:");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        charArray0[1] = 't';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        char char0 = readerBasedJsonParser0._decodeEscaped();
    }

    @Test(timeout = 4000)
    public void test06979() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("4");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextLongValue(33);
        readerBasedJsonParser0._decodeEscaped();
    }

    @Test(timeout = 4000)
    public void test07080() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("4");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._decodeEscaped();
    }

    @Test(timeout = 4000)
    public void test07181() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("6A6#a2:S}/xzyaZZ/");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 936, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 0, false);
        readerBasedJsonParser0._skipCR();
    }

    @Test(timeout = 4000)
    public void test07282() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("9S3V1f&zERN`,(");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 101, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 33, 0, true);
        readerBasedJsonParser0._skipCR();
    }

    @Test(timeout = 4000)
    public void test07383() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("H`$W- -S6D0VUsR:");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        readerBasedJsonParser0._skipCR();
    }

    @Test(timeout = 4000)
    public void test07484() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", false);
        StringReader stringReader0 = new StringReader("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 78, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 4647, false);
        readerBasedJsonParser0._skipString();
    }

    @Test(timeout = 4000)
    public void test07585() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(" within/between ");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._skipString();
    }

    @Test(timeout = 4000)
    public void test07686() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("H`$W- -S6D0VUsR:");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        charArray0[1] = 't';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        readerBasedJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test07787() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("H`$W- -S6D0VUsR:");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        readerBasedJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test07888() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        StringReader stringReader0 = new StringReader("t5hFSHr_$79'nT<U(");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        charArray0[0] = ']';
        charArray0[1] = ' ';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1939, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 47, false);
        readerBasedJsonParser0._handleApos();
    }

    @Test(timeout = 4000)
    public void test07989() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        StringReader stringReader0 = new StringReader("t5hFSHr_$79'nT<U(");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1939, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 47, false);
        readerBasedJsonParser0._handleApos();
    }

    @Test(timeout = 4000)
    public void test08090() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("1YzsfN0");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 120, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 0, true);
        readerBasedJsonParser0._handleApos();
    }

    @Test(timeout = 4000)
    public void test08191() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("NV]bO");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 53, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-2536), 73, true);
        readerBasedJsonParser0._parseAposName();
    }

    @Test(timeout = 4000)
    public void test08292() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2), (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._isNextTokenNameMaybe(0, "ALLOW_NON_NUMERIC_NUMBERS");
    }

    @Test(timeout = 4000)
    public void test08393() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("^SU^qax\"jQ'nF<LGMQ");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-313), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 1, true);
        readerBasedJsonParser0._parseAposName();
    }

    @Test(timeout = 4000)
    public void test08494() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("H`$W- -S6D0VUsR:");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        charArray0[1] = 't';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        readerBasedJsonParser0._parseName();
    }

    @Test(timeout = 4000)
    public void test08595() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        StringReader stringReader0 = new StringReader("((Zkn?XkdyGaRU{");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 514, 514, true);
        readerBasedJsonParser0._parseNegNumber();
    }

    @Test(timeout = 4000)
    public void test08696() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        StringReader stringReader0 = new StringReader("+Infinity");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
        char[] charArray0 = new char[9];
        charArray0[3] = '<';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 677, false);
        readerBasedJsonParser0._parseNegNumber();
    }

    @Test(timeout = 4000)
    public void test08797() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-850), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 0, true);
        readerBasedJsonParser0._parseNegNumber();
    }

    @Test(timeout = 4000)
    public void test08898() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        StringReader stringReader0 = new StringReader("+Infinity");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 677, false);
        readerBasedJsonParser0._parseNegNumber();
    }

    @Test(timeout = 4000)
    public void test08999() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[6];
        charArray0[3] = '2';
        charArray0[4] = 'b';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1718, (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 1665, true);
        readerBasedJsonParser0._parsePosNumber((-772));
    }

    @Test(timeout = 4000)
    public void test090100() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("cJc,om$/?");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2132, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._closeInput();
        readerBasedJsonParser0.nextBooleanValue();
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test091101() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("%#c{@u7-qaJ");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 69, 98, true);
        readerBasedJsonParser0.nextIntValue(98);
    }

    @Test(timeout = 4000)
    public void test092102() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test093103() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("NV]bO");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 40, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1295, 3, true);
        readerBasedJsonParser0.nextFieldName();
    }

    @Test(timeout = 4000)
    public void test094104() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "A% O", false);
        StringReader stringReader0 = new StringReader("A% O");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 256, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
    }

    @Test(timeout = 4000)
    public void test095105() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("81.&xM /1^w1 ;tt,w4");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1604), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
    }

    @Test(timeout = 4000)
    public void test096106() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("p");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._isNextTokenNameMaybe((-404), "p");
    }

    @Test(timeout = 4000)
    public void test097107() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4, (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 0, true);
        readerBasedJsonParser0.nextFieldName();
    }

    @Test(timeout = 4000)
    public void test098108() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        SerializedString serializedString0 = new SerializedString("");
        boolean boolean0 = readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test098109() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        SerializedString serializedString0 = new SerializedString("");
        boolean boolean0 = readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test099110() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "L`$^%Oum`{y`", true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        charArray0[0] = '|';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 656, true);
        readerBasedJsonParser0.nextFieldName((SerializableString) null);
    }

    @Test(timeout = 4000)
    public void test100111() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("H`$W- -S6D0VUsR:");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        readerBasedJsonParser0.finishToken();
        readerBasedJsonParser0.getCurrentName();
    }

    @Test(timeout = 4000)
    public void test101112() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("false");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextLongValue(33);
        readerBasedJsonParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test102113() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("81.&xM /1^w1 ;tt,w4");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1604), stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextLongValue(0L);
    }

    @Test(timeout = 4000)
    public void test103114() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("5*d{g~");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextLongValue(33);
    }

    @Test(timeout = 4000)
    public void test104115() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Illegal character (", true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        charArray0[0] = '3';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 322, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 57, true);
        readerBasedJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test105116() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("05*d{g1+");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test106117() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("H`$W- -S6D0VUsR:");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        charArray0[2] = ']';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1600), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 109, true);
        readerBasedJsonParser0._decodeEscaped();
        readerBasedJsonParser0.nextLongValue((-376L));
    }

    @Test(timeout = 4000)
    public void test107118() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getBinaryValue((Base64Variant) null);
    }

    @Test(timeout = 4000)
    public void test108119() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("zp7|p`M!Vu[mEF1");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.getTextOffset();
    }

    @Test(timeout = 4000)
    public void test109120() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader(") out of range of Java byte");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 224, false);
        int int0 = readerBasedJsonParser0.getTextLength();
    }

    @Test(timeout = 4000)
    public void test110121() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("ALLOW_TRAILING_COMMA");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1819), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-2920), 2, false);
        char[] charArray1 = readerBasedJsonParser0.getTextCharacters();
    }

    @Test(timeout = 4000)
    public void test111122() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        StringReader stringReader0 = new StringReader("'");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-1876), (-319), true);
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        String string0 = readerBasedJsonParser0._getText2(jsonToken0);
    }

    @Test(timeout = 4000)
    public void test112123() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        String string0 = readerBasedJsonParser0._getText2(jsonToken0);
    }

    @Test(timeout = 4000)
    public void test113124() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("<yA");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        String string0 = readerBasedJsonParser0.getText();
    }

    @Test(timeout = 4000)
    public void test114125() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1522, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        String string0 = readerBasedJsonParser0.getValueAsString();
    }

    @Test(timeout = 4000)
    public void test115126() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("NV\" u@;uw1LS`{,is8");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[6];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 54, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 2, false);
        int int0 = readerBasedJsonParser0.getText((Writer) null);
    }

    @Test(timeout = 4000)
    public void test116127() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("4");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextLongValue(33);
        readerBasedJsonParser0.getValueAsString("VV4R{p.xC\"Vpo&");
        readerBasedJsonParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test117128() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("t`S6=-9:c1");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1907), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2895, 2, true);
        SerializedString serializedString0 = new SerializedString("xuy00-gV'0?p_t+Z");
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test118129() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 0, true);
        readerBasedJsonParser0._loadMore();
        readerBasedJsonParser0.getNextChar("+Infinity");
    }

    @Test(timeout = 4000)
    public void test119130() throws Throwable {
        char[] charArray0 = new char[4];
        TextBuffer textBuffer0 = mock(TextBuffer.class, new ViolatedAssumptionAnswer());
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn(textBuffer0).when(iOContext0).constructTextBuffer();
        doReturn(false).when(iOContext0).isResourceManaged();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 842, (-2021), true);
        readerBasedJsonParser0._loadMoreGuaranteed();
    }

    @Test(timeout = 4000)
    public void test120131() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("t`S6=-9:c1");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 169, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._loadMoreGuaranteed();
        readerBasedJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test121132() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-985), (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 33, false);
        readerBasedJsonParser0._releaseBuffers();
        readerBasedJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test122133() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("p");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        stringReader0.skip(2);
        readerBasedJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test123134() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("ALLOW_SINGLE_QUOTES");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 0, true);
        readerBasedJsonParser0.getNextChar("ALLOW_SINGLE_QUOTES");
        readerBasedJsonParser0._parseName();
    }

    @Test(timeout = 4000)
    public void test124135() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("' (code 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1278, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.releaseBuffered((Writer) null);
    }

    @Test(timeout = 4000)
    public void test125136() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 2577, false);
        readerBasedJsonParser0.releaseBuffered((Writer) null);
    }

    @Test(timeout = 4000)
    public void test126137() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("p");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        readerBasedJsonParser0.setCodec(objectCodec1);
        readerBasedJsonParser0.getTokenCharacterOffset();
    }

    @Test(timeout = 4000)
    public void test127138() throws Throwable {
        IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
        doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
        StringReader stringReader0 = new StringReader("");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[8];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 46, true);
        Object object0 = readerBasedJsonParser0.getInputSource();
    }

    @Test(timeout = 4000)
    public void test128139() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("I`RBJA");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
    }

    @Test(timeout = 4000)
    public void test129140() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("Numeric value (");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[7];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 92, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-863), 2, true);
        readerBasedJsonParser0.getNextChar("c:$]:,sV");
    }
}
