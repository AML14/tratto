/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:11:57 GMT 2024
 */
package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DateFormat dateFormat0 = StdDateFormat.getBlueprintRFC1123Format();
        dateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getISO8601Format(timeZone0);
        mockSimpleDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getRFC1123Format(timeZone0);
        mockSimpleDateFormat0.toLocalizedPattern();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getBlueprintISO8601Format();
        mockSimpleDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Locale locale0 = Locale.CHINESE;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Locale locale0 = Locale.US;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        TimeZone timeZone0 = TimeZone.getDefault();
        stdDateFormat0.instance.setTimeZone(timeZone0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("5925-@T/5DmV\";-");
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Date date0 = stdDateFormat0.parse("0");
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("-");
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("WBls:#1akgiqB");
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse(".000");
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.instance.format((Date) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        String string0 = stdDateFormat0.instance.toString();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("1hM_S~:tb(");
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("2.25073858507202e-08");
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition((-2408));
        stdDateFormat0.instance.parseAsISO8601("4", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ParsePosition parsePosition0 = new ParsePosition(1722);
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parseAsISO8601("T+@9:^c", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(18);
        Date date0 = stdDateFormat0.parseAsISO8601("j7N\"O2Vs`: 9pMZ", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ParsePosition parsePosition0 = new ParsePosition(1959);
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Date date0 = stdDateFormat0.parseAsISO8601("j7N\"O*Rs`: MZ", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("5925-T/5mU-V\"S-");
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition((-1241));
        stdDateFormat0.parseAsISO8601("tqmBfIRC}5\" IQu+zx", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parseAsISO8601("2.25073858507202e-08", (ParsePosition) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("5925-T/5mV\"S-");
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parseAsISO8601("#'/ta", (ParsePosition) null);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(18);
        Date date0 = stdDateFormat0.parseAsISO8601("qM-k)nY~Jibri+F|\"", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parseAsISO8601("4>J?2-NrF=", (ParsePosition) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getRFC1123Format(timeZone0, locale0);
        mockSimpleDateFormat0.toPattern();
    }
}
