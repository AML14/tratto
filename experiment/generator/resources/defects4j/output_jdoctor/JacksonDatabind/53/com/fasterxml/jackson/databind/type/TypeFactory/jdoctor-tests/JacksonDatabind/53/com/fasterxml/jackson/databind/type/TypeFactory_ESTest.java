/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 02:58:33 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassStack;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBase;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Array;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        typeFactory0.withClassLoader(classLoader0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        typeFactory0.constructCollectionType(class0, class0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        ClassStack classStack0 = new ClassStack(class0);
        ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
        doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
        doReturn((Type) null).when(parameterizedType0).getRawType();
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        typeFactory0._fromParamType(classStack0, parameterizedType0, typeBindings0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        typeFactory0.withModifier(typeModifier0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TypeFactory.rawClass((Type) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumSet> class0 = EnumSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        typeFactory0.constructSpecializedType(collectionType0, class0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructType((Type) class0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        Class<TreeSet> class1 = TreeSet.class;
        typeFactory0.constructCollectionType(class1, class0);
        Class<SerializationFeature> class2 = SerializationFeature.class;
        Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
        typeFactory0.constructParametrizedType(class0, class2, classArray0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
        typeFactory0._findWellKnownSimple(class0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[9];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        Class<ArrayList> class0 = ArrayList.class;
        typeFactory1.constructCollectionType(class0, class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructFromCanonical("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer");
        typeFactory0.findClass("wE;eG");
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        doReturn((String) null).when(typeModifier0).toString();
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        typeFactory1.constructCollectionType(class0, class0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SimpleType> class0 = SimpleType.class;
        typeFactory0.constructRawMapLikeType(class0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructRawMapType(class0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SerializationFeature> class0 = SerializationFeature.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        TypeFactory.rawClass(mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        TypeFactory.defaultInstance();
        TypeFactory.unknownType();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapLikeType> class0 = MapLikeType.class;
        Class<ReferenceType> class1 = ReferenceType.class;
        typeFactory0._findWellKnownSimple(class1);
        typeFactory0.constructReferenceType(class0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructType((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("mJM~ayZ9M(}d3");
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayType> class0 = ArrayType.class;
        typeFactory0.constructParametrizedType(class0, class0, (Class<?>[]) null);
        String string0 = "K Q-XM:~^dvruV ";
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
        JavaType[] javaTypeArray0 = new JavaType[6];
        typeFactory0.constructParametricType(class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapLikeType> class0 = MapLikeType.class;
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
        typeFactory0.constructParametricType(class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        typeFactory0.uncheckedSimpleType(class0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumSet> class0 = EnumSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        typeFactory0.moreSpecificType(collectionType0, collectionType0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.clearCache();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) null);
        typeFactory0.moreSpecificType(arrayType0, arrayType0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        typeFactory0.findTypeParameters(class0, class0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        typeFactory0.constructType((Type) simpleType0, (JavaType) simpleType0);
        typeFactory0.findClass("[value=%sdcontent=%s]");
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        TypeFactory.rawClass(simpleType0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayType> class0 = ArrayType.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        typeFactory0.findTypeParameters(class0, class0, typeBindings0);
        Class<MapperFeature> class1 = MapperFeature.class;
        typeFactory0.uncheckedSimpleType(class1);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        Class<DeserializationFeature> class0 = DeserializationFeature.class;
        typeFactory0.findTypeParameters((JavaType) simpleType0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SerializationFeature> class0 = SerializationFeature.class;
        typeFactory0.uncheckedSimpleType(class0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        typeFactory0.constructSimpleType(class0, class0, (JavaType[]) null);
        String string0 = "Split surrogate on writeRaw() input (last character)";
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        Class<CollectionLikeType> class1 = CollectionLikeType.class;
        typeFactory0.constructMapType(class0, class0, class1);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        doReturn((String) null).when(typeModifier0).toString();
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        typeFactory1.withModifier(typeModifier1);
        Class<LinkedList> class0 = LinkedList.class;
        typeFactory1.constructCollectionType(class0, class0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
        typeFactory0.constructArrayType(class0);
        Class<LinkedList> class1 = LinkedList.class;
        typeFactory0.constructCollectionType(class1, class0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        File file0 = MockFile.createTempFile("Gc9", "Gc9");
        objectMapper0.writeValue(file0, (Object) class0);
        objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructFromCanonical("D~j:=6Ify`uDzUl~");
        String string0 = "JY4a!";
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        Class<ArrayList> class0 = ArrayList.class;
        Class<SerializationFeature> class1 = SerializationFeature.class;
        typeFactory1.constructCollectionType(class0, class1);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0._unknownType();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn(javaType0, (JavaType) null, (JavaType) null, (JavaType) null, (JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        Class<ArrayList> class0 = ArrayList.class;
        typeFactory1.constructCollectionType(class0, class0);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.withModifier((TypeModifier) null);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        Class<Integer> class1 = Integer.class;
        typeFactory0.constructCollectionType(class0, class1);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<RuntimeException> class0 = RuntimeException.class;
        JavaType javaType0 = typeFactory0._unknownType();
        typeFactory0.constructGeneralizedType(javaType0, class0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        Class<LinkedList> class1 = LinkedList.class;
        typeFactory0.constructCollectionType(class1, class0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("float");
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.findClass("char");
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        objectMapper0.setTypeFactory(typeFactory0);
        objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        TypeFactory.defaultInstance();
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleType> class0 = SimpleType.class;
        objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        TypeFactory.defaultInstance();
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ReferenceType> class0 = ReferenceType.class;
        objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        typeFactory0.moreSpecificType(simpleType0, simpleType0);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        Class<CollectionLikeType> class1 = CollectionLikeType.class;
        Class<SerializationFeature> class2 = SerializationFeature.class;
        typeFactory0.constructMapLikeType(class0, class1, class2);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("short");
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
        Class<MapLikeType> class1 = MapLikeType.class;
        Class<SerializationFeature> class2 = SerializationFeature.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class2);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        typeFactory0.moreSpecificType(mapLikeType0, mapLikeType0);
        Class<HashSet> class3 = HashSet.class;
        typeFactory0.constructCollectionType(class3, class2);
        Class<Object> class4 = Object.class;
        typeFactory0.constructGeneralizedType(mapLikeType0, class4);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<DeserializationFeature> class0 = DeserializationFeature.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        typeFactory0.moreSpecificType(collectionLikeType0, collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("Tnh>^XldB5.V~+;f!_P");
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<TreeSet> class0 = TreeSet.class;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, (TypeModifier[]) null, (ClassLoader) null);
        CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class0);
        typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) collectionLikeType0);
        Class<CollectionLikeType> class1 = CollectionLikeType.class;
        typeFactory0.constructCollectionType(class0, class1);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        Class<ArrayList> class0 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        TypeParser typeParser1 = new TypeParser(typeFactory0);
        typeFactory0.constructType((Type) collectionType0, (TypeBindings) null);
        Class<HashSet> class1 = HashSet.class;
        typeFactory0.constructCollectionType(class0, class0);
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider((DefaultSerializerProvider) null);
        ObjectReader objectReader0 = objectMapper1.readerFor(class0);
        TypeFactory typeFactory1 = objectReader0.getTypeFactory();
        CollectionType collectionType1 = typeFactory1.constructCollectionType(class1, class0);
        Class<Object> class2 = Object.class;
        typeFactory0.constructGeneralizedType(collectionType1, class2);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.findClass("int");
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
        typeFactory1.findClass("s`[");
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("void");
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("byte");
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SerializationFeature> class0 = SerializationFeature.class;
        typeFactory0.constructCollectionLikeType(class0, class0);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        Class<LinkedList> class0 = LinkedList.class;
        TypeFactory.rawClass(class0);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        JavaType[] javaTypeArray0 = new JavaType[0];
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
        typeFactory0.moreSpecificType(referenceType0, simpleType0);
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        typeFactory0.constructGeneralizedType(collectionType0, class0);
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        typeFactory0.moreSpecificType(simpleType0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumSet> class0 = EnumSet.class;
        Class<ArrayNode> class1 = ArrayNode.class;
        typeFactory0.constructCollectionType(class0, class1);
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayType> class0 = ArrayType.class;
        typeFactory0.constructParametrizedType(class0, class0, (JavaType[]) null);
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayType> class0 = ArrayType.class;
        JavaType javaType0 = TypeBase._bogusSuperClass(class0);
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
        MapType mapType1 = mapType0.withKeyType(simpleType0);
        MapType mapType2 = mapType1.withTypeHandler(javaType0);
        typeFactory0.moreSpecificType(javaType0, mapType2);
        typeFactory0.findClass("K_:");
    }

    @Test(timeout = 4000)
    public void test7272() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.findClass("double");
    }

    @Test(timeout = 4000)
    public void test7373() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        simpleType0.toString();
        Class<MapType> class0 = MapType.class;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test7474() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("long");
    }

    @Test(timeout = 4000)
    public void test7575() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.TYPE;
        Class<ArrayList> class1 = ArrayList.class;
        typeFactory0.constructRawCollectionType(class1);
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        objectMapper0.writeValueAsString(defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test7676() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        typeFactory0.constructMapType((Class<? extends Map>) null, class0, class0);
    }

    @Test(timeout = 4000)
    public void test7777() throws Throwable {
        NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "USE_WRAPPER_NAME_AS_PROPERTY_NAME");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        objectMapper_DefaultTypeResolverBuilder0.getDefaultImpl();
        typeFactory0.constructType((Type) null, (Class<?>) null);
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ReferenceType> class0 = ReferenceType.class;
    }

    @Test(timeout = 4000)
    public void test7878() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = null;
        typeFactory0.constructType((Type) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test7979() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.TYPE;
        Class<ArrayList> class1 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeParser typeParser1 = typeParser0.withFactory(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[9];
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        typeModifierArray0[0] = typeModifier0;
        typeModifierArray0[1] = typeModifier0;
        typeModifierArray0[2] = typeModifier0;
        typeModifierArray0[3] = typeModifier0;
        typeModifierArray0[4] = typeModifier0;
        typeModifierArray0[5] = typeModifier0;
        typeModifierArray0[6] = typeModifier0;
        typeModifierArray0[7] = typeModifier0;
        typeModifierArray0[8] = typeModifier0;
        TypeFactory typeFactory1 = new TypeFactory(typeParser1, typeModifierArray0);
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory1.constructParametricType(class0, javaTypeArray0);
        Class<ObjectMapper.DefaultTyping> class2 = ObjectMapper.DefaultTyping.class;
        TypeBindings typeBindings0 = TypeBindings.create(class1, javaType0);
        typeFactory0._constructSimple(class2, typeBindings0, collectionType0, javaTypeArray0);
        typeFactory0.findClass("");
    }

    @Test(timeout = 4000)
    public void test8080() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        Class<MapperFeature> class0 = MapperFeature.class;
        JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
        TypeBindings.create(class0, javaType0, javaType0);
    }

    @Test(timeout = 4000)
    public void test8181() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("boolean");
    }

    @Test(timeout = 4000)
    public void test8282() throws Throwable {
        TypeFactory.defaultInstance();
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        objectMapper0.readerFor(class0);
    }
}
