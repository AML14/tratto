/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:53:31 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.time.chrono.ThaiBuddhistEra;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MappingIterator_ESTest extends MappingIterator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        RawValue rawValue0 = new RawValue(arrayNode0);
        ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(valueNode0);
        MappingIterator<List<SettableBeanProperty>> mappingIterator0 = new MappingIterator<List<SettableBeanProperty>>((JavaType) null, jsonParser0, (DeserializationContext) null, (JsonDeserializer<?>) null, false, rawValue0);
        mappingIterator0.next();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MappingIterator<InputStream> mappingIterator0 = MappingIterator.emptyIterator();
        mappingIterator0._handleIOException((IOException) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse();
        MappingIterator<String> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) jsonParser0);
        Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        mappingIterator0.forEachRemaining(consumer0);
        jsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse();
        MappingIterator<String> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) jsonParser0);
        Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        mappingIterator0.forEachRemaining(consumer0);
        jsonParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse();
        Integer integer0 = new Integer(1);
        MappingIterator<SequenceInputStream> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) integer0);
        mappingIterator0.readAll();
        jsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Vector<Object> vector0 = new Vector<Object>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        char[] charArray0 = new char[2];
        charArray0[0] = '\"';
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        Class<InputStream> class0 = InputStream.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        MappingIterator<String> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) vector0);
        JsonParser jsonParser1 = mappingIterator0.getParser();
        jsonParser1.isExpectedStartArrayToken();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        MappingIterator<SequenceInputStream> mappingIterator0 = MappingIterator.emptyIterator();
        mappingIterator0.getCurrentLocation();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        MappingIterator<SequenceInputStream> mappingIterator0 = MappingIterator.emptyIterator();
        mappingIterator0.remove();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        MappingIterator<InputStream> mappingIterator0 = objectReader0.readValues("");
        FormatSchema formatSchema0 = mappingIterator0.getParserSchema();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        MappingIterator<SequenceInputStream> mappingIterator0 = MappingIterator.emptyIterator();
        mappingIterator0.nextValue();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Vector<Object> vector0 = new Vector<Object>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        char[] charArray0 = new char[2];
        charArray0[0] = '\"';
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        Class<InputStream> class0 = InputStream.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        MappingIterator<String> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) vector0);
        mappingIterator0._handleMappingException((JsonMappingException) null);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        MappingIterator<InputStream> mappingIterator0 = new MappingIterator<InputStream>((JavaType) null, (JsonParser) null, (DeserializationContext) null, (JsonDeserializer<?>) null, true, (Object) null);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        MappingIterator<SequenceInputStream> mappingIterator0 = MappingIterator.emptyIterator();
        mappingIterator0.close();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        char[] charArray0 = new char[2];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        MappingIterator<POJONode> mappingIterator0 = objectMapper0.readValues(jsonParser0, (ResolvedType) mapType0);
        mappingIterator0.close();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        MappingIterator<ThaiBuddhistEra> mappingIterator0 = MappingIterator.emptyIterator();
        Vector<Object> vector0 = new Vector<Object>();
        List<Object> list0 = mappingIterator0.readAll((List<Object>) vector0);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        char[] charArray0 = new char[2];
        charArray0[0] = '\"';
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        Class<InputStream> class0 = InputStream.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        MappingIterator<String> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) null);
        mappingIterator0.hasNextValue();
        Vector<String> vector0 = new Vector<String>();
        mappingIterator0.readAll((List<String>) vector0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        char[] charArray0 = new char[2];
        charArray0[0] = '\"';
        charArray0[1] = '\"';
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
        Class<Boolean> class0 = Boolean.class;
        MappingIterator<Boolean> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
        mappingIterator0.readAll((List<Boolean>) linkedList0);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        char[] charArray0 = new char[2];
        charArray0[0] = '\"';
        charArray0[1] = '\"';
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
        Class<Boolean> class0 = Boolean.class;
        MappingIterator<Boolean> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
        mappingIterator0.readAll((List<Boolean>) linkedList0);
        jsonParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SequenceInputStream> class0 = SequenceInputStream.class;
        MappingIterator<SequenceInputStream> mappingIterator0 = objectMapper0.readValues((JsonParser) null, class0);
        mappingIterator0.nextValue();
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        Class<Integer> class0 = Integer.class;
        MappingIterator<Integer> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        mappingIterator0.readAll((List<Integer>) linkedList0);
    }
}
