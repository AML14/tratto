/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 05:52:50 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.UUIDDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.util.EnumResolver;
import java.io.BufferedInputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.net.URI;
import java.net.URL;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.Locale;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdKeyDeserializer_ESTest extends StdKeyDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<Double> class0 = Double.class;
        StdKeyDeserializer.StringKD.forType(class0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<Double> class0 = Double.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0._parseDouble("k;vW");
        StdKeyDeserializer.forType(class0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<String> class0 = String.class;
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = (StdKeyDeserializer.StringKD) StdKeyDeserializer.forType(class0);
        stdKeyDeserializer_StringKD0._parse("2", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
        StdKeyDeserializer.forType(class0);
        StdKeyDeserializer.StringFactoryKeyDeserializer stdKeyDeserializer_StringFactoryKeyDeserializer0 = new StdKeyDeserializer.StringFactoryKeyDeserializer((Method) null);
        String string0 = null;
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<Float> class0 = Float.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("O`$n@n%-u\"m#~", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<URI> class0 = URI.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("r", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<UUID> class0 = UUID.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<Calendar> class0 = Calendar.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<Short> class0 = Short.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("CsrBx0T9R{=eprciP", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<Long> class0 = Long.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0._parse(" entries; now have ", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Character> class0 = Character.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0._parse(" entries; now have ", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Class<Byte> class0 = Byte.class;
        StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-450), class0);
        stdKeyDeserializer0._parseInt("not one of values excepted for Enum class: %s");
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<Double> class0 = Double.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("unable to parse key as currency", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<Double> class0 = Double.class;
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
        stdKeyDeserializer_DelegatingKD0.getKeyClass();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.copy();
        deserializerFactoryConfig0.abstractTypeResolvers();
        Class<Float> class0 = Float.class;
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
        stdKeyDeserializer_StringKD0.getKeyClass();
        Class<URL> class1 = URL.class;
        UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class1, uUIDDeserializer0);
        stdKeyDeserializer_DelegatingKD0.deserializeKey("a^2pm", defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        JsonDeserializer<Double> jsonDeserializer0 = (JsonDeserializer<Double>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
        stdKeyDeserializer_DelegatingKD0.deserializeKey((String) null, (DeserializationContext) null);
        stdKeyDeserializer_DelegatingKD0.deserializeKey((String) null, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Class<Character> class0 = Character.class;
        JsonDeserializer<MockCalendar> jsonDeserializer0 = (JsonDeserializer<MockCalendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
        stdKeyDeserializer_DelegatingKD0.getKeyClass();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        Deserializers.Base deserializers_Base0 = new Deserializers.Base();
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
        stdKeyDeserializer_DelegatingKD0.deserializeKey("QdhV(=5E0vd\"*]0P", defaultDeserializationContext0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Class<Object> class0 = Object.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("GFKT5EaYo$Ho&4D", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Class<Currency> class0 = Currency.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        Class<Float> class0 = Float.TYPE;
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
        stdKeyDeserializer_StringKD0.getKeyClass();
        System.setCurrentTimeMillis((-1L));
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Class<Integer> class0 = Integer.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Class<Locale> class0 = Locale.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("2", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Class<Character> class0 = Character.class;
        StdKeyDeserializer.forType(class0);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
        SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
        JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn("0").when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
        stdKeyDeserializer_DelegatingKD0.deserializeKey("WRITE_ENUMS_USING_INDEX", defaultDeserializationContext0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
        StdKeyDeserializer.forType(class0);
        StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
        String string0 = "3.FqqMu";
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Class<Calendar> class0 = Calendar.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey((String) null, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Class<Integer> class0 = Integer.class;
        JsonDeserializer<Double> jsonDeserializer0 = (JsonDeserializer<Double>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
        DeserializationContext deserializationContext0 = null;
        StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD((EnumResolver) null, (AnnotatedMethod) null);
        String string0 = " R!5";
        stdKeyDeserializer_EnumKD0._parse(string0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Class<URL> class0 = URL.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0._parse("T", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Class<Byte> class0 = Byte.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0._parse("Y", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0._parse("eJm8hER!,\"{:", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Class<Short> class0 = Short.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("2", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Class<Date> class0 = Date.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("2", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Class<Character> class0 = Character.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("2", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Class<Byte> class0 = Byte.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("2", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        Class<BufferedInputStream> class0 = BufferedInputStream.class;
        FromStringDeserializer<Character> fromStringDeserializer0 = (FromStringDeserializer<Character>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString(), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
        stdKeyDeserializer0.deserializeKey("JSON", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        JsonFactory jsonFactory0 = new JsonFactory();
        stdKeyDeserializer0.deserializeKey("true", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Class<Byte> class0 = Byte.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("9548", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Class<Short> class0 = Short.class;
        StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(15, class0);
        stdKeyDeserializer0._parse("k+4XFd@Le[ !N`$$L1`", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        Class<PropertyAccessor> class0 = PropertyAccessor.class;
        FromStringDeserializer<Long> fromStringDeserializer0 = (FromStringDeserializer<Long>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString(), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
        stdKeyDeserializer0.deserializeKey("JSON", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<Byte> class0 = Byte.TYPE;
        StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0);
        stdKeyDeserializer0.deserializeKey("false", defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Class<Short> class0 = Short.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        DeserializationContext deserializationContext0 = null;
        stdKeyDeserializer0._parse("-7", (DeserializationContext) null);
        Class<Byte> class1 = Byte.class;
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class1);
        stdKeyDeserializer0._parse("95148", (DeserializationContext) null);
        String string0 = "9548";
        stdKeyDeserializer1._parse(string0, deserializationContext0);
        String string1 = "B[Uf3[+Agf{}";
    }
}
