/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 05:33:14 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CollectionDeserializer_ESTest extends CollectionDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writeValueAsBytes(collectionDeserializer0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
        JsonParser jsonParser0 = arrayNode0.traverse();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        collectionDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) null, (TypeDeserializer) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        CollectionDeserializer collectionDeserializer1 = new CollectionDeserializer(collectionDeserializer0);
        collectionDeserializer1.isCachable();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        collectionDeserializer0.findBackReference("M}.Zg#SH!.h#p1YWd");
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, (ValueInstantiator) null);
        CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (TypeDeserializer) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<Object> class0 = Object.class;
        TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        Boolean boolean0 = Boolean.TRUE;
        CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, collectionDeserializer0, (TypeDeserializer) null, boolean0);
        boolean boolean1 = collectionDeserializer1.isCachable();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<SimpleModule> class0 = SimpleModule.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        Boolean boolean0 = Boolean.TRUE;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
        Class<Integer> class1 = Integer.class;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "0ZtIb{8$scA&Gfjc;5B", true, class1, jsonTypeInfo_As0);
        CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, asPropertyTypeDeserializer0, boolean0);
        collectionDeserializer1.isCachable();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<Object> class0 = Object.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        Boolean boolean0 = Boolean.TRUE;
        CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (TypeDeserializer) null, boolean0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<Object> class0 = Object.class;
        TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<RuntimeException> class1 = RuntimeException.class;
        JavaType javaType0 = typeFactory0.constructReferenceType(class1, resolvedRecursiveType0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
        Class<BooleanNode> class2 = BooleanNode.class;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "_ahMC~QJ9{m+JF^PXH", true, class2, jsonTypeInfo_As0);
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0, jsonLocationInstantiator0);
        boolean boolean0 = collectionDeserializer0.isCachable();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<InputStream> class0 = InputStream.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
        Class<RuntimeException> class1 = RuntimeException.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        Boolean boolean0 = Boolean.TRUE;
        CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved(collectionDeserializer0, (JsonDeserializer<?>) null, (TypeDeserializer) null, boolean0);
        boolean boolean1 = collectionDeserializer1.isCachable();
        collectionDeserializer0.isCachable();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Class<InputStream> class0 = InputStream.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
        Class<RuntimeException> class1 = RuntimeException.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        Boolean boolean0 = Boolean.TRUE;
        CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved(collectionDeserializer0, (JsonDeserializer<?>) null, (TypeDeserializer) null, boolean0);
        boolean boolean1 = collectionDeserializer1.isCachable();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, (ValueInstantiator) null);
        collectionDeserializer0.createContextual((DeserializationContext) null, (BeanProperty) null);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapLikeType> class0 = MapLikeType.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.enableDefaultTyping();
        Class<MapLikeType> class0 = MapLikeType.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
        JsonParser jsonParser0 = arrayNode0.traverse();
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
        JsonParser jsonParser0 = arrayNode0.traverse();
        Class<Locale> class0 = Locale.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 42);
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, coreXMLDeserializers_Std0, (TypeDeserializer) null, jsonLocationInstantiator0, coreXMLDeserializers_Std0, (Boolean) null);
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
        JsonParser jsonParser0 = arrayNode0.traverse();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
        filteringParserDelegate0.nextBooleanValue();
        Class<Locale> class0 = Locale.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 22);
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, coreXMLDeserializers_Std0, (TypeDeserializer) null, jsonLocationInstantiator0, coreXMLDeserializers_Std0, (Boolean) null);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) arrayList0);
        collectionDeserializer0.deserialize((JsonParser) filteringParserDelegate0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) arrayList0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
        JsonParser jsonParser0 = arrayNode0.traverse();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0.nextBooleanValue();
        Class<Locale> class0 = Locale.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 22);
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, coreXMLDeserializers_Std0, (TypeDeserializer) null, jsonLocationInstantiator0, coreXMLDeserializers_Std0, (Boolean) null);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Collection<Object> collection0 = collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) arrayList0);
        collectionDeserializer0.deserialize((JsonParser) filteringParserDelegate0, (DeserializationContext) null, collection0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
        JsonParser jsonParser0 = arrayNode0.traverse();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        Boolean boolean0 = Boolean.TRUE;
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) null, (Collection<Object>) arrayList0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
        JsonParser jsonParser0 = arrayNode0.traverse();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        Boolean boolean0 = Boolean.FALSE;
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) null, (Collection<Object>) arrayList0);
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) arrayList0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        Boolean boolean0 = Boolean.TRUE;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[0];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        Class<InputStream> class1 = InputStream.class;
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "END_ARRAY", true, class1);
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
        collectionDeserializer0.handleNonArray(jsonParser0, (DeserializationContext) null, arrayList0);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        Class<String> class0 = String.class;
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, arrayList0);
        collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference((UnresolvedForwardReference) null);
        collectionDeserializer_CollectionReferringAccumulator0.add(arrayList0);
        arrayList0.size();
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        Class<String> class0 = String.class;
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, arrayList0);
        collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference((UnresolvedForwardReference) null);
        collectionDeserializer_CollectionReferringAccumulator0.add(arrayList0);
        arrayList0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        Class<String> class0 = String.class;
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, arrayList0);
        collectionDeserializer_CollectionReferringAccumulator0.add(class0);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        Class<String> class0 = String.class;
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, arrayList0);
        JsonLocation jsonLocation0 = JsonLocation.NA;
        Class<SimpleModule> class1 = SimpleModule.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
        ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, resolvedRecursiveType0);
        ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
        UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, (String) null, jsonLocation0, readableObjectId0);
        collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
        collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference(arrayList0, arrayList0);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        Class<String> class0 = String.class;
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, arrayList0);
        JsonLocation jsonLocation0 = JsonLocation.NA;
        Class<SimpleModule> class1 = SimpleModule.class;
        ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class1, class0, arrayList0);
        ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
        UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, (String) null, jsonLocation0, readableObjectId0);
        collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
        collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference(arrayList0, arrayList0);
        arrayList0.isEmpty();
    }
}
