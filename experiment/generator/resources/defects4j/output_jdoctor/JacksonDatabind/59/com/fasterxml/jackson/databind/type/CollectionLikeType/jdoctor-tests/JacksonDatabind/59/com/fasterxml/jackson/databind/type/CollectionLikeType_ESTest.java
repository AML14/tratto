/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 04:21:15 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CollectionLikeType_ESTest extends CollectionLikeType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
        String string0 = collectionLikeType0.getErasedSignature();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
        String string0 = collectionLikeType0.getTypeName();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        Class<ReferenceType> class0 = ReferenceType.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(collectionLikeType0);
        collectionLikeType1.equals((Object) collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        Class<ReferenceType> class0 = ReferenceType.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(collectionLikeType0);
        collectionLikeType1.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        Class<ReferenceType> class0 = ReferenceType.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(collectionLikeType0);
        collectionLikeType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        Class<CollectionType> class1 = CollectionType.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
        CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) resolvedRecursiveType0);
        collectionType0.getContentValueHandler();
        collectionType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        Class<Integer> class1 = Integer.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (JavaType) mapType0);
        collectionLikeType0.getContentTypeHandler();
        collectionLikeType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        Class<MapLikeType> class1 = MapLikeType.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        JavaType javaType0 = collectionLikeType0.refine(class1, typeBindings0, simpleType0, (JavaType[]) null);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
        String string0 = collectionLikeType0.getGenericSignature();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(simpleType0);
        collectionLikeType1.equals((Object) collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(simpleType0);
        collectionLikeType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(simpleType0);
        collectionLikeType1.equals((Object) collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(simpleType0);
        collectionLikeType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        Class<MapLikeType> class0 = MapLikeType.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
        collectionLikeType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
        CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentValueHandler(simpleType0);
        collectionLikeType1.equals((Object) collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
        Class<Object> class0 = Object.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        JavaType javaType0 = collectionLikeType0._narrow(class0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        collectionLikeType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        collectionLikeType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        JavaType javaType0 = collectionLikeType0.withContentType(collectionLikeType0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        JavaType javaType0 = collectionLikeType0.withContentType(collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        JavaType javaType0 = collectionLikeType0.withContentType(collectionLikeType0);
        javaType0.equals((Object) collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        JavaType javaType0 = collectionLikeType0.withContentType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        JavaType javaType0 = collectionLikeType0.withContentType(simpleType0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1725() throws Throwable {
        Class<MapType> class0 = MapType.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        MapLikeType mapLikeType0 = new MapLikeType(resolvedRecursiveType0, simpleType0, resolvedRecursiveType0);
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType0 = new CollectionLikeType(class0, (TypeBindings) null, mapLikeType0, (JavaType[]) null, simpleType0, simpleType0, collectionType0, true);
        CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        JavaType[] javaTypeArray0 = new JavaType[0];
        TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
        Class<HashMap> class1 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        CollectionLikeType collectionLikeType0 = new CollectionLikeType(class0, typeBindings0, simpleType0, javaTypeArray0, simpleType0, typeBindings0, mapType0, true);
        boolean boolean0 = collectionLikeType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1927() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        CollectionLikeType collectionLikeType0 = collectionType0.withContentValueHandler(class0);
        boolean boolean0 = collectionLikeType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        CollectionLikeType collectionLikeType0 = collectionType0.withContentValueHandler(class0);
        boolean boolean0 = collectionLikeType0.hasHandlers();
        collectionType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        JavaType[] javaTypeArray0 = new JavaType[8];
        CollectionType collectionType0 = new CollectionType(simpleType0, javaTypeArray0[1]);
        String string0 = collectionType0.buildCanonicalName();
    }

    @Test(timeout = 4000)
    public void test2130() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
        String string0 = collectionLikeType0.buildCanonicalName();
    }

    @Test(timeout = 4000)
    public void test2231() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
        boolean boolean0 = collectionLikeType0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test2332() throws Throwable {
        Class<ObjectReader> class0 = ObjectReader.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
        boolean boolean0 = collectionLikeType1.equals(collectionLikeType0);
        collectionLikeType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test2333() throws Throwable {
        Class<ObjectReader> class0 = ObjectReader.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
        boolean boolean0 = collectionLikeType1.equals(collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test2435() throws Throwable {
        Class<ObjectReader> class0 = ObjectReader.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class0, (JavaType) collectionLikeType0);
        boolean boolean0 = collectionLikeType1.equals(collectionLikeType0);
        collectionLikeType0.equals((Object) collectionLikeType1);
    }

    @Test(timeout = 4000)
    public void test2436() throws Throwable {
        Class<ObjectReader> class0 = ObjectReader.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class0, (JavaType) collectionLikeType0);
        boolean boolean0 = collectionLikeType1.equals(collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test2437() throws Throwable {
        Class<ObjectReader> class0 = ObjectReader.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class0, (JavaType) collectionLikeType0);
        boolean boolean0 = collectionLikeType1.equals(collectionLikeType0);
        collectionLikeType1.useStaticType();
    }
}
