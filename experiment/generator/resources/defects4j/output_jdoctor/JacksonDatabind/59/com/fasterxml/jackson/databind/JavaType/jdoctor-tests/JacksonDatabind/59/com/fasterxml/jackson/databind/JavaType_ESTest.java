/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 04:12:26 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.sql.BatchUpdateException;
import java.sql.SQLTimeoutException;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JavaType_ESTest extends JavaType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<Object> class0 = Object.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        arrayType0.getContentValueHandler();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        collectionType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<Object> class0 = Object.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        Class<Integer> class1 = Integer.class;
        resolvedRecursiveType0.forcedNarrowBy(class1);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<String> class0 = String.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        TypeBindings typeBindings0 = resolvedRecursiveType0.getBindings();
        resolvedRecursiveType0.containedTypeName(309);
        ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0, (Object) null, (Object) class0);
        arrayType0.withContentTypeHandler(class0);
        ArrayType arrayType1 = arrayType0.withStaticTyping();
        arrayType1.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<Object> class0 = Object.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isReferenceType();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<Throwable> class0 = Throwable.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        resolvedRecursiveType0.containedTypeOrUnknown(183);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<Object> class0 = Object.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.getGenericSignature();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<Throwable> class0 = Throwable.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        resolvedRecursiveType0.hasGenericTypes();
        resolvedRecursiveType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<Object> class0 = Object.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Object> class0 = Object.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        resolvedRecursiveType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class0 = Object.class;
        objectMapper0.readerFor(class0);
        Stack<JavaType> stack0 = new Stack<JavaType>();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<String> class0 = String.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        resolvedRecursiveType0.isThrowable();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<String> class0 = String.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isTypeOrSubTypeOf(class0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        Class<LinkedList> class1 = LinkedList.class;
        CollectionType collectionType0 = typeFactory1.constructCollectionType(class1, class1);
        collectionType0.hasGenericTypes();
        collectionType0.withContentTypeHandler(classLoader0);
        TypeFactory typeFactory2 = TypeFactory.defaultInstance();
        ArrayType arrayType0 = typeFactory2.constructArrayType((JavaType) collectionLikeType0);
        Object object0 = new Object();
        ArrayType arrayType1 = arrayType0.withContentTypeHandler(object0);
        arrayType1.equals("");
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Class<Integer> class0 = Integer.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null);
        ArrayType arrayType1 = arrayType0.withContentTypeHandler(resolvedRecursiveType0);
        Object object0 = new Object();
        ArrayType arrayType2 = arrayType1.withValueHandler(object0);
        arrayType2.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<Integer> class0 = Integer.TYPE;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        Class<String> class1 = String.class;
        resolvedRecursiveType0.isTypeOrSubTypeOf(class1);
        resolvedRecursiveType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Class<Object> class0 = Object.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.hasContentType();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Class<Integer> class0 = Integer.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        resolvedRecursiveType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Class<Throwable> class0 = Throwable.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        Class<Object> class1 = Object.class;
        resolvedRecursiveType0.isTypeOrSubTypeOf(class1);
        resolvedRecursiveType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Class<Object> class0 = Object.class;
        Stack<JavaType> stack0 = new Stack<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
        Class<String> class1 = String.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
        JavaType[] javaTypeArray0 = new JavaType[2];
        javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
        javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
        javaTypeArray0[0].containedTypeOrUnknown((-2831));
        Object object0 = new Object();
        Class<Object> class2 = Object.class;
        javaTypeArray0[1].isTypeOrSubTypeOf(class2);
        Integer integer0 = new Integer(1585);
        Class<Integer> class3 = Integer.TYPE;
        resolvedRecursiveType0.forcedNarrowBy(class3);
        resolvedRecursiveType0.getContentTypeHandler();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<Object> class0 = Object.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.forcedNarrowBy(class0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        resolvedRecursiveType0.getErasedSignature();
        resolvedRecursiveType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Class<Object> class0 = Object.class;
        Stack<JavaType> stack0 = new Stack<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
        typeBindings0.toString();
        Class<String> class1 = String.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
        ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
        boolean default0;
        default0 = resolvedRecursiveType1.isContainerType();
        assertTrue(resolvedRecursiveType1.isArrayType() ? default0 == true : true);
        resolvedRecursiveType0.getParameterSource();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Class<Object> class0 = Object.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        FileSystemHandling.shouldAllThrowIOExceptions();
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
        Class<Integer> class1 = Integer.class;
        referenceType0.forcedNarrowBy(class1);
        referenceType0.withContentType(resolvedRecursiveType0);
        referenceType0.getKeyType();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Class<Object> class0 = Object.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        boolean default1;
        default1 = resolvedRecursiveType0.isContainerType();
        assertTrue(resolvedRecursiveType0.isArrayType() ? default1 == true : true);
        resolvedRecursiveType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class0 = Object.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        objectReader0.getTypeFactory();
        Stack<JavaType> stack0 = new Stack<JavaType>();
        Class<Throwable> class1 = Throwable.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        Class<Object> class1 = Object.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("mnZp4}A1@@'EG", "Pc(9", 6134);
        BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
        JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(batchUpdateException0);
        objectMapper0.writerFor(javaType0);
        objectMapper0.readerFor(class1);
        FileSystemHandling.shouldAllThrowIOExceptions();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Class<Object> class0 = Object.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        resolvedRecursiveType0.getContentValueHandler();
        CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<Integer> class0 = Integer.TYPE;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Class<Object> class0 = Object.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        resolvedRecursiveType0.hasValueHandler();
    }
}
