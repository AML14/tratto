/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 02:05:26 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LinkedNode;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DeserializationConfig_ESTest extends DeserializationConfig_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        deserializationConfig0.introspectForCreation((JavaType) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((HandlerInstantiator) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        arrayNode0.isFloat();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Locale locale0 = Locale.KOREA;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(locale0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Locale locale0 = Locale.KOREA;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(locale0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<InputStream> class0 = InputStream.class;
        deserializationConfig0.introspectDirectClassAnnotations(class0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonInclude.Value jsonInclude_Value0 = deserializationConfig0.getDefaultPropertyInclusion();
        jsonInclude_Value0.getValueInclusion();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectReader> class0 = ObjectReader.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        ObjectReader objectReader1 = objectReader0.with((JsonNodeFactory) null);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        HashMap<ObjectIdResolver, SettableBeanProperty> hashMap0 = new HashMap<ObjectIdResolver, SettableBeanProperty>();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withAttributes(hashMap0);
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        HashMap<ObjectIdResolver, SettableBeanProperty> hashMap0 = new HashMap<ObjectIdResolver, SettableBeanProperty>();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withAttributes(hashMap0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        deserializationConfig0.introspectForBuilder((JavaType) null);
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<DeserializationFeature> class0 = DeserializationFeature.class;
        JsonInclude.Value jsonInclude_Value0 = deserializationConfig0.getDefaultPropertyInclusion(class0);
        jsonInclude_Value0.getContentInclusion();
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withAppendedAnnotationIntrospector(annotationIntrospector0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withAppendedAnnotationIntrospector(annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withInsertedAnnotationIntrospector((AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<Object> class0 = Object.class;
        JsonFormat.Value jsonFormat_Value0 = deserializationConfig0.getDefaultPropertyFormat(class0);
        jsonFormat_Value0.hasPattern();
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((ClassIntrospector) basicClassIntrospector0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((ClassIntrospector) basicClassIntrospector0);
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        LinkedNode<DeserializationProblemHandler> linkedNode0 = deserializationConfig0.getProblemHandlers();
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((PropertyNamingStrategy) null);
    }

    @Test(timeout = 4000)
    public void test1823() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        VisibilityChecker<?> visibilityChecker0 = deserializationConfig0.getDefaultVisibilityChecker();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(visibilityChecker0);
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, (SimpleMixInResolver) null);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
    }

    @Test(timeout = 4000)
    public void test2126() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((Base64Variant) null);
    }

    @Test(timeout = 4000)
    public void test2127() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((Base64Variant) null);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2228() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(dateFormat0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2229() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(dateFormat0);
    }

    @Test(timeout = 4000)
    public void test2330() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test2431() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        BaseSettings baseSettings1 = deserializationConfig0.getBaseSettings();
    }

    @Test(timeout = 4000)
    public void test2532() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test2533() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((AnnotationIntrospector) null);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2634() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TimeZone timeZone0 = TimeZone.getDefault();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(timeZone0);
    }

    @Test(timeout = 4000)
    public void test2635() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TimeZone timeZone0 = TimeZone.getDefault();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(timeZone0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2736() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test2837() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
        mapperFeatureArray0[1] = mapperFeature1;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test2838() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
        mapperFeatureArray0[1] = mapperFeature1;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2839() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
        mapperFeatureArray0[1] = mapperFeature1;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test2840() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
        mapperFeatureArray0[1] = mapperFeature1;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
        deserializationConfig1.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test2941() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
        MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        mapperFeatureArray0[2] = mapperFeatureArray0[1];
        mapperFeatureArray0[3] = mapperFeatureArray0[2];
        ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test3042() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, true);
    }

    @Test(timeout = 4000)
    public void test3143() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test3244() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((SubtypeResolver) stdSubtypeResolver0);
    }

    @Test(timeout = 4000)
    public void test3345() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.construct("JSON", "JSON");
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName((PropertyName) null);
        deserializationConfig2.useRootWrapping();
    }

    @Test(timeout = 4000)
    public void test3346() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.construct("JSON", "JSON");
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName((PropertyName) null);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3347() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.construct("JSON", "JSON");
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName((PropertyName) null);
        deserializationConfig1.useRootWrapping();
    }

    @Test(timeout = 4000)
    public void test3448() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName((PropertyName) null);
    }

    @Test(timeout = 4000)
    public void test3549() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.construct("JSON", "JSON");
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName(propertyName0);
        deserializationConfig2.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3550() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.construct("JSON", "JSON");
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName(propertyName0);
        deserializationConfig2.useRootWrapping();
    }

    @Test(timeout = 4000)
    public void test3651() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<Object> class0 = Object.class;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withView(class0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withView(class0);
    }

    @Test(timeout = 4000)
    public void test3652() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<Object> class0 = Object.class;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withView(class0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withView(class0);
        deserializationConfig2.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3753() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutAttribute((Object) null);
    }

    @Test(timeout = 4000)
    public void test3854() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3855() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test3856() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
        deserializationConfig1.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test3957() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test4058() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test4059() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
        deserializationConfig1.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test4060() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4161() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4262() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4263() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
        deserializationConfig1.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test4264() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test4365() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4466() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test4467() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4568() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test4669() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0, deserializationFeatureArray0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4670() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0, deserializationFeatureArray0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test4771() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        deserializationConfig0.without(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4872() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4973() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(deserializationFeatureArray0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4974() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(deserializationFeatureArray0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test5075() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test5176() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
        deserializationConfig2.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5177() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test5178() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
        deserializationConfig2.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test5279() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test5380() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test5381() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
        deserializationConfig1.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test5382() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5383() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test5484() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test5485() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
        deserializationConfig2.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test5486() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
        deserializationConfig2.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5587() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
        deserializationConfig2.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5588() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test5590() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
        deserializationConfig2.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test5691() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test5693() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test5694() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5795() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(jsonParser_FeatureArray0);
        deserializationConfig2.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5796() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test5797() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(jsonParser_FeatureArray0);
        deserializationConfig2.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test5898() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test5999() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(3, 3).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test59100() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(3, 3).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test59101() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(3, 3).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
        deserializationConfig1.shouldSortPropertiesAlphabetically();
    }

    @Test(timeout = 4000)
    public void test60102() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
    }

    @Test(timeout = 4000)
    public void test61103() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 322).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
    }

    @Test(timeout = 4000)
    public void test61104() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 322).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test61105() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 322).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test62106() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(2403, 2403, 579, 1024, 579).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(formatFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test62108() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(2403, 2403, 579, 1024, 579).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(formatFeatureArray0);
        deserializationConfig2.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test62109() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(2403, 2403, 579, 1024, 579).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(formatFeatureArray0);
        deserializationConfig2.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test63110() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test64111() throws Throwable {
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(123, 123, 192, 123).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(formatFeature0);
    }

    @Test(timeout = 4000)
    public void test64112() throws Throwable {
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(123, 123, 192, 123).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(formatFeature0);
        deserializationConfig2.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test64113() throws Throwable {
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(123, 123, 192, 123).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(formatFeature0);
        deserializationConfig2.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test65115() throws Throwable {
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(formatFeature0);
    }

    @Test(timeout = 4000)
    public void test66116() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(2403, 2403, 579, 1024, 579).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(formatFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test66117() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(2403, 2403, 579, 1024, 579).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(formatFeatureArray0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test66118() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(2403, 2403, 579, 1024, 579).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(formatFeatureArray0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test67119() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(formatFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test68120() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonNodeFactory0);
    }

    @Test(timeout = 4000)
    public void test69121() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler((DeserializationProblemHandler) null);
        deserializationConfig2.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test69122() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler((DeserializationProblemHandler) null);
    }

    @Test(timeout = 4000)
    public void test70124() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withNoProblemHandlers();
    }

    @Test(timeout = 4000)
    public void test70125() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withNoProblemHandlers();
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test71126() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withNoProblemHandlers();
    }

    @Test(timeout = 4000)
    public void test72127() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DeserializationFeature> class0 = DeserializationFeature.class;
        objectMapper0.readValue("JSON", class0);
    }

    @Test(timeout = 4000)
    public void test73128() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        deserializationConfig1.initialize((JsonParser) null);
    }

    @Test(timeout = 4000)
    public void test74129() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1), (-1)).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(formatFeature0);
        deserializationConfig1.initialize((JsonParser) null);
    }

    @Test(timeout = 4000)
    public void test75130() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
        deserializationConfig1.getAnnotationIntrospector();
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test75131() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
        deserializationConfig1.getAnnotationIntrospector();
        deserializationConfig1.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test75132() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
        deserializationConfig1.getAnnotationIntrospector();
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test76133() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        mapperFeatureArray0[2] = mapperFeatureArray0[1];
        mapperFeatureArray0[3] = mapperFeatureArray0[0];
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_SETTERS;
        mapperFeatureArray0[4] = mapperFeature1;
        mapperFeatureArray0[5] = mapperFeatureArray0[2];
        mapperFeatureArray0[6] = mapperFeatureArray0[4];
        mapperFeatureArray0[7] = mapperFeature0;
        mapperFeatureArray0[8] = mapperFeatureArray0[0];
        objectMapper0.disable(mapperFeatureArray0);
        Class<ObjectReader> class0 = ObjectReader.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test77134() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectReader> class0 = ObjectReader.class;
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[6];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_CREATORS;
        mapperFeatureArray0[1] = mapperFeature1;
        mapperFeatureArray0[2] = mapperFeatureArray0[1];
        mapperFeatureArray0[3] = mapperFeatureArray0[0];
        mapperFeatureArray0[4] = mapperFeature0;
        mapperFeatureArray0[5] = mapperFeatureArray0[3];
        objectMapper0.disable(mapperFeatureArray0);
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test78135() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
        MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_FIELDS;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeature0;
        objectMapper0.disable(mapperFeatureArray0);
        Class<ObjectReader> class0 = ObjectReader.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test79136() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.construct("", (String) null);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        boolean boolean0 = deserializationConfig1.useRootWrapping();
    }

    @Test(timeout = 4000)
    public void test79137() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.construct("", (String) null);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        boolean boolean0 = deserializationConfig1.useRootWrapping();
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test80139() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.construct("", "");
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        boolean boolean0 = deserializationConfig1.useRootWrapping();
    }

    @Test(timeout = 4000)
    public void test80140() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.construct("", "");
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        boolean boolean0 = deserializationConfig1.useRootWrapping();
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test81141() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        boolean boolean0 = deserializationConfig0.isEnabled(jsonParser_Feature0, jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test82142() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
        deserializationConfig1.isAnnotationProcessingEnabled();
    }

    @Test(timeout = 4000)
    public void test82143() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
        deserializationConfig1.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test82144() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test83145() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        boolean boolean0 = deserializationConfig0.hasDeserializationFeatures(1187);
    }

    @Test(timeout = 4000)
    public void test84146() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        boolean boolean0 = deserializationConfig0.hasDeserializationFeatures(10496);
    }

    @Test(timeout = 4000)
    public void test85147() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        boolean boolean0 = deserializationConfig0.hasSomeOfFeatures(1);
    }

    @Test(timeout = 4000)
    public void test86148() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        boolean boolean0 = deserializationConfig0.hasSomeOfFeatures(741);
    }

    @Test(timeout = 4000)
    public void test87149() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        BaseSettings baseSettings1 = baseSettings0.withClassIntrospector(basicClassIntrospector0);
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        BaseSettings baseSettings2 = baseSettings1.withTypeResolverBuilder(stdTypeResolverBuilder0);
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings2, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JavaType javaType0 = TypeFactory.unknownType();
        TypeDeserializer typeDeserializer0 = deserializationConfig0.findTypeDeserializer(javaType0);
    }

    @Test(timeout = 4000)
    public void test88150() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        BaseSettings baseSettings1 = baseSettings0.withClassIntrospector(basicClassIntrospector0);
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JavaType javaType0 = TypeFactory.unknownType();
        TypeDeserializer typeDeserializer0 = deserializationConfig0.findTypeDeserializer(javaType0);
    }
}
