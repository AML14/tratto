/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:41:41 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
import com.fasterxml.jackson.databind.ser.std.MapSerializer;
import com.fasterxml.jackson.databind.ser.std.StdArraySerializers;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanSerializerBase_ESTest extends BeanSerializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];
        BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
        JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer1);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer((NameTransformer) null);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];
        BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
        JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer((NameTransformer) null);
        jsonSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];
        BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer0);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[13];
        BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
        beanSerializer0.resolve(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        objectMapper0.convertValue((Object) objectReader0, class0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "dHf-,14`G6vKR]3");
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        objectMapper0.convertValue((Object) beanSerializerBuilder0, class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<StdArraySerializers.BooleanArraySerializer> class0 = StdArraySerializers.BooleanArraySerializer.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionLikeType0);
        boolean boolean0 = beanSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<StdArraySerializers.LongArraySerializer> class0 = StdArraySerializers.LongArraySerializer.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        ObjectIdGenerator<AsExistingPropertyTypeSerializer> objectIdGenerator0 = (ObjectIdGenerator<AsExistingPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator0, true);
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
        boolean boolean0 = beanSerializerBase0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "M");
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        objectMapper0.convertValue((Object) objectReader0, class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getAnySetterMethod();
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
        doReturn((Map) null).when(pOJOPropertiesCollector0).getInjectables();
        doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, (PropertyName) null, (ObjectIdGenerator<?>) null, false);
        beanSerializerBuilder0.setObjectIdWriter(objectIdWriter0);
        BeanSerializer beanSerializer0 = new BeanSerializer(objectIdWriter0.idType, beanSerializerBuilder0, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanSerializer0.serializeWithType((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl0, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
        AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "4;3Hlh@7!7'BR!Bd)Z");
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, classNameIdResolver0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanSerializer0.serializeWithType(uTF8JsonGenerator0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0, asExistingPropertyTypeSerializer0);
        uTF8JsonGenerator0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        JsonFactory jsonFactory0 = new JsonFactory();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];
        BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
        beanSerializer0.serialize(jsonEncoding0, jsonGenerator0, defaultSerializerProvider_Impl0);
        jsonGenerator0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ((BeanSerializerBase) beanSerializer0).serializeFieldsFiltered(beanSerializer0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        JsonFactory jsonFactory0 = new JsonFactory();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[9];
        BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
        ((BeanSerializerBase) beanSerializer0).serializeFieldsFiltered(jsonFactory0, jsonGenerator0, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[13];
        BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
        beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        beanSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, simpleType0);
        simpleType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        beanSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, simpleType0);
        beanSerializer0.isUnwrappingSerializer();
    }
}
