/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 07:37:48 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassStack;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.lang.reflect.Array;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.time.chrono.ChronoLocalDate;
import java.util.Collection;
import java.util.EnumSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<DeserializationFeature> class0 = DeserializationFeature.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<DeserializationFeature> class0 = DeserializationFeature.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);
        javaType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleType> class0 = SimpleType.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        JavaType[] javaTypeArray0 = new JavaType[1];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
        objectMapper0.convertValue((Object) typeBindings0, (JavaType) collectionType0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<PlaceholderForType> class0 = PlaceholderForType.class;
        Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<PlaceholderForType> class0 = PlaceholderForType.class;
        Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<PlaceholderForType> class0 = PlaceholderForType.class;
        Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Class<LinkedList> class0 = LinkedList.class;
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapperFeature> class0 = MapperFeature.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapperFeature> class0 = MapperFeature.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        javaType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<IntNode> class0 = IntNode.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        JavaType javaType0 = typeFactory0.constructType((Type) mapLikeType0, (Class<?>) class0);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SerializationFeature> class0 = SerializationFeature.class;
        Class<AnnotationIntrospector.ReferenceProperty.Type> class1 = AnnotationIntrospector.ReferenceProperty.Type.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class1, javaTypeArray0);
        javaType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SerializationFeature> class0 = SerializationFeature.class;
        Class<AnnotationIntrospector.ReferenceProperty.Type> class1 = AnnotationIntrospector.ReferenceProperty.Type.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class1, javaTypeArray0);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapperFeature> class0 = MapperFeature.class;
        typeFactory0.constructParametrizedType(class0, class0, (Class<?>[]) null);
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.clearCache();
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        collectionLikeType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        collectionLikeType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        JavaType javaType0 = typeFactory0.constructSpecializedType(collectionType0, class0);
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        Class<LinkedList> class0 = LinkedList.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SimpleType> class1 = SimpleType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
        collectionLikeType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructType((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructRawMapType(class0);
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.hasContentType();
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("long");
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
        typeFactory1.findClass("");
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0, (TypeBindings) null);
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        typeFactory0.constructReferenceType(class0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
        typeFactory1.equals((Object) typeFactory0);
    }

    @Test(timeout = 4000)
    public void test2127() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        typeFactory0.constructArrayType(javaType0);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        typeFactory0.constructArrayType(javaType0);
        javaType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2229() throws Throwable {
        TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
    }

    @Test(timeout = 4000)
    public void test2330() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);
    }

    @Test(timeout = 4000)
    public void test2431() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
    }

    @Test(timeout = 4000)
    public void test2532() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        Class<?> class0 = TypeFactory.rawClass(simpleType0);
        class0.isEnum();
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        Class<LinkedList> class0 = LinkedList.class;
        Class<?> class1 = TypeFactory.rawClass(class0);
        class1.isAnnotation();
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("[nF.L`2EoWM;f");
    }

    @Test(timeout = 4000)
    public void test2835() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("int");
        class0.isAnnotation();
    }

    @Test(timeout = 4000)
    public void test2936() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0.findClass("float");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3037() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("double");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3138() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0.findClass("boolean");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3239() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("byte");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3340() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("char");
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test3441() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("short");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3542() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("void");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3643() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Double> class0 = Double.TYPE;
        JavaType javaType0 = TypeFactory.unknownType();
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test3644() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Double> class0 = Double.TYPE;
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isFinal();
    }

    @Test(timeout = 4000)
    public void test3745() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test3846() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
        javaType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test3947() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        Class<Object> class1 = Object.class;
        typeFactory0.constructGeneralizedType(collectionType0, class1);
        collectionType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test4048() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        JavaType javaType0 = typeFactory0.constructGeneralizedType(collectionType0, class0);
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test4149() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        Class<Object> class0 = Object.class;
        typeFactory0.constructGeneralizedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test4250() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        Class<ArrayType> class0 = ArrayType.class;
        typeFactory0.constructGeneralizedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test4351() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SimpleType> class0 = SimpleType.class;
        Class<Integer> class1 = Integer.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class1);
    }

    @Test(timeout = 4000)
    public void test4452() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        ClassStack classStack0 = new ClassStack(class0);
        PlaceholderForType placeholderForType0 = new PlaceholderForType((-465));
        TypeBindings typeBindings0 = placeholderForType0.getBindings();
        JavaType javaType0 = typeFactory0._fromClass(classStack0, class0, typeBindings0);
        JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, placeholderForType0);
        javaType1.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test4553() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test4654() throws Throwable {
        LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1757, 200);
        TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
        JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test4755() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        JavaType javaType0 = typeFactory0.moreSpecificType(resolvedRecursiveType0, resolvedRecursiveType0);
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test4856() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, simpleType0);
        javaType1.isFinal();
    }

    @Test(timeout = 4000)
    public void test4957() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        javaType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test5058() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructType((Type) null, (Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test5159() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        JavaType javaType0 = typeFactory0.constructType((Type) collectionType0, (Class<?>) class0);
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test5260() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<IntNode> class0 = IntNode.class;
        typeFactory0.constructMapType((Class<? extends Map>) null, class0, (Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test5361() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructMapType(class0, class0, class0);
    }

    @Test(timeout = 4000)
    public void test5462() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<RuntimeException> class0 = RuntimeException.class;
        Class<CollectionType>[] classArray0 = (Class<CollectionType>[]) Array.newInstance(Class.class, 1);
        typeFactory0.constructParametricType(class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test5563() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.setTypeFactory(typeFactory0);
        Integer integer0 = new Integer(2449);
        AtomicReference<Integer> atomicReference0 = new AtomicReference<Integer>(integer0);
        Class<CollectionType> class0 = CollectionType.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        CollectionType collectionType0 = new CollectionType(arrayType0, arrayType0);
        objectMapper0.convertValue((Object) atomicReference0, (JavaType) collectionType0);
    }

    @Test(timeout = 4000)
    public void test5664() throws Throwable {
        LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1023, (-17));
        TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
        Class<DeserializationFeature> class0 = DeserializationFeature.class;
        Class<LinkedList> class1 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (JavaType) collectionType0);
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0._constructSimple(class0, typeBindings0, collectionType0, javaTypeArray0);
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test5765() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    }

    @Test(timeout = 4000)
    public void test5766() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test5867() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn(simpleType0, simpleType0).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        Class<MapperFeature> class0 = MapperFeature.class;
        MapLikeType mapLikeType0 = typeFactory1.constructRawMapLikeType(class0);
        mapLikeType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test5968() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        doReturn((String) null).when(typeModifier0).toString();
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        Class<IntNode> class0 = IntNode.class;
        typeFactory1.constructRawMapLikeType(class0);
    }

    @Test(timeout = 4000)
    public void test6069() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumSet> class0 = EnumSet.class;
        Class<Object> class1 = Object.class;
        SimpleType simpleType0 = new SimpleType(class1);
        CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) simpleType0);
        collectionType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test6170() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
        doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
        doReturn((Type) null).when(parameterizedType0).getRawType();
        typeFactory0._fromParamType((ClassStack) null, parameterizedType0, (TypeBindings) null);
    }
}
