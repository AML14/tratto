/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 08:43:58 GMT 2024
 */
package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.FieldPosition;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.KOREA;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
        stdDateFormat1.format((Date) mockDate0, stringBuffer0, fieldPosition0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
        boolean boolean0 = stdDateFormat1.equals(stdDateFormat0);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
        boolean boolean0 = stdDateFormat1.equals(stdDateFormat0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.instance.parseObject("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("0000-00-00");
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        String string0 = stdDateFormat0.instance.toString();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        String string0 = stdDateFormat0.instance.toString();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.ITALIAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        TimeZone timeZone1 = stdDateFormat0.getTimeZone();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.ITALIAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        TimeZone timeZone1 = stdDateFormat0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Date date0 = stdDateFormat0.parse("-0");
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.CHINA;
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getRFC1123Format(timeZone0, locale0);
        mockSimpleDateFormat0.toLocalizedPattern();
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        Boolean boolean0 = Boolean.TRUE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
        stdDateFormat0.hashCode();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getISO8601Format(timeZone0, locale0);
        mockSimpleDateFormat0.toLocalizedPattern();
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        boolean boolean0 = stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ZoneInfo zoneInfo0 = (ZoneInfo) StdDateFormat.DEFAULT_TIMEZONE;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(zoneInfo0);
        stdDateFormat1._parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (ParsePosition) null);
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
        StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone((TimeZone) null);
        stdDateFormat2.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
        StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        TimeZone timeZone0 = TimeZone.getTimeZone("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
        TimeZone timeZone1 = TimeZone.getDefault();
        StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone(timeZone1);
    }

    @Test(timeout = 4000)
    public void test1320() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        TimeZone timeZone0 = TimeZone.getTimeZone("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
        TimeZone timeZone1 = TimeZone.getDefault();
        StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone(timeZone1);
        stdDateFormat2.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Locale locale0 = Locale.JAPAN;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        stdDateFormat1.parse("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Locale locale0 = Locale.US;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Locale locale0 = Locale.US;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Boolean boolean0 = Boolean.valueOf("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
        stdDateFormat1.isLenient();
    }

    @Test(timeout = 4000)
    public void test1625() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Boolean boolean0 = Boolean.valueOf("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.instance.withColonInTimeZone(true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1236), "W46}d3");
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer("YgRImEk/}-");
        stdDateFormat1._format(simpleTimeZone0, (Locale) null, mockDate0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1727() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.instance.withColonInTimeZone(true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1236), "W46}d3");
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer("YgRImEk/}-");
        stdDateFormat1._format(simpleTimeZone0, (Locale) null, mockDate0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1828() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
    }

    @Test(timeout = 4000)
    public void test1929() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.TAIWAN;
        Boolean boolean0 = Boolean.FALSE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
        stdDateFormat0.setTimeZone(timeZone0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1930() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.TAIWAN;
        Boolean boolean0 = Boolean.FALSE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
        stdDateFormat0.setTimeZone(timeZone0);
        stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test2031() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        TimeZone timeZone0 = TimeZone.getTimeZone("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        stdDateFormat0.instance.setTimeZone(timeZone0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test2132() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.setLenient(false);
        stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test2233() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("0000-00-00T00:00");
    }

    @Test(timeout = 4000)
    public void test2334() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("=");
    }

    @Test(timeout = 4000)
    public void test2435() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Date date0 = stdDateFormat0.parse("3");
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test2536() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        MockDate mockDate0 = new MockDate();
        String string0 = stdDateFormat0.instance.format((Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test2637() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        stdDateFormat0.instance._format(timeZone0, locale0, mockDate0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test2738() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        MockDate mockDate0 = new MockDate((-1821), (-1821), (-1821), (-1821), (-1821));
        stdDateFormat0.format((Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test2839() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        String string0 = stdDateFormat0.instance.toPattern();
    }

    @Test(timeout = 4000)
    public void test2940() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test2941() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
    }

    @Test(timeout = 4000)
    public void test3042() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("00,G-00-00T00:W0");
    }

    @Test(timeout = 4000)
    public void test3143() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("2.2250738585072012e-308");
    }

    @Test(timeout = 4000)
    public void test3244() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("0000-u00-00T00:00");
    }

    @Test(timeout = 4000)
    public void test3345() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("00=0-00-00");
    }

    @Test(timeout = 4000)
    public void test3446() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Locale locale0 = Locale.JAPAN;
        stdDateFormat0.parse("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    }

    @Test(timeout = 4000)
    public void test3547() throws Throwable {
        Integer integer0 = new Integer(5);
        boolean boolean0 = StdDateFormat._equals((Integer) null, integer0);
    }
}
