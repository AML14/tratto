/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 07:56:53 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.File;
import java.lang.reflect.Type;
import java.sql.Date;
import java.text.DateFormat;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeSerializerBase_ESTest extends DateTimeSerializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        JsonSerializer<?> jsonSerializer0 = sqlDateSerializer0.createContextual(defaultSerializerProvider_Impl0, beanProperty_Bogus0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<?> jsonSerializer0 = sqlDateSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Boolean boolean0 = Boolean.FALSE;
        DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0, dateFormat0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        JsonNode jsonNode0 = sqlDateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) mapType0, true);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Boolean boolean0 = Boolean.valueOf(true);
        DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0, dateFormat0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        JsonNode jsonNode0 = sqlDateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) mapType0, true);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        sqlDateSerializer0._asTimestamp(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        sqlDateSerializer0._acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null, false);
        sqlDateSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        sqlDateSerializer0._acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null, true);
        sqlDateSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        MockDate mockDate0 = new MockDate(779, 779, 779);
        sqlDateSerializer0._serializeAsString(mockDate0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test99() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer((Boolean) null, mockSimpleDateFormat0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Date date0 = new Date((-9223372036854775808L));
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        MockFile mockFile0 = new MockFile("PHONE", "ull SerialierProvider passM for ");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        sqlDateSerializer0.serialize(date0, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        sqlDateSerializer0.serialize(date0, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        jsonGenerator0.getOutputBuffered();
    }
}
