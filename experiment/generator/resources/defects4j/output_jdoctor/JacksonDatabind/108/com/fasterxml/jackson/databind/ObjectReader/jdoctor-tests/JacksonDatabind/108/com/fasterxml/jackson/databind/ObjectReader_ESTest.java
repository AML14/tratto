/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 08:55:05 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import java.io.CharConversionException;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectReader_ESTest extends ObjectReader_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        MapperFeature mapperFeature0 = MapperFeature.USE_GETTERS_AS_SETTERS;
        boolean boolean0 = objectReader0.isEnabled(mapperFeature0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationConfig deserializationConfig0 = objectReader0.getConfig();
        deserializationConfig0.getRootName();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null, jsonEncoding0);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ArrayNode arrayNode0 = objectNode0.withArray("JSON");
        TextNode textNode0 = arrayNode0.textNode("Strange Reference type ");
        objectReader0.writeTree(jsonGenerator0, textNode0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        objectReader0.withoutFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        File file0 = MockFile.createTempFile("Root name '%s' does not match expected ('%s') for type %s", "JSON");
        JsonParser jsonParser0 = jsonFactory0.createParser(file0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
        objectReader0.readValues((JsonParser) filteringParserDelegate0, (ResolvedType) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
        ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        Class<SimpleType> class0 = SimpleType.class;
        ObjectReader objectReader1 = objectReader0.withView(class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ConcurrentHashMap<CollectionType, Module> concurrentHashMap0 = new ConcurrentHashMap<CollectionType, Module>();
        ObjectReader objectReader1 = objectReader0.withAttributes(concurrentHashMap0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        byte[] byteArray0 = new byte[16];
        objectReader0.readValues(byteArray0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BigIntegerNode> class0 = BigIntegerNode.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        MappingIterator<MapLikeType> mappingIterator0 = objectReader0.readValues("");
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        objectMapper0.writeValueAsBytes(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
        JsonNode jsonNode0 = objectReader1.readTree((InputStream) null);
        jsonNode0.isShort();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0._reportUndetectableSource((Object) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
        JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        MockFile mockFile0 = new MockFile("z");
        objectReader0._inputStream(mockFile0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
        ObjectReader objectReader1 = objectReader0.with((FormatFeature) jsonReadFeature0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withoutRootName();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
        ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((byte[]) null, 1, (-794));
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, true);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
        objectReader0.withFeatures(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        ObjectReader objectReader1 = objectReader0.withRootName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withRootName("=KX)S");
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<HashMap> class0 = HashMap.class;
        Class<TypeIdResolver> class1 = TypeIdResolver.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
        objectReader0.readValue((JsonParser) null, (ResolvedType) mapType0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readTree((JsonParser) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
        ObjectReader objectReader1 = objectReader0.withType((JavaType) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        Locale locale0 = Locale.ENGLISH;
        ObjectReader objectReader1 = objectReader0.with(locale0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        StringReader stringReader0 = new StringReader("5");
        JsonNode jsonNode0 = objectReader0.readTree((Reader) stringReader0);
        objectReader0.readValue(jsonNode0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
        ObjectReader objectReader1 = objectReader0.withoutFeatures(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader[] objectReaderArray0 = new ObjectReader[2];
        ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        ObjectReader objectReader1 = objectReader0.withType(class0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNode jsonNode0 = objectReader0.createObjectNode();
        jsonNode0.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.with((DeserializationConfig) null);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
        boolean boolean0 = objectReader0.isEnabled(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleType> class0 = SimpleType.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
        objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        objectReader0.withFeatures((FormatFeature[]) null);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNode jsonNode0 = objectReader0.createArrayNode();
        JsonParser jsonParser0 = objectReader0.treeAsTokens(jsonNode0);
        Class<Object> class0 = Object.class;
        Iterator<Object> iterator0 = objectReader0.readValues(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleType> class0 = SimpleType.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_READ_IO_BUFFER, true);
        PipedReader pipedReader0 = new PipedReader();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte) (-3), pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 2023, 2023, false);
        TypeReference<MissingNode> typeReference0 = (TypeReference<MissingNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn(class0).when(typeReference0).getType();
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, typeReference0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
        TypeReference<DoubleNode> typeReference0 = (TypeReference<DoubleNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectReader0.readValues(jsonParser0, typeReference0);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0._inputStream((URL) null);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.at("lx_[e");
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        InjectableValues injectableValues0 = objectReader0.getInjectableValues();
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
        ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2);
        BooleanNode booleanNode0 = arrayNode0.booleanNode(false);
        Class<String> class0 = String.class;
        String string0 = objectReader0.treeToValue((TreeNode) booleanNode0, class0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        ObjectReader objectReader1 = objectReader0.with((Base64Variant) null);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
        ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withAttribute((Object) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
        ObjectReader objectReader1 = objectReader0.withType((Type) class0);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withoutAttribute(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        TimeZone timeZone0 = TimeZone.getDefault();
        ObjectReader objectReader1 = objectReader0.with(timeZone0);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        TypeReference<List<PropertyName>> typeReference0 = (TypeReference<List<PropertyName>>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectReader0.withType(typeReference0);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        Version version0 = objectReader0.version();
        version0.getArtifactId();
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
        ObjectReader objectReader1 = objectReader0.without((FormatFeature) jsonReadFeature0);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        deserializationFeatureArray0[5] = deserializationFeature0;
        deserializationFeatureArray0[6] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        ContextAttributes contextAttributes0 = objectReader0.getAttributes();
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonPointer jsonPointer0 = JsonPointer.forPath((JsonStreamContext) null, false);
        ObjectReader objectReader1 = objectReader0.at(jsonPointer0);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        LongNode longNode0 = LongNode.valueOf((-1));
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5358), objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 934, false);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        objectReader0.writeValue(jsonGeneratorDelegate0, jsonGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        objectReader0.readValue("");
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std0);
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
        JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
        JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
        JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
        ObjectReader objectReader1 = objectReader0.with(jsonFactory1);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        ObjectReader objectReader1 = objectReader0.withType((Type) class0);
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        BigInteger bigInteger0 = BigInteger.TEN;
        BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
        ObjectReader objectReader1 = objectReader0.withValueToUpdate(bigIntegerNode0);
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValue((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        StringReader stringReader0 = new StringReader("5");
        objectReader0.readValue((Reader) stringReader0);
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
        byte[] byteArray0 = new byte[6];
        objectReader0.readValue(byteArray0, 1, 1);
    }

    @Test(timeout = 4000)
    public void test7272() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        MockFile mockFile0 = new MockFile(" withfrmat auto-detection: must be byte- not char-based");
        objectReader0.readValue((File) mockFile0);
    }

    @Test(timeout = 4000)
    public void test7373() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        URL uRL0 = MockURL.getFileExample();
        objectReader0.readValue(uRL0);
    }

    @Test(timeout = 4000)
    public void test7474() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValue((DataInput) null);
    }

    @Test(timeout = 4000)
    public void test7575() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
        jsonNode0.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test7676() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readTree("{'<}fu");
    }

    @Test(timeout = 4000)
    public void test7777() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        byte[] byteArray0 = new byte[0];
        JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
        jsonNode0.isFloat();
    }

    @Test(timeout = 4000)
    public void test7878() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        byte[] byteArray0 = new byte[5];
        JsonNode jsonNode0 = objectReader0.readTree(byteArray0, (int) (byte) (-113), (-5059));
        jsonNode0.textValue();
    }

    @Test(timeout = 4000)
    public void test7979() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        objectReader0.readTree((DataInput) null);
    }

    @Test(timeout = 4000)
    public void test8080() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValues((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test8181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValues((Reader) null);
    }

    @Test(timeout = 4000)
    public void test8282() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        MockFile mockFile0 = new MockFile("Root name '%s' does not match expected ('%s') for type %s");
        objectReader0.readValues((File) mockFile0);
    }

    @Test(timeout = 4000)
    public void test8383() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        URL uRL0 = MockURL.getFileExample();
        objectReader0.readValues(uRL0);
    }

    @Test(timeout = 4000)
    public void test8484() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValues((DataInput) null);
    }

    @Test(timeout = 4000)
    public void test8585() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
        NullNode nullNode0 = NullNode.instance;
        FloatNode floatNode0 = objectReader0.readValue((JsonNode) nullNode0);
    }

    @Test(timeout = 4000)
    public void test8686() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
        byte[] byteArray0 = new byte[6];
        byteArray0[0] = (byte) 34;
        objectReader0.readValue(byteArray0);
    }

    @Test(timeout = 4000)
    public void test8787() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0._bindAndClose((JsonParser) null);
    }

    @Test(timeout = 4000)
    public void test8888() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ShortNode> class0 = ShortNode.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        objectReader0._bindAndCloseAsTree((JsonParser) null);
    }

    @Test(timeout = 4000)
    public void test8989() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
        objectReader0._verifyNoTrailingTokens(jsonParser0, (DeserializationContext) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test9090() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader[] objectReaderArray0 = new ObjectReader[0];
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) null);
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, false);
    }

    @Test(timeout = 4000)
    public void test9191() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0._verifySchemaType((FormatSchema) null);
    }

    @Test(timeout = 4000)
    public void test9292() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        objectReader0.readValues((Reader) null);
    }

    @Test(timeout = 4000)
    public void test9393() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
        JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer(javaType0);
        jsonDeserializer0.getEmptyAccessPattern();
    }
}
