/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 08:02:18 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ArrayBuilders;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.SQLTransientConnectionException;
import java.text.DateFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DeserializationContext_ESTest extends DeserializationContext_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        objectReader0.treeToValue((TreeNode) booleanNode0, class0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Object[] objectArray0 = new Object[0];
        Class<DateFormat> class0 = DateFormat.class;
        defaultDeserializationContext0.handleWeirdKey(class0, "JSON", "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<Integer> class0 = Integer.TYPE;
        BigInteger bigInteger0 = BigInteger.ONE;
        Object[] objectArray0 = new Object[1];
        defaultDeserializationContext0.handleWeirdNumberValue(class0, bigInteger0, "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.unknownTypeException((JavaType) null, (String) null, (String) null);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        objectMapper1.mixInCount();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
        Object[] objectArray0 = new Object[3];
        defaultDeserializationContext0.reportWrongTokenException(jsonParser0, jsonToken0, "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        MockDate mockDate0 = new MockDate(1L);
        defaultDeserializationContext_Impl0.constructCalendar(mockDate0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        byte[] byteArray0 = new byte[0];
        objectReader0.readValue(byteArray0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getAttribute(beanDeserializerFactory0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        defaultDeserializationContext_Impl0.mappingException(class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = new Object[3];
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) null, "g1?Mo7~E'k@B", objectArray0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getLocale();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonToken jsonToken0 = JsonToken.VALUE_NULL;
        Object[] objectArray0 = new Object[0];
        defaultDeserializationContext_Impl0.reportWrongTokenException((JavaType) null, jsonToken0, (String) null, objectArray0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.mappingException("Cannot deserialize value of type %s from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type %s: incompatible types", (Object[]) null);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.findClass("QUx*JK$yo18q<T4 ");
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = new Object[0];
        defaultDeserializationContext_Impl0.reportMappingException("}f", objectArray0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        Object[] objectArray0 = new Object[4];
        defaultDeserializationContext_Impl0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, "EE@Joj", objectArray0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.mappingException("DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s");
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        deserializationContext0.endOfInputException(class0);
        deserializationContext0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<String> class0 = String.class;
        defaultDeserializationContext_Impl0.readValue((JsonParser) null, class0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getBase64Variant();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(valueInstantiators_Base0);
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
        Class<MockDateFormat> class0 = MockDateFormat.class;
        defaultDeserializationContext0.readPropertyValue((JsonParser) jsonParserSequence0, (BeanProperty) beanProperty_Bogus0, class0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        JsonToken jsonToken0 = JsonToken.END_ARRAY;
        defaultDeserializationContext_Impl0.reportTrailingTokens((Class<?>) class0, (JsonParser) null, jsonToken0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<PlaceholderForType> class0 = PlaceholderForType.class;
        Object[] objectArray0 = new Object[1];
        defaultDeserializationContext0.handleWeirdStringValue(class0, "JSON", "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        deserializationContext0.instantiationException(class0, "com.fasterxml.jackson.databind.SerializationFeature");
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        JsonToken jsonToken0 = JsonToken.VALUE_STRING;
        defaultDeserializationContext_Impl0.reportWrongTokenException(class0, jsonToken0, "[PrefixTransformer('", (Object[]) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        Class<Throwable> class0 = Throwable.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
        Object[] objectArray0 = new Object[2];
        defaultDeserializationContext0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) null, "G/", objectArray0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<SequenceInputStream> class0 = SequenceInputStream.class;
        JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
        defaultDeserializationContext0.handleWeirdNativeValue(javaType0, jsonFactory0, jsonParser0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = new Object[1];
        defaultDeserializationContext_Impl0.reportMissingContent("~{~hISY3", objectArray0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.reportUnresolvedObjectId((ObjectIdReader) null, (Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = new Object[0];
        defaultDeserializationContext_Impl0.reportBadTypeDefinition((BeanDescription) null, "em?", objectArray0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getActiveView();
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Class<Void> class0 = Void.class;
        JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
        deserializationContext0.wrongTokenException((JsonParser) null, class0, jsonToken0, "problem handler tried to resolve into non-subtype: ");
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        DeserializerFactory deserializerFactory0 = defaultDeserializationContext_Impl0.getFactory();
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        DeserializerFactory deserializerFactory0 = defaultDeserializationContext_Impl0.getFactory();
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
        defaultDeserializationContext0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        defaultDeserializationContext_Impl0.mappingException(class0, jsonToken0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        int int0 = deserializationContext0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.setAttribute(objectMapper0, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getNodeFactory();
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ArrayNode arrayNode0 = objectNode0.putArray("FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS");
        JsonParser jsonParser0 = arrayNode0.traverse();
        Class<MockDateFormat> class1 = MockDateFormat.class;
        objectReader0.readValue(jsonParser0, class1);
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures((-950));
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures((-950));
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        boolean boolean0 = deserializationContext0.hasDeserializationFeatures((byte) 0);
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        boolean boolean0 = deserializationContext0.hasDeserializationFeatures((byte) 0);
        deserializationContext0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4447() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures((-861));
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("Cannot construct instance of %s (no Creators, like default construct, exist): %s");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures(20);
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test4650() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, atomicReference0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test4751() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, (AtomicReference<Throwable>) null);
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        PlaceholderForType placeholderForType0 = new PlaceholderForType(633);
        defaultDeserializationContext0.readValue(jsonParser0, (JavaType) placeholderForType0);
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        JavaType javaType0 = beanProperty_Bogus0.getType();
        KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(javaType0, beanProperty_Bogus0);
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON", "JSON");
        defaultDeserializationContext0.handleInstantiationProblem((Class<?>) null, jsonParser0, sQLTransientConnectionException0);
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectBuffer objectBuffer0 = new ObjectBuffer();
        defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
        ObjectBuffer objectBuffer1 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
    }

    @Test(timeout = 4000)
    public void test5156() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectBuffer objectBuffer0 = new ObjectBuffer();
        defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
        ObjectBuffer objectBuffer1 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5258() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
    }

    @Test(timeout = 4000)
    public void test5259() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5360() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        ObjectBuffer objectBuffer0 = new ObjectBuffer();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
        defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5461() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        ObjectBuffer objectBuffer0 = new ObjectBuffer();
        objectBuffer0.resetAndStart();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
        ObjectBuffer objectBuffer1 = new ObjectBuffer();
        defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer1);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5562() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getArrayBuilders();
        ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
    }

    @Test(timeout = 4000)
    public void test5563() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getArrayBuilders();
        ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test5664() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(deserializationProblemHandler0).handleUnknownProperty(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.JsonDeserializer.class), any(), anyString());
        ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JsonDeserializer<DoubleNode> jsonDeserializer0 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, jsonDeserializer0, objectMapper1, "JSON");
    }

    @Test(timeout = 4000)
    public void test5765() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(deserializationProblemHandler0).handleUnknownProperty(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.JsonDeserializer.class), any(), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        boolean boolean0 = defaultDeserializationContext0.handleUnknownProperty(jsonParser0, jsonDeserializer0, jsonParser0, "JSON");
    }

    @Test(timeout = 4000)
    public void test5866() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, (JsonDeserializer<?>) null, jsonParser0, "JSON");
    }

    @Test(timeout = 4000)
    public void test5967() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
        ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<Object> class0 = Object.class;
        Object[] objectArray0 = new Object[0];
        Object object0 = defaultDeserializationContext0.handleWeirdKey(class0, "JSON", "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test6068() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<Object> class0 = Object.class;
        Object[] objectArray0 = new Object[0];
        Object object0 = defaultDeserializationContext0.handleWeirdKey(class0, "", "", objectArray0);
    }

    @Test(timeout = 4000)
    public void test6169() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Object[] objectArray0 = new Object[0];
        Class<Module> class0 = Module.class;
        defaultDeserializationContext0.handleWeirdKey(class0, "JSON", "", objectArray0);
    }

    @Test(timeout = 4000)
    public void test6270() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdStringValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<SimpleType> class0 = SimpleType.class;
        Object[] objectArray0 = new Object[0];
        Object object0 = defaultDeserializationContext0.handleWeirdStringValue(class0, "JSON", "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test6371() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdStringValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<PlaceholderForType> class0 = PlaceholderForType.class;
        Object[] objectArray0 = new Object[1];
        defaultDeserializationContext0.handleWeirdStringValue(class0, "JSON", "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test6472() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdNumberValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(java.lang.Number.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<Locale> class0 = Locale.class;
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        Object[] objectArray0 = new Object[1];
        Object object0 = defaultDeserializationContext0.handleWeirdNumberValue(class0, bigDecimal0, "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test6573() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdNumberValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(java.lang.Number.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<Integer> class0 = Integer.TYPE;
        BigInteger bigInteger0 = BigInteger.ONE;
        Object[] objectArray0 = new Object[1];
        defaultDeserializationContext0.handleWeirdNumberValue(class0, bigInteger0, "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test6674() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(), any(com.fasterxml.jackson.core.JsonParser.class));
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        PlaceholderForType placeholderForType0 = new PlaceholderForType(633);
        Object object0 = defaultDeserializationContext0.handleWeirdNativeValue(placeholderForType0, objectReader0, jsonParser0);
    }

    @Test(timeout = 4000)
    public void test6775() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(), any(com.fasterxml.jackson.core.JsonParser.class));
        ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        PlaceholderForType placeholderForType0 = new PlaceholderForType(633);
        Object object0 = defaultDeserializationContext0.handleWeirdNativeValue(placeholderForType0, objectReader0, jsonParser0);
    }

    @Test(timeout = 4000)
    public void test6876() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(), any(com.fasterxml.jackson.core.JsonParser.class));
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<String> class0 = String.class;
        JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
        PlaceholderForType placeholderForType0 = new PlaceholderForType((-1204));
        defaultDeserializationContext0.handleWeirdNativeValue(javaType0, placeholderForType0, jsonParser0);
    }

    @Test(timeout = 4000)
    public void test6977() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        Object[] objectArray0 = new Object[2];
        defaultDeserializationContext0.handleMissingInstantiator(class0, (ValueInstantiator) null, jsonParser0, "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test7078() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        ResolvedRecursiveType resolvedRecursiveType0 = objectReader0.treeToValue((TreeNode) booleanNode0, class0);
    }

    @Test(timeout = 4000)
    public void test7179() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<SimpleType> class0 = SimpleType.class;
        ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
        Object[] objectArray0 = new Object[1];
        defaultDeserializationContext0.handleMissingInstantiator(class0, valueInstantiator_Base0, jsonParser0, "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test7280() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleInstantiationProblem(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(), any(java.lang.Throwable.class));
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON");
        Class<String> class0 = String.class;
        defaultDeserializationContext0.handleInstantiationProblem(class0, objectMapper0, sQLTransientConnectionException0);
    }

    @Test(timeout = 4000)
    public void test7381() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleInstantiationProblem(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(), any(java.lang.Throwable.class));
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON");
        Class<String> class0 = String.class;
        Object object0 = defaultDeserializationContext0.handleInstantiationProblem(class0, objectMapper0, sQLTransientConnectionException0);
    }

    @Test(timeout = 4000)
    public void test7482() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.core.JsonToken.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        JavaType javaType0 = beanProperty_Bogus0.getType();
        DateFormat dateFormat0 = defaultDeserializationContext0.readValue(jsonParser0, javaType0);
    }

    @Test(timeout = 4000)
    public void test7583() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.core.JsonToken.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<InputStream> class0 = InputStream.class;
        JsonToken jsonToken0 = JsonToken.END_OBJECT;
        Object[] objectArray0 = new Object[1];
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, "JSON", objectArray0);
    }

    @Test(timeout = 4000)
    public void test7684() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        Object[] objectArray0 = new Object[0];
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, "com.fasterxml.jackson.core.ObjectCodec", objectArray0);
    }

    @Test(timeout = 4000)
    public void test7785() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(deserializationProblemHandler0).handleUnknownTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), anyString(), any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        defaultDeserializationContext0.handleUnknownTypeId((JavaType) null, "JSON", (TypeIdResolver) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test7886() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        Class<TypeNameIdResolver> class1 = TypeNameIdResolver.class;
        Class<String> class2 = String.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(mapType0).when(deserializationProblemHandler0).handleMissingTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JavaType javaType0 = TypeFactory.unknownType();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
        JavaType javaType1 = defaultDeserializationContext0.handleMissingTypeId(javaType0, classNameIdResolver0, "JSON");
    }

    @Test(timeout = 4000)
    public void test7987() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(deserializationProblemHandler0).handleMissingTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JavaType javaType0 = TypeFactory.unknownType();
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
        defaultDeserializationContext0.handleMissingTypeId(javaType0, classNameIdResolver0, "JSON");
    }

    @Test(timeout = 4000)
    public void test8088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
        Class<Object> class0 = Object.class;
        boolean boolean0 = ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test8089() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
        Class<Object> class0 = Object.class;
        boolean boolean0 = ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test8190() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        Object[] objectArray0 = new Object[6];
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "|JZ(", objectArray0);
    }

    @Test(timeout = 4000)
    public void test8291() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = new Object[9];
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) null, "Could not find JsonDeserializer for type %s (via property %s)", objectArray0);
    }

    @Test(timeout = 4000)
    public void test8392() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.reportUnknownProperty(beanDeserializerFactory0, "", (JsonDeserializer<?>) null);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test8493() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
        defaultDeserializationContext0.reportUnknownProperty(jsonFactory0, "JSON", jsonDeserializer0);
    }

    @Test(timeout = 4000)
    public void test8594() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        StringReader stringReader0 = new StringReader("JSON");
        JsonParser jsonParser0 = jsonFactory0.createParser((Reader) stringReader0);
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        defaultDeserializationContext0.reportUnknownProperty(jsonFactory0, "JSON", (JsonDeserializer<?>) null);
    }

    @Test(timeout = 4000)
    public void test8695() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Object object0 = defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
    }

    @Test(timeout = 4000)
    public void test8796() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<Integer> class0 = Integer.TYPE;
        defaultDeserializationContext0.handleInstantiationProblem(class0, jsonFactory0, (Throwable) null);
    }

    @Test(timeout = 4000)
    public void test8897() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
        Class<MockDateFormat> class0 = MockDateFormat.class;
        defaultDeserializationContext0.handleInstantiationProblem(class0, sQLTransientConnectionException0, sQLTransientConnectionException0);
    }
}
