/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 08:33:13 GMT 2024
 */
package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.lang.reflect.Type;
import java.time.chrono.HijrahEra;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BasicBeanDescription_ESTest extends BasicBeanDescription_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findMethod("cpul-,B", (Class<?>[]) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        TypeBindings typeBindings0 = basicBeanDescription0.bindingsForBeanType();
        typeBindings0.size();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        boolean boolean0 = basicBeanDescription0.removeProperty("com.fasterxml.jackson.annotation.SimpleObjectIdResolver");
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        PropertyName propertyName0 = PropertyName.NO_NAME;
        boolean boolean0 = basicBeanDescription0.hasProperty(propertyName0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        BeanPropertyDefinition beanPropertyDefinition0 = basicBeanDescription0.findProperty((PropertyName) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findJsonValueMethod();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
        set0.size();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        Class<Float> class0 = Float.TYPE;
        basicBeanDescription0.resolveType(class0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        JavaType javaType0 = basicBeanDescription0.resolveType((Type) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnySetterAccessor();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        Map<Object, AnnotatedMember> map0 = basicBeanDescription0.findInjectables();
        map0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        Object object0 = basicBeanDescription0.instantiateBean(false);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        JsonFormat.Value jsonFormat_Value0 = new JsonFormat.Value();
        basicBeanDescription0.findExpectedFormat(jsonFormat_Value0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        ObjectReader objectReader0 = objectMapper1.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        basicBeanDescription0.findDefaultViews();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
        MapperFeature mapperFeature0 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        mapperFeatureArray0[1] = mapperFeature1;
        ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
        Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
        boolean boolean0 = objectMapper1.canSerialize(class0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        JsonInclude.Value jsonInclude_Value0 = BeanProperty.EMPTY_INCLUDE;
        JsonInclude.Value jsonInclude_Value1 = basicBeanDescription0.findPropertyInclusion(jsonInclude_Value0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnyGetter();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        Map<String, AnnotatedMember> map0 = basicBeanDescription0.findBackReferenceProperties();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<HijrahEra> class0 = HijrahEra.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
        JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0);
        objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = basicBeanDescription0.findPOJOBuilderConfig();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        String string0 = basicBeanDescription0.findClassDescription();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
        LinkedHashMap<String, AnnotatedField> linkedHashMap0 = basicBeanDescription0._findPropertyFields(priorityQueue0, false);
        linkedHashMap0.size();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        ArrayList<BeanPropertyDefinition> arrayList0 = new ArrayList<BeanPropertyDefinition>();
        basicBeanDescription0._properties = (List<BeanPropertyDefinition>) arrayList0;
        arrayList0.add((BeanPropertyDefinition) null);
        Vector<String> vector0 = new Vector<String>();
        basicBeanDescription0._findPropertyFields(vector0, true);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        Class<Integer> class0 = Integer.TYPE;
        basicBeanDescription0._createConverter(class0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
        basicBeanDescription0._createConverter(priorityQueue0);
    }
}
