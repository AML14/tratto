/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 08:27:46 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.util.EnumResolver;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.net.URI;
import java.net.URL;
import java.nio.CharBuffer;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.Locale;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdKeyDeserializer_ESTest extends StdKeyDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<Byte> class0 = Byte.class;
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
        Object object0 = stdKeyDeserializer_DelegatingKD0.deserializeKey((String) null, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<Long> class0 = Long.class;
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
        Class<?> class1 = stdKeyDeserializer_DelegatingKD0.getKeyClass();
        class1.getModifiers();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Short> class0 = Short.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("324192", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<Long> class0 = Long.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("Iy~&Sa_R<P#tT1.Hq", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<Float> class0 = Float.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("problem: %s", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        Class<?> class1 = stdKeyDeserializer0.getKeyClass();
        class1.isEnum();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<String> class0 = String.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object object0 = stdKeyDeserializer0.deserializeKey("_jmf!un4AHsUq}", defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = null;
        stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD((EnumResolver) null, (AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        StdKeyDeserializer.StringFactoryKeyDeserializer stdKeyDeserializer_StringFactoryKeyDeserializer0 = null;
        stdKeyDeserializer_StringFactoryKeyDeserializer0 = new StdKeyDeserializer.StringFactoryKeyDeserializer((Method) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Object> class0 = Object.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Class<UUID> class0 = UUID.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        Object object0 = stdKeyDeserializer0.deserializeKey("not one of values excepted fo, Enum class: %s", (DeserializationContext) null);
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<Integer> class0 = Integer.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("pUfTHR]Hc`a4.6{GS", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<Date> class0 = Date.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0._parse("false", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Class<Calendar> class0 = Calendar.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0._parse("-!TME}_O[", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Class<Byte> class0 = Byte.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("610", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Class<Character> class0 = Character.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        Class<Character> class0 = Character.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        Object object0 = stdKeyDeserializer0.deserializeKey("9", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        Class<Double> class0 = Double.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        Class<URI> class0 = URI.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        URI uRI0 = (URI) stdKeyDeserializer0.deserializeKey("q7Hvzf=#]cBO5i8Z!3", (DeserializationContext) null);
        uRI0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        Class<URL> class0 = URL.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0._parse("", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        Class<Locale> class0 = Locale.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        Locale locale0 = (Locale) stdKeyDeserializer0._parse("}tF?c}RAO~9", (DeserializationContext) null);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        Class<ShortNode> class0 = ShortNode.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        Class<Currency> class0 = Currency.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        Object object0 = stdKeyDeserializer0.deserializeKey((String) null, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        Class<ChronoUnit> class0 = ChronoUnit.class;
        FromStringDeserializer<Locale> fromStringDeserializer0 = (FromStringDeserializer<Locale>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString(), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(16, class0, fromStringDeserializer0);
        stdKeyDeserializer0.deserializeKey("4", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        Class<UUID> class0 = UUID.class;
        FromStringDeserializer<ChronoUnit> fromStringDeserializer0 = (FromStringDeserializer<ChronoUnit>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString(), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(16, class0, fromStringDeserializer0);
        stdKeyDeserializer0.deserializeKey("_jmf!un4AHsUq}", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        Object object0 = stdKeyDeserializer0.deserializeKey("false", defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        Class<CharBuffer> class0 = CharBuffer.class;
        StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(15, class0);
        stdKeyDeserializer0.deserializeKey("overflow, value cannot be represented as 16-bit value", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        Class<Byte> class0 = Byte.class;
        StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0);
        stdKeyDeserializer0.deserializeKey("-10", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        Class<Locale> class0 = Locale.class;
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
        stdKeyDeserializer_StringKD0._parse("not a valid representation, problem: (%s) %s", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<Boolean> class0 = Boolean.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        Object object0 = stdKeyDeserializer0.deserializeKey("true", defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0._parse("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        Class<Byte> class0 = Byte.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0.deserializeKey("-630", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        Class<Byte> class0 = Byte.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        Object object0 = stdKeyDeserializer0.deserializeKey("0", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        Class<Short> class0 = Short.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        Object object0 = stdKeyDeserializer0.deserializeKey("0", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        Class<Character> class0 = Character.class;
        StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
        stdKeyDeserializer0._parse("", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        Class<String> class0 = String.class;
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonDeserializer<ChronoUnit> jsonDeserializer0 = (JsonDeserializer<ChronoUnit>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ConfigOverrides configOverrides0 = new ConfigOverrides();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[9];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (int) (byte) 14, (-580));
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
        stdKeyDeserializer_DelegatingKD0.deserializeKey("_jmf!un4AHsUq}", defaultDeserializationContext0);
    }
}
