/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:30:26 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.SimpleType;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectIdValueProperty_ESTest extends ObjectIdValueProperty_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        PropertyName propertyName0 = new PropertyName("");
        ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        AnnotatedMember annotatedMember0 = objectIdValueProperty0.getMember();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        PropertyName propertyName0 = new PropertyName("");
        ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, "");
        objectIdValueProperty1.getCreatorIndex();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        PropertyName propertyName0 = new PropertyName("", "");
        ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        objectIdValueProperty0.set(objectIdReader0, pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        Class<Annotation> class1 = Annotation.class;
        Annotation annotation0 = objectIdValueProperty0.getAnnotation(class1);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        PipedInputStream pipedInputStream0 = new PipedInputStream(1361);
        ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, pipedInputStream0);
        ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn(objectIdGenerator_IdKey0).when(objectIdGenerator0).key(any());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        JsonDeserializer<PipedInputStream> jsonDeserializer0 = (JsonDeserializer<PipedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(pipedInputStream0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        objectIdValueProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
        objectIdValueProperty0.hasValueTypeDeserializer();
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withSimpleName("N>N!ju{TM;xq]-");
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer1).getNullValue();
        ObjectIdValueProperty objectIdValueProperty1 = objectIdValueProperty0.withValueDeserializer(jsonDeserializer1);
        objectIdValueProperty1.getCreatorIndex();
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        PropertyName propertyName0 = new PropertyName("");
        PipedInputStream pipedInputStream0 = new PipedInputStream(1373);
        ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, pipedInputStream0);
        ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn(objectIdGenerator_IdKey0).when(objectIdGenerator0).key(any());
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        JsonDeserializer<JsonSerializer<String>> jsonDeserializer1 = (JsonDeserializer<JsonSerializer<String>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer1).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        ObjectIdReader objectIdReader1 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdReader0.generator, jsonDeserializer1, objectIdValueProperty0, simpleObjectIdResolver0);
        ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, (PropertyMetadata) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        objectIdValueProperty1.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, simpleType0);
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        PropertyName propertyName0 = new PropertyName("");
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
        JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        ObjectIdReader objectIdReader1 = new ObjectIdReader(simpleType0, propertyName0, objectIdReader0.generator, jsonDeserializer1, objectIdValueProperty0, simpleObjectIdResolver0);
        ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, propertyMetadata0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
        objectIdValueProperty1.setAndReturn((Object) null, bufferedInputStream0);
    }
}
