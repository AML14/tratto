/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:27:16 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.deser.std.MapDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MapDeserializer_ESTest extends MapDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer((JavaType) null, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        mapDeserializer0.deserializeWithType((JsonParser) null, (DeserializationContext) null, (TypeDeserializer) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        MapDeserializer mapDeserializer1 = new MapDeserializer(mapDeserializer0);
        mapDeserializer1.equals((Object) mapDeserializer0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<String> class0 = String.class;
        Class<JsonMappingException> class1 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class1);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, simpleType0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-3214));
        MapDeserializer mapDeserializer0 = new MapDeserializer(collectionLikeType0, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
        JavaType javaType0 = mapDeserializer0.getValueType();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withType((Type) class0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer((JavaType) null, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        mapDeserializer0.findBackReference("");
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer((JavaType) null, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        mapDeserializer0.deserialize((JsonParser) null, (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        Class<NamedType> class1 = NamedType.class;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, simpleType0);
        Class<Integer> class2 = Integer.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 15);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(collectionLikeType0, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
        JavaType javaType0 = mapDeserializer0.getContentType();
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<Integer> class0 = Integer.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved((KeyDeserializer) null, (TypeDeserializer) null, (JsonDeserializer<?>) null, (HashSet<String>) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1602));
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
        HashSet<String> hashSet0 = new HashSet<String>();
        MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved((KeyDeserializer) null, (TypeDeserializer) null, mapDeserializer0, hashSet0);
        mapDeserializer1.isCachable();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2065));
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
        Class<Error> class1 = Error.class;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, class1);
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
        HashSet<String> hashSet0 = new HashSet<String>();
        MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved((KeyDeserializer) null, (TypeDeserializer) null, coreXMLDeserializers_Std0, hashSet0);
        mapDeserializer1.isCachable();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2065));
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
        Class<Error> class1 = Error.class;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, class1);
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
        HashSet<String> hashSet0 = new HashSet<String>();
        MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved((KeyDeserializer) null, (TypeDeserializer) null, coreXMLDeserializers_Std0, hashSet0);
        mapDeserializer0.isCachable();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-3214));
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved((KeyDeserializer) null, (TypeDeserializer) null, coreXMLDeserializers_Std0, linkedHashSet0);
        boolean boolean0 = mapDeserializer1.isCachable();
        mapDeserializer0.isCachable();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-3214));
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved((KeyDeserializer) null, (TypeDeserializer) null, coreXMLDeserializers_Std0, linkedHashSet0);
        boolean boolean0 = mapDeserializer1.isCachable();
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        mapDeserializer0.createContextual(defaultDeserializationContext_Impl0, (BeanProperty) null);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        Class<InvocationTargetException> class0 = InvocationTargetException.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 47);
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
        Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct(mapLikeType0, jsonLocationInstantiator0, jsonLocationInstantiator0);
        MapType mapType0 = MapType.construct(class1, arrayType0, simpleType0);
        MapDeserializer mapDeserializer0 = new MapDeserializer(mapType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
        mapDeserializer0.isCachable();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        JsonDeserializer<ArrayNode> jsonDeserializer0 = (JsonDeserializer<ArrayNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
        Class<InvocationTargetException> class1 = InvocationTargetException.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, (TypeIdResolver) null, "nG4 p2%)A", false, class1);
        MapDeserializer mapDeserializer0 = new MapDeserializer(mapType0, jsonLocationInstantiator0, stdKeyDeserializer_DelegatingKD0, coreXMLDeserializers_Std0, asArrayTypeDeserializer0);
        mapDeserializer0.isCachable();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer((JavaType) null, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        String[] stringArray0 = new String[0];
        mapDeserializer0.setIgnorableProperties(stringArray0);
        mapDeserializer0.isCachable();
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
        String[] stringArray0 = new String[1];
        mapDeserializer0.setIgnorableProperties(stringArray0);
        mapDeserializer0.isCachable();
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        Class<Integer> class0 = Integer.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        mapDeserializer0.resolve((DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.enableDefaultTyping();
        ObjectReader objectReader0 = objectMapper0.reader();
        ObjectReader objectReader1 = objectReader0.withType((Type) class0);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer((JavaType) null, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        mapDeserializer0.deserialize(jsonParser0, (DeserializationContext) null, (Map<Object, Object>) hashMap0);
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        Class<InvocationTargetException> class0 = InvocationTargetException.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 16);
        MapDeserializer mapDeserializer0 = new MapDeserializer((JavaType) null, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        mapDeserializer0._readAndBind(jsonParser0, (DeserializationContext) null, hashMap0);
        jsonParser0.getCurrentName();
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        Class<InvocationTargetException> class0 = InvocationTargetException.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 16);
        MapDeserializer mapDeserializer0 = new MapDeserializer((JavaType) null, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        mapDeserializer0._readAndBindStringMap(jsonParser0, (DeserializationContext) null, hashMap0);
        jsonParser0.getCurrentToken();
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 5);
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
        JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.node.LongNode");
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(jsonMappingException0, "com.fasterxml.jackson.databind.node.LongNode");
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
        mapDeserializer0.wrapAndThrow(invocationTargetException0, jsonFactory_Feature0, "JSON");
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        Class<Error> class1 = Error.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 5);
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
        InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null, "com.fasterxml.jackson.databind.node.LongNode");
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
        mapDeserializer0.wrapAndThrow(invocationTargetException0, jsonFactory_Feature0, "com.fasterxml.jackson.databind.node.LongNode");
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        Class<String> class0 = String.class;
        Class<JsonMappingException> class1 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class1);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, simpleType0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 2070);
        MapDeserializer mapDeserializer0 = new MapDeserializer(collectionLikeType0, jsonLocationInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
        MockError mockError0 = new MockError("");
        mapDeserializer0.wrapAndThrow(mockError0, (Object) null, "");
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        MockIOException mockIOException0 = new MockIOException((String) null);
        mapDeserializer0.wrapAndThrow(mockIOException0, simpleType0);
    }
}
