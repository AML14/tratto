/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 03:45:00 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.lang.reflect.Type;
import java.net.URL;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectReader_ESTest extends ObjectReader_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        objectReader0.getAttributes();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("No 'injectableValues' configured, can notinjeVt value with id [");
        FileSystemHandling.shouldAllThrowIOExceptions();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
        TokenFilter tokenFilter2 = tokenFilter1.includeProperty("Current token not END_OBJECT (to match wrapper object with root name '");
        TokenFilter tokenFilter3 = tokenFilter2.filterStartObject();
        ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter3);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        deserializationFeatureArray0[0] = deserializationFeature0;
        objectReader1.withoutFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<NullNode> class0 = NullNode.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        MissingNode.getInstance();
        objectReader0._bind((JsonParser) null, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        MockFile mockFile0 = new MockFile(" 8 2M|3[M4@{f");
        mockFile0.createNewFile();
        objectReader0.readValues((File) mockFile0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        objectReader0.withHandler(deserializationProblemHandler0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        jsonParser_FeatureArray0[1] = jsonParser_Feature1;
        JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        jsonParser_FeatureArray0[2] = jsonParser_Feature2;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ShortNode shortNode0 = ShortNode.valueOf((short) (-2308));
        IOContext iOContext0 = new IOContext(bufferRecycler0, shortNode0, true);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        charArray0[0] = '>';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 2, 3, true);
        JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
        Class<DoubleNode> class0 = DoubleNode.class;
        objectMapper1.readValue((JsonParser) jsonParserSequence0, class0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
        objectReader0.without(deserializationFeature0);
        DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        objectMapper0.reader(deserializationFeature1);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
        ObjectReader[] objectReaderArray0 = new ObjectReader[3];
        objectReaderArray0[0] = objectReader0;
        objectReaderArray0[1] = objectReader0;
        objectReaderArray0[2] = objectReader0;
        DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
        dataFormatReaders1.withMaxInputLookahead((-1094));
        byte[] byteArray0 = new byte[4];
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0, 1, 0);
        dataFormatReaders_Match0.createParserWithMatch();
        objectReader0.readValues((JsonParser) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
        tokenFilter1.filterStartArray();
        objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
        IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, true);
        PipedWriter pipedWriter0 = new PipedWriter();
        CharsToNameCanonicalizer.createRoot();
        ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        objectReader0.readValues((String) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
        URL uRL0 = MockURL.getFtpExample();
        objectReader0.readValues(uRL0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        MockFile mockFile0 = new MockFile("No 'injectableValues' configured, can not inject value with id [");
        mockFile0.createNewFile();
        objectMapper0.reader();
        objectReader0.readValue((File) mockFile0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.withType((TypeReference<?>) null);
        String string0 = null;
        objectReader0.readValues(string0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
        ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0);
        objectReader1.with((Locale) null);
        objectReader0.with((Locale) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
        tokenFilter1.filterStartArray();
        ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
        objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
        IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, true);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
        DeserializationFeature deserializationFeature1 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        deserializationFeatureArray0[0] = deserializationFeature1;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature1;
        ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
        TypeFactory typeFactory0 = objectReader1.getTypeFactory();
        Class<ArrayList> class0 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        CollectionType collectionType1 = collectionType0.withValueHandler(objectNode0);
        objectReader1.withAttribute(collectionType1, tokenFilter0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        deserializationFeatureArray0[5] = deserializationFeature0;
        deserializationFeatureArray0[6] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
        objectReader0.with((FormatSchema) null);
        objectReader0.with(deserializationFeature0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0).when(formatFeature0).getMask();
        objectReader0.with(formatFeature0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader();
        ContextAttributes contextAttributes0 = objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DoubleNode doubleNode0 = DoubleNode.valueOf(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getSchema();
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
        objectReader1.with(contextAttributes0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        Class<MapLikeType> class0 = MapLikeType.class;
        ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
        objectReader0.without(jsonParser_Feature0);
        objectReader0.createArrayNode();
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("JSON");
        FileSystemHandling.appendLineToFile(evoSuiteFile0, "JSON");
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        objectReader0.readValues((byte[]) null, 0, 0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
        ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
        Class<MapType> class0 = MapType.class;
        objectReader0.withView(class0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        objectReader0.with((Locale) null);
        objectReader0.with((Locale) null);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
        OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
        JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        objectReader0.with(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
        ObjectReader[] objectReaderArray0 = new ObjectReader[3];
        objectReaderArray0[0] = objectReader0;
        objectReaderArray0[1] = objectReader0;
        objectReaderArray0[2] = objectReader0;
        DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
        DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMaxInputLookahead((-1094));
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 0;
        byteArray0[1] = (byte) (-75);
        byteArray0[2] = (byte) (-86);
        byteArray0[3] = (byte) (-1);
        dataFormatReaders2.findFormat(byteArray0, 0, 0);
        ObjectReader objectReader1 = objectReader0.forType((JavaType) null);
        BooleanNode booleanNode0 = BooleanNode.valueOf(false);
        objectReader1.withoutAttribute(booleanNode0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        deserializationFeatureArray0[1] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader();
        FileSystemHandling.shouldAllThrowIOExceptions();
        ObjectReader objectReader1 = objectMapper0.reader();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, " 8 2M|3[M4@{f", false);
        PipedReader pipedReader0 = new PipedReader();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(16);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectReader1, charsToNameCanonicalizer1);
        JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
        Class<Object> class0 = Object.class;
        objectReader0.readValues(jsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader();
        Class<BooleanNode> class0 = BooleanNode.class;
        objectReader0.withType(class0);
        objectReader0.readValue("?Y21r)y/2");
        String string0 = null;
        objectReader0.readValues(string0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        ObjectReader objectReader0 = objectMapper1.reader();
        MockURL.getFtpExample();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
        ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
        objectReader1.withoutFeatures((JsonParser.Feature[]) null);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        deserializationFeatureArray0[0] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        objectReader0.createArrayNode();
        LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
        byte[] byteArray0 = new byte[1];
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, 0, 0);
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
        objectReader0.withoutRootName();
        objectReader0.withoutFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        ObjectReader objectReader0 = objectMapper1.reader();
        TypeFactory.defaultInstance();
        Class<DeserializationConfig> class0 = DeserializationConfig.class;
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
        ObjectNode objectNode1 = objectNode0.deepCopy();
        ObjectNode objectNode2 = objectNode1.put((String) null, false);
        ObjectNode objectNode3 = objectNode2.removeAll();
        objectNode3.get((String) null);
        objectReader0.treeToValue((TreeNode) null, class0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DoubleNode doubleNode0 = DoubleNode.valueOf(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getSchema();
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
        objectReader1.readValues((JsonParser) readerBasedJsonParser0, (JavaType) null);
        objectReader0.withoutRootName();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
        objectMapper1.configure(serializationFeature0, true);
        ObjectReader objectReader0 = objectMapper1.reader((JsonNodeFactory) null);
        objectReader0.createObjectNode();
        objectReader0.getInjectableValues();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        deserializationFeatureArray0[0] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        JsonNode jsonNode0 = objectReader0.createArrayNode();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        jsonFactory0.disable(jsonParser_Feature0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(jsonNode0);
        objectReader0._bindAsTree(jsonParser0);
        MockURL.getHttpExample();
        objectReader0.withoutFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<NullNode> class0 = NullNode.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        MissingNode missingNode0 = MissingNode.getInstance();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(missingNode0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        NullNode nullNode0 = jsonNodeFactory0.nullNode();
        objectReader0._bind(jsonParser0, nullNode0);
        Stack<ObjectReader> stack0 = null;
        stack0 = new Stack<ObjectReader>();
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
        deserializationFeatureArray0[1] = deserializationFeature1;
        deserializationFeatureArray0[2] = deserializationFeature0;
        objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
        MockFile mockFile0 = new MockFile((String) null, "JSON");
        File file0 = MockFile.createTempFile("JSON", "JSON", (File) mockFile0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
        jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0);
        jsonFactory1.createParser((char[]) null, 0, 0);
        ObjectReader objectReader1 = objectReader0.with((Locale) null);
        objectReader0.createArrayNode();
        objectReader1.at((JsonPointer) null);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        ObjectReader objectReader0 = objectMapper1.reader();
        ObjectReader[] objectReaderArray0 = new ObjectReader[6];
        ObjectReader objectReader1 = objectMapper0.reader((Base64Variant) null);
        objectReaderArray0[0] = objectReader1;
        objectReaderArray0[1] = objectReader0;
        objectReaderArray0[2] = objectReader0;
        objectReaderArray0[3] = objectReader0;
        objectReaderArray0[4] = objectReader0;
        objectReaderArray0[5] = objectReader0;
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
        DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with((DeserializationConfig) null);
        dataFormatReaders1.with(objectReaderArray0);
        int int0 = (-32768);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
        DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        deserializationFeatureArray0[0] = deserializationFeature0;
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        objectReader0.with(deserializationFeature1, deserializationFeatureArray0);
        URL uRL0 = MockURL.getFtpExample();
        objectReader0.readValues(uRL0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
        tokenFilter1.filterStartArray();
        ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayList0);
        DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with((ObjectReader[]) null);
        MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
        DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withOptimalMatch(matchStrength0);
        dataFormatReaders1.withMaxInputLookahead(2950);
        byte[] byteArray0 = new byte[0];
        DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, 1, (-237));
        dataFormatReaders_Match0.createParserWithMatch();
        objectReader0.readValues((JsonParser) null);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
        ObjectReader objectReader1 = objectReader0.withFeatures(jsonParser_FeatureArray0);
        char[] charArray0 = new char[5];
        charArray0[0] = '-';
        charArray0[1] = 'm';
        charArray0[2] = 'j';
        charArray0[3] = '0';
        charArray0[4] = 'E';
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 64);
        TypeReference<DoubleNode> typeReference0 = (TypeReference<DoubleNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectReader0.readValue(jsonParser0, (TypeReference<?>) typeReference0);
        LongNode longNode0 = LongNode.valueOf(dataFormatReaders2.DEFAULT_MAX_INPUT_LOOKAHEAD);
        boolean boolean0 = false;
        boolean boolean1 = false;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, boolean0, boolean1);
        objectReader1.withAttribute(longNode0, filteringParserDelegate0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        ObjectReader objectReader1 = objectMapper0.readerWithView(class0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".VRMy]xKr>");
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 26;
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectReader1, mockFileOutputStream0, byteArray0, (-1), true);
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(3, 0);
        Integer integer0 = new Integer((-1105));
        objectReader0.writeValue(jsonGenerator0, integer0);
        byte[] byteArray1 = null;
        int int0 = 0;
        boolean boolean0 = true;
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(boolean0);
        ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
        ObjectNode objectNode0 = null;
        objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
        tokenFilter1.filterStartArray();
        ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
        objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
        IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, true);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2243);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2243, pipedReader0, objectReader0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getSchema();
        objectReader0.withValueToUpdate(bufferRecycler0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Called operation not supported for TokenBuffer");
        DoubleNode doubleNode0 = DoubleNode.valueOf(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getSchema();
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
        MockFile mockFile0 = new MockFile("Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array");
        objectReader1.withValueToUpdate(doubleNode0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        objectReader0.without(deserializationFeature0, (DeserializationFeature[]) null);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectReader objectReader0 = objectMapper0.reader();
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 54, (-769));
        objectReader0.readTree((InputStream) byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DoubleNode.valueOf(2);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
        CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
        objectReader0.isEnabled(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        FormatFeature[] formatFeatureArray0 = new FormatFeature[6];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        formatFeatureArray0[5] = formatFeature0;
        objectReader0.withFeatures(formatFeatureArray0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
        ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0);
        objectReader1.with((Locale) null);
        objectReader1.with((Locale) null);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DoubleNode doubleNode0 = DoubleNode.valueOf(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getSchema();
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[6];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        formatFeatureArray0[5] = formatFeature0;
        objectReader1.withFeatures(formatFeatureArray0);
        TimeZone timeZone0 = TimeZone.getTimeZone("i8)5_Ub%N^0o;,Xki`");
        objectReader1.with(timeZone0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        objectMapper0.reader();
        objectMapper0.reader();
        MockFile mockFile0 = new MockFile(" 8 2M|3[M4@{f");
        mockFile0.createNewFile();
        ObjectReader objectReader0 = objectMapper0.reader();
        FormatFeature[] formatFeatureArray0 = new FormatFeature[6];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        formatFeatureArray0[5] = formatFeature0;
        objectReader0.withoutFeatures(formatFeatureArray0);
        objectReader0.readValues((File) mockFile0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[10];
        deserializationFeatureArray0[0] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNode jsonNode0 = objectReader0.createArrayNode();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        jsonFactory0.disable(jsonParser_Feature0);
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, true);
        JsonParser jsonParser2 = objectMapper0.treeAsTokens(jsonNode0);
        objectReader0._bindAsTree(jsonParser2);
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        ObjectReader objectReader1 = objectReader0.forType(class0);
        objectReader0.withValueToUpdate(jsonParser0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DoubleNode.valueOf((-1105.0));
        IOContext iOContext0 = new IOContext(bufferRecycler0, jsonParser2, true);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
        CharsToNameCanonicalizer.createRoot();
        jsonParser1.getSchema();
        ObjectReader objectReader2 = objectReader1.with((FormatSchema) null);
        objectReader2.readValue(jsonParser2);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("No 'injectableValues' configured, can not inject value with id [");
        FileSystemHandling.shouldAllThrowIOExceptions();
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.readValue((File) mockFile0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationFeature0, true);
        PipedReader pipedReader0 = new PipedReader();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectReader0, charsToNameCanonicalizer0);
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) (-92);
        byteArray0[1] = (byte) 90;
        byteArray0[2] = (byte) 23;
        byteArray0[3] = (byte) 59;
        byteArray0[4] = (byte) 1;
        byteArray0[5] = (byte) 1;
        byteArray0[6] = (byte) 74;
        byteArray0[7] = (byte) (-64);
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        readerBasedJsonParser0.getSchema();
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
        MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        objectReader1.withoutAttribute(mapperFeature0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        objectReader1.isEnabled(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        ObjectReader objectReader0 = objectMapper1.reader();
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ObjectMapper.findModules(classLoader0);
        MockURL.getFtpExample();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
        ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        objectReader0.isEnabled(mapperFeature0);
        objectReader1.withoutFeatures((JsonParser.Feature[]) null);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
        deserializationFeatureArray0[1] = deserializationFeature0;
        JsonParser jsonParser0 = null;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        objectReader0.readValues((byte[]) null);
        JsonParser jsonParser1 = null;
        objectReader0._bind(jsonParser0, jsonParser1);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DoubleNode doubleNode0 = DoubleNode.valueOf(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("l#");
        readerBasedJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
        readerBasedJsonParser0.getSchema();
        objectReader0.with((FormatSchema) null);
        objectReader0.getInjectableValues();
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        deserializationFeatureArray0[1] = deserializationFeature0;
        deserializationFeatureArray0[2] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
        objectReader0.withoutRootName();
        objectReader0.withoutFeatures(deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
        ObjectReader[] objectReaderArray0 = new ObjectReader[4];
        objectReaderArray0[0] = objectReader0;
        objectReaderArray0[1] = objectReader0;
        objectReaderArray0[2] = objectReader0;
        objectReaderArray0[3] = objectReader0;
        DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
        DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMaxInputLookahead(64);
        objectReader0.withFormatDetection(dataFormatReaders2);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<NullNode> class0 = NullNode.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        MissingNode missingNode0 = MissingNode.getInstance();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(missingNode0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        jsonNodeFactory0.nullNode();
        objectReader0._bind(jsonParser0, (Object) null);
        Stack<ObjectReader> stack0 = new Stack<ObjectReader>();
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DoubleNode doubleNode0 = DoubleNode.valueOf(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getSchema();
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
        objectReader1._verifySchemaType((FormatSchema) null);
        objectReader0.with((JsonFactory) null);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        tokenFilter0.includeElement(42);
        TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
        tokenFilter1.filterStartArray();
        ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
        objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
        IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, true);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2243);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2243, pipedReader0, objectReader0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getSchema();
        objectReader0.withValueToUpdate(bufferRecycler0);
        objectReader0.withAttributes((Map<?, ?>) null);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DoubleNode.valueOf(2);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
        CharsToNameCanonicalizer.createRoot();
        objectReader0.withType((JavaType) null);
        objectReader0.getConfig();
        IntNode intNode0 = IntNode.valueOf(156);
        JsonParser jsonParser0 = objectReader0.treeAsTokens(intNode0);
        objectReader0._bindAndClose(jsonParser0);
        URL uRL0 = MockURL.getFileExample();
        objectReader0.readValues(uRL0);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        Stack<ObjectReader> stack0 = new Stack<ObjectReader>();
        DataFormatReaders dataFormatReaders0 = new DataFormatReaders(stack0);
        byte[] byteArray0 = null;
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        ObjectReader objectReader1 = objectReader0.withoutRootName();
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
        deserializationFeatureArray0[1] = deserializationFeature1;
        DeserializationFeature deserializationFeature2 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
        deserializationFeatureArray0[2] = deserializationFeature2;
        JsonFactory jsonFactory0 = new JsonFactory();
        char[] charArray0 = new char[2];
        charArray0[0] = 'i';
        charArray0[1] = 'L';
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 343, 64);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
        filteringParserDelegate0.getSchema();
        ObjectReader objectReader2 = objectReader1.with((FormatSchema) null);
        objectReader1._verifySchemaType((FormatSchema) null);
        ObjectReader objectReader3 = objectReader2.with(jsonFactory0);
        objectReader3.at("vl ;`A6wN-oG");
        int int0 = (-2725);
        objectReader2.readValues(byteArray0, int0, dataFormatReaders0.DEFAULT_MAX_INPUT_LOOKAHEAD);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("com.fasterxml.jackson.databind.SerializerProvider", (Object) objectMapper0);
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        NamedType[] namedTypeArray0 = new NamedType[2];
        Class<CollectionType> class0 = CollectionType.class;
        NamedType namedType0 = new NamedType(class0);
        namedTypeArray0[0] = namedType0;
        NamedType namedType1 = new NamedType(class0, "Illegal character (");
        namedTypeArray0[1] = namedType1;
        stdSubtypeResolver0.registerSubtypes(namedTypeArray0);
        jsonLocationInstantiator0.getDelegateType(deserializationConfig0);
        JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, jsonLocationInstantiator0, true);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        charArray0[0] = 'f';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-1790), 1126, true);
        readerBasedJsonParser0.getSchema();
        ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
        objectReader0._verifySchemaType((FormatSchema) null);
        ObjectReader objectReader2 = objectReader1.with(jsonFactory0);
        objectReader2.readValues("]YxQ4,6^k=j5(");
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
        tokenFilter1.filterStartArray();
        ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
        objectReader0.getAttributes();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
        IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, true);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3);
        iOContext0.allocReadIOBuffer();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getSchema();
        objectReader0.withValueToUpdate(bufferRecycler0);
        URL uRL0 = MockURL.getFileExample();
        objectReader0.readValue(uRL0);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
        deserializationFeatureArray0[1] = deserializationFeature1;
        deserializationFeatureArray0[2] = deserializationFeature0;
        ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
        MockFile mockFile0 = new MockFile((String) null, "JSON");
        mockFile0.setWritable(true, true);
        File file0 = MockFile.createTempFile("JSON", "JSON", (File) mockFile0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
        jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0);
        jsonFactory1.createParser((char[]) null, 0, 0);
        ObjectReader objectReader2 = objectReader0.with((Locale) null);
        objectReader0.createArrayNode();
        objectReader2.at((JsonPointer) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        ObjectReader objectReader3 = new ObjectReader(objectReader1, tokenFilter0);
        URL uRL0 = MockURL.getFileExample();
        InputStream inputStream0 = objectReader3._inputStream(uRL0);
        objectReader0.readValues(inputStream0);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectReader objectReader0 = objectMapper0.reader();
        objectReader0.without((FormatFeature) null);
        String string0 = null;
        objectReader0.readValues(string0);
    }
}
