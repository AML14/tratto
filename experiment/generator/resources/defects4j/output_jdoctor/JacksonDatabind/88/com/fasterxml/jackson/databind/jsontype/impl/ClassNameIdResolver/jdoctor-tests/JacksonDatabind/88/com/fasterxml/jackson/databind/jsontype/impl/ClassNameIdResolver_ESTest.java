/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 07:15:42 GMT 2024
 */
package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.ArrayDeque;
import java.util.EnumMap;
import java.util.EnumSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ClassNameIdResolver_ESTest extends ClassNameIdResolver_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        Class<String> class0 = String.class;
        classNameIdResolver0.registerSubtype(class0, "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase");
        classNameIdResolver0.getMechanism();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = classNameIdResolver0.getMechanism();
        jsonTypeInfo_Id0.getDefaultPropertyName();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        JavaType javaType0 = classNameIdResolver0.typeFromId(serializerProvider0, "java.utilcom.fasterxml.jackson.databind.MapperFeature");
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
        String string0 = classNameIdResolver0.getDescForKnownTypeIds();
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumSet> class0 = EnumSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        String string0 = classNameIdResolver0.idFromValue(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        classNameIdResolver0.typeFromId(serializerProvider0, "g/}<F:L\"Mc");
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        String string0 = classNameIdResolver0._idFrom(class0, class0, typeFactory0);
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumSet> class0 = EnumSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        String string0 = classNameIdResolver0.idFromBaseType();
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayDeque> class0 = ArrayDeque.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(arrayType0, typeFactory0);
        Class<ObjectMapper.DefaultTyping> class1 = ObjectMapper.DefaultTyping.class;
        EnumMap<ObjectMapper.DefaultTyping, ObjectMapper.DefaultTyping> enumMap0 = new EnumMap<ObjectMapper.DefaultTyping, ObjectMapper.DefaultTyping>(class1);
        String string0 = minimalClassNameIdResolver0._idFrom(enumMap0, class0, typeFactory0);
    }
}
